
ER_BANDHAYUDHA-2023_core.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a558  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008bc  0801a7f8  0801a7f8  0002a7f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801b0b4  0801b0b4  0002b0b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801b0bc  0801b0bc  0002b0bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801b0c0  0801b0c0  0002b0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002e4  20000000  0801b0c4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002990  200002e8  0801b3a8  000302e8  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20002c78  0801b3a8  00032c78  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000302e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00031f2a  00000000  00000000  00030312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004f58  00000000  00000000  0006223c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002520  00000000  00000000  00067198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002350  00000000  00000000  000696b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000409ba  00000000  00000000  0006ba08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000305cc  00000000  00000000  000ac3c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001936ac  00000000  00000000  000dc98e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0027003a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b1cc  00000000  00000000  0027008c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	200002e8 	.word	0x200002e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801a7e0 	.word	0x0801a7e0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	200002ec 	.word	0x200002ec
 80002dc:	0801a7e0 	.word	0x0801a7e0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <robot_init>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void robot_init ()
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
	  ring_pic.arm_degree = 180.0;
 8000698:	4940      	ldr	r1, [pc, #256]	; (800079c <robot_init+0x108>)
 800069a:	f04f 0200 	mov.w	r2, #0
 800069e:	4b40      	ldr	r3, [pc, #256]	; (80007a0 <robot_init+0x10c>)
 80006a0:	e9c1 2304 	strd	r2, r3, [r1, #16]
	  ring_pic.arm_target_deg = 180.0;
 80006a4:	493d      	ldr	r1, [pc, #244]	; (800079c <robot_init+0x108>)
 80006a6:	f04f 0200 	mov.w	r2, #0
 80006aa:	4b3d      	ldr	r3, [pc, #244]	; (80007a0 <robot_init+0x10c>)
 80006ac:	e9c1 2306 	strd	r2, r3, [r1, #24]
	  ring_pic.rot_inc = 3;
 80006b0:	4b3a      	ldr	r3, [pc, #232]	; (800079c <robot_init+0x108>)
 80006b2:	2203      	movs	r2, #3
 80006b4:	60da      	str	r2, [r3, #12]
	  ring_pic.R_empty = 1;
 80006b6:	4b39      	ldr	r3, [pc, #228]	; (800079c <robot_init+0x108>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	  ring_pic.L_empty = 1;
 80006be:	4b37      	ldr	r3, [pc, #220]	; (800079c <robot_init+0x108>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	  ring_pic.delay = 500;
 80006c6:	4b35      	ldr	r3, [pc, #212]	; (800079c <robot_init+0x108>)
 80006c8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006cc:	601a      	str	r2, [r3, #0]

	  lift_R.z = -25;
 80006ce:	4935      	ldr	r1, [pc, #212]	; (80007a4 <robot_init+0x110>)
 80006d0:	f04f 0200 	mov.w	r2, #0
 80006d4:	4b34      	ldr	r3, [pc, #208]	; (80007a8 <robot_init+0x114>)
 80006d6:	e9c1 2300 	strd	r2, r3, [r1]
	  lift_L.z = -25;
 80006da:	4934      	ldr	r1, [pc, #208]	; (80007ac <robot_init+0x118>)
 80006dc:	f04f 0200 	mov.w	r2, #0
 80006e0:	4b31      	ldr	r3, [pc, #196]	; (80007a8 <robot_init+0x114>)
 80006e2:	e9c1 2300 	strd	r2, r3, [r1]
	  lift_R.last_z = -25;
 80006e6:	492f      	ldr	r1, [pc, #188]	; (80007a4 <robot_init+0x110>)
 80006e8:	f04f 0200 	mov.w	r2, #0
 80006ec:	4b2e      	ldr	r3, [pc, #184]	; (80007a8 <robot_init+0x114>)
 80006ee:	e9c1 2302 	strd	r2, r3, [r1, #8]
	  lift_L.last_z = -25;
 80006f2:	492e      	ldr	r1, [pc, #184]	; (80007ac <robot_init+0x118>)
 80006f4:	f04f 0200 	mov.w	r2, #0
 80006f8:	4b2b      	ldr	r3, [pc, #172]	; (80007a8 <robot_init+0x114>)
 80006fa:	e9c1 2302 	strd	r2, r3, [r1, #8]

	  grip_R.ring_empty = 1;
 80006fe:	4b2c      	ldr	r3, [pc, #176]	; (80007b0 <robot_init+0x11c>)
 8000700:	2201      	movs	r2, #1
 8000702:	731a      	strb	r2, [r3, #12]
	  grip_L.ring_empty = 1;
 8000704:	4b2b      	ldr	r3, [pc, #172]	; (80007b4 <robot_init+0x120>)
 8000706:	2201      	movs	r2, #1
 8000708:	731a      	strb	r2, [r3, #12]
	  grip_R.last_ring_empty = 1;
 800070a:	4b29      	ldr	r3, [pc, #164]	; (80007b0 <robot_init+0x11c>)
 800070c:	2201      	movs	r2, #1
 800070e:	735a      	strb	r2, [r3, #13]
	  grip_L.last_ring_empty = 1;
 8000710:	4b28      	ldr	r3, [pc, #160]	; (80007b4 <robot_init+0x120>)
 8000712:	2201      	movs	r2, #1
 8000714:	735a      	strb	r2, [r3, #13]
	  grip_R.state = _RELEASE;
 8000716:	4b26      	ldr	r3, [pc, #152]	; (80007b0 <robot_init+0x11c>)
 8000718:	2201      	movs	r2, #1
 800071a:	729a      	strb	r2, [r3, #10]
	  grip_L.state = _RELEASE;
 800071c:	4b25      	ldr	r3, [pc, #148]	; (80007b4 <robot_init+0x120>)
 800071e:	2201      	movs	r2, #1
 8000720:	729a      	strb	r2, [r3, #10]
	  grip_R.last_state = _RELEASE;
 8000722:	4b23      	ldr	r3, [pc, #140]	; (80007b0 <robot_init+0x11c>)
 8000724:	2201      	movs	r2, #1
 8000726:	72da      	strb	r2, [r3, #11]
	  grip_L.last_state = _RELEASE;
 8000728:	4b22      	ldr	r3, [pc, #136]	; (80007b4 <robot_init+0x120>)
 800072a:	2201      	movs	r2, #1
 800072c:	72da      	strb	r2, [r3, #11]
	  grip_R.delay = 350;
 800072e:	4b20      	ldr	r3, [pc, #128]	; (80007b0 <robot_init+0x11c>)
 8000730:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8000734:	601a      	str	r2, [r3, #0]
	  grip_L.delay = 350;
 8000736:	4b1f      	ldr	r3, [pc, #124]	; (80007b4 <robot_init+0x120>)
 8000738:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800073c:	601a      	str	r2, [r3, #0]

	  pusher_R.ring_empty = 1;
 800073e:	4b1e      	ldr	r3, [pc, #120]	; (80007b8 <robot_init+0x124>)
 8000740:	2201      	movs	r2, #1
 8000742:	729a      	strb	r2, [r3, #10]
	  pusher_L.ring_empty = 1;
 8000744:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <robot_init+0x128>)
 8000746:	2201      	movs	r2, #1
 8000748:	729a      	strb	r2, [r3, #10]
	  pusher_R.delay = 500;
 800074a:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <robot_init+0x124>)
 800074c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000750:	605a      	str	r2, [r3, #4]
	  pusher_L.delay = 500;
 8000752:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <robot_init+0x128>)
 8000754:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000758:	605a      	str	r2, [r3, #4]

	  trot_R.theta = 0;
 800075a:	4919      	ldr	r1, [pc, #100]	; (80007c0 <robot_init+0x12c>)
 800075c:	f04f 0200 	mov.w	r2, #0
 8000760:	f04f 0300 	mov.w	r3, #0
 8000764:	e9c1 2300 	strd	r2, r3, [r1]
	  trot_R.last_theta = 0;
 8000768:	4915      	ldr	r1, [pc, #84]	; (80007c0 <robot_init+0x12c>)
 800076a:	f04f 0200 	mov.w	r2, #0
 800076e:	f04f 0300 	mov.w	r3, #0
 8000772:	e9c1 2302 	strd	r2, r3, [r1, #8]
	  trot_L.theta = 0;
 8000776:	4913      	ldr	r1, [pc, #76]	; (80007c4 <robot_init+0x130>)
 8000778:	f04f 0200 	mov.w	r2, #0
 800077c:	f04f 0300 	mov.w	r3, #0
 8000780:	e9c1 2300 	strd	r2, r3, [r1]
	  trot_L.last_theta = 0;
 8000784:	490f      	ldr	r1, [pc, #60]	; (80007c4 <robot_init+0x130>)
 8000786:	f04f 0200 	mov.w	r2, #0
 800078a:	f04f 0300 	mov.w	r3, #0
 800078e:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	20000af0 	.word	0x20000af0
 80007a0:	40668000 	.word	0x40668000
 80007a4:	20000b28 	.word	0x20000b28
 80007a8:	c0390000 	.word	0xc0390000
 80007ac:	20000b48 	.word	0x20000b48
 80007b0:	20000b68 	.word	0x20000b68
 80007b4:	20000b78 	.word	0x20000b78
 80007b8:	20000b88 	.word	0x20000b88
 80007bc:	20000b94 	.word	0x20000b94
 80007c0:	20000ba0 	.word	0x20000ba0
 80007c4:	20000bc0 	.word	0x20000bc0

080007c8 <delay_us>:
	HAL_Delay(t);
	BUZZER_GPIO_Port->BSRR = BUZZER_Pin<<16;
}

void delay_us (uint32_t us)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	TIM12->CNT = 0;
 80007d0:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <delay_us+0x28>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	625a      	str	r2, [r3, #36]	; 0x24
	while (TIM12->CNT < us) ;
 80007d6:	bf00      	nop
 80007d8:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <delay_us+0x28>)
 80007da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	429a      	cmp	r2, r3
 80007e0:	d8fa      	bhi.n	80007d8 <delay_us+0x10>
}
 80007e2:	bf00      	nop
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	40001800 	.word	0x40001800

080007f4 <lcd_push_enable>:

void lcd_push_enable()
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	LCD_EN_GPIO_Port->BSRR = LCD_EN_Pin;
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <lcd_push_enable+0x24>)
 80007fa:	2280      	movs	r2, #128	; 0x80
 80007fc:	619a      	str	r2, [r3, #24]
	delay_us(10);
 80007fe:	200a      	movs	r0, #10
 8000800:	f7ff ffe2 	bl	80007c8 <delay_us>
	LCD_EN_GPIO_Port->BSRR = LCD_EN_Pin<<16;
 8000804:	4b04      	ldr	r3, [pc, #16]	; (8000818 <lcd_push_enable+0x24>)
 8000806:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800080a:	619a      	str	r2, [r3, #24]
	delay_us(10);
 800080c:	200a      	movs	r0, #10
 800080e:	f7ff ffdb 	bl	80007c8 <delay_us>
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	58020400 	.word	0x58020400

0800081c <lcd_command>:

void lcd_command(uint8_t cmd)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->BSRR = LCD_RS_Pin<<16;
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <lcd_command+0x60>)
 8000828:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800082c:	619a      	str	r2, [r3, #24]
	LCD_RW_GPIO_Port->BSRR = LCD_RW_Pin<<16;
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <lcd_command+0x60>)
 8000830:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000834:	619a      	str	r2, [r3, #24]
	uint32_t last_output = GPIOE->ODR & ~0x78;
 8000836:	4b12      	ldr	r3, [pc, #72]	; (8000880 <lcd_command+0x64>)
 8000838:	695b      	ldr	r3, [r3, #20]
 800083a:	f023 0378 	bic.w	r3, r3, #120	; 0x78
 800083e:	60fb      	str	r3, [r7, #12]
	GPIOE->ODR = last_output | ((cmd >> 1) & 0x78);
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	085b      	lsrs	r3, r3, #1
 8000844:	b2db      	uxtb	r3, r3
 8000846:	f003 0278 	and.w	r2, r3, #120	; 0x78
 800084a:	490d      	ldr	r1, [pc, #52]	; (8000880 <lcd_command+0x64>)
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	4313      	orrs	r3, r2
 8000850:	614b      	str	r3, [r1, #20]
	lcd_push_enable();
 8000852:	f7ff ffcf 	bl	80007f4 <lcd_push_enable>
	last_output = GPIOE->ODR & ~0x78;
 8000856:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <lcd_command+0x64>)
 8000858:	695b      	ldr	r3, [r3, #20]
 800085a:	f023 0378 	bic.w	r3, r3, #120	; 0x78
 800085e:	60fb      	str	r3, [r7, #12]
	GPIOE->ODR = last_output | ((cmd << 3) & 0x78);
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	00db      	lsls	r3, r3, #3
 8000864:	f003 0278 	and.w	r2, r3, #120	; 0x78
 8000868:	4905      	ldr	r1, [pc, #20]	; (8000880 <lcd_command+0x64>)
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	4313      	orrs	r3, r2
 800086e:	614b      	str	r3, [r1, #20]
	lcd_push_enable();
 8000870:	f7ff ffc0 	bl	80007f4 <lcd_push_enable>
}
 8000874:	bf00      	nop
 8000876:	3710      	adds	r7, #16
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	58020c00 	.word	0x58020c00
 8000880:	58021000 	.word	0x58021000

08000884 <lcd_data>:

void lcd_data(uint8_t data)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->BSRR = LCD_RS_Pin;
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <lcd_data+0x60>)
 8000890:	2210      	movs	r2, #16
 8000892:	619a      	str	r2, [r3, #24]
	LCD_RW_GPIO_Port->BSRR = LCD_RW_Pin<<16;
 8000894:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <lcd_data+0x60>)
 8000896:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800089a:	619a      	str	r2, [r3, #24]
	uint32_t last_output = GPIOE->ODR & ~0x78;
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <lcd_data+0x64>)
 800089e:	695b      	ldr	r3, [r3, #20]
 80008a0:	f023 0378 	bic.w	r3, r3, #120	; 0x78
 80008a4:	60fb      	str	r3, [r7, #12]
	GPIOE->ODR = last_output | ((data >> 1) & 0x78);
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	f003 0278 	and.w	r2, r3, #120	; 0x78
 80008b0:	490d      	ldr	r1, [pc, #52]	; (80008e8 <lcd_data+0x64>)
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	4313      	orrs	r3, r2
 80008b6:	614b      	str	r3, [r1, #20]
	lcd_push_enable();
 80008b8:	f7ff ff9c 	bl	80007f4 <lcd_push_enable>
	last_output = GPIOE->ODR & ~0x78;
 80008bc:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <lcd_data+0x64>)
 80008be:	695b      	ldr	r3, [r3, #20]
 80008c0:	f023 0378 	bic.w	r3, r3, #120	; 0x78
 80008c4:	60fb      	str	r3, [r7, #12]
	GPIOE->ODR = last_output | ((data << 3) & 0x78);
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	00db      	lsls	r3, r3, #3
 80008ca:	f003 0278 	and.w	r2, r3, #120	; 0x78
 80008ce:	4906      	ldr	r1, [pc, #24]	; (80008e8 <lcd_data+0x64>)
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	4313      	orrs	r3, r2
 80008d4:	614b      	str	r3, [r1, #20]
	lcd_push_enable();
 80008d6:	f7ff ff8d 	bl	80007f4 <lcd_push_enable>
}
 80008da:	bf00      	nop
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	58020c00 	.word	0x58020c00
 80008e8:	58021000 	.word	0x58021000

080008ec <lcd_bitmap>:
	lcd_push_enable();

}

void lcd_bitmap(const uint8_t* bitmap)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	uint8_t x, y;
	for(y = 0; y < 64; y++)
 80008f4:	2300      	movs	r3, #0
 80008f6:	73bb      	strb	r3, [r7, #14]
 80008f8:	e06a      	b.n	80009d0 <lcd_bitmap+0xe4>
	{
		if(y < 32)
 80008fa:	7bbb      	ldrb	r3, [r7, #14]
 80008fc:	2b1f      	cmp	r3, #31
 80008fe:	d830      	bhi.n	8000962 <lcd_bitmap+0x76>
		{
			for(x = 0; x < 8; x++)
 8000900:	2300      	movs	r3, #0
 8000902:	73fb      	strb	r3, [r7, #15]
 8000904:	e029      	b.n	800095a <lcd_bitmap+0x6e>
			{
				lcd_command(0x80 | y);
 8000906:	7bbb      	ldrb	r3, [r7, #14]
 8000908:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800090c:	b2db      	uxtb	r3, r3
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff ff84 	bl	800081c <lcd_command>
				lcd_command(0x80 | x);
 8000914:	7bfb      	ldrb	r3, [r7, #15]
 8000916:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800091a:	b2db      	uxtb	r3, r3
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff ff7d 	bl	800081c <lcd_command>
				lcd_data(bitmap[2*x + 16*y]);
 8000922:	7bfa      	ldrb	r2, [r7, #15]
 8000924:	7bbb      	ldrb	r3, [r7, #14]
 8000926:	00db      	lsls	r3, r3, #3
 8000928:	4413      	add	r3, r2
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	461a      	mov	r2, r3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4413      	add	r3, r2
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff ffa5 	bl	8000884 <lcd_data>
				lcd_data(bitmap[2*x+1 + 16*y]);
 800093a:	7bfb      	ldrb	r3, [r7, #15]
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	1c5a      	adds	r2, r3, #1
 8000940:	7bbb      	ldrb	r3, [r7, #14]
 8000942:	011b      	lsls	r3, r3, #4
 8000944:	4413      	add	r3, r2
 8000946:	461a      	mov	r2, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4413      	add	r3, r2
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff ff98 	bl	8000884 <lcd_data>
			for(x = 0; x < 8; x++)
 8000954:	7bfb      	ldrb	r3, [r7, #15]
 8000956:	3301      	adds	r3, #1
 8000958:	73fb      	strb	r3, [r7, #15]
 800095a:	7bfb      	ldrb	r3, [r7, #15]
 800095c:	2b07      	cmp	r3, #7
 800095e:	d9d2      	bls.n	8000906 <lcd_bitmap+0x1a>
 8000960:	e033      	b.n	80009ca <lcd_bitmap+0xde>
			}
		}
		else
		{
			for(x = 0; x < 8; x++)
 8000962:	2300      	movs	r3, #0
 8000964:	73fb      	strb	r3, [r7, #15]
 8000966:	e02d      	b.n	80009c4 <lcd_bitmap+0xd8>
			{
				lcd_command(0x80 | (y-32));
 8000968:	7bbb      	ldrb	r3, [r7, #14]
 800096a:	3b20      	subs	r3, #32
 800096c:	b2db      	uxtb	r3, r3
 800096e:	b25b      	sxtb	r3, r3
 8000970:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000974:	b25b      	sxtb	r3, r3
 8000976:	b2db      	uxtb	r3, r3
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff ff4f 	bl	800081c <lcd_command>
				lcd_command(0x88 | x);
 800097e:	7bfb      	ldrb	r3, [r7, #15]
 8000980:	f063 0377 	orn	r3, r3, #119	; 0x77
 8000984:	b2db      	uxtb	r3, r3
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff ff48 	bl	800081c <lcd_command>
				lcd_data(bitmap[2*x + 16*y]);
 800098c:	7bfa      	ldrb	r2, [r7, #15]
 800098e:	7bbb      	ldrb	r3, [r7, #14]
 8000990:	00db      	lsls	r3, r3, #3
 8000992:	4413      	add	r3, r2
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	461a      	mov	r2, r3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4413      	add	r3, r2
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff ff70 	bl	8000884 <lcd_data>
				lcd_data(bitmap[2*x+1 + 16*y]);
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	1c5a      	adds	r2, r3, #1
 80009aa:	7bbb      	ldrb	r3, [r7, #14]
 80009ac:	011b      	lsls	r3, r3, #4
 80009ae:	4413      	add	r3, r2
 80009b0:	461a      	mov	r2, r3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4413      	add	r3, r2
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff ff63 	bl	8000884 <lcd_data>
			for(x = 0; x < 8; x++)
 80009be:	7bfb      	ldrb	r3, [r7, #15]
 80009c0:	3301      	adds	r3, #1
 80009c2:	73fb      	strb	r3, [r7, #15]
 80009c4:	7bfb      	ldrb	r3, [r7, #15]
 80009c6:	2b07      	cmp	r3, #7
 80009c8:	d9ce      	bls.n	8000968 <lcd_bitmap+0x7c>
	for(y = 0; y < 64; y++)
 80009ca:	7bbb      	ldrb	r3, [r7, #14]
 80009cc:	3301      	adds	r3, #1
 80009ce:	73bb      	strb	r3, [r7, #14]
 80009d0:	7bbb      	ldrb	r3, [r7, #14]
 80009d2:	2b3f      	cmp	r3, #63	; 0x3f
 80009d4:	d991      	bls.n	80008fa <lcd_bitmap+0xe>
			}
		}

	}
}
 80009d6:	bf00      	nop
 80009d8:	bf00      	nop
 80009da:	3710      	adds	r7, #16
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <clear_graphic>:

void clear_graphic()
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
	uint8_t x, y;
	for(y = 0; y < 64; y++)
 80009e6:	2300      	movs	r3, #0
 80009e8:	71bb      	strb	r3, [r7, #6]
 80009ea:	e044      	b.n	8000a76 <clear_graphic+0x96>
	{
		if(y < 32)
 80009ec:	79bb      	ldrb	r3, [r7, #6]
 80009ee:	2b1f      	cmp	r3, #31
 80009f0:	d81d      	bhi.n	8000a2e <clear_graphic+0x4e>
		{
			for(x = 0; x < 8; x++)
 80009f2:	2300      	movs	r3, #0
 80009f4:	71fb      	strb	r3, [r7, #7]
 80009f6:	e016      	b.n	8000a26 <clear_graphic+0x46>
			{
				lcd_command(0x80 | y);
 80009f8:	79bb      	ldrb	r3, [r7, #6]
 80009fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ff0b 	bl	800081c <lcd_command>
				lcd_command(0x80 | x);
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff ff04 	bl	800081c <lcd_command>
				lcd_data(0);
 8000a14:	2000      	movs	r0, #0
 8000a16:	f7ff ff35 	bl	8000884 <lcd_data>
				lcd_data(0);
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f7ff ff32 	bl	8000884 <lcd_data>
			for(x = 0; x < 8; x++)
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	3301      	adds	r3, #1
 8000a24:	71fb      	strb	r3, [r7, #7]
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	2b07      	cmp	r3, #7
 8000a2a:	d9e5      	bls.n	80009f8 <clear_graphic+0x18>
 8000a2c:	e020      	b.n	8000a70 <clear_graphic+0x90>
			}
		}
		else
		{
			for(x = 0; x < 8; x++)
 8000a2e:	2300      	movs	r3, #0
 8000a30:	71fb      	strb	r3, [r7, #7]
 8000a32:	e01a      	b.n	8000a6a <clear_graphic+0x8a>
			{
				lcd_command(0x80 | (y-32));
 8000a34:	79bb      	ldrb	r3, [r7, #6]
 8000a36:	3b20      	subs	r3, #32
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	b25b      	sxtb	r3, r3
 8000a3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a40:	b25b      	sxtb	r3, r3
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff fee9 	bl	800081c <lcd_command>
				lcd_command(0x88 | x);
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	f063 0377 	orn	r3, r3, #119	; 0x77
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff fee2 	bl	800081c <lcd_command>
				lcd_data(0);
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f7ff ff13 	bl	8000884 <lcd_data>
				lcd_data(0);
 8000a5e:	2000      	movs	r0, #0
 8000a60:	f7ff ff10 	bl	8000884 <lcd_data>
			for(x = 0; x < 8; x++)
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	3301      	adds	r3, #1
 8000a68:	71fb      	strb	r3, [r7, #7]
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	2b07      	cmp	r3, #7
 8000a6e:	d9e1      	bls.n	8000a34 <clear_graphic+0x54>
	for(y = 0; y < 64; y++)
 8000a70:	79bb      	ldrb	r3, [r7, #6]
 8000a72:	3301      	adds	r3, #1
 8000a74:	71bb      	strb	r3, [r7, #6]
 8000a76:	79bb      	ldrb	r3, [r7, #6]
 8000a78:	2b3f      	cmp	r3, #63	; 0x3f
 8000a7a:	d9b7      	bls.n	80009ec <clear_graphic+0xc>
			}
		}

	}
	memset(pixel_buffer, 0, sizeof(pixel_buffer));
 8000a7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a80:	2100      	movs	r1, #0
 8000a82:	4803      	ldr	r0, [pc, #12]	; (8000a90 <clear_graphic+0xb0>)
 8000a84:	f016 ff74 	bl	8017970 <memset>
}
 8000a88:	bf00      	nop
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000be0 	.word	0x20000be0

08000a94 <lcd_init>:

void lcd_init()
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 8000a98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a9c:	f003 fe86 	bl	80047ac <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2110      	movs	r1, #16
 8000aa4:	4826      	ldr	r0, [pc, #152]	; (8000b40 <lcd_init+0xac>)
 8000aa6:	f009 fab1 	bl	800a00c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000aaa:	2001      	movs	r0, #1
 8000aac:	f003 fe7e 	bl	80047ac <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, SET);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	2110      	movs	r1, #16
 8000ab4:	4822      	ldr	r0, [pc, #136]	; (8000b40 <lcd_init+0xac>)
 8000ab6:	f009 faa9 	bl	800a00c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000aba:	2001      	movs	r0, #1
 8000abc:	f003 fe76 	bl	80047ac <HAL_Delay>
	HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, SET);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2108      	movs	r1, #8
 8000ac4:	481e      	ldr	r0, [pc, #120]	; (8000b40 <lcd_init+0xac>)
 8000ac6:	f009 faa1 	bl	800a00c <HAL_GPIO_WritePin>
	LCD_RS_GPIO_Port->BSRR = LCD_RS_Pin<<16;
 8000aca:	4b1e      	ldr	r3, [pc, #120]	; (8000b44 <lcd_init+0xb0>)
 8000acc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000ad0:	619a      	str	r2, [r3, #24]
	LCD_RW_GPIO_Port->BSRR = LCD_RW_Pin<<16;
 8000ad2:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <lcd_init+0xb0>)
 8000ad4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ad8:	619a      	str	r2, [r3, #24]
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2140      	movs	r1, #64	; 0x40
 8000ade:	481a      	ldr	r0, [pc, #104]	; (8000b48 <lcd_init+0xb4>)
 8000ae0:	f009 fa94 	bl	800a00c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2120      	movs	r1, #32
 8000ae8:	4817      	ldr	r0, [pc, #92]	; (8000b48 <lcd_init+0xb4>)
 8000aea:	f009 fa8f 	bl	800a00c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, SET);
 8000aee:	2201      	movs	r2, #1
 8000af0:	2110      	movs	r1, #16
 8000af2:	4815      	ldr	r0, [pc, #84]	; (8000b48 <lcd_init+0xb4>)
 8000af4:	f009 fa8a 	bl	800a00c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, RESET);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2108      	movs	r1, #8
 8000afc:	4812      	ldr	r0, [pc, #72]	; (8000b48 <lcd_init+0xb4>)
 8000afe:	f009 fa85 	bl	800a00c <HAL_GPIO_WritePin>
	lcd_push_enable();
 8000b02:	f7ff fe77 	bl	80007f4 <lcd_push_enable>
	lcd_command(_4_BIT_MODE);
 8000b06:	2020      	movs	r0, #32
 8000b08:	f7ff fe88 	bl	800081c <lcd_command>
	delay_us(101);
 8000b0c:	2065      	movs	r0, #101	; 0x65
 8000b0e:	f7ff fe5b 	bl	80007c8 <delay_us>
	lcd_command(_GRAPHIC_MODE);
 8000b12:	2026      	movs	r0, #38	; 0x26
 8000b14:	f7ff fe82 	bl	800081c <lcd_command>
	delay_us(101);
 8000b18:	2065      	movs	r0, #101	; 0x65
 8000b1a:	f7ff fe55 	bl	80007c8 <delay_us>
	lcd_command(_DISPLAY_ON);
 8000b1e:	200c      	movs	r0, #12
 8000b20:	f7ff fe7c 	bl	800081c <lcd_command>
	delay_us(101);
 8000b24:	2065      	movs	r0, #101	; 0x65
 8000b26:	f7ff fe4f 	bl	80007c8 <delay_us>
	clear_graphic();
 8000b2a:	f7ff ff59 	bl	80009e0 <clear_graphic>
	HAL_Delay(100);
 8000b2e:	2064      	movs	r0, #100	; 0x64
 8000b30:	f003 fe3c 	bl	80047ac <HAL_Delay>
	LCD_BL_GPIO_Port->BSRR = LCD_BL_Pin;
 8000b34:	4b02      	ldr	r3, [pc, #8]	; (8000b40 <lcd_init+0xac>)
 8000b36:	2208      	movs	r2, #8
 8000b38:	619a      	str	r2, [r3, #24]
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	58020400 	.word	0x58020400
 8000b44:	58020c00 	.word	0x58020c00
 8000b48:	58021000 	.word	0x58021000

08000b4c <can_config>:
	HAL_UART_Transmit(&huart4, (uint8_t*)cmd, ln, 1000);
}


void can_config ()
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b088      	sub	sp, #32
 8000b50:	af00      	add	r7, sp, #0
	FDCAN_FilterTypeDef  sFilterConfig;
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000b52:	2300      	movs	r3, #0
 8000b54:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0xA00;
 8000b62:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000b66:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0xA00;
 8000b68:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000b6c:	617b      	str	r3, [r7, #20]

	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) Error_Handler();
 8000b6e:	463b      	mov	r3, r7
 8000b70:	4619      	mov	r1, r3
 8000b72:	483e      	ldr	r0, [pc, #248]	; (8000c6c <can_config+0x120>)
 8000b74:	f008 f8ac 	bl	8008cd0 <HAL_FDCAN_ConfigFilter>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <can_config+0x36>
 8000b7e:	f002 ff47 	bl	8003a10 <Error_Handler>
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) Error_Handler();
 8000b82:	483a      	ldr	r0, [pc, #232]	; (8000c6c <can_config+0x120>)
 8000b84:	f008 f91a 	bl	8008dbc <HAL_FDCAN_Start>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <can_config+0x46>
 8000b8e:	f002 ff3f 	bl	8003a10 <Error_Handler>

	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000b92:	2300      	movs	r3, #0
 8000b94:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x000;//0x202
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x000;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]

	if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK) Error_Handler();
 8000baa:	463b      	mov	r3, r7
 8000bac:	4619      	mov	r1, r3
 8000bae:	4830      	ldr	r0, [pc, #192]	; (8000c70 <can_config+0x124>)
 8000bb0:	f008 f88e 	bl	8008cd0 <HAL_FDCAN_ConfigFilter>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <can_config+0x72>
 8000bba:	f002 ff29 	bl	8003a10 <Error_Handler>
	if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK) Error_Handler();
 8000bbe:	482c      	ldr	r0, [pc, #176]	; (8000c70 <can_config+0x124>)
 8000bc0:	f008 f8fc 	bl	8008dbc <HAL_FDCAN_Start>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <can_config+0x82>
 8000bca:	f002 ff21 	bl	8003a10 <Error_Handler>

	  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	4826      	ldr	r0, [pc, #152]	; (8000c6c <can_config+0x120>)
 8000bd4:	f008 faf8 	bl	80091c8 <HAL_FDCAN_ActivateNotification>
//	  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_TX_FIFO_EMPTY, 0);
	  HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2110      	movs	r1, #16
 8000bdc:	4824      	ldr	r0, [pc, #144]	; (8000c70 <can_config+0x124>)
 8000bde:	f008 faf3 	bl	80091c8 <HAL_FDCAN_ActivateNotification>
	  HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_TX_FIFO_EMPTY, 0);
 8000be2:	2200      	movs	r2, #0
 8000be4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000be8:	4821      	ldr	r0, [pc, #132]	; (8000c70 <can_config+0x124>)
 8000bea:	f008 faed 	bl	80091c8 <HAL_FDCAN_ActivateNotification>

	  can1_tx_header.Identifier = 0x300;
 8000bee:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <can_config+0x128>)
 8000bf0:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000bf4:	601a      	str	r2, [r3, #0]
	  can1_tx_header.IdType = FDCAN_STANDARD_ID;
 8000bf6:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <can_config+0x128>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	605a      	str	r2, [r3, #4]
	  can1_tx_header.TxFrameType = FDCAN_DATA_FRAME;
 8000bfc:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <can_config+0x128>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
	  can1_tx_header.DataLength = FDCAN_DLC_BYTES_5;
 8000c02:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <can_config+0x128>)
 8000c04:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8000c08:	60da      	str	r2, [r3, #12]
	  can1_tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000c0a:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <can_config+0x128>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
	  can1_tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 8000c10:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <can_config+0x128>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	615a      	str	r2, [r3, #20]
	  can1_tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 8000c16:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <can_config+0x128>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	619a      	str	r2, [r3, #24]
	  can1_tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000c1c:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <can_config+0x128>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	61da      	str	r2, [r3, #28]
	  can1_tx_header.MessageMarker = 0;
 8000c22:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <can_config+0x128>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	621a      	str	r2, [r3, #32]

	  can2_tx_header.Identifier = 0x201;
 8000c28:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <can_config+0x12c>)
 8000c2a:	f240 2201 	movw	r2, #513	; 0x201
 8000c2e:	601a      	str	r2, [r3, #0]
	  can2_tx_header.IdType = FDCAN_STANDARD_ID;
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <can_config+0x12c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	605a      	str	r2, [r3, #4]
	  can2_tx_header.TxFrameType = FDCAN_DATA_FRAME;
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <can_config+0x12c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
	  can2_tx_header.DataLength = FDCAN_DLC_BYTES_5;
 8000c3c:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <can_config+0x12c>)
 8000c3e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8000c42:	60da      	str	r2, [r3, #12]
	  can2_tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <can_config+0x12c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	611a      	str	r2, [r3, #16]
	  can2_tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <can_config+0x12c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	615a      	str	r2, [r3, #20]
	  can2_tx_header.FDFormat = FDCAN_FD_CAN;
 8000c50:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <can_config+0x12c>)
 8000c52:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000c56:	619a      	str	r2, [r3, #24]
	  can2_tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000c58:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <can_config+0x12c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	61da      	str	r2, [r3, #28]
	  can2_tx_header.MessageMarker = 0;
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <can_config+0x12c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	621a      	str	r2, [r3, #32]
}
 8000c64:	bf00      	nop
 8000c66:	3720      	adds	r7, #32
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000368 	.word	0x20000368
 8000c70:	20000408 	.word	0x20000408
 8000c74:	20000a58 	.word	0x20000a58
 8000c78:	20000a7c 	.word	0x20000a7c

08000c7c <can_wait_transmit>:

void can_wait_transmit (FDCAN_HandleTypeDef *hfdcan)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	uint32_t time_out = HAL_GetTick();
 8000c84:	f003 fd86 	bl	8004794 <HAL_GetTick>
 8000c88:	60f8      	str	r0, [r7, #12]
	while (HAL_FDCAN_GetTxFifoFreeLevel (hfdcan) == 0)
 8000c8a:	e007      	b.n	8000c9c <can_wait_transmit+0x20>
	{
		if (HAL_GetTick() - time_out >= 1000) break;
 8000c8c:	f003 fd82 	bl	8004794 <HAL_GetTick>
 8000c90:	4602      	mov	r2, r0
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c9a:	d206      	bcs.n	8000caa <can_wait_transmit+0x2e>
	while (HAL_FDCAN_GetTxFifoFreeLevel (hfdcan) == 0)
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f008 fa81 	bl	80091a4 <HAL_FDCAN_GetTxFifoFreeLevel>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d0f1      	beq.n	8000c8c <can_wait_transmit+0x10>
	}
}
 8000ca8:	e000      	b.n	8000cac <can_wait_transmit+0x30>
		if (HAL_GetTick() - time_out >= 1000) break;
 8000caa:	bf00      	nop
}
 8000cac:	bf00      	nop
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <wheels_control_send_speed>:


void wheels_control_send_speed ()
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
	int16_t data_temp[3];
	if (HAL_FDCAN_GetTxFifoFreeLevel (&hfdcan2) > 0)
 8000cba:	4835      	ldr	r0, [pc, #212]	; (8000d90 <wheels_control_send_speed+0xdc>)
 8000cbc:	f008 fa72 	bl	80091a4 <HAL_FDCAN_GetTxFifoFreeLevel>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d05f      	beq.n	8000d86 <wheels_control_send_speed+0xd2>
	{
		can2_tx_data[0] = _SET_VX;
 8000cc6:	4b33      	ldr	r3, [pc, #204]	; (8000d94 <wheels_control_send_speed+0xe0>)
 8000cc8:	2210      	movs	r2, #16
 8000cca:	701a      	strb	r2, [r3, #0]
		data_temp[0] = manual.vx * 10;
 8000ccc:	4b32      	ldr	r3, [pc, #200]	; (8000d98 <wheels_control_send_speed+0xe4>)
 8000cce:	ed93 7b00 	vldr	d7, [r3]
 8000cd2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8000cd6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000cda:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000cde:	ee17 3a90 	vmov	r3, s15
 8000ce2:	b21b      	sxth	r3, r3
 8000ce4:	803b      	strh	r3, [r7, #0]
		data_temp[1] = manual.vy * 10;
 8000ce6:	4b2c      	ldr	r3, [pc, #176]	; (8000d98 <wheels_control_send_speed+0xe4>)
 8000ce8:	ed93 7b02 	vldr	d7, [r3, #8]
 8000cec:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8000cf0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000cf4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000cf8:	ee17 3a90 	vmov	r3, s15
 8000cfc:	b21b      	sxth	r3, r3
 8000cfe:	807b      	strh	r3, [r7, #2]
		data_temp[2] = manual.v_yaw * 10;
 8000d00:	4b25      	ldr	r3, [pc, #148]	; (8000d98 <wheels_control_send_speed+0xe4>)
 8000d02:	ed93 7b04 	vldr	d7, [r3, #16]
 8000d06:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8000d0a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000d0e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000d12:	ee17 3a90 	vmov	r3, s15
 8000d16:	b21b      	sxth	r3, r3
 8000d18:	80bb      	strh	r3, [r7, #4]
		can2_tx_header.Identifier = 0x201;
 8000d1a:	4b20      	ldr	r3, [pc, #128]	; (8000d9c <wheels_control_send_speed+0xe8>)
 8000d1c:	f240 2201 	movw	r2, #513	; 0x201
 8000d20:	601a      	str	r2, [r3, #0]
		can2_tx_header.DataLength = FDCAN_DLC_BYTES_7;
 8000d22:	4b1e      	ldr	r3, [pc, #120]	; (8000d9c <wheels_control_send_speed+0xe8>)
 8000d24:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000d28:	60da      	str	r2, [r3, #12]
		for (uint8_t i = 0; i < 3; i++)
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	71fb      	strb	r3, [r7, #7]
 8000d2e:	e01c      	b.n	8000d6a <wheels_control_send_speed+0xb6>
		{
			can2_tx_data[i*2+1] = (data_temp[i] >> 8) & 0xff;
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	3308      	adds	r3, #8
 8000d36:	443b      	add	r3, r7
 8000d38:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8000d3c:	121b      	asrs	r3, r3, #8
 8000d3e:	b21a      	sxth	r2, r3
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	3301      	adds	r3, #1
 8000d46:	b2d1      	uxtb	r1, r2
 8000d48:	4a12      	ldr	r2, [pc, #72]	; (8000d94 <wheels_control_send_speed+0xe0>)
 8000d4a:	54d1      	strb	r1, [r2, r3]
			can2_tx_data[i*2+2] = data_temp[i] & 0xff;
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	3308      	adds	r3, #8
 8000d52:	443b      	add	r3, r7
 8000d54:	f933 2c08 	ldrsh.w	r2, [r3, #-8]
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	b2d1      	uxtb	r1, r2
 8000d60:	4a0c      	ldr	r2, [pc, #48]	; (8000d94 <wheels_control_send_speed+0xe0>)
 8000d62:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 3; i++)
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	3301      	adds	r3, #1
 8000d68:	71fb      	strb	r3, [r7, #7]
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d9df      	bls.n	8000d30 <wheels_control_send_speed+0x7c>
		}
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &can2_tx_header, can2_tx_data) == HAL_OK)
 8000d70:	4a08      	ldr	r2, [pc, #32]	; (8000d94 <wheels_control_send_speed+0xe0>)
 8000d72:	490a      	ldr	r1, [pc, #40]	; (8000d9c <wheels_control_send_speed+0xe8>)
 8000d74:	4806      	ldr	r0, [pc, #24]	; (8000d90 <wheels_control_send_speed+0xdc>)
 8000d76:	f008 f84c 	bl	8008e12 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d102      	bne.n	8000d86 <wheels_control_send_speed+0xd2>
		{
			can2_fifo_state = _FULL;
 8000d80:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <wheels_control_send_speed+0xec>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000408 	.word	0x20000408
 8000d94:	20000ff8 	.word	0x20000ff8
 8000d98:	200009c8 	.word	0x200009c8
 8000d9c:	20000a7c 	.word	0x20000a7c
 8000da0:	20000000 	.word	0x20000000

08000da4 <can_lock_move>:
		}
	}
}

void can_lock_move ()
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
	if (HAL_FDCAN_GetTxFifoFreeLevel (&hfdcan2) > 0)
 8000da8:	480e      	ldr	r0, [pc, #56]	; (8000de4 <can_lock_move+0x40>)
 8000daa:	f008 f9fb 	bl	80091a4 <HAL_FDCAN_GetTxFifoFreeLevel>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d015      	beq.n	8000de0 <can_lock_move+0x3c>
	{
		can2_tx_data[0] = _LOCK_MOVE;
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <can_lock_move+0x44>)
 8000db6:	2241      	movs	r2, #65	; 0x41
 8000db8:	701a      	strb	r2, [r3, #0]
		can2_tx_header.Identifier = 0x201;
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <can_lock_move+0x48>)
 8000dbc:	f240 2201 	movw	r2, #513	; 0x201
 8000dc0:	601a      	str	r2, [r3, #0]
		can2_tx_header.DataLength = FDCAN_DLC_BYTES_1;
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <can_lock_move+0x48>)
 8000dc4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dc8:	60da      	str	r2, [r3, #12]
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &can2_tx_header, can2_tx_data) == HAL_OK)
 8000dca:	4a07      	ldr	r2, [pc, #28]	; (8000de8 <can_lock_move+0x44>)
 8000dcc:	4907      	ldr	r1, [pc, #28]	; (8000dec <can_lock_move+0x48>)
 8000dce:	4805      	ldr	r0, [pc, #20]	; (8000de4 <can_lock_move+0x40>)
 8000dd0:	f008 f81f 	bl	8008e12 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d102      	bne.n	8000de0 <can_lock_move+0x3c>
		{
			can2_fifo_state = _FULL;
 8000dda:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <can_lock_move+0x4c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000408 	.word	0x20000408
 8000de8:	20000ff8 	.word	0x20000ff8
 8000dec:	20000a7c 	.word	0x20000a7c
 8000df0:	20000000 	.word	0x20000000

08000df4 <can_set_thrower>:
		}
	}
}

void can_set_thrower (_Bool ch, uint16_t rpm_L, uint16_t rpm_R)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
 8000dfe:	460b      	mov	r3, r1
 8000e00:	80bb      	strh	r3, [r7, #4]
 8000e02:	4613      	mov	r3, r2
 8000e04:	807b      	strh	r3, [r7, #2]
	if (HAL_FDCAN_GetTxFifoFreeLevel (&hfdcan1) > 0)
 8000e06:	481d      	ldr	r0, [pc, #116]	; (8000e7c <can_set_thrower+0x88>)
 8000e08:	f008 f9cc 	bl	80091a4 <HAL_FDCAN_GetTxFifoFreeLevel>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d02f      	beq.n	8000e72 <can_set_thrower+0x7e>
	{
		uint32_t addr;
		if (ch == _THROWER1) addr = 0x0300;
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	f083 0301 	eor.w	r3, r3, #1
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d003      	beq.n	8000e26 <can_set_thrower+0x32>
 8000e1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	e002      	b.n	8000e2c <can_set_thrower+0x38>
		else addr = 0x0302;
 8000e26:	f240 3302 	movw	r3, #770	; 0x302
 8000e2a:	60fb      	str	r3, [r7, #12]
		can1_tx_header.Identifier = addr;
 8000e2c:	4a14      	ldr	r2, [pc, #80]	; (8000e80 <can_set_thrower+0x8c>)
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	6013      	str	r3, [r2, #0]
		can1_tx_header.DataLength = FDCAN_DLC_BYTES_5;
 8000e32:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <can_set_thrower+0x8c>)
 8000e34:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8000e38:	60da      	str	r2, [r3, #12]
		can1_tx_data[0] = _SET_RPM;
 8000e3a:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <can_set_thrower+0x90>)
 8000e3c:	2210      	movs	r2, #16
 8000e3e:	701a      	strb	r2, [r3, #0]
		can1_tx_data[1] = (rpm_L >> 8) & 0xFF;
 8000e40:	88bb      	ldrh	r3, [r7, #4]
 8000e42:	0a1b      	lsrs	r3, r3, #8
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <can_set_thrower+0x90>)
 8000e4a:	705a      	strb	r2, [r3, #1]
		can1_tx_data[2] = rpm_L & 0xFF;
 8000e4c:	88bb      	ldrh	r3, [r7, #4]
 8000e4e:	b2da      	uxtb	r2, r3
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <can_set_thrower+0x90>)
 8000e52:	709a      	strb	r2, [r3, #2]
		can1_tx_data[3] = (rpm_R >> 8) & 0xFF;
 8000e54:	887b      	ldrh	r3, [r7, #2]
 8000e56:	0a1b      	lsrs	r3, r3, #8
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <can_set_thrower+0x90>)
 8000e5e:	70da      	strb	r2, [r3, #3]
		can1_tx_data[4] = rpm_R & 0xFF;
 8000e60:	887b      	ldrh	r3, [r7, #2]
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <can_set_thrower+0x90>)
 8000e66:	711a      	strb	r2, [r3, #4]

		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &can1_tx_header, can1_tx_data);
 8000e68:	4a06      	ldr	r2, [pc, #24]	; (8000e84 <can_set_thrower+0x90>)
 8000e6a:	4905      	ldr	r1, [pc, #20]	; (8000e80 <can_set_thrower+0x8c>)
 8000e6c:	4803      	ldr	r0, [pc, #12]	; (8000e7c <can_set_thrower+0x88>)
 8000e6e:	f007 ffd0 	bl	8008e12 <HAL_FDCAN_AddMessageToTxFifoQ>
	}
}
 8000e72:	bf00      	nop
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000368 	.word	0x20000368
 8000e80:	20000a58 	.word	0x20000a58
 8000e84:	20001008 	.word	0x20001008

08000e88 <can_set_rotator>:


int8_t can_set_rotator (uint8_t reg, double value)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	ed87 0b00 	vstr	d0, [r7]
 8000e94:	73fb      	strb	r3, [r7, #15]
	int8_t status = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	75fb      	strb	r3, [r7, #23]
	_Bool error_input = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	75bb      	strb	r3, [r7, #22]
	if (reg == _STEER_R)
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ea0:	2ba0      	cmp	r3, #160	; 0xa0
 8000ea2:	d114      	bne.n	8000ece <can_set_rotator+0x46>
	{
		if (value > 90 || value < -34) error_input = 1;
 8000ea4:	ed97 7b00 	vldr	d7, [r7]
 8000ea8:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8000fb0 <can_set_rotator+0x128>
 8000eac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eb4:	dc08      	bgt.n	8000ec8 <can_set_rotator+0x40>
 8000eb6:	ed97 7b00 	vldr	d7, [r7]
 8000eba:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8000fb8 <can_set_rotator+0x130>
 8000ebe:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ec6:	d531      	bpl.n	8000f2c <can_set_rotator+0xa4>
 8000ec8:	2301      	movs	r3, #1
 8000eca:	75bb      	strb	r3, [r7, #22]
 8000ecc:	e02e      	b.n	8000f2c <can_set_rotator+0xa4>
	}
	else if (reg == _STEER_L)
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	2ba1      	cmp	r3, #161	; 0xa1
 8000ed2:	d114      	bne.n	8000efe <can_set_rotator+0x76>
	{
		if (value < -90 || value > 34) error_input = 1;
 8000ed4:	ed97 7b00 	vldr	d7, [r7]
 8000ed8:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8000fc0 <can_set_rotator+0x138>
 8000edc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ee4:	d408      	bmi.n	8000ef8 <can_set_rotator+0x70>
 8000ee6:	ed97 7b00 	vldr	d7, [r7]
 8000eea:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8000fc8 <can_set_rotator+0x140>
 8000eee:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef6:	dd19      	ble.n	8000f2c <can_set_rotator+0xa4>
 8000ef8:	2301      	movs	r3, #1
 8000efa:	75bb      	strb	r3, [r7, #22]
 8000efc:	e016      	b.n	8000f2c <can_set_rotator+0xa4>
	}
	else if (reg == _STEER_P)
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	2ba2      	cmp	r3, #162	; 0xa2
 8000f02:	d113      	bne.n	8000f2c <can_set_rotator+0xa4>
	{
		if (value < 80 || value > 280) error_input = 1;
 8000f04:	ed97 7b00 	vldr	d7, [r7]
 8000f08:	ed9f 6b31 	vldr	d6, [pc, #196]	; 8000fd0 <can_set_rotator+0x148>
 8000f0c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f14:	d408      	bmi.n	8000f28 <can_set_rotator+0xa0>
 8000f16:	ed97 7b00 	vldr	d7, [r7]
 8000f1a:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 8000fd8 <can_set_rotator+0x150>
 8000f1e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f26:	dd01      	ble.n	8000f2c <can_set_rotator+0xa4>
 8000f28:	2301      	movs	r3, #1
 8000f2a:	75bb      	strb	r3, [r7, #22]
	}
	if (!error_input)
 8000f2c:	7dbb      	ldrb	r3, [r7, #22]
 8000f2e:	f083 0301 	eor.w	r3, r3, #1
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d033      	beq.n	8000fa0 <can_set_rotator+0x118>
	{
		if (HAL_FDCAN_GetTxFifoFreeLevel (&hfdcan1) > 0)
 8000f38:	482b      	ldr	r0, [pc, #172]	; (8000fe8 <can_set_rotator+0x160>)
 8000f3a:	f008 f933 	bl	80091a4 <HAL_FDCAN_GetTxFifoFreeLevel>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d02d      	beq.n	8000fa0 <can_set_rotator+0x118>
		{
			int16_t temp = value * 100;
 8000f44:	ed97 7b00 	vldr	d7, [r7]
 8000f48:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8000fe0 <can_set_rotator+0x158>
 8000f4c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f50:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000f54:	ee17 3a90 	vmov	r3, s15
 8000f58:	82bb      	strh	r3, [r7, #20]
			can1_tx_header.Identifier = 0x3A5;
 8000f5a:	4b24      	ldr	r3, [pc, #144]	; (8000fec <can_set_rotator+0x164>)
 8000f5c:	f240 32a5 	movw	r2, #933	; 0x3a5
 8000f60:	601a      	str	r2, [r3, #0]
			can1_tx_header.DataLength = FDCAN_DLC_BYTES_3;
 8000f62:	4b22      	ldr	r3, [pc, #136]	; (8000fec <can_set_rotator+0x164>)
 8000f64:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f68:	60da      	str	r2, [r3, #12]
			can1_tx_data[0] = reg;
 8000f6a:	4a21      	ldr	r2, [pc, #132]	; (8000ff0 <can_set_rotator+0x168>)
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	7013      	strb	r3, [r2, #0]
			can1_tx_data[1] = (temp >> 8) & 0xFF;
 8000f70:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f74:	121b      	asrs	r3, r3, #8
 8000f76:	b21b      	sxth	r3, r3
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	4b1d      	ldr	r3, [pc, #116]	; (8000ff0 <can_set_rotator+0x168>)
 8000f7c:	705a      	strb	r2, [r3, #1]
			can1_tx_data[2] = temp & 0xFF;
 8000f7e:	8abb      	ldrh	r3, [r7, #20]
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4b1b      	ldr	r3, [pc, #108]	; (8000ff0 <can_set_rotator+0x168>)
 8000f84:	709a      	strb	r2, [r3, #2]

			if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &can1_tx_header, can1_tx_data) == HAL_OK)
 8000f86:	4a1a      	ldr	r2, [pc, #104]	; (8000ff0 <can_set_rotator+0x168>)
 8000f88:	4918      	ldr	r1, [pc, #96]	; (8000fec <can_set_rotator+0x164>)
 8000f8a:	4817      	ldr	r0, [pc, #92]	; (8000fe8 <can_set_rotator+0x160>)
 8000f8c:	f007 ff41 	bl	8008e12 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d102      	bne.n	8000f9c <can_set_rotator+0x114>
				status = 1;
 8000f96:	2301      	movs	r3, #1
 8000f98:	75fb      	strb	r3, [r7, #23]
 8000f9a:	e001      	b.n	8000fa0 <can_set_rotator+0x118>
			else status = -1;
 8000f9c:	23ff      	movs	r3, #255	; 0xff
 8000f9e:	75fb      	strb	r3, [r7, #23]
		}
	}
	return status;
 8000fa0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	f3af 8000 	nop.w
 8000fb0:	00000000 	.word	0x00000000
 8000fb4:	40568000 	.word	0x40568000
 8000fb8:	00000000 	.word	0x00000000
 8000fbc:	c0410000 	.word	0xc0410000
 8000fc0:	00000000 	.word	0x00000000
 8000fc4:	c0568000 	.word	0xc0568000
 8000fc8:	00000000 	.word	0x00000000
 8000fcc:	40410000 	.word	0x40410000
 8000fd0:	00000000 	.word	0x00000000
 8000fd4:	40540000 	.word	0x40540000
 8000fd8:	00000000 	.word	0x00000000
 8000fdc:	40718000 	.word	0x40718000
 8000fe0:	00000000 	.word	0x00000000
 8000fe4:	40590000 	.word	0x40590000
 8000fe8:	20000368 	.word	0x20000368
 8000fec:	20000a58 	.word	0x20000a58
 8000ff0:	20001008 	.word	0x20001008

08000ff4 <servo_init>:

/******************************************************************************************/

void servo_init ()
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4830      	ldr	r0, [pc, #192]	; (80010bc <servo_init+0xc8>)
 8000ffc:	f00e fc4a 	bl	800f894 <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_2);
 8001000:	2104      	movs	r1, #4
 8001002:	482e      	ldr	r0, [pc, #184]	; (80010bc <servo_init+0xc8>)
 8001004:	f00e fc46 	bl	800f894 <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_3);
 8001008:	2108      	movs	r1, #8
 800100a:	482c      	ldr	r0, [pc, #176]	; (80010bc <servo_init+0xc8>)
 800100c:	f00e fc42 	bl	800f894 <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8001010:	210c      	movs	r1, #12
 8001012:	482a      	ldr	r0, [pc, #168]	; (80010bc <servo_init+0xc8>)
 8001014:	f00e fc3e 	bl	800f894 <HAL_TIM_OC_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8001018:	4828      	ldr	r0, [pc, #160]	; (80010bc <servo_init+0xc8>)
 800101a:	f00e fb61 	bl	800f6e0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 800101e:	2100      	movs	r1, #0
 8001020:	4827      	ldr	r0, [pc, #156]	; (80010c0 <servo_init+0xcc>)
 8001022:	f00e fc37 	bl	800f894 <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_2);
 8001026:	2104      	movs	r1, #4
 8001028:	4825      	ldr	r0, [pc, #148]	; (80010c0 <servo_init+0xcc>)
 800102a:	f00e fc33 	bl	800f894 <HAL_TIM_OC_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 800102e:	4824      	ldr	r0, [pc, #144]	; (80010c0 <servo_init+0xcc>)
 8001030:	f00e fb56 	bl	800f6e0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001034:	2100      	movs	r1, #0
 8001036:	4823      	ldr	r0, [pc, #140]	; (80010c4 <servo_init+0xd0>)
 8001038:	f00e fc2c 	bl	800f894 <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_2);
 800103c:	2104      	movs	r1, #4
 800103e:	4821      	ldr	r0, [pc, #132]	; (80010c4 <servo_init+0xd0>)
 8001040:	f00e fc28 	bl	800f894 <HAL_TIM_OC_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 8001044:	481f      	ldr	r0, [pc, #124]	; (80010c4 <servo_init+0xd0>)
 8001046:	f00e fb4b 	bl	800f6e0 <HAL_TIM_Base_Start_IT>
	servo5.offset = 0;
	servo6.offset = 0;
	servo7.offset = -2.5;
	servo8.offset = 5;
#else
	servo1.offset = 5.0;
 800104a:	491f      	ldr	r1, [pc, #124]	; (80010c8 <servo_init+0xd4>)
 800104c:	f04f 0200 	mov.w	r2, #0
 8001050:	4b1e      	ldr	r3, [pc, #120]	; (80010cc <servo_init+0xd8>)
 8001052:	e9c1 2302 	strd	r2, r3, [r1, #8]
	servo2.offset = 0;
 8001056:	491e      	ldr	r1, [pc, #120]	; (80010d0 <servo_init+0xdc>)
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	f04f 0300 	mov.w	r3, #0
 8001060:	e9c1 2302 	strd	r2, r3, [r1, #8]
	servo3.offset = 0;
 8001064:	491b      	ldr	r1, [pc, #108]	; (80010d4 <servo_init+0xe0>)
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	f04f 0300 	mov.w	r3, #0
 800106e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	servo4.offset = 0;
 8001072:	4919      	ldr	r1, [pc, #100]	; (80010d8 <servo_init+0xe4>)
 8001074:	f04f 0200 	mov.w	r2, #0
 8001078:	f04f 0300 	mov.w	r3, #0
 800107c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	servo5.offset = 0;
 8001080:	4916      	ldr	r1, [pc, #88]	; (80010dc <servo_init+0xe8>)
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	f04f 0300 	mov.w	r3, #0
 800108a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	servo6.offset = 5.0;
 800108e:	4914      	ldr	r1, [pc, #80]	; (80010e0 <servo_init+0xec>)
 8001090:	f04f 0200 	mov.w	r2, #0
 8001094:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <servo_init+0xd8>)
 8001096:	e9c1 2302 	strd	r2, r3, [r1, #8]
	servo7.offset = 0;
 800109a:	4912      	ldr	r1, [pc, #72]	; (80010e4 <servo_init+0xf0>)
 800109c:	f04f 0200 	mov.w	r2, #0
 80010a0:	f04f 0300 	mov.w	r3, #0
 80010a4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	servo8.offset = 0;
 80010a8:	490f      	ldr	r1, [pc, #60]	; (80010e8 <servo_init+0xf4>)
 80010aa:	f04f 0200 	mov.w	r2, #0
 80010ae:	f04f 0300 	mov.w	r3, #0
 80010b2:	e9c1 2302 	strd	r2, r3, [r1, #8]
#endif
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000644 	.word	0x20000644
 80010c0:	20000690 	.word	0x20000690
 80010c4:	200006dc 	.word	0x200006dc
 80010c8:	20000948 	.word	0x20000948
 80010cc:	40140000 	.word	0x40140000
 80010d0:	20000958 	.word	0x20000958
 80010d4:	20000968 	.word	0x20000968
 80010d8:	20000978 	.word	0x20000978
 80010dc:	20000988 	.word	0x20000988
 80010e0:	20000998 	.word	0x20000998
 80010e4:	200009a8 	.word	0x200009a8
 80010e8:	200009b8 	.word	0x200009b8
 80010ec:	00000000 	.word	0x00000000

080010f0 <set_servo>:

void set_servo (SERVO_t *hservo, double angle)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	ed87 0b00 	vstr	d0, [r7]
	if (hservo == &servo7 || hservo == &servo8)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4a28      	ldr	r2, [pc, #160]	; (80011a0 <set_servo+0xb0>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d003      	beq.n	800110c <set_servo+0x1c>
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4a27      	ldr	r2, [pc, #156]	; (80011a4 <set_servo+0xb4>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d119      	bne.n	8001140 <set_servo+0x50>
		hservo->pwm = ((angle + hservo->offset) / 55.0 * 260.0) + 500.0;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	ed93 6b02 	vldr	d6, [r3, #8]
 8001112:	ed97 7b00 	vldr	d7, [r7]
 8001116:	ee36 6b07 	vadd.f64	d6, d6, d7
 800111a:	ed9f 5b17 	vldr	d5, [pc, #92]	; 8001178 <set_servo+0x88>
 800111e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001122:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8001180 <set_servo+0x90>
 8001126:	ee27 7b06 	vmul.f64	d7, d7, d6
 800112a:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8001188 <set_servo+0x98>
 800112e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001132:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001136:	ee17 2a90 	vmov	r2, s15
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	e015      	b.n	800116c <set_servo+0x7c>
	else
	{
#ifdef KST
		hservo->pwm =  ((angle + hservo->offset) * 5.55555555555555555556 + 999);
#else
		hservo->pwm =  ((angle + hservo->offset) * 10.6666666666666666667 + 499);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	ed93 6b02 	vldr	d6, [r3, #8]
 8001146:	ed97 7b00 	vldr	d7, [r7]
 800114a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800114e:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8001190 <set_servo+0xa0>
 8001152:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001156:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8001198 <set_servo+0xa8>
 800115a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800115e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001162:	ee17 2a90 	vmov	r2, s15
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	605a      	str	r2, [r3, #4]
#endif
	}
}
 800116a:	bf00      	nop
 800116c:	bf00      	nop
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	00000000 	.word	0x00000000
 800117c:	404b8000 	.word	0x404b8000
 8001180:	00000000 	.word	0x00000000
 8001184:	40704000 	.word	0x40704000
 8001188:	00000000 	.word	0x00000000
 800118c:	407f4000 	.word	0x407f4000
 8001190:	55555555 	.word	0x55555555
 8001194:	40255555 	.word	0x40255555
 8001198:	00000000 	.word	0x00000000
 800119c:	407f3000 	.word	0x407f3000
 80011a0:	200009a8 	.word	0x200009a8
 80011a4:	200009b8 	.word	0x200009b8

080011a8 <set_gripper>:

void set_gripper (uint8_t hgrip, double z, _Bool ring)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08c      	sub	sp, #48	; 0x30
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	ed87 0b00 	vstr	d0, [r7]
 80011b4:	460a      	mov	r2, r1
 80011b6:	73fb      	strb	r3, [r7, #15]
 80011b8:	4613      	mov	r3, r2
 80011ba:	73bb      	strb	r3, [r7, #14]
	double b, alpha1, alpha2, alpha;
	b = sqrt (z * z + dp * dp);
 80011bc:	ed97 7b00 	vldr	d7, [r7]
 80011c0:	ee27 7b07 	vmul.f64	d7, d7, d7
 80011c4:	ed9f 6b36 	vldr	d6, [pc, #216]	; 80012a0 <set_gripper+0xf8>
 80011c8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80011cc:	eeb0 0b47 	vmov.f64	d0, d7
 80011d0:	f019 f892 	bl	801a2f8 <sqrt>
 80011d4:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	alpha1 = asin (dp / b);
 80011d8:	ed9f 5b33 	vldr	d5, [pc, #204]	; 80012a8 <set_gripper+0x100>
 80011dc:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80011e0:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80011e4:	eeb0 0b46 	vmov.f64	d0, d6
 80011e8:	f019 f858 	bl	801a29c <asin>
 80011ec:	ed87 0b08 	vstr	d0, [r7, #32]
	alpha2 = acos ((L1 * L1 + b * b - L2 * L2) / (2.0 * L1 * b));
 80011f0:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80011f4:	ee27 7b07 	vmul.f64	d7, d7, d7
 80011f8:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 80012b0 <set_gripper+0x108>
 80011fc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001200:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 80012b8 <set_gripper+0x110>
 8001204:	ee37 6b46 	vsub.f64	d6, d7, d6
 8001208:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800120c:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 80012c0 <set_gripper+0x118>
 8001210:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001214:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001218:	eeb0 0b45 	vmov.f64	d0, d5
 800121c:	f019 f812 	bl	801a244 <acos>
 8001220:	ed87 0b06 	vstr	d0, [r7, #24]
	alpha = (alpha1 + alpha2) * RAD2DEG;
 8001224:	ed97 6b08 	vldr	d6, [r7, #32]
 8001228:	ed97 7b06 	vldr	d7, [r7, #24]
 800122c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001230:	ed9f 6b25 	vldr	d6, [pc, #148]	; 80012c8 <set_gripper+0x120>
 8001234:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001238:	ed87 7b04 	vstr	d7, [r7, #16]
	if (hgrip == _GRIPPER1)
 800123c:	7bfb      	ldrb	r3, [r7, #15]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d115      	bne.n	800126e <set_gripper+0xc6>
	{
		set_servo (&servo1, alpha);
 8001242:	ed97 0b04 	vldr	d0, [r7, #16]
 8001246:	4826      	ldr	r0, [pc, #152]	; (80012e0 <set_gripper+0x138>)
 8001248:	f7ff ff52 	bl	80010f0 <set_servo>
		set_servo (&servo3, (ring == _GRIP)? 120 : 0);
 800124c:	7bbb      	ldrb	r3, [r7, #14]
 800124e:	f083 0301 	eor.w	r3, r3, #1
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	d002      	beq.n	800125e <set_gripper+0xb6>
 8001258:	ed9f 7b19 	vldr	d7, [pc, #100]	; 80012c0 <set_gripper+0x118>
 800125c:	e001      	b.n	8001262 <set_gripper+0xba>
 800125e:	ed9f 7b1c 	vldr	d7, [pc, #112]	; 80012d0 <set_gripper+0x128>
 8001262:	eeb0 0b47 	vmov.f64	d0, d7
 8001266:	481f      	ldr	r0, [pc, #124]	; (80012e4 <set_gripper+0x13c>)
 8001268:	f7ff ff42 	bl	80010f0 <set_servo>
	else
	{
		set_servo (&servo2, alpha);
		set_servo (&servo4, (ring == _GRIP)? 140 : 0);
	}
}
 800126c:	e014      	b.n	8001298 <set_gripper+0xf0>
		set_servo (&servo2, alpha);
 800126e:	ed97 0b04 	vldr	d0, [r7, #16]
 8001272:	481d      	ldr	r0, [pc, #116]	; (80012e8 <set_gripper+0x140>)
 8001274:	f7ff ff3c 	bl	80010f0 <set_servo>
		set_servo (&servo4, (ring == _GRIP)? 140 : 0);
 8001278:	7bbb      	ldrb	r3, [r7, #14]
 800127a:	f083 0301 	eor.w	r3, r3, #1
 800127e:	b2db      	uxtb	r3, r3
 8001280:	2b00      	cmp	r3, #0
 8001282:	d002      	beq.n	800128a <set_gripper+0xe2>
 8001284:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80012d8 <set_gripper+0x130>
 8001288:	e001      	b.n	800128e <set_gripper+0xe6>
 800128a:	ed9f 7b11 	vldr	d7, [pc, #68]	; 80012d0 <set_gripper+0x128>
 800128e:	eeb0 0b47 	vmov.f64	d0, d7
 8001292:	4816      	ldr	r0, [pc, #88]	; (80012ec <set_gripper+0x144>)
 8001294:	f7ff ff2c 	bl	80010f0 <set_servo>
}
 8001298:	bf00      	nop
 800129a:	3730      	adds	r7, #48	; 0x30
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	c28f5c2a 	.word	0xc28f5c2a
 80012a4:	4099e1f5 	.word	0x4099e1f5
 80012a8:	9999999a 	.word	0x9999999a
 80012ac:	40445999 	.word	0x40445999
 80012b0:	00000000 	.word	0x00000000
 80012b4:	40ac2000 	.word	0x40ac2000
 80012b8:	00000000 	.word	0x00000000
 80012bc:	40c84820 	.word	0x40c84820
 80012c0:	00000000 	.word	0x00000000
 80012c4:	405e0000 	.word	0x405e0000
 80012c8:	1a63c1f8 	.word	0x1a63c1f8
 80012cc:	404ca5dc 	.word	0x404ca5dc
	...
 80012dc:	40618000 	.word	0x40618000
 80012e0:	20000948 	.word	0x20000948
 80012e4:	20000968 	.word	0x20000968
 80012e8:	20000958 	.word	0x20000958
 80012ec:	20000978 	.word	0x20000978

080012f0 <trial_lempar_RR>:
	}

}

void trial_lempar_RR ()
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
//	uint32_t speed = 0.00000001*pow(actual_distance,4) - 0.00002*pow(actual_distance,3)+ 0.0114*pow(actual_distance,2) + 0.7854*actual_distance + 1270.1; //1E-08x4 - 2E-05x3 + 0,0114x2 + 0,7854x + 1270,1
//	if (speed > 2500) speed = 2500;

	if (RR_ambil)
 80012f6:	4b64      	ldr	r3, [pc, #400]	; (8001488 <trial_lempar_RR+0x198>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f000 8252 	beq.w	80017a4 <trial_lempar_RR+0x4b4>
	{
		if (RR_ring_ready == 0)
 8001300:	4b62      	ldr	r3, [pc, #392]	; (800148c <trial_lempar_RR+0x19c>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	f040 80f4 	bne.w	80014f2 <trial_lempar_RR+0x202>
		{
			manual.vx = 0;
 800130a:	4961      	ldr	r1, [pc, #388]	; (8001490 <trial_lempar_RR+0x1a0>)
 800130c:	f04f 0200 	mov.w	r2, #0
 8001310:	f04f 0300 	mov.w	r3, #0
 8001314:	e9c1 2300 	strd	r2, r3, [r1]
			manual.vy = 0;
 8001318:	495d      	ldr	r1, [pc, #372]	; (8001490 <trial_lempar_RR+0x1a0>)
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	f04f 0300 	mov.w	r3, #0
 8001322:	e9c1 2302 	strd	r2, r3, [r1, #8]
			manual.v_yaw = 0;
 8001326:	495a      	ldr	r1, [pc, #360]	; (8001490 <trial_lempar_RR+0x1a0>)
 8001328:	f04f 0200 	mov.w	r2, #0
 800132c:	f04f 0300 	mov.w	r3, #0
 8001330:	e9c1 2304 	strd	r2, r3, [r1, #16]
			wheels_control_send_speed();
 8001334:	f7ff fcbe 	bl	8000cb4 <wheels_control_send_speed>
			can_wait_transmit(&hfdcan2);
 8001338:	4856      	ldr	r0, [pc, #344]	; (8001494 <trial_lempar_RR+0x1a4>)
 800133a:	f7ff fc9f 	bl	8000c7c <can_wait_transmit>
			can_lock_move();
 800133e:	f7ff fd31 	bl	8000da4 <can_lock_move>
			for (uint8_t i = 0; i < 2; i++)
 8001342:	2300      	movs	r3, #0
 8001344:	73fb      	strb	r3, [r7, #15]
 8001346:	e0b0      	b.n	80014aa <trial_lempar_RR+0x1ba>
			{
//				can_wait_transmit(&hfdcan1);
//				can_set_rotator (_STEER_P, 270);
//				HAL_Delay(700);
				set_servo (&servo6, 133);
 8001348:	ed9f 0b45 	vldr	d0, [pc, #276]	; 8001460 <trial_lempar_RR+0x170>
 800134c:	4852      	ldr	r0, [pc, #328]	; (8001498 <trial_lempar_RR+0x1a8>)
 800134e:	f7ff fecf 	bl	80010f0 <set_servo>
				HAL_Delay(100);
 8001352:	2064      	movs	r0, #100	; 0x64
 8001354:	f003 fa2a 	bl	80047ac <HAL_Delay>
				set_gripper (_GRIPPER1, -70 - ((7-ring_stack)*15), _RELEASE);
 8001358:	4b50      	ldr	r3, [pc, #320]	; (800149c <trial_lempar_RR+0x1ac>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	f1c3 0307 	rsb	r3, r3, #7
 8001360:	461a      	mov	r2, r3
 8001362:	011b      	lsls	r3, r3, #4
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	3b46      	subs	r3, #70	; 0x46
 8001368:	ee07 3a90 	vmov	s15, r3
 800136c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001370:	2101      	movs	r1, #1
 8001372:	eeb0 0b47 	vmov.f64	d0, d7
 8001376:	2000      	movs	r0, #0
 8001378:	f7ff ff16 	bl	80011a8 <set_gripper>
				HAL_Delay(300);
 800137c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001380:	f003 fa14 	bl	80047ac <HAL_Delay>
				set_gripper (_GRIPPER1, -70 - ((7-ring_stack)*15), _GRIP);
 8001384:	4b45      	ldr	r3, [pc, #276]	; (800149c <trial_lempar_RR+0x1ac>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	f1c3 0307 	rsb	r3, r3, #7
 800138c:	461a      	mov	r2, r3
 800138e:	011b      	lsls	r3, r3, #4
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	3b46      	subs	r3, #70	; 0x46
 8001394:	ee07 3a90 	vmov	s15, r3
 8001398:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800139c:	2100      	movs	r1, #0
 800139e:	eeb0 0b47 	vmov.f64	d0, d7
 80013a2:	2000      	movs	r0, #0
 80013a4:	f7ff ff00 	bl	80011a8 <set_gripper>
				HAL_Delay(500);
 80013a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013ac:	f003 f9fe 	bl	80047ac <HAL_Delay>
				set_gripper (_GRIPPER1, -45, _GRIP);
 80013b0:	2100      	movs	r1, #0
 80013b2:	ed9f 0b2d 	vldr	d0, [pc, #180]	; 8001468 <trial_lempar_RR+0x178>
 80013b6:	2000      	movs	r0, #0
 80013b8:	f7ff fef6 	bl	80011a8 <set_gripper>
				HAL_Delay(450);
 80013bc:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 80013c0:	f003 f9f4 	bl	80047ac <HAL_Delay>
				can_wait_transmit(&hfdcan1);
 80013c4:	4836      	ldr	r0, [pc, #216]	; (80014a0 <trial_lempar_RR+0x1b0>)
 80013c6:	f7ff fc59 	bl	8000c7c <can_wait_transmit>
				can_set_rotator (_STEER_P, 82);
 80013ca:	ed9f 0b29 	vldr	d0, [pc, #164]	; 8001470 <trial_lempar_RR+0x180>
 80013ce:	20a2      	movs	r0, #162	; 0xa2
 80013d0:	f7ff fd5a 	bl	8000e88 <can_set_rotator>
				if (i == 0)
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d12c      	bne.n	8001434 <trial_lempar_RR+0x144>
				{
					HAL_Delay(1250);
 80013da:	f240 40e2 	movw	r0, #1250	; 0x4e2
 80013de:	f003 f9e5 	bl	80047ac <HAL_Delay>
					set_gripper (_GRIPPER1, -95, _GRIP);
 80013e2:	2100      	movs	r1, #0
 80013e4:	ed9f 0b24 	vldr	d0, [pc, #144]	; 8001478 <trial_lempar_RR+0x188>
 80013e8:	2000      	movs	r0, #0
 80013ea:	f7ff fedd 	bl	80011a8 <set_gripper>
					HAL_Delay(300);
 80013ee:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80013f2:	f003 f9db 	bl	80047ac <HAL_Delay>
					set_gripper (_GRIPPER1, -95, _RELEASE);
 80013f6:	2101      	movs	r1, #1
 80013f8:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8001478 <trial_lempar_RR+0x188>
 80013fc:	2000      	movs	r0, #0
 80013fe:	f7ff fed3 	bl	80011a8 <set_gripper>
					HAL_Delay(500);
 8001402:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001406:	f003 f9d1 	bl	80047ac <HAL_Delay>
					set_gripper (_GRIPPER1, -45, _RELEASE);
 800140a:	2101      	movs	r1, #1
 800140c:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8001468 <trial_lempar_RR+0x178>
 8001410:	2000      	movs	r0, #0
 8001412:	f7ff fec9 	bl	80011a8 <set_gripper>
					HAL_Delay(100);
 8001416:	2064      	movs	r0, #100	; 0x64
 8001418:	f003 f9c8 	bl	80047ac <HAL_Delay>
					can_wait_transmit(&hfdcan1);
 800141c:	4820      	ldr	r0, [pc, #128]	; (80014a0 <trial_lempar_RR+0x1b0>)
 800141e:	f7ff fc2d 	bl	8000c7c <can_wait_transmit>
					can_set_rotator (_STEER_P, 268);
 8001422:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8001480 <trial_lempar_RR+0x190>
 8001426:	20a2      	movs	r0, #162	; 0xa2
 8001428:	f7ff fd2e 	bl	8000e88 <can_set_rotator>
					HAL_Delay(700);
 800142c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001430:	f003 f9bc 	bl	80047ac <HAL_Delay>
				}
				RR_ring_ready++;
 8001434:	4b15      	ldr	r3, [pc, #84]	; (800148c <trial_lempar_RR+0x19c>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	3301      	adds	r3, #1
 800143a:	b2da      	uxtb	r2, r3
 800143c:	4b13      	ldr	r3, [pc, #76]	; (800148c <trial_lempar_RR+0x19c>)
 800143e:	701a      	strb	r2, [r3, #0]
				ring_stack--;
 8001440:	4b16      	ldr	r3, [pc, #88]	; (800149c <trial_lempar_RR+0x1ac>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	3b01      	subs	r3, #1
 8001446:	b2da      	uxtb	r2, r3
 8001448:	4b14      	ldr	r3, [pc, #80]	; (800149c <trial_lempar_RR+0x1ac>)
 800144a:	701a      	strb	r2, [r3, #0]
				if (ring_stack == 0) {
 800144c:	4b13      	ldr	r3, [pc, #76]	; (800149c <trial_lempar_RR+0x1ac>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d127      	bne.n	80014a4 <trial_lempar_RR+0x1b4>
					ring_stack = 5;
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <trial_lempar_RR+0x1ac>)
 8001456:	2205      	movs	r2, #5
 8001458:	701a      	strb	r2, [r3, #0]
					break;
 800145a:	e02a      	b.n	80014b2 <trial_lempar_RR+0x1c2>
 800145c:	f3af 8000 	nop.w
 8001460:	00000000 	.word	0x00000000
 8001464:	4060a000 	.word	0x4060a000
 8001468:	00000000 	.word	0x00000000
 800146c:	c0468000 	.word	0xc0468000
 8001470:	00000000 	.word	0x00000000
 8001474:	40548000 	.word	0x40548000
 8001478:	00000000 	.word	0x00000000
 800147c:	c057c000 	.word	0xc057c000
 8001480:	00000000 	.word	0x00000000
 8001484:	4070c000 	.word	0x4070c000
 8001488:	20001048 	.word	0x20001048
 800148c:	2000104d 	.word	0x2000104d
 8001490:	200009c8 	.word	0x200009c8
 8001494:	20000408 	.word	0x20000408
 8001498:	20000998 	.word	0x20000998
 800149c:	20000002 	.word	0x20000002
 80014a0:	20000368 	.word	0x20000368
			for (uint8_t i = 0; i < 2; i++)
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	3301      	adds	r3, #1
 80014a8:	73fb      	strb	r3, [r7, #15]
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	f67f af4b 	bls.w	8001348 <trial_lempar_RR+0x58>
				}

			}
//			lst_speed = com_blt.rthrower_speed;
			set_servo (&servo6, 120);
 80014b2:	ed9f 0bb3 	vldr	d0, [pc, #716]	; 8001780 <trial_lempar_RR+0x490>
 80014b6:	48b4      	ldr	r0, [pc, #720]	; (8001788 <trial_lempar_RR+0x498>)
 80014b8:	f7ff fe1a 	bl	80010f0 <set_servo>
			//nyala
			can_wait_transmit(&hfdcan1);
 80014bc:	48b3      	ldr	r0, [pc, #716]	; (800178c <trial_lempar_RR+0x49c>)
 80014be:	f7ff fbdd 	bl	8000c7c <can_wait_transmit>
			can_set_thrower (_THROWER1, com_blt.rthrower_speed*0.75, com_blt.rthrower_speed);
 80014c2:	4bb3      	ldr	r3, [pc, #716]	; (8001790 <trial_lempar_RR+0x4a0>)
 80014c4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80014c8:	ee07 3a90 	vmov	s15, r3
 80014cc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80014d0:	eeb6 6b08 	vmov.f64	d6, #104	; 0x3f400000  0.750
 80014d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80014d8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80014dc:	ee17 3a90 	vmov	r3, s15
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	4aab      	ldr	r2, [pc, #684]	; (8001790 <trial_lempar_RR+0x4a0>)
 80014e4:	f9b2 2022 	ldrsh.w	r2, [r2, #34]	; 0x22
 80014e8:	b292      	uxth	r2, r2
 80014ea:	4619      	mov	r1, r3
 80014ec:	2000      	movs	r0, #0
 80014ee:	f7ff fc81 	bl	8000df4 <can_set_thrower>
		}
		RR_ambil = 0;
 80014f2:	4ba8      	ldr	r3, [pc, #672]	; (8001794 <trial_lempar_RR+0x4a4>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]
		if(com_blt.isEn1){
 80014f8:	4ba5      	ldr	r3, [pc, #660]	; (8001790 <trial_lempar_RR+0x4a0>)
 80014fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d01a      	beq.n	8001538 <trial_lempar_RR+0x248>
			 // USER CODE BEGIN ENEMY 3
			 com_blt.isEn1 = 0;
 8001502:	4ba3      	ldr	r3, [pc, #652]	; (8001790 <trial_lempar_RR+0x4a0>)
 8001504:	2200      	movs	r2, #0
 8001506:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			 blt_tx_buff[0]= 0; blt_tx_buff[1]= 8; blt_tx_buff[2]= 0; blt_tx_buff[3]= 0; blt_tx_buff[4]= 0;
 800150a:	4ba3      	ldr	r3, [pc, #652]	; (8001798 <trial_lempar_RR+0x4a8>)
 800150c:	2200      	movs	r2, #0
 800150e:	701a      	strb	r2, [r3, #0]
 8001510:	4ba1      	ldr	r3, [pc, #644]	; (8001798 <trial_lempar_RR+0x4a8>)
 8001512:	2208      	movs	r2, #8
 8001514:	705a      	strb	r2, [r3, #1]
 8001516:	4ba0      	ldr	r3, [pc, #640]	; (8001798 <trial_lempar_RR+0x4a8>)
 8001518:	2200      	movs	r2, #0
 800151a:	709a      	strb	r2, [r3, #2]
 800151c:	4b9e      	ldr	r3, [pc, #632]	; (8001798 <trial_lempar_RR+0x4a8>)
 800151e:	2200      	movs	r2, #0
 8001520:	70da      	strb	r2, [r3, #3]
 8001522:	4b9d      	ldr	r3, [pc, #628]	; (8001798 <trial_lempar_RR+0x4a8>)
 8001524:	2200      	movs	r2, #0
 8001526:	711a      	strb	r2, [r3, #4]
			 HAL_UART_Transmit_IT(&huart4, blt_tx_buff, BUFFER_LEN);
 8001528:	4b9c      	ldr	r3, [pc, #624]	; (800179c <trial_lempar_RR+0x4ac>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	b29b      	uxth	r3, r3
 800152e:	461a      	mov	r2, r3
 8001530:	4999      	ldr	r1, [pc, #612]	; (8001798 <trial_lempar_RR+0x4a8>)
 8001532:	489b      	ldr	r0, [pc, #620]	; (80017a0 <trial_lempar_RR+0x4b0>)
 8001534:	f00f fc1c 	bl	8010d70 <HAL_UART_Transmit_IT>
		 }
		 if(com_blt.isEn2){
 8001538:	4b95      	ldr	r3, [pc, #596]	; (8001790 <trial_lempar_RR+0x4a0>)
 800153a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800153e:	2b00      	cmp	r3, #0
 8001540:	d01a      	beq.n	8001578 <trial_lempar_RR+0x288>
			 // USER CODE BEGIN ENEMY 2
			 com_blt.isEn2 = 0;
 8001542:	4b93      	ldr	r3, [pc, #588]	; (8001790 <trial_lempar_RR+0x4a0>)
 8001544:	2200      	movs	r2, #0
 8001546:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			 blt_tx_buff[0]= 0;blt_tx_buff[1]= 16; blt_tx_buff[2]= 0; blt_tx_buff[3]= 0; blt_tx_buff[4]= 0;
 800154a:	4b93      	ldr	r3, [pc, #588]	; (8001798 <trial_lempar_RR+0x4a8>)
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]
 8001550:	4b91      	ldr	r3, [pc, #580]	; (8001798 <trial_lempar_RR+0x4a8>)
 8001552:	2210      	movs	r2, #16
 8001554:	705a      	strb	r2, [r3, #1]
 8001556:	4b90      	ldr	r3, [pc, #576]	; (8001798 <trial_lempar_RR+0x4a8>)
 8001558:	2200      	movs	r2, #0
 800155a:	709a      	strb	r2, [r3, #2]
 800155c:	4b8e      	ldr	r3, [pc, #568]	; (8001798 <trial_lempar_RR+0x4a8>)
 800155e:	2200      	movs	r2, #0
 8001560:	70da      	strb	r2, [r3, #3]
 8001562:	4b8d      	ldr	r3, [pc, #564]	; (8001798 <trial_lempar_RR+0x4a8>)
 8001564:	2200      	movs	r2, #0
 8001566:	711a      	strb	r2, [r3, #4]
			 HAL_UART_Transmit_IT(&huart4, blt_tx_buff, BUFFER_LEN);
 8001568:	4b8c      	ldr	r3, [pc, #560]	; (800179c <trial_lempar_RR+0x4ac>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	b29b      	uxth	r3, r3
 800156e:	461a      	mov	r2, r3
 8001570:	4989      	ldr	r1, [pc, #548]	; (8001798 <trial_lempar_RR+0x4a8>)
 8001572:	488b      	ldr	r0, [pc, #556]	; (80017a0 <trial_lempar_RR+0x4b0>)
 8001574:	f00f fbfc 	bl	8010d70 <HAL_UART_Transmit_IT>
		 }
		 if(com_blt.isEn3){
 8001578:	4b85      	ldr	r3, [pc, #532]	; (8001790 <trial_lempar_RR+0x4a0>)
 800157a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800157e:	2b00      	cmp	r3, #0
 8001580:	d01a      	beq.n	80015b8 <trial_lempar_RR+0x2c8>
			 // USER CODE BEGIN ENEMY 1
			 com_blt.isEn3 = 0;
 8001582:	4b83      	ldr	r3, [pc, #524]	; (8001790 <trial_lempar_RR+0x4a0>)
 8001584:	2200      	movs	r2, #0
 8001586:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			 blt_tx_buff[0]= 0;blt_tx_buff[1]= 32;blt_tx_buff[2]= 0;blt_tx_buff[3]= 0;blt_tx_buff[4]= 0;
 800158a:	4b83      	ldr	r3, [pc, #524]	; (8001798 <trial_lempar_RR+0x4a8>)
 800158c:	2200      	movs	r2, #0
 800158e:	701a      	strb	r2, [r3, #0]
 8001590:	4b81      	ldr	r3, [pc, #516]	; (8001798 <trial_lempar_RR+0x4a8>)
 8001592:	2220      	movs	r2, #32
 8001594:	705a      	strb	r2, [r3, #1]
 8001596:	4b80      	ldr	r3, [pc, #512]	; (8001798 <trial_lempar_RR+0x4a8>)
 8001598:	2200      	movs	r2, #0
 800159a:	709a      	strb	r2, [r3, #2]
 800159c:	4b7e      	ldr	r3, [pc, #504]	; (8001798 <trial_lempar_RR+0x4a8>)
 800159e:	2200      	movs	r2, #0
 80015a0:	70da      	strb	r2, [r3, #3]
 80015a2:	4b7d      	ldr	r3, [pc, #500]	; (8001798 <trial_lempar_RR+0x4a8>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	711a      	strb	r2, [r3, #4]
			 HAL_UART_Transmit_IT(&huart4, blt_tx_buff, BUFFER_LEN); //mengirimkan state ke android
 80015a8:	4b7c      	ldr	r3, [pc, #496]	; (800179c <trial_lempar_RR+0x4ac>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	461a      	mov	r2, r3
 80015b0:	4979      	ldr	r1, [pc, #484]	; (8001798 <trial_lempar_RR+0x4a8>)
 80015b2:	487b      	ldr	r0, [pc, #492]	; (80017a0 <trial_lempar_RR+0x4b0>)
 80015b4:	f00f fbdc 	bl	8010d70 <HAL_UART_Transmit_IT>
		 }
		 if(com_blt.isDo1){
 80015b8:	4b75      	ldr	r3, [pc, #468]	; (8001790 <trial_lempar_RR+0x4a0>)
 80015ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d01a      	beq.n	80015f8 <trial_lempar_RR+0x308>
			 // USER CODE BEGIN DOMAIN 1
			 com_blt.isDo1 = 0;
 80015c2:	4b73      	ldr	r3, [pc, #460]	; (8001790 <trial_lempar_RR+0x4a0>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			 blt_tx_buff[0]= 8; blt_tx_buff[1]= 0; blt_tx_buff[2]= 0; blt_tx_buff[3]= 0; blt_tx_buff[4]= 0;
 80015ca:	4b73      	ldr	r3, [pc, #460]	; (8001798 <trial_lempar_RR+0x4a8>)
 80015cc:	2208      	movs	r2, #8
 80015ce:	701a      	strb	r2, [r3, #0]
 80015d0:	4b71      	ldr	r3, [pc, #452]	; (8001798 <trial_lempar_RR+0x4a8>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	705a      	strb	r2, [r3, #1]
 80015d6:	4b70      	ldr	r3, [pc, #448]	; (8001798 <trial_lempar_RR+0x4a8>)
 80015d8:	2200      	movs	r2, #0
 80015da:	709a      	strb	r2, [r3, #2]
 80015dc:	4b6e      	ldr	r3, [pc, #440]	; (8001798 <trial_lempar_RR+0x4a8>)
 80015de:	2200      	movs	r2, #0
 80015e0:	70da      	strb	r2, [r3, #3]
 80015e2:	4b6d      	ldr	r3, [pc, #436]	; (8001798 <trial_lempar_RR+0x4a8>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	711a      	strb	r2, [r3, #4]
			 HAL_UART_Transmit_IT(&huart4, blt_tx_buff, BUFFER_LEN);
 80015e8:	4b6c      	ldr	r3, [pc, #432]	; (800179c <trial_lempar_RR+0x4ac>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	461a      	mov	r2, r3
 80015f0:	4969      	ldr	r1, [pc, #420]	; (8001798 <trial_lempar_RR+0x4a8>)
 80015f2:	486b      	ldr	r0, [pc, #428]	; (80017a0 <trial_lempar_RR+0x4b0>)
 80015f4:	f00f fbbc 	bl	8010d70 <HAL_UART_Transmit_IT>
		 }
		 if(com_blt.isDo2){
 80015f8:	4b65      	ldr	r3, [pc, #404]	; (8001790 <trial_lempar_RR+0x4a0>)
 80015fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d01a      	beq.n	8001638 <trial_lempar_RR+0x348>
			 // USER CODE BEGIN DOMAIN 2
			 com_blt.isDo2 = 0;
 8001602:	4b63      	ldr	r3, [pc, #396]	; (8001790 <trial_lempar_RR+0x4a0>)
 8001604:	2200      	movs	r2, #0
 8001606:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			 blt_tx_buff[0]= 16; blt_tx_buff[1]= 0; blt_tx_buff[2]= 0; blt_tx_buff[3]= 0; blt_tx_buff[4]= 0;
 800160a:	4b63      	ldr	r3, [pc, #396]	; (8001798 <trial_lempar_RR+0x4a8>)
 800160c:	2210      	movs	r2, #16
 800160e:	701a      	strb	r2, [r3, #0]
 8001610:	4b61      	ldr	r3, [pc, #388]	; (8001798 <trial_lempar_RR+0x4a8>)
 8001612:	2200      	movs	r2, #0
 8001614:	705a      	strb	r2, [r3, #1]
 8001616:	4b60      	ldr	r3, [pc, #384]	; (8001798 <trial_lempar_RR+0x4a8>)
 8001618:	2200      	movs	r2, #0
 800161a:	709a      	strb	r2, [r3, #2]
 800161c:	4b5e      	ldr	r3, [pc, #376]	; (8001798 <trial_lempar_RR+0x4a8>)
 800161e:	2200      	movs	r2, #0
 8001620:	70da      	strb	r2, [r3, #3]
 8001622:	4b5d      	ldr	r3, [pc, #372]	; (8001798 <trial_lempar_RR+0x4a8>)
 8001624:	2200      	movs	r2, #0
 8001626:	711a      	strb	r2, [r3, #4]
			 HAL_UART_Transmit_IT(&huart4, blt_tx_buff, BUFFER_LEN);
 8001628:	4b5c      	ldr	r3, [pc, #368]	; (800179c <trial_lempar_RR+0x4ac>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	b29b      	uxth	r3, r3
 800162e:	461a      	mov	r2, r3
 8001630:	4959      	ldr	r1, [pc, #356]	; (8001798 <trial_lempar_RR+0x4a8>)
 8001632:	485b      	ldr	r0, [pc, #364]	; (80017a0 <trial_lempar_RR+0x4b0>)
 8001634:	f00f fb9c 	bl	8010d70 <HAL_UART_Transmit_IT>
		 }
		 if(com_blt.isAng1){
 8001638:	4b55      	ldr	r3, [pc, #340]	; (8001790 <trial_lempar_RR+0x4a0>)
 800163a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800163e:	2b00      	cmp	r3, #0
 8001640:	d01a      	beq.n	8001678 <trial_lempar_RR+0x388>
			 // USER CODE BEGIN ANGKOR 1
			 com_blt.isAng1 = 0;
 8001642:	4b53      	ldr	r3, [pc, #332]	; (8001790 <trial_lempar_RR+0x4a0>)
 8001644:	2200      	movs	r2, #0
 8001646:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			 blt_tx_buff[0]= 64; blt_tx_buff[1]= 0; blt_tx_buff[2]= 0; blt_tx_buff[3]= 0; blt_tx_buff[4]= 0;
 800164a:	4b53      	ldr	r3, [pc, #332]	; (8001798 <trial_lempar_RR+0x4a8>)
 800164c:	2240      	movs	r2, #64	; 0x40
 800164e:	701a      	strb	r2, [r3, #0]
 8001650:	4b51      	ldr	r3, [pc, #324]	; (8001798 <trial_lempar_RR+0x4a8>)
 8001652:	2200      	movs	r2, #0
 8001654:	705a      	strb	r2, [r3, #1]
 8001656:	4b50      	ldr	r3, [pc, #320]	; (8001798 <trial_lempar_RR+0x4a8>)
 8001658:	2200      	movs	r2, #0
 800165a:	709a      	strb	r2, [r3, #2]
 800165c:	4b4e      	ldr	r3, [pc, #312]	; (8001798 <trial_lempar_RR+0x4a8>)
 800165e:	2200      	movs	r2, #0
 8001660:	70da      	strb	r2, [r3, #3]
 8001662:	4b4d      	ldr	r3, [pc, #308]	; (8001798 <trial_lempar_RR+0x4a8>)
 8001664:	2200      	movs	r2, #0
 8001666:	711a      	strb	r2, [r3, #4]
			 HAL_UART_Transmit_IT(&huart4, blt_tx_buff, BUFFER_LEN); //mengirimkan state ke android
 8001668:	4b4c      	ldr	r3, [pc, #304]	; (800179c <trial_lempar_RR+0x4ac>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	b29b      	uxth	r3, r3
 800166e:	461a      	mov	r2, r3
 8001670:	4949      	ldr	r1, [pc, #292]	; (8001798 <trial_lempar_RR+0x4a8>)
 8001672:	484b      	ldr	r0, [pc, #300]	; (80017a0 <trial_lempar_RR+0x4b0>)
 8001674:	f00f fb7c 	bl	8010d70 <HAL_UART_Transmit_IT>
		 }
		 if(com_blt.isAng2){
 8001678:	4b45      	ldr	r3, [pc, #276]	; (8001790 <trial_lempar_RR+0x4a0>)
 800167a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800167e:	2b00      	cmp	r3, #0
 8001680:	d01a      	beq.n	80016b8 <trial_lempar_RR+0x3c8>
			 // USER CODE BEGIN ANGKOR 2
			 com_blt.isAng2 = 0;
 8001682:	4b43      	ldr	r3, [pc, #268]	; (8001790 <trial_lempar_RR+0x4a0>)
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			 blt_tx_buff[0]= 128; blt_tx_buff[1]= 0; blt_tx_buff[2]= 0; blt_tx_buff[3]= 0; blt_tx_buff[4]= 0;
 800168a:	4b43      	ldr	r3, [pc, #268]	; (8001798 <trial_lempar_RR+0x4a8>)
 800168c:	2280      	movs	r2, #128	; 0x80
 800168e:	701a      	strb	r2, [r3, #0]
 8001690:	4b41      	ldr	r3, [pc, #260]	; (8001798 <trial_lempar_RR+0x4a8>)
 8001692:	2200      	movs	r2, #0
 8001694:	705a      	strb	r2, [r3, #1]
 8001696:	4b40      	ldr	r3, [pc, #256]	; (8001798 <trial_lempar_RR+0x4a8>)
 8001698:	2200      	movs	r2, #0
 800169a:	709a      	strb	r2, [r3, #2]
 800169c:	4b3e      	ldr	r3, [pc, #248]	; (8001798 <trial_lempar_RR+0x4a8>)
 800169e:	2200      	movs	r2, #0
 80016a0:	70da      	strb	r2, [r3, #3]
 80016a2:	4b3d      	ldr	r3, [pc, #244]	; (8001798 <trial_lempar_RR+0x4a8>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	711a      	strb	r2, [r3, #4]
			 HAL_UART_Transmit_IT(&huart4, blt_tx_buff, BUFFER_LEN);
 80016a8:	4b3c      	ldr	r3, [pc, #240]	; (800179c <trial_lempar_RR+0x4ac>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	461a      	mov	r2, r3
 80016b0:	4939      	ldr	r1, [pc, #228]	; (8001798 <trial_lempar_RR+0x4a8>)
 80016b2:	483b      	ldr	r0, [pc, #236]	; (80017a0 <trial_lempar_RR+0x4b0>)
 80016b4:	f00f fb5c 	bl	8010d70 <HAL_UART_Transmit_IT>
		 }
		 if(com_blt.isAng3){
 80016b8:	4b35      	ldr	r3, [pc, #212]	; (8001790 <trial_lempar_RR+0x4a0>)
 80016ba:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d01a      	beq.n	80016f8 <trial_lempar_RR+0x408>
			 // USER CODE BEGIN ANGKOR 3
			 com_blt.isAng3 = 0;
 80016c2:	4b33      	ldr	r3, [pc, #204]	; (8001790 <trial_lempar_RR+0x4a0>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			 blt_tx_buff[0]= 0; blt_tx_buff[1]= 1; blt_tx_buff[2]= 0; blt_tx_buff[3]= 0; blt_tx_buff[4]= 0;
 80016ca:	4b33      	ldr	r3, [pc, #204]	; (8001798 <trial_lempar_RR+0x4a8>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	701a      	strb	r2, [r3, #0]
 80016d0:	4b31      	ldr	r3, [pc, #196]	; (8001798 <trial_lempar_RR+0x4a8>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	705a      	strb	r2, [r3, #1]
 80016d6:	4b30      	ldr	r3, [pc, #192]	; (8001798 <trial_lempar_RR+0x4a8>)
 80016d8:	2200      	movs	r2, #0
 80016da:	709a      	strb	r2, [r3, #2]
 80016dc:	4b2e      	ldr	r3, [pc, #184]	; (8001798 <trial_lempar_RR+0x4a8>)
 80016de:	2200      	movs	r2, #0
 80016e0:	70da      	strb	r2, [r3, #3]
 80016e2:	4b2d      	ldr	r3, [pc, #180]	; (8001798 <trial_lempar_RR+0x4a8>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	711a      	strb	r2, [r3, #4]
			 HAL_UART_Transmit_IT(&huart4, blt_tx_buff, BUFFER_LEN);
 80016e8:	4b2c      	ldr	r3, [pc, #176]	; (800179c <trial_lempar_RR+0x4ac>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	461a      	mov	r2, r3
 80016f0:	4929      	ldr	r1, [pc, #164]	; (8001798 <trial_lempar_RR+0x4a8>)
 80016f2:	482b      	ldr	r0, [pc, #172]	; (80017a0 <trial_lempar_RR+0x4b0>)
 80016f4:	f00f fb3c 	bl	8010d70 <HAL_UART_Transmit_IT>
		 }
		 if(com_blt.isAng4){
 80016f8:	4b25      	ldr	r3, [pc, #148]	; (8001790 <trial_lempar_RR+0x4a0>)
 80016fa:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d01a      	beq.n	8001738 <trial_lempar_RR+0x448>
			 // USER CODE BEGIN ANGKOR 4
			 com_blt.isAng4 = 0;
 8001702:	4b23      	ldr	r3, [pc, #140]	; (8001790 <trial_lempar_RR+0x4a0>)
 8001704:	2200      	movs	r2, #0
 8001706:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			 blt_tx_buff[0]= 0; blt_tx_buff[1]= 2; blt_tx_buff[2]= 0; blt_tx_buff[3]= 0; blt_tx_buff[4]= 0;
 800170a:	4b23      	ldr	r3, [pc, #140]	; (8001798 <trial_lempar_RR+0x4a8>)
 800170c:	2200      	movs	r2, #0
 800170e:	701a      	strb	r2, [r3, #0]
 8001710:	4b21      	ldr	r3, [pc, #132]	; (8001798 <trial_lempar_RR+0x4a8>)
 8001712:	2202      	movs	r2, #2
 8001714:	705a      	strb	r2, [r3, #1]
 8001716:	4b20      	ldr	r3, [pc, #128]	; (8001798 <trial_lempar_RR+0x4a8>)
 8001718:	2200      	movs	r2, #0
 800171a:	709a      	strb	r2, [r3, #2]
 800171c:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <trial_lempar_RR+0x4a8>)
 800171e:	2200      	movs	r2, #0
 8001720:	70da      	strb	r2, [r3, #3]
 8001722:	4b1d      	ldr	r3, [pc, #116]	; (8001798 <trial_lempar_RR+0x4a8>)
 8001724:	2200      	movs	r2, #0
 8001726:	711a      	strb	r2, [r3, #4]
			 HAL_UART_Transmit_IT(&huart4, blt_tx_buff, BUFFER_LEN);
 8001728:	4b1c      	ldr	r3, [pc, #112]	; (800179c <trial_lempar_RR+0x4ac>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	b29b      	uxth	r3, r3
 800172e:	461a      	mov	r2, r3
 8001730:	4919      	ldr	r1, [pc, #100]	; (8001798 <trial_lempar_RR+0x4a8>)
 8001732:	481b      	ldr	r0, [pc, #108]	; (80017a0 <trial_lempar_RR+0x4b0>)
 8001734:	f00f fb1c 	bl	8010d70 <HAL_UART_Transmit_IT>
		 }
		 if(com_blt.isAng5){
 8001738:	4b15      	ldr	r3, [pc, #84]	; (8001790 <trial_lempar_RR+0x4a0>)
 800173a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800173e:	2b00      	cmp	r3, #0
 8001740:	d030      	beq.n	80017a4 <trial_lempar_RR+0x4b4>
			 // USER CODE BEGIN ANGKOR 5
			 com_blt.isAng5 = 0;
 8001742:	4b13      	ldr	r3, [pc, #76]	; (8001790 <trial_lempar_RR+0x4a0>)
 8001744:	2200      	movs	r2, #0
 8001746:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			 blt_tx_buff[0]= 0; blt_tx_buff[1]= 4; blt_tx_buff[2]= 0; blt_tx_buff[3]= 0; blt_tx_buff[4]= 0;
 800174a:	4b13      	ldr	r3, [pc, #76]	; (8001798 <trial_lempar_RR+0x4a8>)
 800174c:	2200      	movs	r2, #0
 800174e:	701a      	strb	r2, [r3, #0]
 8001750:	4b11      	ldr	r3, [pc, #68]	; (8001798 <trial_lempar_RR+0x4a8>)
 8001752:	2204      	movs	r2, #4
 8001754:	705a      	strb	r2, [r3, #1]
 8001756:	4b10      	ldr	r3, [pc, #64]	; (8001798 <trial_lempar_RR+0x4a8>)
 8001758:	2200      	movs	r2, #0
 800175a:	709a      	strb	r2, [r3, #2]
 800175c:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <trial_lempar_RR+0x4a8>)
 800175e:	2200      	movs	r2, #0
 8001760:	70da      	strb	r2, [r3, #3]
 8001762:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <trial_lempar_RR+0x4a8>)
 8001764:	2200      	movs	r2, #0
 8001766:	711a      	strb	r2, [r3, #4]
			 HAL_UART_Transmit_IT(&huart4, blt_tx_buff, BUFFER_LEN);
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <trial_lempar_RR+0x4ac>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	b29b      	uxth	r3, r3
 800176e:	461a      	mov	r2, r3
 8001770:	4909      	ldr	r1, [pc, #36]	; (8001798 <trial_lempar_RR+0x4a8>)
 8001772:	480b      	ldr	r0, [pc, #44]	; (80017a0 <trial_lempar_RR+0x4b0>)
 8001774:	f00f fafc 	bl	8010d70 <HAL_UART_Transmit_IT>
 8001778:	e014      	b.n	80017a4 <trial_lempar_RR+0x4b4>
 800177a:	bf00      	nop
 800177c:	f3af 8000 	nop.w
 8001780:	00000000 	.word	0x00000000
 8001784:	405e0000 	.word	0x405e0000
 8001788:	20000998 	.word	0x20000998
 800178c:	20000368 	.word	0x20000368
 8001790:	20000914 	.word	0x20000914
 8001794:	20001048 	.word	0x20001048
 8001798:	20000ff0 	.word	0x20000ff0
 800179c:	20000001 	.word	0x20000001
 80017a0:	2000080c 	.word	0x2000080c
//			can_set_thrower (_THROWER1, com_blt.rthrower_speed, com_blt.rthrower_speed*0.5);
//		}
//
//	}

	if(com_blt.rthrower_speed != lst_speed){
 80017a4:	4b9c      	ldr	r3, [pc, #624]	; (8001a18 <trial_lempar_RR+0x728>)
 80017a6:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 80017aa:	4b9c      	ldr	r3, [pc, #624]	; (8001a1c <trial_lempar_RR+0x72c>)
 80017ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d064      	beq.n	800187e <trial_lempar_RR+0x58e>
		lst_speed = com_blt.rthrower_speed;
 80017b4:	4b98      	ldr	r3, [pc, #608]	; (8001a18 <trial_lempar_RR+0x728>)
 80017b6:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 80017ba:	4b98      	ldr	r3, [pc, #608]	; (8001a1c <trial_lempar_RR+0x72c>)
 80017bc:	801a      	strh	r2, [r3, #0]

		// Mengirim kecepatan Real ketika speed diubah
		blt_tx_buff[0]= 0; blt_tx_buff[1]= 128; blt_tx_buff[2]= 0;
 80017be:	4b98      	ldr	r3, [pc, #608]	; (8001a20 <trial_lempar_RR+0x730>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	701a      	strb	r2, [r3, #0]
 80017c4:	4b96      	ldr	r3, [pc, #600]	; (8001a20 <trial_lempar_RR+0x730>)
 80017c6:	2280      	movs	r2, #128	; 0x80
 80017c8:	705a      	strb	r2, [r3, #1]
 80017ca:	4b95      	ldr	r3, [pc, #596]	; (8001a20 <trial_lempar_RR+0x730>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	709a      	strb	r2, [r3, #2]
		blt_tx_buff[3]= (com_blt.rthrower_speed) & 0xFF; blt_tx_buff[4]= ((com_blt.rthrower_speed)>>8 )& 0xFF;
 80017d0:	4b91      	ldr	r3, [pc, #580]	; (8001a18 <trial_lempar_RR+0x728>)
 80017d2:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	4b91      	ldr	r3, [pc, #580]	; (8001a20 <trial_lempar_RR+0x730>)
 80017da:	70da      	strb	r2, [r3, #3]
 80017dc:	4b8e      	ldr	r3, [pc, #568]	; (8001a18 <trial_lempar_RR+0x728>)
 80017de:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80017e2:	121b      	asrs	r3, r3, #8
 80017e4:	b21b      	sxth	r3, r3
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	4b8d      	ldr	r3, [pc, #564]	; (8001a20 <trial_lempar_RR+0x730>)
 80017ea:	711a      	strb	r2, [r3, #4]
		HAL_UART_Transmit_IT(&huart4, blt_tx_buff, BUFFER_LEN);
 80017ec:	4b8d      	ldr	r3, [pc, #564]	; (8001a24 <trial_lempar_RR+0x734>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	461a      	mov	r2, r3
 80017f4:	498a      	ldr	r1, [pc, #552]	; (8001a20 <trial_lempar_RR+0x730>)
 80017f6:	488c      	ldr	r0, [pc, #560]	; (8001a28 <trial_lempar_RR+0x738>)
 80017f8:	f00f faba 	bl	8010d70 <HAL_UART_Transmit_IT>

		// Mengirim jarak ketika speed berubah
		blt_tx_buff[0]= 0; blt_tx_buff[1]= 64; blt_tx_buff[2]= 0;
 80017fc:	4b88      	ldr	r3, [pc, #544]	; (8001a20 <trial_lempar_RR+0x730>)
 80017fe:	2200      	movs	r2, #0
 8001800:	701a      	strb	r2, [r3, #0]
 8001802:	4b87      	ldr	r3, [pc, #540]	; (8001a20 <trial_lempar_RR+0x730>)
 8001804:	2240      	movs	r2, #64	; 0x40
 8001806:	705a      	strb	r2, [r3, #1]
 8001808:	4b85      	ldr	r3, [pc, #532]	; (8001a20 <trial_lempar_RR+0x730>)
 800180a:	2200      	movs	r2, #0
 800180c:	709a      	strb	r2, [r3, #2]
		blt_tx_buff[3]= (int)actual_distance & 0xFF; blt_tx_buff[4]= ((int)actual_distance >> 8) & 0xFF;
 800180e:	4b87      	ldr	r3, [pc, #540]	; (8001a2c <trial_lempar_RR+0x73c>)
 8001810:	ed93 7b00 	vldr	d7, [r3]
 8001814:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001818:	edc7 7a01 	vstr	s15, [r7, #4]
 800181c:	793a      	ldrb	r2, [r7, #4]
 800181e:	4b80      	ldr	r3, [pc, #512]	; (8001a20 <trial_lempar_RR+0x730>)
 8001820:	70da      	strb	r2, [r3, #3]
 8001822:	4b82      	ldr	r3, [pc, #520]	; (8001a2c <trial_lempar_RR+0x73c>)
 8001824:	ed93 7b00 	vldr	d7, [r3]
 8001828:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800182c:	ee17 3a90 	vmov	r3, s15
 8001830:	121b      	asrs	r3, r3, #8
 8001832:	b2da      	uxtb	r2, r3
 8001834:	4b7a      	ldr	r3, [pc, #488]	; (8001a20 <trial_lempar_RR+0x730>)
 8001836:	711a      	strb	r2, [r3, #4]
		HAL_UART_Transmit_IT(&huart4, blt_tx_buff, BUFFER_LEN);
 8001838:	4b7a      	ldr	r3, [pc, #488]	; (8001a24 <trial_lempar_RR+0x734>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	b29b      	uxth	r3, r3
 800183e:	461a      	mov	r2, r3
 8001840:	4977      	ldr	r1, [pc, #476]	; (8001a20 <trial_lempar_RR+0x730>)
 8001842:	4879      	ldr	r0, [pc, #484]	; (8001a28 <trial_lempar_RR+0x738>)
 8001844:	f00f fa94 	bl	8010d70 <HAL_UART_Transmit_IT>

		can_wait_transmit(&hfdcan1);
 8001848:	4879      	ldr	r0, [pc, #484]	; (8001a30 <trial_lempar_RR+0x740>)
 800184a:	f7ff fa17 	bl	8000c7c <can_wait_transmit>
		can_set_thrower (_THROWER1, com_blt.rthrower_speed*0.75, com_blt.rthrower_speed);
 800184e:	4b72      	ldr	r3, [pc, #456]	; (8001a18 <trial_lempar_RR+0x728>)
 8001850:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001854:	ee07 3a90 	vmov	s15, r3
 8001858:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800185c:	eeb6 6b08 	vmov.f64	d6, #104	; 0x3f400000  0.750
 8001860:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001864:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001868:	ee17 3a90 	vmov	r3, s15
 800186c:	b29b      	uxth	r3, r3
 800186e:	4a6a      	ldr	r2, [pc, #424]	; (8001a18 <trial_lempar_RR+0x728>)
 8001870:	f9b2 2022 	ldrsh.w	r2, [r2, #34]	; 0x22
 8001874:	b292      	uxth	r2, r2
 8001876:	4619      	mov	r1, r3
 8001878:	2000      	movs	r0, #0
 800187a:	f7ff fabb 	bl	8000df4 <can_set_thrower>
	}

	if (RR_lempar)
 800187e:	4b6d      	ldr	r3, [pc, #436]	; (8001a34 <trial_lempar_RR+0x744>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 8081 	beq.w	800198a <trial_lempar_RR+0x69a>
	{
		if (RR_ring_ready != 0)
 8001888:	4b6b      	ldr	r3, [pc, #428]	; (8001a38 <trial_lempar_RR+0x748>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d079      	beq.n	8001984 <trial_lempar_RR+0x694>
		{
			manual.vx = 0;
 8001890:	496a      	ldr	r1, [pc, #424]	; (8001a3c <trial_lempar_RR+0x74c>)
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	f04f 0300 	mov.w	r3, #0
 800189a:	e9c1 2300 	strd	r2, r3, [r1]
			manual.vy = 0;
 800189e:	4967      	ldr	r1, [pc, #412]	; (8001a3c <trial_lempar_RR+0x74c>)
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	f04f 0300 	mov.w	r3, #0
 80018a8:	e9c1 2302 	strd	r2, r3, [r1, #8]
			manual.v_yaw = 0;
 80018ac:	4963      	ldr	r1, [pc, #396]	; (8001a3c <trial_lempar_RR+0x74c>)
 80018ae:	f04f 0200 	mov.w	r2, #0
 80018b2:	f04f 0300 	mov.w	r3, #0
 80018b6:	e9c1 2304 	strd	r2, r3, [r1, #16]
			wheels_control_send_speed ();
 80018ba:	f7ff f9fb 	bl	8000cb4 <wheels_control_send_speed>
			can_wait_transmit(&hfdcan2);
 80018be:	4860      	ldr	r0, [pc, #384]	; (8001a40 <trial_lempar_RR+0x750>)
 80018c0:	f7ff f9dc 	bl	8000c7c <can_wait_transmit>
			can_lock_move();
 80018c4:	f7ff fa6e 	bl	8000da4 <can_lock_move>
			set_servo (&servo7, 45);
 80018c8:	ed9f 0b47 	vldr	d0, [pc, #284]	; 80019e8 <trial_lempar_RR+0x6f8>
 80018cc:	485d      	ldr	r0, [pc, #372]	; (8001a44 <trial_lempar_RR+0x754>)
 80018ce:	f7ff fc0f 	bl	80010f0 <set_servo>
			HAL_Delay(300);
 80018d2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80018d6:	f002 ff69 	bl	80047ac <HAL_Delay>
			set_servo (&servo7, 16);
 80018da:	eeb3 0b00 	vmov.f64	d0, #48	; 0x41800000  16.0
 80018de:	4859      	ldr	r0, [pc, #356]	; (8001a44 <trial_lempar_RR+0x754>)
 80018e0:	f7ff fc06 	bl	80010f0 <set_servo>
			RR_ring_ready--;
 80018e4:	4b54      	ldr	r3, [pc, #336]	; (8001a38 <trial_lempar_RR+0x748>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	3b01      	subs	r3, #1
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	4b52      	ldr	r3, [pc, #328]	; (8001a38 <trial_lempar_RR+0x748>)
 80018ee:	701a      	strb	r2, [r3, #0]
			if (RR_ring_ready == 1)
 80018f0:	4b51      	ldr	r3, [pc, #324]	; (8001a38 <trial_lempar_RR+0x748>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d135      	bne.n	8001964 <trial_lempar_RR+0x674>
			{
				set_servo (&servo6, 133);
 80018f8:	ed9f 0b3d 	vldr	d0, [pc, #244]	; 80019f0 <trial_lempar_RR+0x700>
 80018fc:	4852      	ldr	r0, [pc, #328]	; (8001a48 <trial_lempar_RR+0x758>)
 80018fe:	f7ff fbf7 	bl	80010f0 <set_servo>
				HAL_Delay(100);
 8001902:	2064      	movs	r0, #100	; 0x64
 8001904:	f002 ff52 	bl	80047ac <HAL_Delay>
				set_gripper (_GRIPPER1, -95, _GRIP);
 8001908:	2100      	movs	r1, #0
 800190a:	ed9f 0b3b 	vldr	d0, [pc, #236]	; 80019f8 <trial_lempar_RR+0x708>
 800190e:	2000      	movs	r0, #0
 8001910:	f7ff fc4a 	bl	80011a8 <set_gripper>
				HAL_Delay(300);
 8001914:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001918:	f002 ff48 	bl	80047ac <HAL_Delay>
				set_gripper (_GRIPPER1, -95, _RELEASE);
 800191c:	2101      	movs	r1, #1
 800191e:	ed9f 0b36 	vldr	d0, [pc, #216]	; 80019f8 <trial_lempar_RR+0x708>
 8001922:	2000      	movs	r0, #0
 8001924:	f7ff fc40 	bl	80011a8 <set_gripper>
				HAL_Delay(500);
 8001928:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800192c:	f002 ff3e 	bl	80047ac <HAL_Delay>
				set_gripper (_GRIPPER1, -45, _RELEASE);
 8001930:	2101      	movs	r1, #1
 8001932:	ed9f 0b33 	vldr	d0, [pc, #204]	; 8001a00 <trial_lempar_RR+0x710>
 8001936:	2000      	movs	r0, #0
 8001938:	f7ff fc36 	bl	80011a8 <set_gripper>
				HAL_Delay(100);
 800193c:	2064      	movs	r0, #100	; 0x64
 800193e:	f002 ff35 	bl	80047ac <HAL_Delay>
				can_wait_transmit(&hfdcan1);
 8001942:	483b      	ldr	r0, [pc, #236]	; (8001a30 <trial_lempar_RR+0x740>)
 8001944:	f7ff f99a 	bl	8000c7c <can_wait_transmit>
				can_set_rotator (_STEER_P, 268);
 8001948:	ed9f 0b2f 	vldr	d0, [pc, #188]	; 8001a08 <trial_lempar_RR+0x718>
 800194c:	20a2      	movs	r0, #162	; 0xa2
 800194e:	f7ff fa9b 	bl	8000e88 <can_set_rotator>
				HAL_Delay(500);
 8001952:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001956:	f002 ff29 	bl	80047ac <HAL_Delay>
				set_servo (&servo6, 120);
 800195a:	ed9f 0b2d 	vldr	d0, [pc, #180]	; 8001a10 <trial_lempar_RR+0x720>
 800195e:	483a      	ldr	r0, [pc, #232]	; (8001a48 <trial_lempar_RR+0x758>)
 8001960:	f7ff fbc6 	bl	80010f0 <set_servo>
			}
			if (RR_ring_ready == 0)
 8001964:	4b34      	ldr	r3, [pc, #208]	; (8001a38 <trial_lempar_RR+0x748>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d10b      	bne.n	8001984 <trial_lempar_RR+0x694>
			{
				HAL_Delay(500);
 800196c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001970:	f002 ff1c 	bl	80047ac <HAL_Delay>
				can_wait_transmit(&hfdcan1);
 8001974:	482e      	ldr	r0, [pc, #184]	; (8001a30 <trial_lempar_RR+0x740>)
 8001976:	f7ff f981 	bl	8000c7c <can_wait_transmit>
				can_set_thrower (_THROWER1, 0, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	2100      	movs	r1, #0
 800197e:	2000      	movs	r0, #0
 8001980:	f7ff fa38 	bl	8000df4 <can_set_thrower>
			}
		}
		RR_lempar = 0;
 8001984:	4b2b      	ldr	r3, [pc, #172]	; (8001a34 <trial_lempar_RR+0x744>)
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GetTick() - bz_t < 200)
 800198a:	f002 ff03 	bl	8004794 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	4b2e      	ldr	r3, [pc, #184]	; (8001a4c <trial_lempar_RR+0x75c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2bc7      	cmp	r3, #199	; 0xc7
 8001998:	d803      	bhi.n	80019a2 <trial_lempar_RR+0x6b2>
	{
		BUZZER_GPIO_Port->BSRR = BUZZER_Pin;
 800199a:	4b2d      	ldr	r3, [pc, #180]	; (8001a50 <trial_lempar_RR+0x760>)
 800199c:	2280      	movs	r2, #128	; 0x80
 800199e:	619a      	str	r2, [r3, #24]
 80019a0:	e003      	b.n	80019aa <trial_lempar_RR+0x6ba>
	}
	else
	{
		BUZZER_GPIO_Port->BSRR = BUZZER_Pin<<16;
 80019a2:	4b2b      	ldr	r3, [pc, #172]	; (8001a50 <trial_lempar_RR+0x760>)
 80019a4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80019a8:	619a      	str	r2, [r3, #24]
	}
	if (RR_tail)
 80019aa:	4b2a      	ldr	r3, [pc, #168]	; (8001a54 <trial_lempar_RR+0x764>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d015      	beq.n	80019de <trial_lempar_RR+0x6ee>
	{
		 if (!RR_grip_prepare) {
 80019b2:	4b29      	ldr	r3, [pc, #164]	; (8001a58 <trial_lempar_RR+0x768>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	f083 0301 	eor.w	r3, r3, #1
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d00e      	beq.n	80019de <trial_lempar_RR+0x6ee>
			 RR_grip_prepare = 1;
 80019c0:	4b25      	ldr	r3, [pc, #148]	; (8001a58 <trial_lempar_RR+0x768>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	701a      	strb	r2, [r3, #0]
			 HAL_Delay(500);
 80019c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019ca:	f002 feef 	bl	80047ac <HAL_Delay>
			can_wait_transmit(&hfdcan1);
 80019ce:	4818      	ldr	r0, [pc, #96]	; (8001a30 <trial_lempar_RR+0x740>)
 80019d0:	f7ff f954 	bl	8000c7c <can_wait_transmit>
			 can_set_rotator (_STEER_P, 268);
 80019d4:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8001a08 <trial_lempar_RR+0x718>
 80019d8:	20a2      	movs	r0, #162	; 0xa2
 80019da:	f7ff fa55 	bl	8000e88 <can_set_rotator>
		 }
	}
}
 80019de:	bf00      	nop
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	00000000 	.word	0x00000000
 80019ec:	40468000 	.word	0x40468000
 80019f0:	00000000 	.word	0x00000000
 80019f4:	4060a000 	.word	0x4060a000
 80019f8:	00000000 	.word	0x00000000
 80019fc:	c057c000 	.word	0xc057c000
 8001a00:	00000000 	.word	0x00000000
 8001a04:	c0468000 	.word	0xc0468000
 8001a08:	00000000 	.word	0x00000000
 8001a0c:	4070c000 	.word	0x4070c000
 8001a10:	00000000 	.word	0x00000000
 8001a14:	405e0000 	.word	0x405e0000
 8001a18:	20000914 	.word	0x20000914
 8001a1c:	20000fe4 	.word	0x20000fe4
 8001a20:	20000ff0 	.word	0x20000ff0
 8001a24:	20000001 	.word	0x20000001
 8001a28:	2000080c 	.word	0x2000080c
 8001a2c:	20001040 	.word	0x20001040
 8001a30:	20000368 	.word	0x20000368
 8001a34:	20001049 	.word	0x20001049
 8001a38:	2000104d 	.word	0x2000104d
 8001a3c:	200009c8 	.word	0x200009c8
 8001a40:	20000408 	.word	0x20000408
 8001a44:	200009a8 	.word	0x200009a8
 8001a48:	20000998 	.word	0x20000998
 8001a4c:	20000fe0 	.word	0x20000fe0
 8001a50:	58020c00 	.word	0x58020c00
 8001a54:	2000104a 	.word	0x2000104a
 8001a58:	2000104b 	.word	0x2000104b

08001a5c <com_bluetooth_init>:
		  HAL_Delay(100);
		  can_set_rotator(_STEER_R, angle_pelempar[throw_order]);
	  }
}

void com_bluetooth_init(){ // Sulthon
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
	com_blt.isAng1 = 0;
 8001a60:	4b1b      	ldr	r3, [pc, #108]	; (8001ad0 <com_bluetooth_init+0x74>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	com_blt.isAng2 = 0;
 8001a68:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <com_bluetooth_init+0x74>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	com_blt.isAng3 = 0;
 8001a70:	4b17      	ldr	r3, [pc, #92]	; (8001ad0 <com_bluetooth_init+0x74>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	com_blt.isAng4 = 0;
 8001a78:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <com_bluetooth_init+0x74>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	com_blt.isAng5 = 0;
 8001a80:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <com_bluetooth_init+0x74>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	com_blt.isDo1 = 0;
 8001a88:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <com_bluetooth_init+0x74>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	com_blt.isDo2 = 0;
 8001a90:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <com_bluetooth_init+0x74>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	com_blt.isDo3 = 0;
 8001a98:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <com_bluetooth_init+0x74>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	com_blt.isEn1 = 0;
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <com_bluetooth_init+0x74>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	com_blt.isEn2 = 0;
 8001aa8:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <com_bluetooth_init+0x74>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	com_blt.isEn3 = 0;
 8001ab0:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <com_bluetooth_init+0x74>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	com_blt.lthrower_speed = 0;
 8001ab8:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <com_bluetooth_init+0x74>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	841a      	strh	r2, [r3, #32]
	com_blt. rthrower_speed = 1700;
 8001abe:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <com_bluetooth_init+0x74>)
 8001ac0:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8001ac4:	845a      	strh	r2, [r3, #34]	; 0x22
}
 8001ac6:	bf00      	nop
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	20000914 	.word	0x20000914

08001ad4 <HAL_TIM_PeriodElapsedCallback>:

/******************************************************************************************/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ae4:	d123      	bne.n	8001b2e <HAL_TIM_PeriodElapsedCallback+0x5a>
	{
		TIM2->CCR1 = servo1.pwm;
 8001ae6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001aea:	4b29      	ldr	r3, [pc, #164]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	6353      	str	r3, [r2, #52]	; 0x34
		TIM2->CCR2 = servo2.pwm;
 8001af0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001af4:	4b27      	ldr	r3, [pc, #156]	; (8001b94 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	6393      	str	r3, [r2, #56]	; 0x38
		TIM2->CCR3 = servo3.pwm;
 8001afa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001afe:	4b26      	ldr	r3, [pc, #152]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	63d3      	str	r3, [r2, #60]	; 0x3c
		TIM2->CCR4 = servo4.pwm;
 8001b04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b08:	4b24      	ldr	r3, [pc, #144]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	6413      	str	r3, [r2, #64]	; 0x40
		SERVO0_GPIO_Port->BSRR = SERVO0_Pin<<16;
 8001b0e:	4b24      	ldr	r3, [pc, #144]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001b10:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b14:	619a      	str	r2, [r3, #24]
		SERVO1_GPIO_Port->BSRR = SERVO1_Pin<<16;
 8001b16:	4b22      	ldr	r3, [pc, #136]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001b18:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b1c:	619a      	str	r2, [r3, #24]
		SERVO2_GPIO_Port->BSRR = SERVO2_Pin<<16;
 8001b1e:	4b20      	ldr	r3, [pc, #128]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001b20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b24:	619a      	str	r2, [r3, #24]
		SERVO3_GPIO_Port->BSRR = SERVO3_Pin<<16;
 8001b26:	4b1e      	ldr	r3, [pc, #120]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001b28:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b2c:	619a      	str	r2, [r3, #24]
	}
	if (htim->Instance == TIM3)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a1c      	ldr	r2, [pc, #112]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d10f      	bne.n	8001b58 <HAL_TIM_PeriodElapsedCallback+0x84>
	{
		TIM3->CCR1 = servo5.pwm;
 8001b38:	4a1a      	ldr	r2, [pc, #104]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001b3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	6353      	str	r3, [r2, #52]	; 0x34
		TIM3->CCR2 = servo6.pwm;
 8001b40:	4a18      	ldr	r2, [pc, #96]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001b42:	4b1a      	ldr	r3, [pc, #104]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	6393      	str	r3, [r2, #56]	; 0x38
		SERVO4_GPIO_Port->BSRR = SERVO4_Pin<<16;
 8001b48:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001b4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b4e:	619a      	str	r2, [r3, #24]
		SERVO5_GPIO_Port->BSRR = SERVO5_Pin<<16;
 8001b50:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001b52:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001b56:	619a      	str	r2, [r3, #24]
	}
	if (htim->Instance == TIM4)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a14      	ldr	r2, [pc, #80]	; (8001bb0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d10f      	bne.n	8001b82 <HAL_TIM_PeriodElapsedCallback+0xae>
	{
		TIM4->CCR1 = servo7.pwm;
 8001b62:	4a13      	ldr	r2, [pc, #76]	; (8001bb0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001b64:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	6353      	str	r3, [r2, #52]	; 0x34
		TIM4->CCR2 = servo8.pwm;
 8001b6a:	4a11      	ldr	r2, [pc, #68]	; (8001bb0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001b6c:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	6393      	str	r3, [r2, #56]	; 0x38
		SERVO6_GPIO_Port->BSRR = SERVO6_Pin<<16;
 8001b72:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001b74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b78:	619a      	str	r2, [r3, #24]
		SERVO7_GPIO_Port->BSRR = SERVO7_Pin<<16;
 8001b7a:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001b7c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001b80:	619a      	str	r2, [r3, #24]
	}
	if (htim->Instance == TIM7)
	{
//		trapezoid_motion (0.4, 0.4);
	}
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	20000948 	.word	0x20000948
 8001b94:	20000958 	.word	0x20000958
 8001b98:	20000968 	.word	0x20000968
 8001b9c:	20000978 	.word	0x20000978
 8001ba0:	58021000 	.word	0x58021000
 8001ba4:	40000400 	.word	0x40000400
 8001ba8:	20000988 	.word	0x20000988
 8001bac:	20000998 	.word	0x20000998
 8001bb0:	40000800 	.word	0x40000800
 8001bb4:	200009a8 	.word	0x200009a8
 8001bb8:	200009b8 	.word	0x200009b8
 8001bbc:	58020400 	.word	0x58020400
 8001bc0:	58020000 	.word	0x58020000

08001bc4 <HAL_TIM_OC_DelayElapsedCallback>:

/******************************************************************************************/

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bd4:	d11f      	bne.n	8001c16 <HAL_TIM_OC_DelayElapsedCallback+0x52>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) SERVO0_GPIO_Port->BSRR = SERVO0_Pin;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	7f1b      	ldrb	r3, [r3, #28]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d103      	bne.n	8001be6 <HAL_TIM_OC_DelayElapsedCallback+0x22>
 8001bde:	4b26      	ldr	r3, [pc, #152]	; (8001c78 <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
 8001be0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001be4:	619a      	str	r2, [r3, #24]
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) SERVO1_GPIO_Port->BSRR = SERVO1_Pin;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	7f1b      	ldrb	r3, [r3, #28]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d103      	bne.n	8001bf6 <HAL_TIM_OC_DelayElapsedCallback+0x32>
 8001bee:	4b22      	ldr	r3, [pc, #136]	; (8001c78 <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
 8001bf0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bf4:	619a      	str	r2, [r3, #24]
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) SERVO2_GPIO_Port->BSRR = SERVO2_Pin;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	7f1b      	ldrb	r3, [r3, #28]
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	d103      	bne.n	8001c06 <HAL_TIM_OC_DelayElapsedCallback+0x42>
 8001bfe:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
 8001c00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c04:	619a      	str	r2, [r3, #24]
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) SERVO3_GPIO_Port->BSRR = SERVO3_Pin;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	7f1b      	ldrb	r3, [r3, #28]
 8001c0a:	2b08      	cmp	r3, #8
 8001c0c:	d103      	bne.n	8001c16 <HAL_TIM_OC_DelayElapsedCallback+0x52>
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	; (8001c78 <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
 8001c10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c14:	619a      	str	r2, [r3, #24]
	}
	if (htim->Instance == TIM3)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a18      	ldr	r2, [pc, #96]	; (8001c7c <HAL_TIM_OC_DelayElapsedCallback+0xb8>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d10f      	bne.n	8001c40 <HAL_TIM_OC_DelayElapsedCallback+0x7c>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) SERVO4_GPIO_Port->BSRR = SERVO4_Pin;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	7f1b      	ldrb	r3, [r3, #28]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d103      	bne.n	8001c30 <HAL_TIM_OC_DelayElapsedCallback+0x6c>
 8001c28:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
 8001c2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c2e:	619a      	str	r2, [r3, #24]
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) SERVO5_GPIO_Port->BSRR = SERVO5_Pin;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	7f1b      	ldrb	r3, [r3, #28]
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d103      	bne.n	8001c40 <HAL_TIM_OC_DelayElapsedCallback+0x7c>
 8001c38:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
 8001c3a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c3e:	619a      	str	r2, [r3, #24]
	}
	if (htim->Instance == TIM4)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a0e      	ldr	r2, [pc, #56]	; (8001c80 <HAL_TIM_OC_DelayElapsedCallback+0xbc>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d10f      	bne.n	8001c6a <HAL_TIM_OC_DelayElapsedCallback+0xa6>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) SERVO6_GPIO_Port->BSRR = SERVO6_Pin;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	7f1b      	ldrb	r3, [r3, #28]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d103      	bne.n	8001c5a <HAL_TIM_OC_DelayElapsedCallback+0x96>
 8001c52:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <HAL_TIM_OC_DelayElapsedCallback+0xc0>)
 8001c54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c58:	619a      	str	r2, [r3, #24]
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) SERVO7_GPIO_Port->BSRR = SERVO7_Pin;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	7f1b      	ldrb	r3, [r3, #28]
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d103      	bne.n	8001c6a <HAL_TIM_OC_DelayElapsedCallback+0xa6>
 8001c62:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <HAL_TIM_OC_DelayElapsedCallback+0xc4>)
 8001c64:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c68:	619a      	str	r2, [r3, #24]
	}
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	58021000 	.word	0x58021000
 8001c7c:	40000400 	.word	0x40000400
 8001c80:	40000800 	.word	0x40000800
 8001c84:	58020400 	.word	0x58020400
 8001c88:	58020000 	.word	0x58020000
 8001c8c:	00000000 	.word	0x00000000

08001c90 <HAL_UART_RxCpltCallback>:

/******************************************************************************************/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
	//bluetooth--------------------------------------------------------
		if (huart->Instance == UART4) // Sulthon
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a70      	ldr	r2, [pc, #448]	; (8001e60 <HAL_UART_RxCpltCallback+0x1d0>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	f040 8600 	bne.w	80028a4 <HAL_UART_RxCpltCallback+0xc14>
		{
			// Jika Berasal dari keydown event
			if((blt_rx_buff[0]&3)==0){
 8001ca4:	4b6f      	ldr	r3, [pc, #444]	; (8001e64 <HAL_UART_RxCpltCallback+0x1d4>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	f003 0303 	and.w	r3, r3, #3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f040 8105 	bne.w	8001ebc <HAL_UART_RxCpltCallback+0x22c>
			 if(blt_rx_buff[1]==1){
 8001cb2:	4b6c      	ldr	r3, [pc, #432]	; (8001e64 <HAL_UART_RxCpltCallback+0x1d4>)
 8001cb4:	785b      	ldrb	r3, [r3, #1]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d114      	bne.n	8001ce4 <HAL_UART_RxCpltCallback+0x54>
				 // Button A
				 if(RR_tailgrip){
 8001cba:	4b6b      	ldr	r3, [pc, #428]	; (8001e68 <HAL_UART_RxCpltCallback+0x1d8>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d008      	beq.n	8001cd4 <HAL_UART_RxCpltCallback+0x44>
					 RR_tailgrip = 0;
 8001cc2:	4b69      	ldr	r3, [pc, #420]	; (8001e68 <HAL_UART_RxCpltCallback+0x1d8>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	701a      	strb	r2, [r3, #0]
					 set_servo(&servo6, 120);
 8001cc8:	ed9f 0b5b 	vldr	d0, [pc, #364]	; 8001e38 <HAL_UART_RxCpltCallback+0x1a8>
 8001ccc:	4867      	ldr	r0, [pc, #412]	; (8001e6c <HAL_UART_RxCpltCallback+0x1dc>)
 8001cce:	f7ff fa0f 	bl	80010f0 <set_servo>
 8001cd2:	e007      	b.n	8001ce4 <HAL_UART_RxCpltCallback+0x54>
				 }
				 else{
					 RR_tailgrip = 1;
 8001cd4:	4b64      	ldr	r3, [pc, #400]	; (8001e68 <HAL_UART_RxCpltCallback+0x1d8>)
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	701a      	strb	r2, [r3, #0]
					 set_servo(&servo6, 167);
 8001cda:	ed9f 0b59 	vldr	d0, [pc, #356]	; 8001e40 <HAL_UART_RxCpltCallback+0x1b0>
 8001cde:	4863      	ldr	r0, [pc, #396]	; (8001e6c <HAL_UART_RxCpltCallback+0x1dc>)
 8001ce0:	f7ff fa06 	bl	80010f0 <set_servo>
				 }
			 }
			 if(blt_rx_buff[1]==2){
 8001ce4:	4b5f      	ldr	r3, [pc, #380]	; (8001e64 <HAL_UART_RxCpltCallback+0x1d4>)
 8001ce6:	785b      	ldrb	r3, [r3, #1]
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d102      	bne.n	8001cf2 <HAL_UART_RxCpltCallback+0x62>
				 // Button B : Menggunakan motor untuk memutar arah gripper lalu servo untuk membuka dan mengambil cincin
				 RR_ambil = 1;
 8001cec:	4b60      	ldr	r3, [pc, #384]	; (8001e70 <HAL_UART_RxCpltCallback+0x1e0>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	701a      	strb	r2, [r3, #0]
			 }
			 if(blt_rx_buff[1]==4){
 8001cf2:	4b5c      	ldr	r3, [pc, #368]	; (8001e64 <HAL_UART_RxCpltCallback+0x1d4>)
 8001cf4:	785b      	ldrb	r3, [r3, #1]
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	d102      	bne.n	8001d00 <HAL_UART_RxCpltCallback+0x70>
				 // Button X : Menggunakan servo untuk melepaskan griper lalu meluncurkan cincin
				 RR_lempar = 1;
 8001cfa:	4b5e      	ldr	r3, [pc, #376]	; (8001e74 <HAL_UART_RxCpltCallback+0x1e4>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	701a      	strb	r2, [r3, #0]
			 }
			 if(blt_rx_buff[1]==16){
				 // Button THUMBR

			 }
			 if(blt_rx_buff[1]==32){
 8001d00:	4b58      	ldr	r3, [pc, #352]	; (8001e64 <HAL_UART_RxCpltCallback+0x1d4>)
 8001d02:	785b      	ldrb	r3, [r3, #1]
 8001d04:	2b20      	cmp	r3, #32
 8001d06:	d117      	bne.n	8001d38 <HAL_UART_RxCpltCallback+0xa8>
				 // Button THUMBL
				 if(!RR_tail){
 8001d08:	4b5b      	ldr	r3, [pc, #364]	; (8001e78 <HAL_UART_RxCpltCallback+0x1e8>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	f083 0301 	eor.w	r3, r3, #1
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d008      	beq.n	8001d28 <HAL_UART_RxCpltCallback+0x98>
					 RR_tail = 1;
 8001d16:	4b58      	ldr	r3, [pc, #352]	; (8001e78 <HAL_UART_RxCpltCallback+0x1e8>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	701a      	strb	r2, [r3, #0]
					 set_servo(&servo2, 102);
 8001d1c:	ed9f 0b4a 	vldr	d0, [pc, #296]	; 8001e48 <HAL_UART_RxCpltCallback+0x1b8>
 8001d20:	4856      	ldr	r0, [pc, #344]	; (8001e7c <HAL_UART_RxCpltCallback+0x1ec>)
 8001d22:	f7ff f9e5 	bl	80010f0 <set_servo>
 8001d26:	e007      	b.n	8001d38 <HAL_UART_RxCpltCallback+0xa8>
				 }else{
					 RR_tail = 0;
 8001d28:	4b53      	ldr	r3, [pc, #332]	; (8001e78 <HAL_UART_RxCpltCallback+0x1e8>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	701a      	strb	r2, [r3, #0]
					 set_servo(&servo2, 80);
 8001d2e:	ed9f 0b48 	vldr	d0, [pc, #288]	; 8001e50 <HAL_UART_RxCpltCallback+0x1c0>
 8001d32:	4852      	ldr	r0, [pc, #328]	; (8001e7c <HAL_UART_RxCpltCallback+0x1ec>)
 8001d34:	f7ff f9dc 	bl	80010f0 <set_servo>
				 }
			 }
			 if(blt_rx_buff[1]==64){
 8001d38:	4b4a      	ldr	r3, [pc, #296]	; (8001e64 <HAL_UART_RxCpltCallback+0x1d4>)
 8001d3a:	785b      	ldrb	r3, [r3, #1]
 8001d3c:	2b40      	cmp	r3, #64	; 0x40
 8001d3e:	d127      	bne.n	8001d90 <HAL_UART_RxCpltCallback+0x100>
				 // Button SELECT
				 com_blt.rthrower_speed -= 10;
 8001d40:	4b4f      	ldr	r3, [pc, #316]	; (8001e80 <HAL_UART_RxCpltCallback+0x1f0>)
 8001d42:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	3b0a      	subs	r3, #10
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	b21a      	sxth	r2, r3
 8001d4e:	4b4c      	ldr	r3, [pc, #304]	; (8001e80 <HAL_UART_RxCpltCallback+0x1f0>)
 8001d50:	845a      	strh	r2, [r3, #34]	; 0x22
				 blt_tx_buff[0]= 0; blt_tx_buff[1]= 128; blt_tx_buff[2]= 0;
 8001d52:	4b4c      	ldr	r3, [pc, #304]	; (8001e84 <HAL_UART_RxCpltCallback+0x1f4>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	701a      	strb	r2, [r3, #0]
 8001d58:	4b4a      	ldr	r3, [pc, #296]	; (8001e84 <HAL_UART_RxCpltCallback+0x1f4>)
 8001d5a:	2280      	movs	r2, #128	; 0x80
 8001d5c:	705a      	strb	r2, [r3, #1]
 8001d5e:	4b49      	ldr	r3, [pc, #292]	; (8001e84 <HAL_UART_RxCpltCallback+0x1f4>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	709a      	strb	r2, [r3, #2]
					blt_tx_buff[3]= (com_blt.rthrower_speed) & 0xFF; blt_tx_buff[4]= ((com_blt.rthrower_speed)>>8 )& 0xFF;
 8001d64:	4b46      	ldr	r3, [pc, #280]	; (8001e80 <HAL_UART_RxCpltCallback+0x1f0>)
 8001d66:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	4b45      	ldr	r3, [pc, #276]	; (8001e84 <HAL_UART_RxCpltCallback+0x1f4>)
 8001d6e:	70da      	strb	r2, [r3, #3]
 8001d70:	4b43      	ldr	r3, [pc, #268]	; (8001e80 <HAL_UART_RxCpltCallback+0x1f0>)
 8001d72:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001d76:	121b      	asrs	r3, r3, #8
 8001d78:	b21b      	sxth	r3, r3
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	4b41      	ldr	r3, [pc, #260]	; (8001e84 <HAL_UART_RxCpltCallback+0x1f4>)
 8001d7e:	711a      	strb	r2, [r3, #4]
					HAL_UART_Transmit_IT(&huart4, blt_tx_buff, BUFFER_LEN);
 8001d80:	4b41      	ldr	r3, [pc, #260]	; (8001e88 <HAL_UART_RxCpltCallback+0x1f8>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	461a      	mov	r2, r3
 8001d88:	493e      	ldr	r1, [pc, #248]	; (8001e84 <HAL_UART_RxCpltCallback+0x1f4>)
 8001d8a:	4840      	ldr	r0, [pc, #256]	; (8001e8c <HAL_UART_RxCpltCallback+0x1fc>)
 8001d8c:	f00e fff0 	bl	8010d70 <HAL_UART_Transmit_IT>

			 }
			 if(blt_rx_buff[1]==128){
 8001d90:	4b34      	ldr	r3, [pc, #208]	; (8001e64 <HAL_UART_RxCpltCallback+0x1d4>)
 8001d92:	785b      	ldrb	r3, [r3, #1]
 8001d94:	2b80      	cmp	r3, #128	; 0x80
 8001d96:	d127      	bne.n	8001de8 <HAL_UART_RxCpltCallback+0x158>
				 // Button START
				 com_blt.rthrower_speed += 10;
 8001d98:	4b39      	ldr	r3, [pc, #228]	; (8001e80 <HAL_UART_RxCpltCallback+0x1f0>)
 8001d9a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	330a      	adds	r3, #10
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	b21a      	sxth	r2, r3
 8001da6:	4b36      	ldr	r3, [pc, #216]	; (8001e80 <HAL_UART_RxCpltCallback+0x1f0>)
 8001da8:	845a      	strh	r2, [r3, #34]	; 0x22
				 blt_tx_buff[0]= 0; blt_tx_buff[1]= 128; blt_tx_buff[2]= 0;
 8001daa:	4b36      	ldr	r3, [pc, #216]	; (8001e84 <HAL_UART_RxCpltCallback+0x1f4>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]
 8001db0:	4b34      	ldr	r3, [pc, #208]	; (8001e84 <HAL_UART_RxCpltCallback+0x1f4>)
 8001db2:	2280      	movs	r2, #128	; 0x80
 8001db4:	705a      	strb	r2, [r3, #1]
 8001db6:	4b33      	ldr	r3, [pc, #204]	; (8001e84 <HAL_UART_RxCpltCallback+0x1f4>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	709a      	strb	r2, [r3, #2]
				 blt_tx_buff[3]= com_blt.rthrower_speed & 0xFF; blt_tx_buff[4]= (com_blt.rthrower_speed>>8 )& 0xFF;
 8001dbc:	4b30      	ldr	r3, [pc, #192]	; (8001e80 <HAL_UART_RxCpltCallback+0x1f0>)
 8001dbe:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	4b2f      	ldr	r3, [pc, #188]	; (8001e84 <HAL_UART_RxCpltCallback+0x1f4>)
 8001dc6:	70da      	strb	r2, [r3, #3]
 8001dc8:	4b2d      	ldr	r3, [pc, #180]	; (8001e80 <HAL_UART_RxCpltCallback+0x1f0>)
 8001dca:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001dce:	121b      	asrs	r3, r3, #8
 8001dd0:	b21b      	sxth	r3, r3
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	4b2b      	ldr	r3, [pc, #172]	; (8001e84 <HAL_UART_RxCpltCallback+0x1f4>)
 8001dd6:	711a      	strb	r2, [r3, #4]
				 HAL_UART_Transmit_IT(&huart4, blt_tx_buff, BUFFER_LEN);
 8001dd8:	4b2b      	ldr	r3, [pc, #172]	; (8001e88 <HAL_UART_RxCpltCallback+0x1f8>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	461a      	mov	r2, r3
 8001de0:	4928      	ldr	r1, [pc, #160]	; (8001e84 <HAL_UART_RxCpltCallback+0x1f4>)
 8001de2:	482a      	ldr	r0, [pc, #168]	; (8001e8c <HAL_UART_RxCpltCallback+0x1fc>)
 8001de4:	f00e ffc4 	bl	8010d70 <HAL_UART_Transmit_IT>
			 }
			 if(blt_rx_buff[2]==1){
 8001de8:	4b1e      	ldr	r3, [pc, #120]	; (8001e64 <HAL_UART_RxCpltCallback+0x1d4>)
 8001dea:	789b      	ldrb	r3, [r3, #2]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d116      	bne.n	8001e1e <HAL_UART_RxCpltCallback+0x18e>
				 // Button R1
				 if(speed_mul == 1){
 8001df0:	4b27      	ldr	r3, [pc, #156]	; (8001e90 <HAL_UART_RxCpltCallback+0x200>)
 8001df2:	ed93 7b00 	vldr	d7, [r3]
 8001df6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001dfa:	eeb4 7b46 	vcmp.f64	d7, d6
 8001dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e02:	d106      	bne.n	8001e12 <HAL_UART_RxCpltCallback+0x182>
					 speed_mul = 0.2;
 8001e04:	4922      	ldr	r1, [pc, #136]	; (8001e90 <HAL_UART_RxCpltCallback+0x200>)
 8001e06:	a314      	add	r3, pc, #80	; (adr r3, 8001e58 <HAL_UART_RxCpltCallback+0x1c8>)
 8001e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0c:	e9c1 2300 	strd	r2, r3, [r1]
 8001e10:	e005      	b.n	8001e1e <HAL_UART_RxCpltCallback+0x18e>
				 }else{
					 speed_mul = 1;
 8001e12:	491f      	ldr	r1, [pc, #124]	; (8001e90 <HAL_UART_RxCpltCallback+0x200>)
 8001e14:	f04f 0200 	mov.w	r2, #0
 8001e18:	4b1e      	ldr	r3, [pc, #120]	; (8001e94 <HAL_UART_RxCpltCallback+0x204>)
 8001e1a:	e9c1 2300 	strd	r2, r3, [r1]
				 }
			 }
			 if(blt_rx_buff[2]==2){
 8001e1e:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <HAL_UART_RxCpltCallback+0x1d4>)
 8001e20:	789b      	ldrb	r3, [r3, #2]
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d142      	bne.n	8001eac <HAL_UART_RxCpltCallback+0x21c>
				 // Button L1
				 if(Dir_negation==1){
 8001e26:	4b1c      	ldr	r3, [pc, #112]	; (8001e98 <HAL_UART_RxCpltCallback+0x208>)
 8001e28:	f993 3000 	ldrsb.w	r3, [r3]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d135      	bne.n	8001e9c <HAL_UART_RxCpltCallback+0x20c>
					 Dir_negation = -1;
 8001e30:	4b19      	ldr	r3, [pc, #100]	; (8001e98 <HAL_UART_RxCpltCallback+0x208>)
 8001e32:	22ff      	movs	r2, #255	; 0xff
 8001e34:	701a      	strb	r2, [r3, #0]
 8001e36:	e034      	b.n	8001ea2 <HAL_UART_RxCpltCallback+0x212>
 8001e38:	00000000 	.word	0x00000000
 8001e3c:	405e0000 	.word	0x405e0000
 8001e40:	00000000 	.word	0x00000000
 8001e44:	4064e000 	.word	0x4064e000
 8001e48:	00000000 	.word	0x00000000
 8001e4c:	40598000 	.word	0x40598000
 8001e50:	00000000 	.word	0x00000000
 8001e54:	40540000 	.word	0x40540000
 8001e58:	9999999a 	.word	0x9999999a
 8001e5c:	3fc99999 	.word	0x3fc99999
 8001e60:	40004c00 	.word	0x40004c00
 8001e64:	20000fe8 	.word	0x20000fe8
 8001e68:	2000104c 	.word	0x2000104c
 8001e6c:	20000998 	.word	0x20000998
 8001e70:	20001048 	.word	0x20001048
 8001e74:	20001049 	.word	0x20001049
 8001e78:	2000104a 	.word	0x2000104a
 8001e7c:	20000958 	.word	0x20000958
 8001e80:	20000914 	.word	0x20000914
 8001e84:	20000ff0 	.word	0x20000ff0
 8001e88:	20000001 	.word	0x20000001
 8001e8c:	2000080c 	.word	0x2000080c
 8001e90:	20000008 	.word	0x20000008
 8001e94:	3ff00000 	.word	0x3ff00000
 8001e98:	20000010 	.word	0x20000010
				 }else{
					 Dir_negation = 1;
 8001e9c:	4b95      	ldr	r3, [pc, #596]	; (80020f4 <HAL_UART_RxCpltCallback+0x464>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	701a      	strb	r2, [r3, #0]
				 }
				 bz_t = HAL_GetTick();
 8001ea2:	f002 fc77 	bl	8004794 <HAL_GetTick>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	4a93      	ldr	r2, [pc, #588]	; (80020f8 <HAL_UART_RxCpltCallback+0x468>)
 8001eaa:	6013      	str	r3, [r2, #0]
				 // DPAD RIGHT
			 }
			 if(blt_rx_buff[2]==128){
				 // DPAD LEFT
			 }
			 HAL_UART_Receive_IT(&huart4, blt_rx_buff, BUFFER_LEN);
 8001eac:	4b93      	ldr	r3, [pc, #588]	; (80020fc <HAL_UART_RxCpltCallback+0x46c>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	4992      	ldr	r1, [pc, #584]	; (8002100 <HAL_UART_RxCpltCallback+0x470>)
 8001eb6:	4893      	ldr	r0, [pc, #588]	; (8002104 <HAL_UART_RxCpltCallback+0x474>)
 8001eb8:	f00f f802 	bl	8010ec0 <HAL_UART_Receive_IT>
			}
			// Jika Berasal dari communication event
			if((blt_rx_buff[0]&1)==1){
 8001ebc:	4b90      	ldr	r3, [pc, #576]	; (8002100 <HAL_UART_RxCpltCallback+0x470>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f000 83df 	beq.w	8002688 <HAL_UART_RxCpltCallback+0x9f8>
			 // Ring Stack Gripper
			 if((blt_rx_buff[0]&0b00000100)==4 ){
 8001eca:	4b8d      	ldr	r3, [pc, #564]	; (8002100 <HAL_UART_RxCpltCallback+0x470>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	f003 0304 	and.w	r3, r3, #4
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d02a      	beq.n	8001f2c <HAL_UART_RxCpltCallback+0x29c>
				 // USER CODE BEGIN INCREMENT LEFT THROWER SPEED
				 com_blt.lthrower_speed++;
 8001ed6:	4b8c      	ldr	r3, [pc, #560]	; (8002108 <HAL_UART_RxCpltCallback+0x478>)
 8001ed8:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	3301      	adds	r3, #1
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	b21a      	sxth	r2, r3
 8001ee4:	4b88      	ldr	r3, [pc, #544]	; (8002108 <HAL_UART_RxCpltCallback+0x478>)
 8001ee6:	841a      	strh	r2, [r3, #32]
				 if(ring_stack<5){
 8001ee8:	4b88      	ldr	r3, [pc, #544]	; (800210c <HAL_UART_RxCpltCallback+0x47c>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	d805      	bhi.n	8001efc <HAL_UART_RxCpltCallback+0x26c>
					 ring_stack++;
 8001ef0:	4b86      	ldr	r3, [pc, #536]	; (800210c <HAL_UART_RxCpltCallback+0x47c>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	4b84      	ldr	r3, [pc, #528]	; (800210c <HAL_UART_RxCpltCallback+0x47c>)
 8001efa:	701a      	strb	r2, [r3, #0]
				 }
				 blt_tx_buff[0]= 0; blt_tx_buff[1]= 64; blt_tx_buff[2]= 0;
 8001efc:	4b84      	ldr	r3, [pc, #528]	; (8002110 <HAL_UART_RxCpltCallback+0x480>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	701a      	strb	r2, [r3, #0]
 8001f02:	4b83      	ldr	r3, [pc, #524]	; (8002110 <HAL_UART_RxCpltCallback+0x480>)
 8001f04:	2240      	movs	r2, #64	; 0x40
 8001f06:	705a      	strb	r2, [r3, #1]
 8001f08:	4b81      	ldr	r3, [pc, #516]	; (8002110 <HAL_UART_RxCpltCallback+0x480>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	709a      	strb	r2, [r3, #2]
				 blt_tx_buff[3]= ring_stack & 0xFF; blt_tx_buff[4]= (ring_stack >> 8) & 0xFF;
 8001f0e:	4b7f      	ldr	r3, [pc, #508]	; (800210c <HAL_UART_RxCpltCallback+0x47c>)
 8001f10:	781a      	ldrb	r2, [r3, #0]
 8001f12:	4b7f      	ldr	r3, [pc, #508]	; (8002110 <HAL_UART_RxCpltCallback+0x480>)
 8001f14:	70da      	strb	r2, [r3, #3]
 8001f16:	4b7e      	ldr	r3, [pc, #504]	; (8002110 <HAL_UART_RxCpltCallback+0x480>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	711a      	strb	r2, [r3, #4]
				 HAL_UART_Transmit_IT(&huart4, blt_tx_buff, BUFFER_LEN);
 8001f1c:	4b77      	ldr	r3, [pc, #476]	; (80020fc <HAL_UART_RxCpltCallback+0x46c>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	461a      	mov	r2, r3
 8001f24:	497a      	ldr	r1, [pc, #488]	; (8002110 <HAL_UART_RxCpltCallback+0x480>)
 8001f26:	4877      	ldr	r0, [pc, #476]	; (8002104 <HAL_UART_RxCpltCallback+0x474>)
 8001f28:	f00e ff22 	bl	8010d70 <HAL_UART_Transmit_IT>
			 }
			 if((blt_rx_buff[0]&0b00001000)==8){
 8001f2c:	4b74      	ldr	r3, [pc, #464]	; (8002100 <HAL_UART_RxCpltCallback+0x470>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	f003 0308 	and.w	r3, r3, #8
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d02a      	beq.n	8001f8e <HAL_UART_RxCpltCallback+0x2fe>
				 // USER CODE BEGIN DECREMENT LEFT THROWER SPEED
				 com_blt.lthrower_speed--;
 8001f38:	4b73      	ldr	r3, [pc, #460]	; (8002108 <HAL_UART_RxCpltCallback+0x478>)
 8001f3a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	3b01      	subs	r3, #1
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	b21a      	sxth	r2, r3
 8001f46:	4b70      	ldr	r3, [pc, #448]	; (8002108 <HAL_UART_RxCpltCallback+0x478>)
 8001f48:	841a      	strh	r2, [r3, #32]
				 if(ring_stack>1){
 8001f4a:	4b70      	ldr	r3, [pc, #448]	; (800210c <HAL_UART_RxCpltCallback+0x47c>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d905      	bls.n	8001f5e <HAL_UART_RxCpltCallback+0x2ce>
					 ring_stack--;
 8001f52:	4b6e      	ldr	r3, [pc, #440]	; (800210c <HAL_UART_RxCpltCallback+0x47c>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	4b6c      	ldr	r3, [pc, #432]	; (800210c <HAL_UART_RxCpltCallback+0x47c>)
 8001f5c:	701a      	strb	r2, [r3, #0]
				 }
				 blt_tx_buff[0]= 0; blt_tx_buff[1]= 64; blt_tx_buff[2]= 0;
 8001f5e:	4b6c      	ldr	r3, [pc, #432]	; (8002110 <HAL_UART_RxCpltCallback+0x480>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	701a      	strb	r2, [r3, #0]
 8001f64:	4b6a      	ldr	r3, [pc, #424]	; (8002110 <HAL_UART_RxCpltCallback+0x480>)
 8001f66:	2240      	movs	r2, #64	; 0x40
 8001f68:	705a      	strb	r2, [r3, #1]
 8001f6a:	4b69      	ldr	r3, [pc, #420]	; (8002110 <HAL_UART_RxCpltCallback+0x480>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	709a      	strb	r2, [r3, #2]
				 blt_tx_buff[3]= ring_stack & 0xFF; blt_tx_buff[4]= (ring_stack >> 8) & 0xFF;
 8001f70:	4b66      	ldr	r3, [pc, #408]	; (800210c <HAL_UART_RxCpltCallback+0x47c>)
 8001f72:	781a      	ldrb	r2, [r3, #0]
 8001f74:	4b66      	ldr	r3, [pc, #408]	; (8002110 <HAL_UART_RxCpltCallback+0x480>)
 8001f76:	70da      	strb	r2, [r3, #3]
 8001f78:	4b65      	ldr	r3, [pc, #404]	; (8002110 <HAL_UART_RxCpltCallback+0x480>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	711a      	strb	r2, [r3, #4]
				 HAL_UART_Transmit_IT(&huart4, blt_tx_buff, BUFFER_LEN);
 8001f7e:	4b5f      	ldr	r3, [pc, #380]	; (80020fc <HAL_UART_RxCpltCallback+0x46c>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	461a      	mov	r2, r3
 8001f86:	4962      	ldr	r1, [pc, #392]	; (8002110 <HAL_UART_RxCpltCallback+0x480>)
 8001f88:	485e      	ldr	r0, [pc, #376]	; (8002104 <HAL_UART_RxCpltCallback+0x474>)
 8001f8a:	f00e fef1 	bl	8010d70 <HAL_UART_Transmit_IT>
			 }
			 // Right Thrower Speed
			 if((blt_rx_buff[0]&0b00010000)==16){
 8001f8e:	4b5c      	ldr	r3, [pc, #368]	; (8002100 <HAL_UART_RxCpltCallback+0x470>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	f003 0310 	and.w	r3, r3, #16
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d027      	beq.n	8001fea <HAL_UART_RxCpltCallback+0x35a>
				 // USER CODE BEGIN INCREMENT RIGHT THROWER SPEED
				 com_blt.rthrower_speed += 10;
 8001f9a:	4b5b      	ldr	r3, [pc, #364]	; (8002108 <HAL_UART_RxCpltCallback+0x478>)
 8001f9c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	330a      	adds	r3, #10
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	b21a      	sxth	r2, r3
 8001fa8:	4b57      	ldr	r3, [pc, #348]	; (8002108 <HAL_UART_RxCpltCallback+0x478>)
 8001faa:	845a      	strh	r2, [r3, #34]	; 0x22
				 blt_tx_buff[0]= 0; blt_tx_buff[1]= 128; blt_tx_buff[2]= 0;
 8001fac:	4b58      	ldr	r3, [pc, #352]	; (8002110 <HAL_UART_RxCpltCallback+0x480>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
 8001fb2:	4b57      	ldr	r3, [pc, #348]	; (8002110 <HAL_UART_RxCpltCallback+0x480>)
 8001fb4:	2280      	movs	r2, #128	; 0x80
 8001fb6:	705a      	strb	r2, [r3, #1]
 8001fb8:	4b55      	ldr	r3, [pc, #340]	; (8002110 <HAL_UART_RxCpltCallback+0x480>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	709a      	strb	r2, [r3, #2]
				 blt_tx_buff[3]= com_blt.rthrower_speed & 0xFF; blt_tx_buff[4]= (com_blt.rthrower_speed>>8 )& 0xFF;
 8001fbe:	4b52      	ldr	r3, [pc, #328]	; (8002108 <HAL_UART_RxCpltCallback+0x478>)
 8001fc0:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	4b52      	ldr	r3, [pc, #328]	; (8002110 <HAL_UART_RxCpltCallback+0x480>)
 8001fc8:	70da      	strb	r2, [r3, #3]
 8001fca:	4b4f      	ldr	r3, [pc, #316]	; (8002108 <HAL_UART_RxCpltCallback+0x478>)
 8001fcc:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001fd0:	121b      	asrs	r3, r3, #8
 8001fd2:	b21b      	sxth	r3, r3
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	4b4e      	ldr	r3, [pc, #312]	; (8002110 <HAL_UART_RxCpltCallback+0x480>)
 8001fd8:	711a      	strb	r2, [r3, #4]
				 HAL_UART_Transmit_IT(&huart4, blt_tx_buff, BUFFER_LEN);
 8001fda:	4b48      	ldr	r3, [pc, #288]	; (80020fc <HAL_UART_RxCpltCallback+0x46c>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	494b      	ldr	r1, [pc, #300]	; (8002110 <HAL_UART_RxCpltCallback+0x480>)
 8001fe4:	4847      	ldr	r0, [pc, #284]	; (8002104 <HAL_UART_RxCpltCallback+0x474>)
 8001fe6:	f00e fec3 	bl	8010d70 <HAL_UART_Transmit_IT>
			 }
			 if((blt_rx_buff[0]&0b00100000)==32){
 8001fea:	4b45      	ldr	r3, [pc, #276]	; (8002100 <HAL_UART_RxCpltCallback+0x470>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	f003 0320 	and.w	r3, r3, #32
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d027      	beq.n	8002046 <HAL_UART_RxCpltCallback+0x3b6>
				 // USER CODE BEGIN DECREMENT RIGHT THROWER SPEED
				 com_blt.rthrower_speed -= 10;
 8001ff6:	4b44      	ldr	r3, [pc, #272]	; (8002108 <HAL_UART_RxCpltCallback+0x478>)
 8001ff8:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	3b0a      	subs	r3, #10
 8002000:	b29b      	uxth	r3, r3
 8002002:	b21a      	sxth	r2, r3
 8002004:	4b40      	ldr	r3, [pc, #256]	; (8002108 <HAL_UART_RxCpltCallback+0x478>)
 8002006:	845a      	strh	r2, [r3, #34]	; 0x22
				 blt_tx_buff[0]= 0; blt_tx_buff[1]= 128; blt_tx_buff[2]= 0;
 8002008:	4b41      	ldr	r3, [pc, #260]	; (8002110 <HAL_UART_RxCpltCallback+0x480>)
 800200a:	2200      	movs	r2, #0
 800200c:	701a      	strb	r2, [r3, #0]
 800200e:	4b40      	ldr	r3, [pc, #256]	; (8002110 <HAL_UART_RxCpltCallback+0x480>)
 8002010:	2280      	movs	r2, #128	; 0x80
 8002012:	705a      	strb	r2, [r3, #1]
 8002014:	4b3e      	ldr	r3, [pc, #248]	; (8002110 <HAL_UART_RxCpltCallback+0x480>)
 8002016:	2200      	movs	r2, #0
 8002018:	709a      	strb	r2, [r3, #2]
				 blt_tx_buff[3]= com_blt.rthrower_speed & 0xFF; blt_tx_buff[4]= (com_blt.rthrower_speed>>8 )& 0xFF;
 800201a:	4b3b      	ldr	r3, [pc, #236]	; (8002108 <HAL_UART_RxCpltCallback+0x478>)
 800201c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002020:	b2da      	uxtb	r2, r3
 8002022:	4b3b      	ldr	r3, [pc, #236]	; (8002110 <HAL_UART_RxCpltCallback+0x480>)
 8002024:	70da      	strb	r2, [r3, #3]
 8002026:	4b38      	ldr	r3, [pc, #224]	; (8002108 <HAL_UART_RxCpltCallback+0x478>)
 8002028:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800202c:	121b      	asrs	r3, r3, #8
 800202e:	b21b      	sxth	r3, r3
 8002030:	b2da      	uxtb	r2, r3
 8002032:	4b37      	ldr	r3, [pc, #220]	; (8002110 <HAL_UART_RxCpltCallback+0x480>)
 8002034:	711a      	strb	r2, [r3, #4]
				 HAL_UART_Transmit_IT(&huart4, blt_tx_buff, BUFFER_LEN);
 8002036:	4b31      	ldr	r3, [pc, #196]	; (80020fc <HAL_UART_RxCpltCallback+0x46c>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	b29b      	uxth	r3, r3
 800203c:	461a      	mov	r2, r3
 800203e:	4934      	ldr	r1, [pc, #208]	; (8002110 <HAL_UART_RxCpltCallback+0x480>)
 8002040:	4830      	ldr	r0, [pc, #192]	; (8002104 <HAL_UART_RxCpltCallback+0x474>)
 8002042:	f00e fe95 	bl	8010d70 <HAL_UART_Transmit_IT>
			 }
			 // Domain Pole
			 if((blt_rx_buff[1]&0b00010000)==16){
 8002046:	4b2e      	ldr	r3, [pc, #184]	; (8002100 <HAL_UART_RxCpltCallback+0x470>)
 8002048:	785b      	ldrb	r3, [r3, #1]
 800204a:	f003 0310 	and.w	r3, r3, #16
 800204e:	2b00      	cmp	r3, #0
 8002050:	d03f      	beq.n	80020d2 <HAL_UART_RxCpltCallback+0x442>
				 // USER CODE BEGIN DOMAIN 1
				 if(com_blt.isDo1) com_blt.isDo1 = 0;
 8002052:	4b2d      	ldr	r3, [pc, #180]	; (8002108 <HAL_UART_RxCpltCallback+0x478>)
 8002054:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002058:	2b00      	cmp	r3, #0
 800205a:	d004      	beq.n	8002066 <HAL_UART_RxCpltCallback+0x3d6>
 800205c:	4b2a      	ldr	r3, [pc, #168]	; (8002108 <HAL_UART_RxCpltCallback+0x478>)
 800205e:	2200      	movs	r2, #0
 8002060:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002064:	e003      	b.n	800206e <HAL_UART_RxCpltCallback+0x3de>
				 else com_blt.isDo1 = 1;
 8002066:	4b28      	ldr	r3, [pc, #160]	; (8002108 <HAL_UART_RxCpltCallback+0x478>)
 8002068:	2201      	movs	r2, #1
 800206a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				 ring_stack=4;
 800206e:	4b27      	ldr	r3, [pc, #156]	; (800210c <HAL_UART_RxCpltCallback+0x47c>)
 8002070:	2204      	movs	r2, #4
 8002072:	701a      	strb	r2, [r3, #0]
				 blt_tx_buff[0]= 0; blt_tx_buff[1]= 64; blt_tx_buff[2]= 0;
 8002074:	4b26      	ldr	r3, [pc, #152]	; (8002110 <HAL_UART_RxCpltCallback+0x480>)
 8002076:	2200      	movs	r2, #0
 8002078:	701a      	strb	r2, [r3, #0]
 800207a:	4b25      	ldr	r3, [pc, #148]	; (8002110 <HAL_UART_RxCpltCallback+0x480>)
 800207c:	2240      	movs	r2, #64	; 0x40
 800207e:	705a      	strb	r2, [r3, #1]
 8002080:	4b23      	ldr	r3, [pc, #140]	; (8002110 <HAL_UART_RxCpltCallback+0x480>)
 8002082:	2200      	movs	r2, #0
 8002084:	709a      	strb	r2, [r3, #2]
				 blt_tx_buff[3]= ring_stack & 0xFF; blt_tx_buff[4]= (ring_stack >> 8) & 0xFF;
 8002086:	4b21      	ldr	r3, [pc, #132]	; (800210c <HAL_UART_RxCpltCallback+0x47c>)
 8002088:	781a      	ldrb	r2, [r3, #0]
 800208a:	4b21      	ldr	r3, [pc, #132]	; (8002110 <HAL_UART_RxCpltCallback+0x480>)
 800208c:	70da      	strb	r2, [r3, #3]
 800208e:	4b20      	ldr	r3, [pc, #128]	; (8002110 <HAL_UART_RxCpltCallback+0x480>)
 8002090:	2200      	movs	r2, #0
 8002092:	711a      	strb	r2, [r3, #4]
				 HAL_UART_Transmit_IT(&huart4, blt_tx_buff, BUFFER_LEN);
 8002094:	4b19      	ldr	r3, [pc, #100]	; (80020fc <HAL_UART_RxCpltCallback+0x46c>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	b29b      	uxth	r3, r3
 800209a:	461a      	mov	r2, r3
 800209c:	491c      	ldr	r1, [pc, #112]	; (8002110 <HAL_UART_RxCpltCallback+0x480>)
 800209e:	4819      	ldr	r0, [pc, #100]	; (8002104 <HAL_UART_RxCpltCallback+0x474>)
 80020a0:	f00e fe66 	bl	8010d70 <HAL_UART_Transmit_IT>
				 blt_tx_buff[0]= 8; blt_tx_buff[1]= 0; blt_tx_buff[2]= 0; blt_tx_buff[3]= 0; blt_tx_buff[4]= 0;
 80020a4:	4b1a      	ldr	r3, [pc, #104]	; (8002110 <HAL_UART_RxCpltCallback+0x480>)
 80020a6:	2208      	movs	r2, #8
 80020a8:	701a      	strb	r2, [r3, #0]
 80020aa:	4b19      	ldr	r3, [pc, #100]	; (8002110 <HAL_UART_RxCpltCallback+0x480>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	705a      	strb	r2, [r3, #1]
 80020b0:	4b17      	ldr	r3, [pc, #92]	; (8002110 <HAL_UART_RxCpltCallback+0x480>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	709a      	strb	r2, [r3, #2]
 80020b6:	4b16      	ldr	r3, [pc, #88]	; (8002110 <HAL_UART_RxCpltCallback+0x480>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	70da      	strb	r2, [r3, #3]
 80020bc:	4b14      	ldr	r3, [pc, #80]	; (8002110 <HAL_UART_RxCpltCallback+0x480>)
 80020be:	2200      	movs	r2, #0
 80020c0:	711a      	strb	r2, [r3, #4]
				 HAL_UART_Transmit_IT(&huart4, blt_tx_buff, BUFFER_LEN);
 80020c2:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <HAL_UART_RxCpltCallback+0x46c>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	461a      	mov	r2, r3
 80020ca:	4911      	ldr	r1, [pc, #68]	; (8002110 <HAL_UART_RxCpltCallback+0x480>)
 80020cc:	480d      	ldr	r0, [pc, #52]	; (8002104 <HAL_UART_RxCpltCallback+0x474>)
 80020ce:	f00e fe4f 	bl	8010d70 <HAL_UART_Transmit_IT>
			 }
			 if((blt_rx_buff[1]&0b00100000)==32){
 80020d2:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <HAL_UART_RxCpltCallback+0x470>)
 80020d4:	785b      	ldrb	r3, [r3, #1]
 80020d6:	f003 0320 	and.w	r3, r3, #32
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d053      	beq.n	8002186 <HAL_UART_RxCpltCallback+0x4f6>
				 // USER CODE BEGIN DOMAIN 2
				 if(com_blt.isDo2) com_blt.isDo2 = 0;
 80020de:	4b0a      	ldr	r3, [pc, #40]	; (8002108 <HAL_UART_RxCpltCallback+0x478>)
 80020e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d015      	beq.n	8002114 <HAL_UART_RxCpltCallback+0x484>
 80020e8:	4b07      	ldr	r3, [pc, #28]	; (8002108 <HAL_UART_RxCpltCallback+0x478>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 80020f0:	e014      	b.n	800211c <HAL_UART_RxCpltCallback+0x48c>
 80020f2:	bf00      	nop
 80020f4:	20000010 	.word	0x20000010
 80020f8:	20000fe0 	.word	0x20000fe0
 80020fc:	20000001 	.word	0x20000001
 8002100:	20000fe8 	.word	0x20000fe8
 8002104:	2000080c 	.word	0x2000080c
 8002108:	20000914 	.word	0x20000914
 800210c:	20000002 	.word	0x20000002
 8002110:	20000ff0 	.word	0x20000ff0
				 else com_blt.isDo2 = 1;
 8002114:	4ba3      	ldr	r3, [pc, #652]	; (80023a4 <HAL_UART_RxCpltCallback+0x714>)
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				 ring_stack=5;
 800211c:	4ba2      	ldr	r3, [pc, #648]	; (80023a8 <HAL_UART_RxCpltCallback+0x718>)
 800211e:	2205      	movs	r2, #5
 8002120:	701a      	strb	r2, [r3, #0]
				 stop_button = 1;
 8002122:	4ba2      	ldr	r3, [pc, #648]	; (80023ac <HAL_UART_RxCpltCallback+0x71c>)
 8002124:	2201      	movs	r2, #1
 8002126:	701a      	strb	r2, [r3, #0]
				 blt_tx_buff[0]= 0; blt_tx_buff[1]= 64; blt_tx_buff[2]= 0;
 8002128:	4ba1      	ldr	r3, [pc, #644]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]
 800212e:	4ba0      	ldr	r3, [pc, #640]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 8002130:	2240      	movs	r2, #64	; 0x40
 8002132:	705a      	strb	r2, [r3, #1]
 8002134:	4b9e      	ldr	r3, [pc, #632]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 8002136:	2200      	movs	r2, #0
 8002138:	709a      	strb	r2, [r3, #2]
				 blt_tx_buff[3]= ring_stack & 0xFF; blt_tx_buff[4]= (ring_stack >> 8) & 0xFF;
 800213a:	4b9b      	ldr	r3, [pc, #620]	; (80023a8 <HAL_UART_RxCpltCallback+0x718>)
 800213c:	781a      	ldrb	r2, [r3, #0]
 800213e:	4b9c      	ldr	r3, [pc, #624]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 8002140:	70da      	strb	r2, [r3, #3]
 8002142:	4b9b      	ldr	r3, [pc, #620]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 8002144:	2200      	movs	r2, #0
 8002146:	711a      	strb	r2, [r3, #4]
				 HAL_UART_Transmit_IT(&huart4, blt_tx_buff, BUFFER_LEN);
 8002148:	4b9a      	ldr	r3, [pc, #616]	; (80023b4 <HAL_UART_RxCpltCallback+0x724>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	b29b      	uxth	r3, r3
 800214e:	461a      	mov	r2, r3
 8002150:	4997      	ldr	r1, [pc, #604]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 8002152:	4899      	ldr	r0, [pc, #612]	; (80023b8 <HAL_UART_RxCpltCallback+0x728>)
 8002154:	f00e fe0c 	bl	8010d70 <HAL_UART_Transmit_IT>
				 blt_tx_buff[0]= 16; blt_tx_buff[1]= 0; blt_tx_buff[2]= 0; blt_tx_buff[3]= 0; blt_tx_buff[4]= 0;
 8002158:	4b95      	ldr	r3, [pc, #596]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 800215a:	2210      	movs	r2, #16
 800215c:	701a      	strb	r2, [r3, #0]
 800215e:	4b94      	ldr	r3, [pc, #592]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 8002160:	2200      	movs	r2, #0
 8002162:	705a      	strb	r2, [r3, #1]
 8002164:	4b92      	ldr	r3, [pc, #584]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 8002166:	2200      	movs	r2, #0
 8002168:	709a      	strb	r2, [r3, #2]
 800216a:	4b91      	ldr	r3, [pc, #580]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 800216c:	2200      	movs	r2, #0
 800216e:	70da      	strb	r2, [r3, #3]
 8002170:	4b8f      	ldr	r3, [pc, #572]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 8002172:	2200      	movs	r2, #0
 8002174:	711a      	strb	r2, [r3, #4]
				 HAL_UART_Transmit_IT(&huart4, blt_tx_buff, BUFFER_LEN);
 8002176:	4b8f      	ldr	r3, [pc, #572]	; (80023b4 <HAL_UART_RxCpltCallback+0x724>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	b29b      	uxth	r3, r3
 800217c:	461a      	mov	r2, r3
 800217e:	498c      	ldr	r1, [pc, #560]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 8002180:	488d      	ldr	r0, [pc, #564]	; (80023b8 <HAL_UART_RxCpltCallback+0x728>)
 8002182:	f00e fdf5 	bl	8010d70 <HAL_UART_Transmit_IT>
			 }
			 if((blt_rx_buff[1]&0b01000000)==64){
 8002186:	4b8d      	ldr	r3, [pc, #564]	; (80023bc <HAL_UART_RxCpltCallback+0x72c>)
 8002188:	785b      	ldrb	r3, [r3, #1]
 800218a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800218e:	2b00      	cmp	r3, #0
 8002190:	d027      	beq.n	80021e2 <HAL_UART_RxCpltCallback+0x552>
				 // USER CODE BEGIN DOMAIN 3
				 last_button = 1;
 8002192:	4b8b      	ldr	r3, [pc, #556]	; (80023c0 <HAL_UART_RxCpltCallback+0x730>)
 8002194:	2201      	movs	r2, #1
 8002196:	701a      	strb	r2, [r3, #0]
				 if(com_blt.isDo3){
 8002198:	4b82      	ldr	r3, [pc, #520]	; (80023a4 <HAL_UART_RxCpltCallback+0x714>)
 800219a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d004      	beq.n	80021ac <HAL_UART_RxCpltCallback+0x51c>
					 com_blt.isDo3 = 0;
 80021a2:	4b80      	ldr	r3, [pc, #512]	; (80023a4 <HAL_UART_RxCpltCallback+0x714>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80021aa:	e003      	b.n	80021b4 <HAL_UART_RxCpltCallback+0x524>
				 }
				 else{
					 com_blt.isDo3 = 1;
 80021ac:	4b7d      	ldr	r3, [pc, #500]	; (80023a4 <HAL_UART_RxCpltCallback+0x714>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				 }
				 blt_tx_buff[0]= 32; blt_tx_buff[1]= 0; blt_tx_buff[2]= 0; blt_tx_buff[3]= 0; blt_tx_buff[4]= 0;
 80021b4:	4b7e      	ldr	r3, [pc, #504]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 80021b6:	2220      	movs	r2, #32
 80021b8:	701a      	strb	r2, [r3, #0]
 80021ba:	4b7d      	ldr	r3, [pc, #500]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 80021bc:	2200      	movs	r2, #0
 80021be:	705a      	strb	r2, [r3, #1]
 80021c0:	4b7b      	ldr	r3, [pc, #492]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	709a      	strb	r2, [r3, #2]
 80021c6:	4b7a      	ldr	r3, [pc, #488]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	70da      	strb	r2, [r3, #3]
 80021cc:	4b78      	ldr	r3, [pc, #480]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	711a      	strb	r2, [r3, #4]
				 HAL_UART_Transmit_IT(&huart4, blt_tx_buff, BUFFER_LEN);
 80021d2:	4b78      	ldr	r3, [pc, #480]	; (80023b4 <HAL_UART_RxCpltCallback+0x724>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	461a      	mov	r2, r3
 80021da:	4975      	ldr	r1, [pc, #468]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 80021dc:	4876      	ldr	r0, [pc, #472]	; (80023b8 <HAL_UART_RxCpltCallback+0x728>)
 80021de:	f00e fdc7 	bl	8010d70 <HAL_UART_Transmit_IT>
			 }
			 // Angkor Pole
			 if((blt_rx_buff[1]&0b10000000)==128){
 80021e2:	4b76      	ldr	r3, [pc, #472]	; (80023bc <HAL_UART_RxCpltCallback+0x72c>)
 80021e4:	785b      	ldrb	r3, [r3, #1]
 80021e6:	b25b      	sxtb	r3, r3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	da3f      	bge.n	800226c <HAL_UART_RxCpltCallback+0x5dc>
				 // USER CODE BEGIN ANGKOR 1
				 if(com_blt.isAng1) com_blt.isAng1 = 0;
 80021ec:	4b6d      	ldr	r3, [pc, #436]	; (80023a4 <HAL_UART_RxCpltCallback+0x714>)
 80021ee:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d004      	beq.n	8002200 <HAL_UART_RxCpltCallback+0x570>
 80021f6:	4b6b      	ldr	r3, [pc, #428]	; (80023a4 <HAL_UART_RxCpltCallback+0x714>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 80021fe:	e003      	b.n	8002208 <HAL_UART_RxCpltCallback+0x578>
				 else com_blt.isAng1 = 1;
 8002200:	4b68      	ldr	r3, [pc, #416]	; (80023a4 <HAL_UART_RxCpltCallback+0x714>)
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				 ring_stack=1;
 8002208:	4b67      	ldr	r3, [pc, #412]	; (80023a8 <HAL_UART_RxCpltCallback+0x718>)
 800220a:	2201      	movs	r2, #1
 800220c:	701a      	strb	r2, [r3, #0]
				 blt_tx_buff[0]= 0; blt_tx_buff[1]= 64; blt_tx_buff[2]= 0;
 800220e:	4b68      	ldr	r3, [pc, #416]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 8002210:	2200      	movs	r2, #0
 8002212:	701a      	strb	r2, [r3, #0]
 8002214:	4b66      	ldr	r3, [pc, #408]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 8002216:	2240      	movs	r2, #64	; 0x40
 8002218:	705a      	strb	r2, [r3, #1]
 800221a:	4b65      	ldr	r3, [pc, #404]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 800221c:	2200      	movs	r2, #0
 800221e:	709a      	strb	r2, [r3, #2]
				 blt_tx_buff[3]= ring_stack & 0xFF; blt_tx_buff[4]= (ring_stack >> 8) & 0xFF;
 8002220:	4b61      	ldr	r3, [pc, #388]	; (80023a8 <HAL_UART_RxCpltCallback+0x718>)
 8002222:	781a      	ldrb	r2, [r3, #0]
 8002224:	4b62      	ldr	r3, [pc, #392]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 8002226:	70da      	strb	r2, [r3, #3]
 8002228:	4b61      	ldr	r3, [pc, #388]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 800222a:	2200      	movs	r2, #0
 800222c:	711a      	strb	r2, [r3, #4]
				 HAL_UART_Transmit_IT(&huart4, blt_tx_buff, BUFFER_LEN);
 800222e:	4b61      	ldr	r3, [pc, #388]	; (80023b4 <HAL_UART_RxCpltCallback+0x724>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	b29b      	uxth	r3, r3
 8002234:	461a      	mov	r2, r3
 8002236:	495e      	ldr	r1, [pc, #376]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 8002238:	485f      	ldr	r0, [pc, #380]	; (80023b8 <HAL_UART_RxCpltCallback+0x728>)
 800223a:	f00e fd99 	bl	8010d70 <HAL_UART_Transmit_IT>
				 blt_tx_buff[0]= 64; blt_tx_buff[1]= 0; blt_tx_buff[2]= 0; blt_tx_buff[3]= 0; blt_tx_buff[4]= 0;
 800223e:	4b5c      	ldr	r3, [pc, #368]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 8002240:	2240      	movs	r2, #64	; 0x40
 8002242:	701a      	strb	r2, [r3, #0]
 8002244:	4b5a      	ldr	r3, [pc, #360]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 8002246:	2200      	movs	r2, #0
 8002248:	705a      	strb	r2, [r3, #1]
 800224a:	4b59      	ldr	r3, [pc, #356]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 800224c:	2200      	movs	r2, #0
 800224e:	709a      	strb	r2, [r3, #2]
 8002250:	4b57      	ldr	r3, [pc, #348]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 8002252:	2200      	movs	r2, #0
 8002254:	70da      	strb	r2, [r3, #3]
 8002256:	4b56      	ldr	r3, [pc, #344]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 8002258:	2200      	movs	r2, #0
 800225a:	711a      	strb	r2, [r3, #4]
				 HAL_UART_Transmit_IT(&huart4, blt_tx_buff, BUFFER_LEN); //mengirimkan state ke android
 800225c:	4b55      	ldr	r3, [pc, #340]	; (80023b4 <HAL_UART_RxCpltCallback+0x724>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	b29b      	uxth	r3, r3
 8002262:	461a      	mov	r2, r3
 8002264:	4952      	ldr	r1, [pc, #328]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 8002266:	4854      	ldr	r0, [pc, #336]	; (80023b8 <HAL_UART_RxCpltCallback+0x728>)
 8002268:	f00e fd82 	bl	8010d70 <HAL_UART_Transmit_IT>
			 }
			 if((blt_rx_buff[2]&0b00000001)==1){
 800226c:	4b53      	ldr	r3, [pc, #332]	; (80023bc <HAL_UART_RxCpltCallback+0x72c>)
 800226e:	789b      	ldrb	r3, [r3, #2]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b00      	cmp	r3, #0
 8002276:	d03f      	beq.n	80022f8 <HAL_UART_RxCpltCallback+0x668>
				 // USER CODE BEGIN ANGKOR 2
				 if(com_blt.isAng2) com_blt.isAng2 = 0;
 8002278:	4b4a      	ldr	r3, [pc, #296]	; (80023a4 <HAL_UART_RxCpltCallback+0x714>)
 800227a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800227e:	2b00      	cmp	r3, #0
 8002280:	d004      	beq.n	800228c <HAL_UART_RxCpltCallback+0x5fc>
 8002282:	4b48      	ldr	r3, [pc, #288]	; (80023a4 <HAL_UART_RxCpltCallback+0x714>)
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800228a:	e003      	b.n	8002294 <HAL_UART_RxCpltCallback+0x604>
				 else com_blt.isAng2 = 1;
 800228c:	4b45      	ldr	r3, [pc, #276]	; (80023a4 <HAL_UART_RxCpltCallback+0x714>)
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				 ring_stack=2;
 8002294:	4b44      	ldr	r3, [pc, #272]	; (80023a8 <HAL_UART_RxCpltCallback+0x718>)
 8002296:	2202      	movs	r2, #2
 8002298:	701a      	strb	r2, [r3, #0]
				 blt_tx_buff[0]= 0; blt_tx_buff[1]= 64; blt_tx_buff[2]= 0;
 800229a:	4b45      	ldr	r3, [pc, #276]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 800229c:	2200      	movs	r2, #0
 800229e:	701a      	strb	r2, [r3, #0]
 80022a0:	4b43      	ldr	r3, [pc, #268]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 80022a2:	2240      	movs	r2, #64	; 0x40
 80022a4:	705a      	strb	r2, [r3, #1]
 80022a6:	4b42      	ldr	r3, [pc, #264]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	709a      	strb	r2, [r3, #2]
				 blt_tx_buff[3]= ring_stack & 0xFF; blt_tx_buff[4]= (ring_stack >> 8) & 0xFF;
 80022ac:	4b3e      	ldr	r3, [pc, #248]	; (80023a8 <HAL_UART_RxCpltCallback+0x718>)
 80022ae:	781a      	ldrb	r2, [r3, #0]
 80022b0:	4b3f      	ldr	r3, [pc, #252]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 80022b2:	70da      	strb	r2, [r3, #3]
 80022b4:	4b3e      	ldr	r3, [pc, #248]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	711a      	strb	r2, [r3, #4]
				 HAL_UART_Transmit_IT(&huart4, blt_tx_buff, BUFFER_LEN);
 80022ba:	4b3e      	ldr	r3, [pc, #248]	; (80023b4 <HAL_UART_RxCpltCallback+0x724>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	b29b      	uxth	r3, r3
 80022c0:	461a      	mov	r2, r3
 80022c2:	493b      	ldr	r1, [pc, #236]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 80022c4:	483c      	ldr	r0, [pc, #240]	; (80023b8 <HAL_UART_RxCpltCallback+0x728>)
 80022c6:	f00e fd53 	bl	8010d70 <HAL_UART_Transmit_IT>
				 blt_tx_buff[0]= 128; blt_tx_buff[1]= 0; blt_tx_buff[2]= 0; blt_tx_buff[3]= 0; blt_tx_buff[4]= 0;
 80022ca:	4b39      	ldr	r3, [pc, #228]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 80022cc:	2280      	movs	r2, #128	; 0x80
 80022ce:	701a      	strb	r2, [r3, #0]
 80022d0:	4b37      	ldr	r3, [pc, #220]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	705a      	strb	r2, [r3, #1]
 80022d6:	4b36      	ldr	r3, [pc, #216]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 80022d8:	2200      	movs	r2, #0
 80022da:	709a      	strb	r2, [r3, #2]
 80022dc:	4b34      	ldr	r3, [pc, #208]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 80022de:	2200      	movs	r2, #0
 80022e0:	70da      	strb	r2, [r3, #3]
 80022e2:	4b33      	ldr	r3, [pc, #204]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	711a      	strb	r2, [r3, #4]
				 HAL_UART_Transmit_IT(&huart4, blt_tx_buff, BUFFER_LEN);
 80022e8:	4b32      	ldr	r3, [pc, #200]	; (80023b4 <HAL_UART_RxCpltCallback+0x724>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	461a      	mov	r2, r3
 80022f0:	492f      	ldr	r1, [pc, #188]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 80022f2:	4831      	ldr	r0, [pc, #196]	; (80023b8 <HAL_UART_RxCpltCallback+0x728>)
 80022f4:	f00e fd3c 	bl	8010d70 <HAL_UART_Transmit_IT>
			 }
			 if((blt_rx_buff[2]&0b00000010)==2){
 80022f8:	4b30      	ldr	r3, [pc, #192]	; (80023bc <HAL_UART_RxCpltCallback+0x72c>)
 80022fa:	789b      	ldrb	r3, [r3, #2]
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d03f      	beq.n	8002384 <HAL_UART_RxCpltCallback+0x6f4>
				 // USER CODE BEGIN ANGKOR 3
				 if(com_blt.isAng3) com_blt.isAng3 = 0;
 8002304:	4b27      	ldr	r3, [pc, #156]	; (80023a4 <HAL_UART_RxCpltCallback+0x714>)
 8002306:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800230a:	2b00      	cmp	r3, #0
 800230c:	d004      	beq.n	8002318 <HAL_UART_RxCpltCallback+0x688>
 800230e:	4b25      	ldr	r3, [pc, #148]	; (80023a4 <HAL_UART_RxCpltCallback+0x714>)
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8002316:	e003      	b.n	8002320 <HAL_UART_RxCpltCallback+0x690>
				 else com_blt.isAng3 = 1;
 8002318:	4b22      	ldr	r3, [pc, #136]	; (80023a4 <HAL_UART_RxCpltCallback+0x714>)
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
				 ring_stack=3;
 8002320:	4b21      	ldr	r3, [pc, #132]	; (80023a8 <HAL_UART_RxCpltCallback+0x718>)
 8002322:	2203      	movs	r2, #3
 8002324:	701a      	strb	r2, [r3, #0]
				 blt_tx_buff[0]= 0; blt_tx_buff[1]= 64; blt_tx_buff[2]= 0;
 8002326:	4b22      	ldr	r3, [pc, #136]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 8002328:	2200      	movs	r2, #0
 800232a:	701a      	strb	r2, [r3, #0]
 800232c:	4b20      	ldr	r3, [pc, #128]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 800232e:	2240      	movs	r2, #64	; 0x40
 8002330:	705a      	strb	r2, [r3, #1]
 8002332:	4b1f      	ldr	r3, [pc, #124]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 8002334:	2200      	movs	r2, #0
 8002336:	709a      	strb	r2, [r3, #2]
				 blt_tx_buff[3]= ring_stack & 0xFF; blt_tx_buff[4]= (ring_stack >> 8) & 0xFF;
 8002338:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <HAL_UART_RxCpltCallback+0x718>)
 800233a:	781a      	ldrb	r2, [r3, #0]
 800233c:	4b1c      	ldr	r3, [pc, #112]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 800233e:	70da      	strb	r2, [r3, #3]
 8002340:	4b1b      	ldr	r3, [pc, #108]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 8002342:	2200      	movs	r2, #0
 8002344:	711a      	strb	r2, [r3, #4]
				 HAL_UART_Transmit_IT(&huart4, blt_tx_buff, BUFFER_LEN);
 8002346:	4b1b      	ldr	r3, [pc, #108]	; (80023b4 <HAL_UART_RxCpltCallback+0x724>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	b29b      	uxth	r3, r3
 800234c:	461a      	mov	r2, r3
 800234e:	4918      	ldr	r1, [pc, #96]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 8002350:	4819      	ldr	r0, [pc, #100]	; (80023b8 <HAL_UART_RxCpltCallback+0x728>)
 8002352:	f00e fd0d 	bl	8010d70 <HAL_UART_Transmit_IT>
				 blt_tx_buff[0]= 0; blt_tx_buff[1]= 1; blt_tx_buff[2]= 0; blt_tx_buff[3]= 0; blt_tx_buff[4]= 0;
 8002356:	4b16      	ldr	r3, [pc, #88]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]
 800235c:	4b14      	ldr	r3, [pc, #80]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 800235e:	2201      	movs	r2, #1
 8002360:	705a      	strb	r2, [r3, #1]
 8002362:	4b13      	ldr	r3, [pc, #76]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 8002364:	2200      	movs	r2, #0
 8002366:	709a      	strb	r2, [r3, #2]
 8002368:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 800236a:	2200      	movs	r2, #0
 800236c:	70da      	strb	r2, [r3, #3]
 800236e:	4b10      	ldr	r3, [pc, #64]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 8002370:	2200      	movs	r2, #0
 8002372:	711a      	strb	r2, [r3, #4]
				 HAL_UART_Transmit_IT(&huart4, blt_tx_buff, BUFFER_LEN);
 8002374:	4b0f      	ldr	r3, [pc, #60]	; (80023b4 <HAL_UART_RxCpltCallback+0x724>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	b29b      	uxth	r3, r3
 800237a:	461a      	mov	r2, r3
 800237c:	490c      	ldr	r1, [pc, #48]	; (80023b0 <HAL_UART_RxCpltCallback+0x720>)
 800237e:	480e      	ldr	r0, [pc, #56]	; (80023b8 <HAL_UART_RxCpltCallback+0x728>)
 8002380:	f00e fcf6 	bl	8010d70 <HAL_UART_Transmit_IT>
			 }
			 if((blt_rx_buff[2]&0b00000100)==4){
 8002384:	4b0d      	ldr	r3, [pc, #52]	; (80023bc <HAL_UART_RxCpltCallback+0x72c>)
 8002386:	789b      	ldrb	r3, [r3, #2]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d04f      	beq.n	8002430 <HAL_UART_RxCpltCallback+0x7a0>
				 // USER CODE BEGIN ANGKOR 4
				 if(com_blt.isAng4) com_blt.isAng4 = 0;
 8002390:	4b04      	ldr	r3, [pc, #16]	; (80023a4 <HAL_UART_RxCpltCallback+0x714>)
 8002392:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002396:	2b00      	cmp	r3, #0
 8002398:	d014      	beq.n	80023c4 <HAL_UART_RxCpltCallback+0x734>
 800239a:	4b02      	ldr	r3, [pc, #8]	; (80023a4 <HAL_UART_RxCpltCallback+0x714>)
 800239c:	2200      	movs	r2, #0
 800239e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 80023a2:	e013      	b.n	80023cc <HAL_UART_RxCpltCallback+0x73c>
 80023a4:	20000914 	.word	0x20000914
 80023a8:	20000002 	.word	0x20000002
 80023ac:	2000104f 	.word	0x2000104f
 80023b0:	20000ff0 	.word	0x20000ff0
 80023b4:	20000001 	.word	0x20000001
 80023b8:	2000080c 	.word	0x2000080c
 80023bc:	20000fe8 	.word	0x20000fe8
 80023c0:	2000104e 	.word	0x2000104e
				 else com_blt.isAng4 = 1;
 80023c4:	4b8b      	ldr	r3, [pc, #556]	; (80025f4 <HAL_UART_RxCpltCallback+0x964>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				 ring_stack=4;
 80023cc:	4b8a      	ldr	r3, [pc, #552]	; (80025f8 <HAL_UART_RxCpltCallback+0x968>)
 80023ce:	2204      	movs	r2, #4
 80023d0:	701a      	strb	r2, [r3, #0]
				 blt_tx_buff[0]= 0; blt_tx_buff[1]= 64; blt_tx_buff[2]= 0;
 80023d2:	4b8a      	ldr	r3, [pc, #552]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	701a      	strb	r2, [r3, #0]
 80023d8:	4b88      	ldr	r3, [pc, #544]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 80023da:	2240      	movs	r2, #64	; 0x40
 80023dc:	705a      	strb	r2, [r3, #1]
 80023de:	4b87      	ldr	r3, [pc, #540]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	709a      	strb	r2, [r3, #2]
				 blt_tx_buff[3]= ring_stack & 0xFF; blt_tx_buff[4]= (ring_stack >> 8) & 0xFF;
 80023e4:	4b84      	ldr	r3, [pc, #528]	; (80025f8 <HAL_UART_RxCpltCallback+0x968>)
 80023e6:	781a      	ldrb	r2, [r3, #0]
 80023e8:	4b84      	ldr	r3, [pc, #528]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 80023ea:	70da      	strb	r2, [r3, #3]
 80023ec:	4b83      	ldr	r3, [pc, #524]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	711a      	strb	r2, [r3, #4]
				 HAL_UART_Transmit_IT(&huart4, blt_tx_buff, BUFFER_LEN);
 80023f2:	4b83      	ldr	r3, [pc, #524]	; (8002600 <HAL_UART_RxCpltCallback+0x970>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	461a      	mov	r2, r3
 80023fa:	4980      	ldr	r1, [pc, #512]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 80023fc:	4881      	ldr	r0, [pc, #516]	; (8002604 <HAL_UART_RxCpltCallback+0x974>)
 80023fe:	f00e fcb7 	bl	8010d70 <HAL_UART_Transmit_IT>
				 blt_tx_buff[0]= 0; blt_tx_buff[1]= 2; blt_tx_buff[2]= 0; blt_tx_buff[3]= 0; blt_tx_buff[4]= 0;
 8002402:	4b7e      	ldr	r3, [pc, #504]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 8002404:	2200      	movs	r2, #0
 8002406:	701a      	strb	r2, [r3, #0]
 8002408:	4b7c      	ldr	r3, [pc, #496]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 800240a:	2202      	movs	r2, #2
 800240c:	705a      	strb	r2, [r3, #1]
 800240e:	4b7b      	ldr	r3, [pc, #492]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 8002410:	2200      	movs	r2, #0
 8002412:	709a      	strb	r2, [r3, #2]
 8002414:	4b79      	ldr	r3, [pc, #484]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 8002416:	2200      	movs	r2, #0
 8002418:	70da      	strb	r2, [r3, #3]
 800241a:	4b78      	ldr	r3, [pc, #480]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 800241c:	2200      	movs	r2, #0
 800241e:	711a      	strb	r2, [r3, #4]
				 HAL_UART_Transmit_IT(&huart4, blt_tx_buff, BUFFER_LEN);
 8002420:	4b77      	ldr	r3, [pc, #476]	; (8002600 <HAL_UART_RxCpltCallback+0x970>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	b29b      	uxth	r3, r3
 8002426:	461a      	mov	r2, r3
 8002428:	4974      	ldr	r1, [pc, #464]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 800242a:	4876      	ldr	r0, [pc, #472]	; (8002604 <HAL_UART_RxCpltCallback+0x974>)
 800242c:	f00e fca0 	bl	8010d70 <HAL_UART_Transmit_IT>
			 }
			 if((blt_rx_buff[2]&0b00001000)==8){
 8002430:	4b75      	ldr	r3, [pc, #468]	; (8002608 <HAL_UART_RxCpltCallback+0x978>)
 8002432:	789b      	ldrb	r3, [r3, #2]
 8002434:	f003 0308 	and.w	r3, r3, #8
 8002438:	2b00      	cmp	r3, #0
 800243a:	d03f      	beq.n	80024bc <HAL_UART_RxCpltCallback+0x82c>
				 // USER CODE BEGIN ANGKOR 5
				 if(com_blt.isAng5) com_blt.isAng5 = 0;
 800243c:	4b6d      	ldr	r3, [pc, #436]	; (80025f4 <HAL_UART_RxCpltCallback+0x964>)
 800243e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002442:	2b00      	cmp	r3, #0
 8002444:	d004      	beq.n	8002450 <HAL_UART_RxCpltCallback+0x7c0>
 8002446:	4b6b      	ldr	r3, [pc, #428]	; (80025f4 <HAL_UART_RxCpltCallback+0x964>)
 8002448:	2200      	movs	r2, #0
 800244a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 800244e:	e003      	b.n	8002458 <HAL_UART_RxCpltCallback+0x7c8>
				 else com_blt.isAng5 = 1;
 8002450:	4b68      	ldr	r3, [pc, #416]	; (80025f4 <HAL_UART_RxCpltCallback+0x964>)
 8002452:	2201      	movs	r2, #1
 8002454:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				 ring_stack=5;
 8002458:	4b67      	ldr	r3, [pc, #412]	; (80025f8 <HAL_UART_RxCpltCallback+0x968>)
 800245a:	2205      	movs	r2, #5
 800245c:	701a      	strb	r2, [r3, #0]
				 blt_tx_buff[0]= 0; blt_tx_buff[1]= 64; blt_tx_buff[2]= 0;
 800245e:	4b67      	ldr	r3, [pc, #412]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 8002460:	2200      	movs	r2, #0
 8002462:	701a      	strb	r2, [r3, #0]
 8002464:	4b65      	ldr	r3, [pc, #404]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 8002466:	2240      	movs	r2, #64	; 0x40
 8002468:	705a      	strb	r2, [r3, #1]
 800246a:	4b64      	ldr	r3, [pc, #400]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 800246c:	2200      	movs	r2, #0
 800246e:	709a      	strb	r2, [r3, #2]
				 blt_tx_buff[3]= ring_stack & 0xFF; blt_tx_buff[4]= (ring_stack >> 8) & 0xFF;
 8002470:	4b61      	ldr	r3, [pc, #388]	; (80025f8 <HAL_UART_RxCpltCallback+0x968>)
 8002472:	781a      	ldrb	r2, [r3, #0]
 8002474:	4b61      	ldr	r3, [pc, #388]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 8002476:	70da      	strb	r2, [r3, #3]
 8002478:	4b60      	ldr	r3, [pc, #384]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 800247a:	2200      	movs	r2, #0
 800247c:	711a      	strb	r2, [r3, #4]
				 HAL_UART_Transmit_IT(&huart4, blt_tx_buff, BUFFER_LEN);
 800247e:	4b60      	ldr	r3, [pc, #384]	; (8002600 <HAL_UART_RxCpltCallback+0x970>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	b29b      	uxth	r3, r3
 8002484:	461a      	mov	r2, r3
 8002486:	495d      	ldr	r1, [pc, #372]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 8002488:	485e      	ldr	r0, [pc, #376]	; (8002604 <HAL_UART_RxCpltCallback+0x974>)
 800248a:	f00e fc71 	bl	8010d70 <HAL_UART_Transmit_IT>
				 blt_tx_buff[0]= 0; blt_tx_buff[1]= 4; blt_tx_buff[2]= 0; blt_tx_buff[3]= 0; blt_tx_buff[4]= 0;
 800248e:	4b5b      	ldr	r3, [pc, #364]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 8002490:	2200      	movs	r2, #0
 8002492:	701a      	strb	r2, [r3, #0]
 8002494:	4b59      	ldr	r3, [pc, #356]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 8002496:	2204      	movs	r2, #4
 8002498:	705a      	strb	r2, [r3, #1]
 800249a:	4b58      	ldr	r3, [pc, #352]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 800249c:	2200      	movs	r2, #0
 800249e:	709a      	strb	r2, [r3, #2]
 80024a0:	4b56      	ldr	r3, [pc, #344]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	70da      	strb	r2, [r3, #3]
 80024a6:	4b55      	ldr	r3, [pc, #340]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	711a      	strb	r2, [r3, #4]
				 HAL_UART_Transmit_IT(&huart4, blt_tx_buff, BUFFER_LEN);
 80024ac:	4b54      	ldr	r3, [pc, #336]	; (8002600 <HAL_UART_RxCpltCallback+0x970>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	461a      	mov	r2, r3
 80024b4:	4951      	ldr	r1, [pc, #324]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 80024b6:	4853      	ldr	r0, [pc, #332]	; (8002604 <HAL_UART_RxCpltCallback+0x974>)
 80024b8:	f00e fc5a 	bl	8010d70 <HAL_UART_Transmit_IT>
			 }
			 // Enemy Pole
			 if((blt_rx_buff[2]&0b00010000)==16){
 80024bc:	4b52      	ldr	r3, [pc, #328]	; (8002608 <HAL_UART_RxCpltCallback+0x978>)
 80024be:	789b      	ldrb	r3, [r3, #2]
 80024c0:	f003 0310 	and.w	r3, r3, #16
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d03f      	beq.n	8002548 <HAL_UART_RxCpltCallback+0x8b8>
				 // USER CODE BEGIN ENEMY 3
				 if(com_blt.isEn1) com_blt.isEn1 = 0;
 80024c8:	4b4a      	ldr	r3, [pc, #296]	; (80025f4 <HAL_UART_RxCpltCallback+0x964>)
 80024ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d004      	beq.n	80024dc <HAL_UART_RxCpltCallback+0x84c>
 80024d2:	4b48      	ldr	r3, [pc, #288]	; (80025f4 <HAL_UART_RxCpltCallback+0x964>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80024da:	e003      	b.n	80024e4 <HAL_UART_RxCpltCallback+0x854>
				 else com_blt.isEn1 = 1;
 80024dc:	4b45      	ldr	r3, [pc, #276]	; (80025f4 <HAL_UART_RxCpltCallback+0x964>)
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				 ring_stack=1;
 80024e4:	4b44      	ldr	r3, [pc, #272]	; (80025f8 <HAL_UART_RxCpltCallback+0x968>)
 80024e6:	2201      	movs	r2, #1
 80024e8:	701a      	strb	r2, [r3, #0]
				 blt_tx_buff[0]= 0; blt_tx_buff[1]= 64; blt_tx_buff[2]= 0;
 80024ea:	4b44      	ldr	r3, [pc, #272]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	701a      	strb	r2, [r3, #0]
 80024f0:	4b42      	ldr	r3, [pc, #264]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 80024f2:	2240      	movs	r2, #64	; 0x40
 80024f4:	705a      	strb	r2, [r3, #1]
 80024f6:	4b41      	ldr	r3, [pc, #260]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	709a      	strb	r2, [r3, #2]
				 blt_tx_buff[3]= ring_stack & 0xFF; blt_tx_buff[4]= (ring_stack >> 8) & 0xFF;
 80024fc:	4b3e      	ldr	r3, [pc, #248]	; (80025f8 <HAL_UART_RxCpltCallback+0x968>)
 80024fe:	781a      	ldrb	r2, [r3, #0]
 8002500:	4b3e      	ldr	r3, [pc, #248]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 8002502:	70da      	strb	r2, [r3, #3]
 8002504:	4b3d      	ldr	r3, [pc, #244]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 8002506:	2200      	movs	r2, #0
 8002508:	711a      	strb	r2, [r3, #4]
				 HAL_UART_Transmit_IT(&huart4, blt_tx_buff, BUFFER_LEN);
 800250a:	4b3d      	ldr	r3, [pc, #244]	; (8002600 <HAL_UART_RxCpltCallback+0x970>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	b29b      	uxth	r3, r3
 8002510:	461a      	mov	r2, r3
 8002512:	493a      	ldr	r1, [pc, #232]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 8002514:	483b      	ldr	r0, [pc, #236]	; (8002604 <HAL_UART_RxCpltCallback+0x974>)
 8002516:	f00e fc2b 	bl	8010d70 <HAL_UART_Transmit_IT>
				 blt_tx_buff[0]= 0; blt_tx_buff[1]= 8; blt_tx_buff[2]= 0; blt_tx_buff[3]= 0; blt_tx_buff[4]= 0;
 800251a:	4b38      	ldr	r3, [pc, #224]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 800251c:	2200      	movs	r2, #0
 800251e:	701a      	strb	r2, [r3, #0]
 8002520:	4b36      	ldr	r3, [pc, #216]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 8002522:	2208      	movs	r2, #8
 8002524:	705a      	strb	r2, [r3, #1]
 8002526:	4b35      	ldr	r3, [pc, #212]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 8002528:	2200      	movs	r2, #0
 800252a:	709a      	strb	r2, [r3, #2]
 800252c:	4b33      	ldr	r3, [pc, #204]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 800252e:	2200      	movs	r2, #0
 8002530:	70da      	strb	r2, [r3, #3]
 8002532:	4b32      	ldr	r3, [pc, #200]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 8002534:	2200      	movs	r2, #0
 8002536:	711a      	strb	r2, [r3, #4]
				 HAL_UART_Transmit_IT(&huart4, blt_tx_buff, BUFFER_LEN);
 8002538:	4b31      	ldr	r3, [pc, #196]	; (8002600 <HAL_UART_RxCpltCallback+0x970>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	b29b      	uxth	r3, r3
 800253e:	461a      	mov	r2, r3
 8002540:	492e      	ldr	r1, [pc, #184]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 8002542:	4830      	ldr	r0, [pc, #192]	; (8002604 <HAL_UART_RxCpltCallback+0x974>)
 8002544:	f00e fc14 	bl	8010d70 <HAL_UART_Transmit_IT>
			 }
			 if((blt_rx_buff[2]&0b00100000)==32){
 8002548:	4b2f      	ldr	r3, [pc, #188]	; (8002608 <HAL_UART_RxCpltCallback+0x978>)
 800254a:	789b      	ldrb	r3, [r3, #2]
 800254c:	f003 0320 	and.w	r3, r3, #32
 8002550:	2b00      	cmp	r3, #0
 8002552:	d03f      	beq.n	80025d4 <HAL_UART_RxCpltCallback+0x944>
				 // USER CODE BEGIN ENEMY 2
				 if(com_blt.isEn2) com_blt.isEn2 = 0;
 8002554:	4b27      	ldr	r3, [pc, #156]	; (80025f4 <HAL_UART_RxCpltCallback+0x964>)
 8002556:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800255a:	2b00      	cmp	r3, #0
 800255c:	d004      	beq.n	8002568 <HAL_UART_RxCpltCallback+0x8d8>
 800255e:	4b25      	ldr	r3, [pc, #148]	; (80025f4 <HAL_UART_RxCpltCallback+0x964>)
 8002560:	2200      	movs	r2, #0
 8002562:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8002566:	e003      	b.n	8002570 <HAL_UART_RxCpltCallback+0x8e0>
				 else com_blt.isEn2 = 1;
 8002568:	4b22      	ldr	r3, [pc, #136]	; (80025f4 <HAL_UART_RxCpltCallback+0x964>)
 800256a:	2201      	movs	r2, #1
 800256c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				 ring_stack=2;
 8002570:	4b21      	ldr	r3, [pc, #132]	; (80025f8 <HAL_UART_RxCpltCallback+0x968>)
 8002572:	2202      	movs	r2, #2
 8002574:	701a      	strb	r2, [r3, #0]
				 blt_tx_buff[0]= 0; blt_tx_buff[1]= 64; blt_tx_buff[2]= 0;
 8002576:	4b21      	ldr	r3, [pc, #132]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 8002578:	2200      	movs	r2, #0
 800257a:	701a      	strb	r2, [r3, #0]
 800257c:	4b1f      	ldr	r3, [pc, #124]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 800257e:	2240      	movs	r2, #64	; 0x40
 8002580:	705a      	strb	r2, [r3, #1]
 8002582:	4b1e      	ldr	r3, [pc, #120]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 8002584:	2200      	movs	r2, #0
 8002586:	709a      	strb	r2, [r3, #2]
				 blt_tx_buff[3]= ring_stack & 0xFF; blt_tx_buff[4]= (ring_stack >> 8) & 0xFF;
 8002588:	4b1b      	ldr	r3, [pc, #108]	; (80025f8 <HAL_UART_RxCpltCallback+0x968>)
 800258a:	781a      	ldrb	r2, [r3, #0]
 800258c:	4b1b      	ldr	r3, [pc, #108]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 800258e:	70da      	strb	r2, [r3, #3]
 8002590:	4b1a      	ldr	r3, [pc, #104]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 8002592:	2200      	movs	r2, #0
 8002594:	711a      	strb	r2, [r3, #4]
				 HAL_UART_Transmit_IT(&huart4, blt_tx_buff, BUFFER_LEN);
 8002596:	4b1a      	ldr	r3, [pc, #104]	; (8002600 <HAL_UART_RxCpltCallback+0x970>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	b29b      	uxth	r3, r3
 800259c:	461a      	mov	r2, r3
 800259e:	4917      	ldr	r1, [pc, #92]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 80025a0:	4818      	ldr	r0, [pc, #96]	; (8002604 <HAL_UART_RxCpltCallback+0x974>)
 80025a2:	f00e fbe5 	bl	8010d70 <HAL_UART_Transmit_IT>
				 blt_tx_buff[0]= 0;blt_tx_buff[1]= 16; blt_tx_buff[2]= 0; blt_tx_buff[3]= 0; blt_tx_buff[4]= 0;
 80025a6:	4b15      	ldr	r3, [pc, #84]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	701a      	strb	r2, [r3, #0]
 80025ac:	4b13      	ldr	r3, [pc, #76]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 80025ae:	2210      	movs	r2, #16
 80025b0:	705a      	strb	r2, [r3, #1]
 80025b2:	4b12      	ldr	r3, [pc, #72]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	709a      	strb	r2, [r3, #2]
 80025b8:	4b10      	ldr	r3, [pc, #64]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	70da      	strb	r2, [r3, #3]
 80025be:	4b0f      	ldr	r3, [pc, #60]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	711a      	strb	r2, [r3, #4]
				 HAL_UART_Transmit_IT(&huart4, blt_tx_buff, BUFFER_LEN);
 80025c4:	4b0e      	ldr	r3, [pc, #56]	; (8002600 <HAL_UART_RxCpltCallback+0x970>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	461a      	mov	r2, r3
 80025cc:	490b      	ldr	r1, [pc, #44]	; (80025fc <HAL_UART_RxCpltCallback+0x96c>)
 80025ce:	480d      	ldr	r0, [pc, #52]	; (8002604 <HAL_UART_RxCpltCallback+0x974>)
 80025d0:	f00e fbce 	bl	8010d70 <HAL_UART_Transmit_IT>
			 }
			 if((blt_rx_buff[2]&0b01000000)==64){
 80025d4:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <HAL_UART_RxCpltCallback+0x978>)
 80025d6:	789b      	ldrb	r3, [r3, #2]
 80025d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d04b      	beq.n	8002678 <HAL_UART_RxCpltCallback+0x9e8>
				 // USER CODE BEGIN ENEMY 1
				 if(com_blt.isEn3) com_blt.isEn3 = 0;
 80025e0:	4b04      	ldr	r3, [pc, #16]	; (80025f4 <HAL_UART_RxCpltCallback+0x964>)
 80025e2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d010      	beq.n	800260c <HAL_UART_RxCpltCallback+0x97c>
 80025ea:	4b02      	ldr	r3, [pc, #8]	; (80025f4 <HAL_UART_RxCpltCallback+0x964>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 80025f2:	e00f      	b.n	8002614 <HAL_UART_RxCpltCallback+0x984>
 80025f4:	20000914 	.word	0x20000914
 80025f8:	20000002 	.word	0x20000002
 80025fc:	20000ff0 	.word	0x20000ff0
 8002600:	20000001 	.word	0x20000001
 8002604:	2000080c 	.word	0x2000080c
 8002608:	20000fe8 	.word	0x20000fe8
				 else com_blt.isEn3 = 1;
 800260c:	4baa      	ldr	r3, [pc, #680]	; (80028b8 <HAL_UART_RxCpltCallback+0xc28>)
 800260e:	2201      	movs	r2, #1
 8002610:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				 ring_stack=3;
 8002614:	4ba9      	ldr	r3, [pc, #676]	; (80028bc <HAL_UART_RxCpltCallback+0xc2c>)
 8002616:	2203      	movs	r2, #3
 8002618:	701a      	strb	r2, [r3, #0]
				 blt_tx_buff[0]= 0; blt_tx_buff[1]= 64; blt_tx_buff[2]= 0;
 800261a:	4ba9      	ldr	r3, [pc, #676]	; (80028c0 <HAL_UART_RxCpltCallback+0xc30>)
 800261c:	2200      	movs	r2, #0
 800261e:	701a      	strb	r2, [r3, #0]
 8002620:	4ba7      	ldr	r3, [pc, #668]	; (80028c0 <HAL_UART_RxCpltCallback+0xc30>)
 8002622:	2240      	movs	r2, #64	; 0x40
 8002624:	705a      	strb	r2, [r3, #1]
 8002626:	4ba6      	ldr	r3, [pc, #664]	; (80028c0 <HAL_UART_RxCpltCallback+0xc30>)
 8002628:	2200      	movs	r2, #0
 800262a:	709a      	strb	r2, [r3, #2]
				 blt_tx_buff[3]= ring_stack & 0xFF; blt_tx_buff[4]= (ring_stack >> 8) & 0xFF;
 800262c:	4ba3      	ldr	r3, [pc, #652]	; (80028bc <HAL_UART_RxCpltCallback+0xc2c>)
 800262e:	781a      	ldrb	r2, [r3, #0]
 8002630:	4ba3      	ldr	r3, [pc, #652]	; (80028c0 <HAL_UART_RxCpltCallback+0xc30>)
 8002632:	70da      	strb	r2, [r3, #3]
 8002634:	4ba2      	ldr	r3, [pc, #648]	; (80028c0 <HAL_UART_RxCpltCallback+0xc30>)
 8002636:	2200      	movs	r2, #0
 8002638:	711a      	strb	r2, [r3, #4]
				 HAL_UART_Transmit_IT(&huart4, blt_tx_buff, BUFFER_LEN);
 800263a:	4ba2      	ldr	r3, [pc, #648]	; (80028c4 <HAL_UART_RxCpltCallback+0xc34>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	b29b      	uxth	r3, r3
 8002640:	461a      	mov	r2, r3
 8002642:	499f      	ldr	r1, [pc, #636]	; (80028c0 <HAL_UART_RxCpltCallback+0xc30>)
 8002644:	48a0      	ldr	r0, [pc, #640]	; (80028c8 <HAL_UART_RxCpltCallback+0xc38>)
 8002646:	f00e fb93 	bl	8010d70 <HAL_UART_Transmit_IT>
				 blt_tx_buff[0]= 0;blt_tx_buff[1]= 32;blt_tx_buff[2]= 0;blt_tx_buff[3]= 0;blt_tx_buff[4]= 0;
 800264a:	4b9d      	ldr	r3, [pc, #628]	; (80028c0 <HAL_UART_RxCpltCallback+0xc30>)
 800264c:	2200      	movs	r2, #0
 800264e:	701a      	strb	r2, [r3, #0]
 8002650:	4b9b      	ldr	r3, [pc, #620]	; (80028c0 <HAL_UART_RxCpltCallback+0xc30>)
 8002652:	2220      	movs	r2, #32
 8002654:	705a      	strb	r2, [r3, #1]
 8002656:	4b9a      	ldr	r3, [pc, #616]	; (80028c0 <HAL_UART_RxCpltCallback+0xc30>)
 8002658:	2200      	movs	r2, #0
 800265a:	709a      	strb	r2, [r3, #2]
 800265c:	4b98      	ldr	r3, [pc, #608]	; (80028c0 <HAL_UART_RxCpltCallback+0xc30>)
 800265e:	2200      	movs	r2, #0
 8002660:	70da      	strb	r2, [r3, #3]
 8002662:	4b97      	ldr	r3, [pc, #604]	; (80028c0 <HAL_UART_RxCpltCallback+0xc30>)
 8002664:	2200      	movs	r2, #0
 8002666:	711a      	strb	r2, [r3, #4]
				 HAL_UART_Transmit_IT(&huart4, blt_tx_buff, BUFFER_LEN); //mengirimkan state ke android
 8002668:	4b96      	ldr	r3, [pc, #600]	; (80028c4 <HAL_UART_RxCpltCallback+0xc34>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	b29b      	uxth	r3, r3
 800266e:	461a      	mov	r2, r3
 8002670:	4993      	ldr	r1, [pc, #588]	; (80028c0 <HAL_UART_RxCpltCallback+0xc30>)
 8002672:	4895      	ldr	r0, [pc, #596]	; (80028c8 <HAL_UART_RxCpltCallback+0xc38>)
 8002674:	f00e fb7c 	bl	8010d70 <HAL_UART_Transmit_IT>
			 }
			 HAL_UART_Receive_IT(&huart4, blt_rx_buff, BUFFER_LEN);
 8002678:	4b92      	ldr	r3, [pc, #584]	; (80028c4 <HAL_UART_RxCpltCallback+0xc34>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	b29b      	uxth	r3, r3
 800267e:	461a      	mov	r2, r3
 8002680:	4992      	ldr	r1, [pc, #584]	; (80028cc <HAL_UART_RxCpltCallback+0xc3c>)
 8002682:	4891      	ldr	r0, [pc, #580]	; (80028c8 <HAL_UART_RxCpltCallback+0xc38>)
 8002684:	f00e fc1c 	bl	8010ec0 <HAL_UART_Receive_IT>
			}
			// Jika Berasal dari motion event
			if((blt_rx_buff[0]&2)==2){
 8002688:	4b90      	ldr	r3, [pc, #576]	; (80028cc <HAL_UART_RxCpltCallback+0xc3c>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 8107 	beq.w	80028a4 <HAL_UART_RxCpltCallback+0xc14>
			 if((blt_rx_buff[0]&4)==4){
 8002696:	4b8d      	ldr	r3, [pc, #564]	; (80028cc <HAL_UART_RxCpltCallback+0xc3c>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	f003 0304 	and.w	r3, r3, #4
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 808e 	beq.w	80027c0 <HAL_UART_RxCpltCallback+0xb30>
				 // jika input berasal dari Right joystick
				 com_blt.x_rjoystick_int = (blt_rx_buff[0]>>4) | (blt_rx_buff[1]<<4) | ((blt_rx_buff[2]&0x3F)<<12);
 80026a4:	4b89      	ldr	r3, [pc, #548]	; (80028cc <HAL_UART_RxCpltCallback+0xc3c>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	091b      	lsrs	r3, r3, #4
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	461a      	mov	r2, r3
 80026ae:	4b87      	ldr	r3, [pc, #540]	; (80028cc <HAL_UART_RxCpltCallback+0xc3c>)
 80026b0:	785b      	ldrb	r3, [r3, #1]
 80026b2:	011b      	lsls	r3, r3, #4
 80026b4:	431a      	orrs	r2, r3
 80026b6:	4b85      	ldr	r3, [pc, #532]	; (80028cc <HAL_UART_RxCpltCallback+0xc3c>)
 80026b8:	789b      	ldrb	r3, [r3, #2]
 80026ba:	031b      	lsls	r3, r3, #12
 80026bc:	f403 337c 	and.w	r3, r3, #258048	; 0x3f000
 80026c0:	4313      	orrs	r3, r2
 80026c2:	4a7d      	ldr	r2, [pc, #500]	; (80028b8 <HAL_UART_RxCpltCallback+0xc28>)
 80026c4:	6193      	str	r3, [r2, #24]
				 com_blt.y_rjoystick_int = (blt_rx_buff[2]>>6) | (blt_rx_buff[3]<<2) | (blt_rx_buff[4]<<10);
 80026c6:	4b81      	ldr	r3, [pc, #516]	; (80028cc <HAL_UART_RxCpltCallback+0xc3c>)
 80026c8:	789b      	ldrb	r3, [r3, #2]
 80026ca:	099b      	lsrs	r3, r3, #6
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	461a      	mov	r2, r3
 80026d0:	4b7e      	ldr	r3, [pc, #504]	; (80028cc <HAL_UART_RxCpltCallback+0xc3c>)
 80026d2:	78db      	ldrb	r3, [r3, #3]
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	431a      	orrs	r2, r3
 80026d8:	4b7c      	ldr	r3, [pc, #496]	; (80028cc <HAL_UART_RxCpltCallback+0xc3c>)
 80026da:	791b      	ldrb	r3, [r3, #4]
 80026dc:	029b      	lsls	r3, r3, #10
 80026de:	4313      	orrs	r3, r2
 80026e0:	4a75      	ldr	r2, [pc, #468]	; (80028b8 <HAL_UART_RxCpltCallback+0xc28>)
 80026e2:	61d3      	str	r3, [r2, #28]

				 //Jika X Negatif
				 if((blt_rx_buff[2]&32)==32) com_blt.x_rjoystick_int |= 0xFFFC0000;
 80026e4:	4b79      	ldr	r3, [pc, #484]	; (80028cc <HAL_UART_RxCpltCallback+0xc3c>)
 80026e6:	789b      	ldrb	r3, [r3, #2]
 80026e8:	f003 0320 	and.w	r3, r3, #32
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d007      	beq.n	8002700 <HAL_UART_RxCpltCallback+0xa70>
 80026f0:	4b71      	ldr	r3, [pc, #452]	; (80028b8 <HAL_UART_RxCpltCallback+0xc28>)
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	461a      	mov	r2, r3
 80026f6:	4b76      	ldr	r3, [pc, #472]	; (80028d0 <HAL_UART_RxCpltCallback+0xc40>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	461a      	mov	r2, r3
 80026fc:	4b6e      	ldr	r3, [pc, #440]	; (80028b8 <HAL_UART_RxCpltCallback+0xc28>)
 80026fe:	619a      	str	r2, [r3, #24]
				 //Jika Y Negatif
				 if((blt_rx_buff[4]&128) == 128) com_blt.y_rjoystick_int |= 0xFFFC0000;
 8002700:	4b72      	ldr	r3, [pc, #456]	; (80028cc <HAL_UART_RxCpltCallback+0xc3c>)
 8002702:	791b      	ldrb	r3, [r3, #4]
 8002704:	b25b      	sxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	da07      	bge.n	800271a <HAL_UART_RxCpltCallback+0xa8a>
 800270a:	4b6b      	ldr	r3, [pc, #428]	; (80028b8 <HAL_UART_RxCpltCallback+0xc28>)
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	461a      	mov	r2, r3
 8002710:	4b6f      	ldr	r3, [pc, #444]	; (80028d0 <HAL_UART_RxCpltCallback+0xc40>)
 8002712:	4313      	orrs	r3, r2
 8002714:	461a      	mov	r2, r3
 8002716:	4b68      	ldr	r3, [pc, #416]	; (80028b8 <HAL_UART_RxCpltCallback+0xc28>)
 8002718:	61da      	str	r2, [r3, #28]

				 // Konvert integer ke float
				 com_blt.x_rjoystick = com_blt.x_rjoystick_int / 100000.0;
 800271a:	4b67      	ldr	r3, [pc, #412]	; (80028b8 <HAL_UART_RxCpltCallback+0xc28>)
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	ee07 3a90 	vmov	s15, r3
 8002722:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002726:	ed9f 5b62 	vldr	d5, [pc, #392]	; 80028b0 <HAL_UART_RxCpltCallback+0xc20>
 800272a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800272e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002732:	4b61      	ldr	r3, [pc, #388]	; (80028b8 <HAL_UART_RxCpltCallback+0xc28>)
 8002734:	edc3 7a02 	vstr	s15, [r3, #8]
				 com_blt.y_rjoystick = com_blt.y_rjoystick_int / 100000.0;
 8002738:	4b5f      	ldr	r3, [pc, #380]	; (80028b8 <HAL_UART_RxCpltCallback+0xc28>)
 800273a:	69db      	ldr	r3, [r3, #28]
 800273c:	ee07 3a90 	vmov	s15, r3
 8002740:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002744:	ed9f 5b5a 	vldr	d5, [pc, #360]	; 80028b0 <HAL_UART_RxCpltCallback+0xc20>
 8002748:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800274c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002750:	4b59      	ldr	r3, [pc, #356]	; (80028b8 <HAL_UART_RxCpltCallback+0xc28>)
 8002752:	edc3 7a03 	vstr	s15, [r3, #12]
				 manual.vx = com_blt.x_rjoystick * -1200 * speed_mul * Dir_negation;
 8002756:	4b58      	ldr	r3, [pc, #352]	; (80028b8 <HAL_UART_RxCpltCallback+0xc28>)
 8002758:	edd3 7a02 	vldr	s15, [r3, #8]
 800275c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80028d4 <HAL_UART_RxCpltCallback+0xc44>
 8002760:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002764:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002768:	4b5b      	ldr	r3, [pc, #364]	; (80028d8 <HAL_UART_RxCpltCallback+0xc48>)
 800276a:	ed93 7b00 	vldr	d7, [r3]
 800276e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002772:	4b5a      	ldr	r3, [pc, #360]	; (80028dc <HAL_UART_RxCpltCallback+0xc4c>)
 8002774:	f993 3000 	ldrsb.w	r3, [r3]
 8002778:	ee07 3a90 	vmov	s15, r3
 800277c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002780:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002784:	4b56      	ldr	r3, [pc, #344]	; (80028e0 <HAL_UART_RxCpltCallback+0xc50>)
 8002786:	ed83 7b00 	vstr	d7, [r3]
				 manual.vy = com_blt.y_rjoystick * 1200 * speed_mul * Dir_negation;
 800278a:	4b4b      	ldr	r3, [pc, #300]	; (80028b8 <HAL_UART_RxCpltCallback+0xc28>)
 800278c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002790:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80028e4 <HAL_UART_RxCpltCallback+0xc54>
 8002794:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002798:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800279c:	4b4e      	ldr	r3, [pc, #312]	; (80028d8 <HAL_UART_RxCpltCallback+0xc48>)
 800279e:	ed93 7b00 	vldr	d7, [r3]
 80027a2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80027a6:	4b4d      	ldr	r3, [pc, #308]	; (80028dc <HAL_UART_RxCpltCallback+0xc4c>)
 80027a8:	f993 3000 	ldrsb.w	r3, [r3]
 80027ac:	ee07 3a90 	vmov	s15, r3
 80027b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80027b4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80027b8:	4b49      	ldr	r3, [pc, #292]	; (80028e0 <HAL_UART_RxCpltCallback+0xc50>)
 80027ba:	ed83 7b02 	vstr	d7, [r3, #8]
 80027be:	e069      	b.n	8002894 <HAL_UART_RxCpltCallback+0xc04>
	//			 tx_len = sprintf(blt_tx_buff, "xr:%d yr:%d \n", xRight, yRight);
			 }else{
				 // jika input berasal dari Left joystick
				 com_blt.x_ljoystick_int = (blt_rx_buff[0]>>4) | (blt_rx_buff[1]<<4) | ((blt_rx_buff[2]&0x3F)<<12);
 80027c0:	4b42      	ldr	r3, [pc, #264]	; (80028cc <HAL_UART_RxCpltCallback+0xc3c>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	091b      	lsrs	r3, r3, #4
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	461a      	mov	r2, r3
 80027ca:	4b40      	ldr	r3, [pc, #256]	; (80028cc <HAL_UART_RxCpltCallback+0xc3c>)
 80027cc:	785b      	ldrb	r3, [r3, #1]
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	431a      	orrs	r2, r3
 80027d2:	4b3e      	ldr	r3, [pc, #248]	; (80028cc <HAL_UART_RxCpltCallback+0xc3c>)
 80027d4:	789b      	ldrb	r3, [r3, #2]
 80027d6:	031b      	lsls	r3, r3, #12
 80027d8:	f403 337c 	and.w	r3, r3, #258048	; 0x3f000
 80027dc:	4313      	orrs	r3, r2
 80027de:	4a36      	ldr	r2, [pc, #216]	; (80028b8 <HAL_UART_RxCpltCallback+0xc28>)
 80027e0:	6113      	str	r3, [r2, #16]
				 com_blt.y_ljoystick_int = (blt_rx_buff[2]>>6) | (blt_rx_buff[3]<<2) | (blt_rx_buff[4]<<10);
 80027e2:	4b3a      	ldr	r3, [pc, #232]	; (80028cc <HAL_UART_RxCpltCallback+0xc3c>)
 80027e4:	789b      	ldrb	r3, [r3, #2]
 80027e6:	099b      	lsrs	r3, r3, #6
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	461a      	mov	r2, r3
 80027ec:	4b37      	ldr	r3, [pc, #220]	; (80028cc <HAL_UART_RxCpltCallback+0xc3c>)
 80027ee:	78db      	ldrb	r3, [r3, #3]
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	431a      	orrs	r2, r3
 80027f4:	4b35      	ldr	r3, [pc, #212]	; (80028cc <HAL_UART_RxCpltCallback+0xc3c>)
 80027f6:	791b      	ldrb	r3, [r3, #4]
 80027f8:	029b      	lsls	r3, r3, #10
 80027fa:	4313      	orrs	r3, r2
 80027fc:	4a2e      	ldr	r2, [pc, #184]	; (80028b8 <HAL_UART_RxCpltCallback+0xc28>)
 80027fe:	6153      	str	r3, [r2, #20]

				 //Jika X Negatif
				 if((blt_rx_buff[2]&32)==32) com_blt.x_ljoystick_int |= 0xFFFC0000;
 8002800:	4b32      	ldr	r3, [pc, #200]	; (80028cc <HAL_UART_RxCpltCallback+0xc3c>)
 8002802:	789b      	ldrb	r3, [r3, #2]
 8002804:	f003 0320 	and.w	r3, r3, #32
 8002808:	2b00      	cmp	r3, #0
 800280a:	d007      	beq.n	800281c <HAL_UART_RxCpltCallback+0xb8c>
 800280c:	4b2a      	ldr	r3, [pc, #168]	; (80028b8 <HAL_UART_RxCpltCallback+0xc28>)
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	461a      	mov	r2, r3
 8002812:	4b2f      	ldr	r3, [pc, #188]	; (80028d0 <HAL_UART_RxCpltCallback+0xc40>)
 8002814:	4313      	orrs	r3, r2
 8002816:	461a      	mov	r2, r3
 8002818:	4b27      	ldr	r3, [pc, #156]	; (80028b8 <HAL_UART_RxCpltCallback+0xc28>)
 800281a:	611a      	str	r2, [r3, #16]
				 //Jika Y Negatif
				 if((blt_rx_buff[4]&128) == 128) com_blt.y_ljoystick_int |= 0xFFFC0000;
 800281c:	4b2b      	ldr	r3, [pc, #172]	; (80028cc <HAL_UART_RxCpltCallback+0xc3c>)
 800281e:	791b      	ldrb	r3, [r3, #4]
 8002820:	b25b      	sxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	da07      	bge.n	8002836 <HAL_UART_RxCpltCallback+0xba6>
 8002826:	4b24      	ldr	r3, [pc, #144]	; (80028b8 <HAL_UART_RxCpltCallback+0xc28>)
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	461a      	mov	r2, r3
 800282c:	4b28      	ldr	r3, [pc, #160]	; (80028d0 <HAL_UART_RxCpltCallback+0xc40>)
 800282e:	4313      	orrs	r3, r2
 8002830:	461a      	mov	r2, r3
 8002832:	4b21      	ldr	r3, [pc, #132]	; (80028b8 <HAL_UART_RxCpltCallback+0xc28>)
 8002834:	615a      	str	r2, [r3, #20]

				 // Konvert integer ke float
				 com_blt.x_ljoystick = com_blt.x_ljoystick_int / 100000.0;
 8002836:	4b20      	ldr	r3, [pc, #128]	; (80028b8 <HAL_UART_RxCpltCallback+0xc28>)
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	ee07 3a90 	vmov	s15, r3
 800283e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002842:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 80028b0 <HAL_UART_RxCpltCallback+0xc20>
 8002846:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800284a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800284e:	4b1a      	ldr	r3, [pc, #104]	; (80028b8 <HAL_UART_RxCpltCallback+0xc28>)
 8002850:	edc3 7a00 	vstr	s15, [r3]
				 com_blt.y_ljoystick = com_blt.y_ljoystick_int / 100000.0;
 8002854:	4b18      	ldr	r3, [pc, #96]	; (80028b8 <HAL_UART_RxCpltCallback+0xc28>)
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	ee07 3a90 	vmov	s15, r3
 800285c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002860:	ed9f 5b13 	vldr	d5, [pc, #76]	; 80028b0 <HAL_UART_RxCpltCallback+0xc20>
 8002864:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002868:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800286c:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <HAL_UART_RxCpltCallback+0xc28>)
 800286e:	edc3 7a01 	vstr	s15, [r3, #4]
				 manual.v_yaw = com_blt.x_ljoystick * 500 * speed_mul;
 8002872:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <HAL_UART_RxCpltCallback+0xc28>)
 8002874:	edd3 7a00 	vldr	s15, [r3]
 8002878:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80028e8 <HAL_UART_RxCpltCallback+0xc58>
 800287c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002880:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002884:	4b14      	ldr	r3, [pc, #80]	; (80028d8 <HAL_UART_RxCpltCallback+0xc48>)
 8002886:	ed93 7b00 	vldr	d7, [r3]
 800288a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800288e:	4b14      	ldr	r3, [pc, #80]	; (80028e0 <HAL_UART_RxCpltCallback+0xc50>)
 8002890:	ed83 7b04 	vstr	d7, [r3, #16]
	//			 tx_len = sprintf(blt_tx_buff, "xl:%d yl:%d \n", xLeft, yLeft);
			 }
			 HAL_UART_Receive_IT(&huart4, blt_rx_buff, BUFFER_LEN);
 8002894:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <HAL_UART_RxCpltCallback+0xc34>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	b29b      	uxth	r3, r3
 800289a:	461a      	mov	r2, r3
 800289c:	490b      	ldr	r1, [pc, #44]	; (80028cc <HAL_UART_RxCpltCallback+0xc3c>)
 800289e:	480a      	ldr	r0, [pc, #40]	; (80028c8 <HAL_UART_RxCpltCallback+0xc38>)
 80028a0:	f00e fb0e 	bl	8010ec0 <HAL_UART_Receive_IT>
//		{
//			v_test = 0;
//			HAL_GPIO_TogglePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin);
//		}
//	}
}
 80028a4:	bf00      	nop
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	f3af 8000 	nop.w
 80028b0:	00000000 	.word	0x00000000
 80028b4:	40f86a00 	.word	0x40f86a00
 80028b8:	20000914 	.word	0x20000914
 80028bc:	20000002 	.word	0x20000002
 80028c0:	20000ff0 	.word	0x20000ff0
 80028c4:	20000001 	.word	0x20000001
 80028c8:	2000080c 	.word	0x2000080c
 80028cc:	20000fe8 	.word	0x20000fe8
 80028d0:	fffc0000 	.word	0xfffc0000
 80028d4:	c4960000 	.word	0xc4960000
 80028d8:	20000008 	.word	0x20000008
 80028dc:	20000010 	.word	0x20000010
 80028e0:	200009c8 	.word	0x200009c8
 80028e4:	44960000 	.word	0x44960000
 80028e8:	43fa0000 	.word	0x43fa0000

080028ec <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
	if (hfdcan->Instance == FDCAN1)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a0b      	ldr	r2, [pc, #44]	; (8002928 <HAL_FDCAN_RxFifo0Callback+0x3c>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d10f      	bne.n	8002920 <HAL_FDCAN_RxFifo0Callback+0x34>
	{
		if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00a      	beq.n	8002920 <HAL_FDCAN_RxFifo0Callback+0x34>
		{
			HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &can1_rx_header, can1_rx_data);
 800290a:	4b08      	ldr	r3, [pc, #32]	; (800292c <HAL_FDCAN_RxFifo0Callback+0x40>)
 800290c:	4a08      	ldr	r2, [pc, #32]	; (8002930 <HAL_FDCAN_RxFifo0Callback+0x44>)
 800290e:	2140      	movs	r1, #64	; 0x40
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f006 fad9 	bl	8008ec8 <HAL_FDCAN_GetRxMessage>
			HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8002916:	2200      	movs	r2, #0
 8002918:	2101      	movs	r1, #1
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f006 fc54 	bl	80091c8 <HAL_FDCAN_ActivateNotification>
		}
	}
}
 8002920:	bf00      	nop
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	4000a000 	.word	0x4000a000
 800292c:	20001010 	.word	0x20001010
 8002930:	20000aa0 	.word	0x20000aa0
 8002934:	00000000 	.word	0x00000000

08002938 <HAL_FDCAN_RxFifo1Callback>:

void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
	v_test++;
 8002942:	4b45      	ldr	r3, [pc, #276]	; (8002a58 <HAL_FDCAN_RxFifo1Callback+0x120>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	3301      	adds	r3, #1
 8002948:	4a43      	ldr	r2, [pc, #268]	; (8002a58 <HAL_FDCAN_RxFifo1Callback+0x120>)
 800294a:	6013      	str	r3, [r2, #0]
	if((RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) != 0)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	f003 0310 	and.w	r3, r3, #16
 8002952:	2b00      	cmp	r3, #0
 8002954:	d077      	beq.n	8002a46 <HAL_FDCAN_RxFifo1Callback+0x10e>
	{
		HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO1, &can2_rx_header, can2_rx_data);
 8002956:	4b41      	ldr	r3, [pc, #260]	; (8002a5c <HAL_FDCAN_RxFifo1Callback+0x124>)
 8002958:	4a41      	ldr	r2, [pc, #260]	; (8002a60 <HAL_FDCAN_RxFifo1Callback+0x128>)
 800295a:	2141      	movs	r1, #65	; 0x41
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f006 fab3 	bl	8008ec8 <HAL_FDCAN_GetRxMessage>
		HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0);
 8002962:	2200      	movs	r2, #0
 8002964:	2110      	movs	r1, #16
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f006 fc2e 	bl	80091c8 <HAL_FDCAN_ActivateNotification>

		switch (can2_rx_data[0])
 800296c:	4b3b      	ldr	r3, [pc, #236]	; (8002a5c <HAL_FDCAN_RxFifo1Callback+0x124>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b22      	cmp	r3, #34	; 0x22
 8002972:	d042      	beq.n	80029fa <HAL_FDCAN_RxFifo1Callback+0xc2>
 8002974:	2b22      	cmp	r3, #34	; 0x22
 8002976:	dc63      	bgt.n	8002a40 <HAL_FDCAN_RxFifo1Callback+0x108>
 8002978:	2b20      	cmp	r3, #32
 800297a:	d002      	beq.n	8002982 <HAL_FDCAN_RxFifo1Callback+0x4a>
 800297c:	2b21      	cmp	r3, #33	; 0x21
 800297e:	d01e      	beq.n	80029be <HAL_FDCAN_RxFifo1Callback+0x86>
 8002980:	e05e      	b.n	8002a40 <HAL_FDCAN_RxFifo1Callback+0x108>
		{
		case _READ_ENCD_X:
			if (wait_request == _READ_ENCD_X)
 8002982:	4b38      	ldr	r3, [pc, #224]	; (8002a64 <HAL_FDCAN_RxFifo1Callback+0x12c>)
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b20      	cmp	r3, #32
 8002988:	d155      	bne.n	8002a36 <HAL_FDCAN_RxFifo1Callback+0xfe>
			{
				sens.x = (double)((can2_rx_data[1] << 24) | (can2_rx_data[2] << 16) |
 800298a:	4b34      	ldr	r3, [pc, #208]	; (8002a5c <HAL_FDCAN_RxFifo1Callback+0x124>)
 800298c:	785b      	ldrb	r3, [r3, #1]
 800298e:	061a      	lsls	r2, r3, #24
 8002990:	4b32      	ldr	r3, [pc, #200]	; (8002a5c <HAL_FDCAN_RxFifo1Callback+0x124>)
 8002992:	789b      	ldrb	r3, [r3, #2]
 8002994:	041b      	lsls	r3, r3, #16
 8002996:	431a      	orrs	r2, r3
						 (can2_rx_data[3] << 8) | can2_rx_data[4]) / 100.0;
 8002998:	4b30      	ldr	r3, [pc, #192]	; (8002a5c <HAL_FDCAN_RxFifo1Callback+0x124>)
 800299a:	78db      	ldrb	r3, [r3, #3]
 800299c:	021b      	lsls	r3, r3, #8
				sens.x = (double)((can2_rx_data[1] << 24) | (can2_rx_data[2] << 16) |
 800299e:	4313      	orrs	r3, r2
						 (can2_rx_data[3] << 8) | can2_rx_data[4]) / 100.0;
 80029a0:	4a2e      	ldr	r2, [pc, #184]	; (8002a5c <HAL_FDCAN_RxFifo1Callback+0x124>)
 80029a2:	7912      	ldrb	r2, [r2, #4]
 80029a4:	4313      	orrs	r3, r2
				sens.x = (double)((can2_rx_data[1] << 24) | (can2_rx_data[2] << 16) |
 80029a6:	ee07 3a90 	vmov	s15, r3
 80029aa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
						 (can2_rx_data[3] << 8) | can2_rx_data[4]) / 100.0;
 80029ae:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8002a50 <HAL_FDCAN_RxFifo1Callback+0x118>
 80029b2:	ee86 7b05 	vdiv.f64	d7, d6, d5
				sens.x = (double)((can2_rx_data[1] << 24) | (can2_rx_data[2] << 16) |
 80029b6:	4b2c      	ldr	r3, [pc, #176]	; (8002a68 <HAL_FDCAN_RxFifo1Callback+0x130>)
 80029b8:	ed83 7b06 	vstr	d7, [r3, #24]
			}
			break;
 80029bc:	e03b      	b.n	8002a36 <HAL_FDCAN_RxFifo1Callback+0xfe>
		case _READ_ENCD_Y:
			if (wait_request == _READ_ENCD_Y)
 80029be:	4b29      	ldr	r3, [pc, #164]	; (8002a64 <HAL_FDCAN_RxFifo1Callback+0x12c>)
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	2b21      	cmp	r3, #33	; 0x21
 80029c4:	d139      	bne.n	8002a3a <HAL_FDCAN_RxFifo1Callback+0x102>
			{
				sens.y = (double)((can2_rx_data[1] << 24) | (can2_rx_data[2] << 16) |
 80029c6:	4b25      	ldr	r3, [pc, #148]	; (8002a5c <HAL_FDCAN_RxFifo1Callback+0x124>)
 80029c8:	785b      	ldrb	r3, [r3, #1]
 80029ca:	061a      	lsls	r2, r3, #24
 80029cc:	4b23      	ldr	r3, [pc, #140]	; (8002a5c <HAL_FDCAN_RxFifo1Callback+0x124>)
 80029ce:	789b      	ldrb	r3, [r3, #2]
 80029d0:	041b      	lsls	r3, r3, #16
 80029d2:	431a      	orrs	r2, r3
						 (can2_rx_data[3] << 8) | can2_rx_data[4]) / 100.0;
 80029d4:	4b21      	ldr	r3, [pc, #132]	; (8002a5c <HAL_FDCAN_RxFifo1Callback+0x124>)
 80029d6:	78db      	ldrb	r3, [r3, #3]
 80029d8:	021b      	lsls	r3, r3, #8
				sens.y = (double)((can2_rx_data[1] << 24) | (can2_rx_data[2] << 16) |
 80029da:	4313      	orrs	r3, r2
						 (can2_rx_data[3] << 8) | can2_rx_data[4]) / 100.0;
 80029dc:	4a1f      	ldr	r2, [pc, #124]	; (8002a5c <HAL_FDCAN_RxFifo1Callback+0x124>)
 80029de:	7912      	ldrb	r2, [r2, #4]
 80029e0:	4313      	orrs	r3, r2
				sens.y = (double)((can2_rx_data[1] << 24) | (can2_rx_data[2] << 16) |
 80029e2:	ee07 3a90 	vmov	s15, r3
 80029e6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
						 (can2_rx_data[3] << 8) | can2_rx_data[4]) / 100.0;
 80029ea:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8002a50 <HAL_FDCAN_RxFifo1Callback+0x118>
 80029ee:	ee86 7b05 	vdiv.f64	d7, d6, d5
				sens.y = (double)((can2_rx_data[1] << 24) | (can2_rx_data[2] << 16) |
 80029f2:	4b1d      	ldr	r3, [pc, #116]	; (8002a68 <HAL_FDCAN_RxFifo1Callback+0x130>)
 80029f4:	ed83 7b08 	vstr	d7, [r3, #32]
			}
			break;
 80029f8:	e01f      	b.n	8002a3a <HAL_FDCAN_RxFifo1Callback+0x102>
		case _READ_ENCD_YAW:
			if (wait_request == _READ_ENCD_YAW)
 80029fa:	4b1a      	ldr	r3, [pc, #104]	; (8002a64 <HAL_FDCAN_RxFifo1Callback+0x12c>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b22      	cmp	r3, #34	; 0x22
 8002a00:	d11d      	bne.n	8002a3e <HAL_FDCAN_RxFifo1Callback+0x106>
			{
				sens.yaw = (double)((can2_rx_data[1] << 24) | (can2_rx_data[2] << 16) |
 8002a02:	4b16      	ldr	r3, [pc, #88]	; (8002a5c <HAL_FDCAN_RxFifo1Callback+0x124>)
 8002a04:	785b      	ldrb	r3, [r3, #1]
 8002a06:	061a      	lsls	r2, r3, #24
 8002a08:	4b14      	ldr	r3, [pc, #80]	; (8002a5c <HAL_FDCAN_RxFifo1Callback+0x124>)
 8002a0a:	789b      	ldrb	r3, [r3, #2]
 8002a0c:	041b      	lsls	r3, r3, #16
 8002a0e:	431a      	orrs	r2, r3
						 (can2_rx_data[3] << 8) | can2_rx_data[4]) / 100.0;
 8002a10:	4b12      	ldr	r3, [pc, #72]	; (8002a5c <HAL_FDCAN_RxFifo1Callback+0x124>)
 8002a12:	78db      	ldrb	r3, [r3, #3]
 8002a14:	021b      	lsls	r3, r3, #8
				sens.yaw = (double)((can2_rx_data[1] << 24) | (can2_rx_data[2] << 16) |
 8002a16:	4313      	orrs	r3, r2
						 (can2_rx_data[3] << 8) | can2_rx_data[4]) / 100.0;
 8002a18:	4a10      	ldr	r2, [pc, #64]	; (8002a5c <HAL_FDCAN_RxFifo1Callback+0x124>)
 8002a1a:	7912      	ldrb	r2, [r2, #4]
 8002a1c:	4313      	orrs	r3, r2
				sens.yaw = (double)((can2_rx_data[1] << 24) | (can2_rx_data[2] << 16) |
 8002a1e:	ee07 3a90 	vmov	s15, r3
 8002a22:	eeb8 6be7 	vcvt.f64.s32	d6, s15
						 (can2_rx_data[3] << 8) | can2_rx_data[4]) / 100.0;
 8002a26:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8002a50 <HAL_FDCAN_RxFifo1Callback+0x118>
 8002a2a:	ee86 7b05 	vdiv.f64	d7, d6, d5
				sens.yaw = (double)((can2_rx_data[1] << 24) | (can2_rx_data[2] << 16) |
 8002a2e:	4b0e      	ldr	r3, [pc, #56]	; (8002a68 <HAL_FDCAN_RxFifo1Callback+0x130>)
 8002a30:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
			}
			break;
 8002a34:	e003      	b.n	8002a3e <HAL_FDCAN_RxFifo1Callback+0x106>
			break;
 8002a36:	bf00      	nop
 8002a38:	e002      	b.n	8002a40 <HAL_FDCAN_RxFifo1Callback+0x108>
			break;
 8002a3a:	bf00      	nop
 8002a3c:	e000      	b.n	8002a40 <HAL_FDCAN_RxFifo1Callback+0x108>
			break;
 8002a3e:	bf00      	nop
		}

		wait_request = 0;
 8002a40:	4b08      	ldr	r3, [pc, #32]	; (8002a64 <HAL_FDCAN_RxFifo1Callback+0x12c>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	701a      	strb	r2, [r3, #0]
	}
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	00000000 	.word	0x00000000
 8002a54:	40590000 	.word	0x40590000
 8002a58:	2000101c 	.word	0x2000101c
 8002a5c:	20001000 	.word	0x20001000
 8002a60:	20000ac8 	.word	0x20000ac8
 8002a64:	20001018 	.word	0x20001018
 8002a68:	20000a10 	.word	0x20000a10

08002a6c <HAL_FDCAN_TxFifoEmptyCallback>:

void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
    if (hfdcan == &hfdcan2)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a08      	ldr	r2, [pc, #32]	; (8002a98 <HAL_FDCAN_TxFifoEmptyCallback+0x2c>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d108      	bne.n	8002a8e <HAL_FDCAN_TxFifoEmptyCallback+0x22>
    {
    	can2_fifo_state = _IDLE;
 8002a7c:	4b07      	ldr	r3, [pc, #28]	; (8002a9c <HAL_FDCAN_TxFifoEmptyCallback+0x30>)
 8002a7e:	2201      	movs	r2, #1
 8002a80:	701a      	strb	r2, [r3, #0]
        HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_TX_FIFO_EMPTY , 0);
 8002a82:	2200      	movs	r2, #0
 8002a84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a88:	4805      	ldr	r0, [pc, #20]	; (8002aa0 <HAL_FDCAN_TxFifoEmptyCallback+0x34>)
 8002a8a:	f006 fb9d 	bl	80091c8 <HAL_FDCAN_ActivateNotification>
    }
}
 8002a8e:	bf00      	nop
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20000408 	.word	0x20000408
 8002a9c:	20000000 	.word	0x20000000
 8002aa0:	20000368 	.word	0x20000368
 8002aa4:	00000000 	.word	0x00000000

08002aa8 <ADC_toDistance>:

void ADC_toDistance(){
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0

	double alpha = 0.9998;
 8002aae:	a34b      	add	r3, pc, #300	; (adr r3, 8002bdc <ADC_toDistance+0x134>)
 8002ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab4:	e9c7 2302 	strd	r2, r3, [r7, #8]

	double V = (double)adc/65535.0 * 3.3;
 8002ab8:	4b43      	ldr	r3, [pc, #268]	; (8002bc8 <ADC_toDistance+0x120>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	ee07 3a90 	vmov	s15, r3
 8002ac0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002ac4:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 8002b80 <ADC_toDistance+0xd8>
 8002ac8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002acc:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 8002b88 <ADC_toDistance+0xe0>
 8002ad0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002ad4:	ed87 7b00 	vstr	d7, [r7]
	current = V/120.0;
 8002ad8:	ed97 6b00 	vldr	d6, [r7]
 8002adc:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8002b90 <ADC_toDistance+0xe8>
 8002ae0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002ae4:	4b39      	ldr	r3, [pc, #228]	; (8002bcc <ADC_toDistance+0x124>)
 8002ae6:	ed83 7b00 	vstr	d7, [r3]

	distance = (current-0.004)/0.016 * 980.0 + 20.0;
 8002aea:	4b38      	ldr	r3, [pc, #224]	; (8002bcc <ADC_toDistance+0x124>)
 8002aec:	ed93 7b00 	vldr	d7, [r3]
 8002af0:	ed9f 6b29 	vldr	d6, [pc, #164]	; 8002b98 <ADC_toDistance+0xf0>
 8002af4:	ee37 6b46 	vsub.f64	d6, d7, d6
 8002af8:	ed9f 5b29 	vldr	d5, [pc, #164]	; 8002ba0 <ADC_toDistance+0xf8>
 8002afc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002b00:	ed9f 6b29 	vldr	d6, [pc, #164]	; 8002ba8 <ADC_toDistance+0x100>
 8002b04:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002b08:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 8002b0c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002b10:	4b2f      	ldr	r3, [pc, #188]	; (8002bd0 <ADC_toDistance+0x128>)
 8002b12:	ed83 7b00 	vstr	d7, [r3]

	distance_filter = alpha * distance_filter + (1.0-alpha) * distance;
 8002b16:	4b2f      	ldr	r3, [pc, #188]	; (8002bd4 <ADC_toDistance+0x12c>)
 8002b18:	ed93 6b00 	vldr	d6, [r3]
 8002b1c:	ed97 7b02 	vldr	d7, [r7, #8]
 8002b20:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002b24:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8002b28:	ed97 7b02 	vldr	d7, [r7, #8]
 8002b2c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8002b30:	4b27      	ldr	r3, [pc, #156]	; (8002bd0 <ADC_toDistance+0x128>)
 8002b32:	ed93 7b00 	vldr	d7, [r3]
 8002b36:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002b3a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002b3e:	4b25      	ldr	r3, [pc, #148]	; (8002bd4 <ADC_toDistance+0x12c>)
 8002b40:	ed83 7b00 	vstr	d7, [r3]

	actual_distance = (distance_filter-56.7)/69.0 * 70.0 + 30.0; // 56.7 = 30 cm || 125.7 = 100 cm
 8002b44:	4b23      	ldr	r3, [pc, #140]	; (8002bd4 <ADC_toDistance+0x12c>)
 8002b46:	ed93 7b00 	vldr	d7, [r3]
 8002b4a:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8002bb0 <ADC_toDistance+0x108>
 8002b4e:	ee37 6b46 	vsub.f64	d6, d7, d6
 8002b52:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8002bb8 <ADC_toDistance+0x110>
 8002b56:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002b5a:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8002bc0 <ADC_toDistance+0x118>
 8002b5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002b62:	eeb3 6b0e 	vmov.f64	d6, #62	; 0x41f00000  30.0
 8002b66:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002b6a:	4b1b      	ldr	r3, [pc, #108]	; (8002bd8 <ADC_toDistance+0x130>)
 8002b6c:	ed83 7b00 	vstr	d7, [r3]

}
 8002b70:	bf00      	nop
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	f3af 8000 	nop.w
 8002b80:	00000000 	.word	0x00000000
 8002b84:	40efffe0 	.word	0x40efffe0
 8002b88:	66666666 	.word	0x66666666
 8002b8c:	400a6666 	.word	0x400a6666
 8002b90:	00000000 	.word	0x00000000
 8002b94:	405e0000 	.word	0x405e0000
 8002b98:	d2f1a9fc 	.word	0xd2f1a9fc
 8002b9c:	3f70624d 	.word	0x3f70624d
 8002ba0:	d2f1a9fc 	.word	0xd2f1a9fc
 8002ba4:	3f90624d 	.word	0x3f90624d
 8002ba8:	00000000 	.word	0x00000000
 8002bac:	408ea000 	.word	0x408ea000
 8002bb0:	9999999a 	.word	0x9999999a
 8002bb4:	404c5999 	.word	0x404c5999
 8002bb8:	00000000 	.word	0x00000000
 8002bbc:	40514000 	.word	0x40514000
 8002bc0:	00000000 	.word	0x00000000
 8002bc4:	40518000 	.word	0x40518000
 8002bc8:	20001020 	.word	0x20001020
 8002bcc:	20001028 	.word	0x20001028
 8002bd0:	20001030 	.word	0x20001030
 8002bd4:	20001038 	.word	0x20001038
 8002bd8:	20001040 	.word	0x20001040
 8002bdc:	91d14e3c 	.word	0x91d14e3c
 8002be0:	3feffe5c 	.word	0x3feffe5c

08002be4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
	adc = HAL_ADC_GetValue(&hadc1);
 8002bec:	4805      	ldr	r0, [pc, #20]	; (8002c04 <HAL_ADC_ConvCpltCallback+0x20>)
 8002bee:	f002 fae5 	bl	80051bc <HAL_ADC_GetValue>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	4a04      	ldr	r2, [pc, #16]	; (8002c08 <HAL_ADC_ConvCpltCallback+0x24>)
 8002bf6:	6013      	str	r3, [r2, #0]
	ADC_toDistance();
 8002bf8:	f7ff ff56 	bl	8002aa8 <ADC_toDistance>
}
 8002bfc:	bf00      	nop
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	20000304 	.word	0x20000304
 8002c08:	20001020 	.word	0x20001020
 8002c0c:	00000000 	.word	0x00000000

08002c10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c14:	f001 fd38 	bl	8004688 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c18:	f000 f88c 	bl	8002d34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c1c:	f000 fdf2 	bl	8003804 <MX_GPIO_Init>
  MX_DMA_Init();
 8002c20:	f000 fdc0 	bl	80037a4 <MX_DMA_Init>
  MX_TIM5_Init();
 8002c24:	f000 fcac 	bl	8003580 <MX_TIM5_Init>
  MX_FDCAN1_Init();
 8002c28:	f000 f984 	bl	8002f34 <MX_FDCAN1_Init>
  MX_TIM12_Init();
 8002c2c:	f000 fd34 	bl	8003698 <MX_TIM12_Init>
  MX_RTC_Init();
 8002c30:	f000 fa4a 	bl	80030c8 <MX_RTC_Init>
  MX_TIM2_Init();
 8002c34:	f000 fafa 	bl	800322c <MX_TIM2_Init>
  MX_TIM3_Init();
 8002c38:	f000 fb8c 	bl	8003354 <MX_TIM3_Init>
  MX_UART4_Init();
 8002c3c:	f000 fd66 	bl	800370c <MX_UART4_Init>
  MX_SPI2_Init();
 8002c40:	f000 fa9e 	bl	8003180 <MX_SPI2_Init>
  MX_FDCAN2_Init();
 8002c44:	f000 f9da 	bl	8002ffc <MX_FDCAN2_Init>
  MX_USB_DEVICE_Init();
 8002c48:	f014 f942 	bl	8016ed0 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 8002c4c:	f000 fc18 	bl	8003480 <MX_TIM4_Init>
  MX_TIM7_Init();
 8002c50:	f000 fcec 	bl	800362c <MX_TIM7_Init>
  MX_ADC1_Init();
 8002c54:	f000 f8f4 	bl	8002e40 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  robot_init ();
 8002c58:	f7fd fd1c 	bl	8000694 <robot_init>
  can_config ();
 8002c5c:	f7fd ff76 	bl	8000b4c <can_config>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1);
 8002c60:	2100      	movs	r1, #0
 8002c62:	4827      	ldr	r0, [pc, #156]	; (8002d00 <main+0xf0>)
 8002c64:	f00d f816 	bl	800fc94 <HAL_TIM_Encoder_Start>
//  HAL_UART_Receive_IT(&huart4, blt1_rx_buff, 4);
  HAL_UART_Receive_IT(&huart4, blt_rx_buff, BUFFER_LEN); // Sulthon
 8002c68:	4b26      	ldr	r3, [pc, #152]	; (8002d04 <main+0xf4>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	461a      	mov	r2, r3
 8002c70:	4925      	ldr	r1, [pc, #148]	; (8002d08 <main+0xf8>)
 8002c72:	4826      	ldr	r0, [pc, #152]	; (8002d0c <main+0xfc>)
 8002c74:	f00e f924 	bl	8010ec0 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start(&htim12);
 8002c78:	4825      	ldr	r0, [pc, #148]	; (8002d10 <main+0x100>)
 8002c7a:	f00c fcc1 	bl	800f600 <HAL_TIM_Base_Start>
  lcd_init();
 8002c7e:	f7fd ff09 	bl	8000a94 <lcd_init>
  lcd_bitmap (bandhayudha_logo);
 8002c82:	4824      	ldr	r0, [pc, #144]	; (8002d14 <main+0x104>)
 8002c84:	f7fd fe32 	bl	80008ec <lcd_bitmap>
  servo_init ();
 8002c88:	f7fe f9b4 	bl	8000ff4 <servo_init>
  com_bluetooth_init(); //Sulthon
 8002c8c:	f7fe fee6 	bl	8001a5c <com_bluetooth_init>
  HAL_ADC_Start_IT(&hadc1);
 8002c90:	4821      	ldr	r0, [pc, #132]	; (8002d18 <main+0x108>)
 8002c92:	f002 f953 	bl	8004f3c <HAL_ADC_Start_IT>
  flash_get_data ();
#endif
  HAL_Delay(5000);
#else
//  set_servo (&servo1, 0);
  ring_stack = 5;
 8002c96:	4b21      	ldr	r3, [pc, #132]	; (8002d1c <main+0x10c>)
 8002c98:	2205      	movs	r2, #5
 8002c9a:	701a      	strb	r2, [r3, #0]
  //set_servo (&servo2, 0); //
  set_servo (&servo2, 45);
 8002c9c:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8002ce8 <main+0xd8>
 8002ca0:	481f      	ldr	r0, [pc, #124]	; (8002d20 <main+0x110>)
 8002ca2:	f7fe fa25 	bl	80010f0 <set_servo>
  set_servo (&servo7, 17);
 8002ca6:	eeb3 0b01 	vmov.f64	d0, #49	; 0x41880000  17.0
 8002caa:	481e      	ldr	r0, [pc, #120]	; (8002d24 <main+0x114>)
 8002cac:	f7fe fa20 	bl	80010f0 <set_servo>
  set_servo (&servo6, 133);
 8002cb0:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8002cf0 <main+0xe0>
 8002cb4:	481c      	ldr	r0, [pc, #112]	; (8002d28 <main+0x118>)
 8002cb6:	f7fe fa1b 	bl	80010f0 <set_servo>
  set_gripper (_GRIPPER1, -45, _RELEASE);
 8002cba:	2101      	movs	r1, #1
 8002cbc:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8002cf8 <main+0xe8>
 8002cc0:	2000      	movs	r0, #0
 8002cc2:	f7fe fa71 	bl	80011a8 <set_gripper>
  HAL_Delay(10000);
 8002cc6:	f242 7010 	movw	r0, #10000	; 0x2710
 8002cca:	f001 fd6f 	bl	80047ac <HAL_Delay>
#endif
//  HAL_TIM_Base_Start_IT(&htim7);
	clear_graphic();
 8002cce:	f7fd fe87 	bl	80009e0 <clear_graphic>
	lst_speed = com_blt.rthrower_speed;
 8002cd2:	4b16      	ldr	r3, [pc, #88]	; (8002d2c <main+0x11c>)
 8002cd4:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 8002cd8:	4b15      	ldr	r3, [pc, #84]	; (8002d30 <main+0x120>)
 8002cda:	801a      	strh	r2, [r3, #0]
	  main_menu ();
#else
//	  sprintf (lcd_str_buff, "%d\n%0.2fcm",adc, actual_distance);
//	  lcd_print_string(0, 0, lcd_str_buff);
//	  lcd_update();
	  wheels_control_send_speed ();
 8002cdc:	f7fd ffea 	bl	8000cb4 <wheels_control_send_speed>
//	  if (manual.vx != 0 || manual.vy != 0 || manual.v_yaw != 0)
//	  {
//		  set_servo (&servo6, 121);
//	  }
	  trial_lempar_RR ();
 8002ce0:	f7fe fb06 	bl	80012f0 <trial_lempar_RR>
	  wheels_control_send_speed ();
 8002ce4:	e7fa      	b.n	8002cdc <main+0xcc>
 8002ce6:	bf00      	nop
 8002ce8:	00000000 	.word	0x00000000
 8002cec:	40468000 	.word	0x40468000
 8002cf0:	00000000 	.word	0x00000000
 8002cf4:	4060a000 	.word	0x4060a000
 8002cf8:	00000000 	.word	0x00000000
 8002cfc:	c0468000 	.word	0xc0468000
 8002d00:	20000728 	.word	0x20000728
 8002d04:	20000001 	.word	0x20000001
 8002d08:	20000fe8 	.word	0x20000fe8
 8002d0c:	2000080c 	.word	0x2000080c
 8002d10:	200007c0 	.word	0x200007c0
 8002d14:	0801a88c 	.word	0x0801a88c
 8002d18:	20000304 	.word	0x20000304
 8002d1c:	20000002 	.word	0x20000002
 8002d20:	20000958 	.word	0x20000958
 8002d24:	200009a8 	.word	0x200009a8
 8002d28:	20000998 	.word	0x20000998
 8002d2c:	20000914 	.word	0x20000914
 8002d30:	20000fe4 	.word	0x20000fe4

08002d34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b09c      	sub	sp, #112	; 0x70
 8002d38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d3e:	224c      	movs	r2, #76	; 0x4c
 8002d40:	2100      	movs	r1, #0
 8002d42:	4618      	mov	r0, r3
 8002d44:	f014 fe14 	bl	8017970 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d48:	1d3b      	adds	r3, r7, #4
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f014 fe0e 	bl	8017970 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002d54:	2002      	movs	r0, #2
 8002d56:	f008 fc47 	bl	800b5e8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	603b      	str	r3, [r7, #0]
 8002d5e:	4b35      	ldr	r3, [pc, #212]	; (8002e34 <SystemClock_Config+0x100>)
 8002d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d62:	4a34      	ldr	r2, [pc, #208]	; (8002e34 <SystemClock_Config+0x100>)
 8002d64:	f023 0301 	bic.w	r3, r3, #1
 8002d68:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002d6a:	4b32      	ldr	r3, [pc, #200]	; (8002e34 <SystemClock_Config+0x100>)
 8002d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	603b      	str	r3, [r7, #0]
 8002d74:	4b30      	ldr	r3, [pc, #192]	; (8002e38 <SystemClock_Config+0x104>)
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	4a2f      	ldr	r2, [pc, #188]	; (8002e38 <SystemClock_Config+0x104>)
 8002d7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d7e:	6193      	str	r3, [r2, #24]
 8002d80:	4b2d      	ldr	r3, [pc, #180]	; (8002e38 <SystemClock_Config+0x104>)
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d88:	603b      	str	r3, [r7, #0]
 8002d8a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002d8c:	bf00      	nop
 8002d8e:	4b2a      	ldr	r3, [pc, #168]	; (8002e38 <SystemClock_Config+0x104>)
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d9a:	d1f8      	bne.n	8002d8e <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002d9c:	4b27      	ldr	r3, [pc, #156]	; (8002e3c <SystemClock_Config+0x108>)
 8002d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da0:	f023 0303 	bic.w	r3, r3, #3
 8002da4:	4a25      	ldr	r2, [pc, #148]	; (8002e3c <SystemClock_Config+0x108>)
 8002da6:	f043 0302 	orr.w	r3, r3, #2
 8002daa:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002dac:	2309      	movs	r3, #9
 8002dae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002db0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002db4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002db6:	2301      	movs	r3, #1
 8002db8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002dba:	2302      	movs	r3, #2
 8002dbc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 80;
 8002dc6:	2350      	movs	r3, #80	; 0x50
 8002dc8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002dca:	2302      	movs	r3, #2
 8002dcc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 16;
 8002dce:	2310      	movs	r3, #16
 8002dd0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 16;
 8002dd2:	2310      	movs	r3, #16
 8002dd4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002dd6:	230c      	movs	r3, #12
 8002dd8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002dde:	2300      	movs	r3, #0
 8002de0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002de6:	4618      	mov	r0, r3
 8002de8:	f008 fc48 	bl	800b67c <HAL_RCC_OscConfig>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002df2:	f000 fe0d 	bl	8003a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002df6:	233f      	movs	r3, #63	; 0x3f
 8002df8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002e02:	2308      	movs	r3, #8
 8002e04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002e06:	2340      	movs	r3, #64	; 0x40
 8002e08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002e0a:	2340      	movs	r3, #64	; 0x40
 8002e0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002e0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e12:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002e14:	2340      	movs	r3, #64	; 0x40
 8002e16:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e18:	1d3b      	adds	r3, r7, #4
 8002e1a:	2102      	movs	r1, #2
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f009 f85b 	bl	800bed8 <HAL_RCC_ClockConfig>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8002e28:	f000 fdf2 	bl	8003a10 <Error_Handler>
  }
}
 8002e2c:	bf00      	nop
 8002e2e:	3770      	adds	r7, #112	; 0x70
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	58000400 	.word	0x58000400
 8002e38:	58024800 	.word	0x58024800
 8002e3c:	58024400 	.word	0x58024400

08002e40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b08a      	sub	sp, #40	; 0x28
 8002e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002e46:	f107 031c 	add.w	r3, r7, #28
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	605a      	str	r2, [r3, #4]
 8002e50:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002e52:	463b      	mov	r3, r7
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	605a      	str	r2, [r3, #4]
 8002e5a:	609a      	str	r2, [r3, #8]
 8002e5c:	60da      	str	r2, [r3, #12]
 8002e5e:	611a      	str	r2, [r3, #16]
 8002e60:	615a      	str	r2, [r3, #20]
 8002e62:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002e64:	4b30      	ldr	r3, [pc, #192]	; (8002f28 <MX_ADC1_Init+0xe8>)
 8002e66:	4a31      	ldr	r2, [pc, #196]	; (8002f2c <MX_ADC1_Init+0xec>)
 8002e68:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8002e6a:	4b2f      	ldr	r3, [pc, #188]	; (8002f28 <MX_ADC1_Init+0xe8>)
 8002e6c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002e70:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8002e72:	4b2d      	ldr	r3, [pc, #180]	; (8002f28 <MX_ADC1_Init+0xe8>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002e78:	4b2b      	ldr	r3, [pc, #172]	; (8002f28 <MX_ADC1_Init+0xe8>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002e7e:	4b2a      	ldr	r3, [pc, #168]	; (8002f28 <MX_ADC1_Init+0xe8>)
 8002e80:	2204      	movs	r2, #4
 8002e82:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002e84:	4b28      	ldr	r3, [pc, #160]	; (8002f28 <MX_ADC1_Init+0xe8>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002e8a:	4b27      	ldr	r3, [pc, #156]	; (8002f28 <MX_ADC1_Init+0xe8>)
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8002e90:	4b25      	ldr	r3, [pc, #148]	; (8002f28 <MX_ADC1_Init+0xe8>)
 8002e92:	2201      	movs	r2, #1
 8002e94:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002e96:	4b24      	ldr	r3, [pc, #144]	; (8002f28 <MX_ADC1_Init+0xe8>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e9c:	4b22      	ldr	r3, [pc, #136]	; (8002f28 <MX_ADC1_Init+0xe8>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002ea2:	4b21      	ldr	r3, [pc, #132]	; (8002f28 <MX_ADC1_Init+0xe8>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8002ea8:	4b1f      	ldr	r3, [pc, #124]	; (8002f28 <MX_ADC1_Init+0xe8>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002eae:	4b1e      	ldr	r3, [pc, #120]	; (8002f28 <MX_ADC1_Init+0xe8>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002eb4:	4b1c      	ldr	r3, [pc, #112]	; (8002f28 <MX_ADC1_Init+0xe8>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002eba:	4b1b      	ldr	r3, [pc, #108]	; (8002f28 <MX_ADC1_Init+0xe8>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002ec2:	4819      	ldr	r0, [pc, #100]	; (8002f28 <MX_ADC1_Init+0xe8>)
 8002ec4:	f001 fe98 	bl	8004bf8 <HAL_ADC_Init>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8002ece:	f000 fd9f 	bl	8003a10 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002ed6:	f107 031c 	add.w	r3, r7, #28
 8002eda:	4619      	mov	r1, r3
 8002edc:	4812      	ldr	r0, [pc, #72]	; (8002f28 <MX_ADC1_Init+0xe8>)
 8002ede:	f003 f905 	bl	80060ec <HAL_ADCEx_MultiModeConfigChannel>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002ee8:	f000 fd92 	bl	8003a10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002eec:	4b10      	ldr	r3, [pc, #64]	; (8002f30 <MX_ADC1_Init+0xf0>)
 8002eee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002ef0:	2306      	movs	r3, #6
 8002ef2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8002ef4:	2307      	movs	r3, #7
 8002ef6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002ef8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002efc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002efe:	2304      	movs	r3, #4
 8002f00:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002f02:	2300      	movs	r3, #0
 8002f04:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8002f06:	2300      	movs	r3, #0
 8002f08:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f0a:	463b      	mov	r3, r7
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4806      	ldr	r0, [pc, #24]	; (8002f28 <MX_ADC1_Init+0xe8>)
 8002f10:	f002 fbb0 	bl	8005674 <HAL_ADC_ConfigChannel>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8002f1a:	f000 fd79 	bl	8003a10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002f1e:	bf00      	nop
 8002f20:	3728      	adds	r7, #40	; 0x28
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	20000304 	.word	0x20000304
 8002f2c:	40022000 	.word	0x40022000
 8002f30:	2a000400 	.word	0x2a000400

08002f34 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002f38:	4b2e      	ldr	r3, [pc, #184]	; (8002ff4 <MX_FDCAN1_Init+0xc0>)
 8002f3a:	4a2f      	ldr	r2, [pc, #188]	; (8002ff8 <MX_FDCAN1_Init+0xc4>)
 8002f3c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002f3e:	4b2d      	ldr	r3, [pc, #180]	; (8002ff4 <MX_FDCAN1_Init+0xc0>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002f44:	4b2b      	ldr	r3, [pc, #172]	; (8002ff4 <MX_FDCAN1_Init+0xc0>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8002f4a:	4b2a      	ldr	r3, [pc, #168]	; (8002ff4 <MX_FDCAN1_Init+0xc0>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8002f50:	4b28      	ldr	r3, [pc, #160]	; (8002ff4 <MX_FDCAN1_Init+0xc0>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002f56:	4b27      	ldr	r3, [pc, #156]	; (8002ff4 <MX_FDCAN1_Init+0xc0>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8002f5c:	4b25      	ldr	r3, [pc, #148]	; (8002ff4 <MX_FDCAN1_Init+0xc0>)
 8002f5e:	2201      	movs	r2, #1
 8002f60:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 13;
 8002f62:	4b24      	ldr	r3, [pc, #144]	; (8002ff4 <MX_FDCAN1_Init+0xc0>)
 8002f64:	220d      	movs	r2, #13
 8002f66:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 86;
 8002f68:	4b22      	ldr	r3, [pc, #136]	; (8002ff4 <MX_FDCAN1_Init+0xc0>)
 8002f6a:	2256      	movs	r2, #86	; 0x56
 8002f6c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 13;
 8002f6e:	4b21      	ldr	r3, [pc, #132]	; (8002ff4 <MX_FDCAN1_Init+0xc0>)
 8002f70:	220d      	movs	r2, #13
 8002f72:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 25;
 8002f74:	4b1f      	ldr	r3, [pc, #124]	; (8002ff4 <MX_FDCAN1_Init+0xc0>)
 8002f76:	2219      	movs	r2, #25
 8002f78:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8002f7a:	4b1e      	ldr	r3, [pc, #120]	; (8002ff4 <MX_FDCAN1_Init+0xc0>)
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 8002f80:	4b1c      	ldr	r3, [pc, #112]	; (8002ff4 <MX_FDCAN1_Init+0xc0>)
 8002f82:	2202      	movs	r2, #2
 8002f84:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8002f86:	4b1b      	ldr	r3, [pc, #108]	; (8002ff4 <MX_FDCAN1_Init+0xc0>)
 8002f88:	2201      	movs	r2, #1
 8002f8a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8002f8c:	4b19      	ldr	r3, [pc, #100]	; (8002ff4 <MX_FDCAN1_Init+0xc0>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8002f92:	4b18      	ldr	r3, [pc, #96]	; (8002ff4 <MX_FDCAN1_Init+0xc0>)
 8002f94:	2201      	movs	r2, #1
 8002f96:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002f98:	4b16      	ldr	r3, [pc, #88]	; (8002ff4 <MX_FDCAN1_Init+0xc0>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8002f9e:	4b15      	ldr	r3, [pc, #84]	; (8002ff4 <MX_FDCAN1_Init+0xc0>)
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8002fa4:	4b13      	ldr	r3, [pc, #76]	; (8002ff4 <MX_FDCAN1_Init+0xc0>)
 8002fa6:	2204      	movs	r2, #4
 8002fa8:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8002faa:	4b12      	ldr	r3, [pc, #72]	; (8002ff4 <MX_FDCAN1_Init+0xc0>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8002fb0:	4b10      	ldr	r3, [pc, #64]	; (8002ff4 <MX_FDCAN1_Init+0xc0>)
 8002fb2:	2204      	movs	r2, #4
 8002fb4:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8002fb6:	4b0f      	ldr	r3, [pc, #60]	; (8002ff4 <MX_FDCAN1_Init+0xc0>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8002fbc:	4b0d      	ldr	r3, [pc, #52]	; (8002ff4 <MX_FDCAN1_Init+0xc0>)
 8002fbe:	2204      	movs	r2, #4
 8002fc0:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8002fc2:	4b0c      	ldr	r3, [pc, #48]	; (8002ff4 <MX_FDCAN1_Init+0xc0>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8002fc8:	4b0a      	ldr	r3, [pc, #40]	; (8002ff4 <MX_FDCAN1_Init+0xc0>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8002fce:	4b09      	ldr	r3, [pc, #36]	; (8002ff4 <MX_FDCAN1_Init+0xc0>)
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002fd4:	4b07      	ldr	r3, [pc, #28]	; (8002ff4 <MX_FDCAN1_Init+0xc0>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8002fda:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <MX_FDCAN1_Init+0xc0>)
 8002fdc:	2204      	movs	r2, #4
 8002fde:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002fe0:	4804      	ldr	r0, [pc, #16]	; (8002ff4 <MX_FDCAN1_Init+0xc0>)
 8002fe2:	f005 fc97 	bl	8008914 <HAL_FDCAN_Init>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8002fec:	f000 fd10 	bl	8003a10 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8002ff0:	bf00      	nop
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	20000368 	.word	0x20000368
 8002ff8:	4000a000 	.word	0x4000a000

08002ffc <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8003000:	4b2f      	ldr	r3, [pc, #188]	; (80030c0 <MX_FDCAN2_Init+0xc4>)
 8003002:	4a30      	ldr	r2, [pc, #192]	; (80030c4 <MX_FDCAN2_Init+0xc8>)
 8003004:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8003006:	4b2e      	ldr	r3, [pc, #184]	; (80030c0 <MX_FDCAN2_Init+0xc4>)
 8003008:	f44f 7280 	mov.w	r2, #256	; 0x100
 800300c:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800300e:	4b2c      	ldr	r3, [pc, #176]	; (80030c0 <MX_FDCAN2_Init+0xc4>)
 8003010:	2200      	movs	r2, #0
 8003012:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8003014:	4b2a      	ldr	r3, [pc, #168]	; (80030c0 <MX_FDCAN2_Init+0xc4>)
 8003016:	2201      	movs	r2, #1
 8003018:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 800301a:	4b29      	ldr	r3, [pc, #164]	; (80030c0 <MX_FDCAN2_Init+0xc4>)
 800301c:	2200      	movs	r2, #0
 800301e:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8003020:	4b27      	ldr	r3, [pc, #156]	; (80030c0 <MX_FDCAN2_Init+0xc4>)
 8003022:	2200      	movs	r2, #0
 8003024:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8003026:	4b26      	ldr	r3, [pc, #152]	; (80030c0 <MX_FDCAN2_Init+0xc4>)
 8003028:	2201      	movs	r2, #1
 800302a:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 2;
 800302c:	4b24      	ldr	r3, [pc, #144]	; (80030c0 <MX_FDCAN2_Init+0xc4>)
 800302e:	2202      	movs	r2, #2
 8003030:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 47;
 8003032:	4b23      	ldr	r3, [pc, #140]	; (80030c0 <MX_FDCAN2_Init+0xc4>)
 8003034:	222f      	movs	r2, #47	; 0x2f
 8003036:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8003038:	4b21      	ldr	r3, [pc, #132]	; (80030c0 <MX_FDCAN2_Init+0xc4>)
 800303a:	2202      	movs	r2, #2
 800303c:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 2;
 800303e:	4b20      	ldr	r3, [pc, #128]	; (80030c0 <MX_FDCAN2_Init+0xc4>)
 8003040:	2202      	movs	r2, #2
 8003042:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 12;
 8003044:	4b1e      	ldr	r3, [pc, #120]	; (80030c0 <MX_FDCAN2_Init+0xc4>)
 8003046:	220c      	movs	r2, #12
 8003048:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 12;
 800304a:	4b1d      	ldr	r3, [pc, #116]	; (80030c0 <MX_FDCAN2_Init+0xc4>)
 800304c:	220c      	movs	r2, #12
 800304e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 12;
 8003050:	4b1b      	ldr	r3, [pc, #108]	; (80030c0 <MX_FDCAN2_Init+0xc4>)
 8003052:	220c      	movs	r2, #12
 8003054:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 11;
 8003056:	4b1a      	ldr	r3, [pc, #104]	; (80030c0 <MX_FDCAN2_Init+0xc4>)
 8003058:	220b      	movs	r2, #11
 800305a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 800305c:	4b18      	ldr	r3, [pc, #96]	; (80030c0 <MX_FDCAN2_Init+0xc4>)
 800305e:	2200      	movs	r2, #0
 8003060:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8003062:	4b17      	ldr	r3, [pc, #92]	; (80030c0 <MX_FDCAN2_Init+0xc4>)
 8003064:	2200      	movs	r2, #0
 8003066:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8003068:	4b15      	ldr	r3, [pc, #84]	; (80030c0 <MX_FDCAN2_Init+0xc4>)
 800306a:	2200      	movs	r2, #0
 800306c:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800306e:	4b14      	ldr	r3, [pc, #80]	; (80030c0 <MX_FDCAN2_Init+0xc4>)
 8003070:	2204      	movs	r2, #4
 8003072:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 1;
 8003074:	4b12      	ldr	r3, [pc, #72]	; (80030c0 <MX_FDCAN2_Init+0xc4>)
 8003076:	2201      	movs	r2, #1
 8003078:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800307a:	4b11      	ldr	r3, [pc, #68]	; (80030c0 <MX_FDCAN2_Init+0xc4>)
 800307c:	2204      	movs	r2, #4
 800307e:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8003080:	4b0f      	ldr	r3, [pc, #60]	; (80030c0 <MX_FDCAN2_Init+0xc4>)
 8003082:	2200      	movs	r2, #0
 8003084:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8003086:	4b0e      	ldr	r3, [pc, #56]	; (80030c0 <MX_FDCAN2_Init+0xc4>)
 8003088:	2204      	movs	r2, #4
 800308a:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 800308c:	4b0c      	ldr	r3, [pc, #48]	; (80030c0 <MX_FDCAN2_Init+0xc4>)
 800308e:	2200      	movs	r2, #0
 8003090:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8003092:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <MX_FDCAN2_Init+0xc4>)
 8003094:	2200      	movs	r2, #0
 8003096:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 1;
 8003098:	4b09      	ldr	r3, [pc, #36]	; (80030c0 <MX_FDCAN2_Init+0xc4>)
 800309a:	2201      	movs	r2, #1
 800309c:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800309e:	4b08      	ldr	r3, [pc, #32]	; (80030c0 <MX_FDCAN2_Init+0xc4>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80030a4:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <MX_FDCAN2_Init+0xc4>)
 80030a6:	2204      	movs	r2, #4
 80030a8:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80030aa:	4805      	ldr	r0, [pc, #20]	; (80030c0 <MX_FDCAN2_Init+0xc4>)
 80030ac:	f005 fc32 	bl	8008914 <HAL_FDCAN_Init>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 80030b6:	f000 fcab 	bl	8003a10 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80030ba:	bf00      	nop
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	20000408 	.word	0x20000408
 80030c4:	4000a400 	.word	0x4000a400

080030c8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80030ce:	1d3b      	adds	r3, r7, #4
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	605a      	str	r2, [r3, #4]
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	60da      	str	r2, [r3, #12]
 80030da:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80030dc:	2300      	movs	r3, #0
 80030de:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80030e0:	4b25      	ldr	r3, [pc, #148]	; (8003178 <MX_RTC_Init+0xb0>)
 80030e2:	4a26      	ldr	r2, [pc, #152]	; (800317c <MX_RTC_Init+0xb4>)
 80030e4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80030e6:	4b24      	ldr	r3, [pc, #144]	; (8003178 <MX_RTC_Init+0xb0>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80030ec:	4b22      	ldr	r3, [pc, #136]	; (8003178 <MX_RTC_Init+0xb0>)
 80030ee:	227f      	movs	r2, #127	; 0x7f
 80030f0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80030f2:	4b21      	ldr	r3, [pc, #132]	; (8003178 <MX_RTC_Init+0xb0>)
 80030f4:	22ff      	movs	r2, #255	; 0xff
 80030f6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80030f8:	4b1f      	ldr	r3, [pc, #124]	; (8003178 <MX_RTC_Init+0xb0>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80030fe:	4b1e      	ldr	r3, [pc, #120]	; (8003178 <MX_RTC_Init+0xb0>)
 8003100:	2200      	movs	r2, #0
 8003102:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003104:	4b1c      	ldr	r3, [pc, #112]	; (8003178 <MX_RTC_Init+0xb0>)
 8003106:	2200      	movs	r2, #0
 8003108:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800310a:	4b1b      	ldr	r3, [pc, #108]	; (8003178 <MX_RTC_Init+0xb0>)
 800310c:	2200      	movs	r2, #0
 800310e:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003110:	4819      	ldr	r0, [pc, #100]	; (8003178 <MX_RTC_Init+0xb0>)
 8003112:	f00b fbf9 	bl	800e908 <HAL_RTC_Init>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 800311c:	f000 fc78 	bl	8003a10 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8003120:	2300      	movs	r3, #0
 8003122:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8003124:	2300      	movs	r3, #0
 8003126:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8003128:	2300      	movs	r3, #0
 800312a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800312c:	2300      	movs	r3, #0
 800312e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003130:	2300      	movs	r3, #0
 8003132:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003134:	1d3b      	adds	r3, r7, #4
 8003136:	2200      	movs	r2, #0
 8003138:	4619      	mov	r1, r3
 800313a:	480f      	ldr	r0, [pc, #60]	; (8003178 <MX_RTC_Init+0xb0>)
 800313c:	f00b fc5c 	bl	800e9f8 <HAL_RTC_SetTime>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8003146:	f000 fc63 	bl	8003a10 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800314a:	2301      	movs	r3, #1
 800314c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_FEBRUARY;
 800314e:	2302      	movs	r3, #2
 8003150:	707b      	strb	r3, [r7, #1]
  sDate.Date = 13;
 8003152:	230d      	movs	r3, #13
 8003154:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 23;
 8003156:	2317      	movs	r3, #23
 8003158:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800315a:	463b      	mov	r3, r7
 800315c:	2200      	movs	r2, #0
 800315e:	4619      	mov	r1, r3
 8003160:	4805      	ldr	r0, [pc, #20]	; (8003178 <MX_RTC_Init+0xb0>)
 8003162:	f00b fce7 	bl	800eb34 <HAL_RTC_SetDate>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 800316c:	f000 fc50 	bl	8003a10 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003170:	bf00      	nop
 8003172:	3718      	adds	r7, #24
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	200004a8 	.word	0x200004a8
 800317c:	58004000 	.word	0x58004000

08003180 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003184:	4b27      	ldr	r3, [pc, #156]	; (8003224 <MX_SPI2_Init+0xa4>)
 8003186:	4a28      	ldr	r2, [pc, #160]	; (8003228 <MX_SPI2_Init+0xa8>)
 8003188:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800318a:	4b26      	ldr	r3, [pc, #152]	; (8003224 <MX_SPI2_Init+0xa4>)
 800318c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003190:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003192:	4b24      	ldr	r3, [pc, #144]	; (8003224 <MX_SPI2_Init+0xa4>)
 8003194:	2200      	movs	r2, #0
 8003196:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003198:	4b22      	ldr	r3, [pc, #136]	; (8003224 <MX_SPI2_Init+0xa4>)
 800319a:	2207      	movs	r2, #7
 800319c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800319e:	4b21      	ldr	r3, [pc, #132]	; (8003224 <MX_SPI2_Init+0xa4>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80031a4:	4b1f      	ldr	r3, [pc, #124]	; (8003224 <MX_SPI2_Init+0xa4>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80031aa:	4b1e      	ldr	r3, [pc, #120]	; (8003224 <MX_SPI2_Init+0xa4>)
 80031ac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80031b0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031b2:	4b1c      	ldr	r3, [pc, #112]	; (8003224 <MX_SPI2_Init+0xa4>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80031b8:	4b1a      	ldr	r3, [pc, #104]	; (8003224 <MX_SPI2_Init+0xa4>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80031be:	4b19      	ldr	r3, [pc, #100]	; (8003224 <MX_SPI2_Init+0xa4>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031c4:	4b17      	ldr	r3, [pc, #92]	; (8003224 <MX_SPI2_Init+0xa4>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80031ca:	4b16      	ldr	r3, [pc, #88]	; (8003224 <MX_SPI2_Init+0xa4>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80031d0:	4b14      	ldr	r3, [pc, #80]	; (8003224 <MX_SPI2_Init+0xa4>)
 80031d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80031d6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80031d8:	4b12      	ldr	r3, [pc, #72]	; (8003224 <MX_SPI2_Init+0xa4>)
 80031da:	2200      	movs	r2, #0
 80031dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80031de:	4b11      	ldr	r3, [pc, #68]	; (8003224 <MX_SPI2_Init+0xa4>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80031e4:	4b0f      	ldr	r3, [pc, #60]	; (8003224 <MX_SPI2_Init+0xa4>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80031ea:	4b0e      	ldr	r3, [pc, #56]	; (8003224 <MX_SPI2_Init+0xa4>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80031f0:	4b0c      	ldr	r3, [pc, #48]	; (8003224 <MX_SPI2_Init+0xa4>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80031f6:	4b0b      	ldr	r3, [pc, #44]	; (8003224 <MX_SPI2_Init+0xa4>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80031fc:	4b09      	ldr	r3, [pc, #36]	; (8003224 <MX_SPI2_Init+0xa4>)
 80031fe:	2200      	movs	r2, #0
 8003200:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003202:	4b08      	ldr	r3, [pc, #32]	; (8003224 <MX_SPI2_Init+0xa4>)
 8003204:	2200      	movs	r2, #0
 8003206:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003208:	4b06      	ldr	r3, [pc, #24]	; (8003224 <MX_SPI2_Init+0xa4>)
 800320a:	2200      	movs	r2, #0
 800320c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800320e:	4805      	ldr	r0, [pc, #20]	; (8003224 <MX_SPI2_Init+0xa4>)
 8003210:	f00b fdd0 	bl	800edb4 <HAL_SPI_Init>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 800321a:	f000 fbf9 	bl	8003a10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800321e:	bf00      	nop
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	200004cc 	.word	0x200004cc
 8003228:	40003800 	.word	0x40003800

0800322c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b08e      	sub	sp, #56	; 0x38
 8003230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003232:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003236:	2200      	movs	r2, #0
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	605a      	str	r2, [r3, #4]
 800323c:	609a      	str	r2, [r3, #8]
 800323e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003240:	f107 031c 	add.w	r3, r7, #28
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	605a      	str	r2, [r3, #4]
 800324a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800324c:	463b      	mov	r3, r7
 800324e:	2200      	movs	r2, #0
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	605a      	str	r2, [r3, #4]
 8003254:	609a      	str	r2, [r3, #8]
 8003256:	60da      	str	r2, [r3, #12]
 8003258:	611a      	str	r2, [r3, #16]
 800325a:	615a      	str	r2, [r3, #20]
 800325c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800325e:	4b3c      	ldr	r3, [pc, #240]	; (8003350 <MX_TIM2_Init+0x124>)
 8003260:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003264:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 199;
 8003266:	4b3a      	ldr	r3, [pc, #232]	; (8003350 <MX_TIM2_Init+0x124>)
 8003268:	22c7      	movs	r2, #199	; 0xc7
 800326a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800326c:	4b38      	ldr	r3, [pc, #224]	; (8003350 <MX_TIM2_Init+0x124>)
 800326e:	2200      	movs	r2, #0
 8003270:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8003272:	4b37      	ldr	r3, [pc, #220]	; (8003350 <MX_TIM2_Init+0x124>)
 8003274:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003278:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800327a:	4b35      	ldr	r3, [pc, #212]	; (8003350 <MX_TIM2_Init+0x124>)
 800327c:	2200      	movs	r2, #0
 800327e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003280:	4b33      	ldr	r3, [pc, #204]	; (8003350 <MX_TIM2_Init+0x124>)
 8003282:	2200      	movs	r2, #0
 8003284:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003286:	4832      	ldr	r0, [pc, #200]	; (8003350 <MX_TIM2_Init+0x124>)
 8003288:	f00c f963 	bl	800f552 <HAL_TIM_Base_Init>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003292:	f000 fbbd 	bl	8003a10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003296:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800329a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800329c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032a0:	4619      	mov	r1, r3
 80032a2:	482b      	ldr	r0, [pc, #172]	; (8003350 <MX_TIM2_Init+0x124>)
 80032a4:	f00c ff1e 	bl	80100e4 <HAL_TIM_ConfigClockSource>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80032ae:	f000 fbaf 	bl	8003a10 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80032b2:	4827      	ldr	r0, [pc, #156]	; (8003350 <MX_TIM2_Init+0x124>)
 80032b4:	f00c fa8c 	bl	800f7d0 <HAL_TIM_OC_Init>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80032be:	f000 fba7 	bl	8003a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032c2:	2300      	movs	r3, #0
 80032c4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032c6:	2300      	movs	r3, #0
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80032ca:	f107 031c 	add.w	r3, r7, #28
 80032ce:	4619      	mov	r1, r3
 80032d0:	481f      	ldr	r0, [pc, #124]	; (8003350 <MX_TIM2_Init+0x124>)
 80032d2:	f00d fc51 	bl	8010b78 <HAL_TIMEx_MasterConfigSynchronization>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80032dc:	f000 fb98 	bl	8003a10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80032e0:	2300      	movs	r3, #0
 80032e2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80032e4:	2300      	movs	r3, #0
 80032e6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032e8:	2300      	movs	r3, #0
 80032ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032ec:	2300      	movs	r3, #0
 80032ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032f0:	463b      	mov	r3, r7
 80032f2:	2200      	movs	r2, #0
 80032f4:	4619      	mov	r1, r3
 80032f6:	4816      	ldr	r0, [pc, #88]	; (8003350 <MX_TIM2_Init+0x124>)
 80032f8:	f00c fe7a 	bl	800fff0 <HAL_TIM_OC_ConfigChannel>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8003302:	f000 fb85 	bl	8003a10 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003306:	463b      	mov	r3, r7
 8003308:	2204      	movs	r2, #4
 800330a:	4619      	mov	r1, r3
 800330c:	4810      	ldr	r0, [pc, #64]	; (8003350 <MX_TIM2_Init+0x124>)
 800330e:	f00c fe6f 	bl	800fff0 <HAL_TIM_OC_ConfigChannel>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8003318:	f000 fb7a 	bl	8003a10 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800331c:	463b      	mov	r3, r7
 800331e:	2208      	movs	r2, #8
 8003320:	4619      	mov	r1, r3
 8003322:	480b      	ldr	r0, [pc, #44]	; (8003350 <MX_TIM2_Init+0x124>)
 8003324:	f00c fe64 	bl	800fff0 <HAL_TIM_OC_ConfigChannel>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 800332e:	f000 fb6f 	bl	8003a10 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003332:	463b      	mov	r3, r7
 8003334:	220c      	movs	r2, #12
 8003336:	4619      	mov	r1, r3
 8003338:	4805      	ldr	r0, [pc, #20]	; (8003350 <MX_TIM2_Init+0x124>)
 800333a:	f00c fe59 	bl	800fff0 <HAL_TIM_OC_ConfigChannel>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8003344:	f000 fb64 	bl	8003a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003348:	bf00      	nop
 800334a:	3738      	adds	r7, #56	; 0x38
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	20000644 	.word	0x20000644

08003354 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b08e      	sub	sp, #56	; 0x38
 8003358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800335a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800335e:	2200      	movs	r2, #0
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	605a      	str	r2, [r3, #4]
 8003364:	609a      	str	r2, [r3, #8]
 8003366:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003368:	f107 031c 	add.w	r3, r7, #28
 800336c:	2200      	movs	r2, #0
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	605a      	str	r2, [r3, #4]
 8003372:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003374:	463b      	mov	r3, r7
 8003376:	2200      	movs	r2, #0
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	605a      	str	r2, [r3, #4]
 800337c:	609a      	str	r2, [r3, #8]
 800337e:	60da      	str	r2, [r3, #12]
 8003380:	611a      	str	r2, [r3, #16]
 8003382:	615a      	str	r2, [r3, #20]
 8003384:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003386:	4b3c      	ldr	r3, [pc, #240]	; (8003478 <MX_TIM3_Init+0x124>)
 8003388:	4a3c      	ldr	r2, [pc, #240]	; (800347c <MX_TIM3_Init+0x128>)
 800338a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 199;
 800338c:	4b3a      	ldr	r3, [pc, #232]	; (8003478 <MX_TIM3_Init+0x124>)
 800338e:	22c7      	movs	r2, #199	; 0xc7
 8003390:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003392:	4b39      	ldr	r3, [pc, #228]	; (8003478 <MX_TIM3_Init+0x124>)
 8003394:	2200      	movs	r2, #0
 8003396:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8003398:	4b37      	ldr	r3, [pc, #220]	; (8003478 <MX_TIM3_Init+0x124>)
 800339a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800339e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033a0:	4b35      	ldr	r3, [pc, #212]	; (8003478 <MX_TIM3_Init+0x124>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033a6:	4b34      	ldr	r3, [pc, #208]	; (8003478 <MX_TIM3_Init+0x124>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80033ac:	4832      	ldr	r0, [pc, #200]	; (8003478 <MX_TIM3_Init+0x124>)
 80033ae:	f00c f8d0 	bl	800f552 <HAL_TIM_Base_Init>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80033b8:	f000 fb2a 	bl	8003a10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033c0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80033c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033c6:	4619      	mov	r1, r3
 80033c8:	482b      	ldr	r0, [pc, #172]	; (8003478 <MX_TIM3_Init+0x124>)
 80033ca:	f00c fe8b 	bl	80100e4 <HAL_TIM_ConfigClockSource>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80033d4:	f000 fb1c 	bl	8003a10 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80033d8:	4827      	ldr	r0, [pc, #156]	; (8003478 <MX_TIM3_Init+0x124>)
 80033da:	f00c f9f9 	bl	800f7d0 <HAL_TIM_OC_Init>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80033e4:	f000 fb14 	bl	8003a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033e8:	2300      	movs	r3, #0
 80033ea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033ec:	2300      	movs	r3, #0
 80033ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80033f0:	f107 031c 	add.w	r3, r7, #28
 80033f4:	4619      	mov	r1, r3
 80033f6:	4820      	ldr	r0, [pc, #128]	; (8003478 <MX_TIM3_Init+0x124>)
 80033f8:	f00d fbbe 	bl	8010b78 <HAL_TIMEx_MasterConfigSynchronization>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003402:	f000 fb05 	bl	8003a10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003406:	2300      	movs	r3, #0
 8003408:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800340a:	2300      	movs	r3, #0
 800340c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800340e:	2300      	movs	r3, #0
 8003410:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003412:	2300      	movs	r3, #0
 8003414:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003416:	463b      	mov	r3, r7
 8003418:	2200      	movs	r2, #0
 800341a:	4619      	mov	r1, r3
 800341c:	4816      	ldr	r0, [pc, #88]	; (8003478 <MX_TIM3_Init+0x124>)
 800341e:	f00c fde7 	bl	800fff0 <HAL_TIM_OC_ConfigChannel>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003428:	f000 faf2 	bl	8003a10 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800342c:	463b      	mov	r3, r7
 800342e:	2204      	movs	r2, #4
 8003430:	4619      	mov	r1, r3
 8003432:	4811      	ldr	r0, [pc, #68]	; (8003478 <MX_TIM3_Init+0x124>)
 8003434:	f00c fddc 	bl	800fff0 <HAL_TIM_OC_ConfigChannel>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800343e:	f000 fae7 	bl	8003a10 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003442:	463b      	mov	r3, r7
 8003444:	2208      	movs	r2, #8
 8003446:	4619      	mov	r1, r3
 8003448:	480b      	ldr	r0, [pc, #44]	; (8003478 <MX_TIM3_Init+0x124>)
 800344a:	f00c fdd1 	bl	800fff0 <HAL_TIM_OC_ConfigChannel>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8003454:	f000 fadc 	bl	8003a10 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003458:	463b      	mov	r3, r7
 800345a:	220c      	movs	r2, #12
 800345c:	4619      	mov	r1, r3
 800345e:	4806      	ldr	r0, [pc, #24]	; (8003478 <MX_TIM3_Init+0x124>)
 8003460:	f00c fdc6 	bl	800fff0 <HAL_TIM_OC_ConfigChannel>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 800346a:	f000 fad1 	bl	8003a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800346e:	bf00      	nop
 8003470:	3738      	adds	r7, #56	; 0x38
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	20000690 	.word	0x20000690
 800347c:	40000400 	.word	0x40000400

08003480 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b08e      	sub	sp, #56	; 0x38
 8003484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003486:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	605a      	str	r2, [r3, #4]
 8003490:	609a      	str	r2, [r3, #8]
 8003492:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003494:	f107 031c 	add.w	r3, r7, #28
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	605a      	str	r2, [r3, #4]
 800349e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034a0:	463b      	mov	r3, r7
 80034a2:	2200      	movs	r2, #0
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	605a      	str	r2, [r3, #4]
 80034a8:	609a      	str	r2, [r3, #8]
 80034aa:	60da      	str	r2, [r3, #12]
 80034ac:	611a      	str	r2, [r3, #16]
 80034ae:	615a      	str	r2, [r3, #20]
 80034b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80034b2:	4b31      	ldr	r3, [pc, #196]	; (8003578 <MX_TIM4_Init+0xf8>)
 80034b4:	4a31      	ldr	r2, [pc, #196]	; (800357c <MX_TIM4_Init+0xfc>)
 80034b6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 199;
 80034b8:	4b2f      	ldr	r3, [pc, #188]	; (8003578 <MX_TIM4_Init+0xf8>)
 80034ba:	22c7      	movs	r2, #199	; 0xc7
 80034bc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034be:	4b2e      	ldr	r3, [pc, #184]	; (8003578 <MX_TIM4_Init+0xf8>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3002;
 80034c4:	4b2c      	ldr	r3, [pc, #176]	; (8003578 <MX_TIM4_Init+0xf8>)
 80034c6:	f640 32ba 	movw	r2, #3002	; 0xbba
 80034ca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034cc:	4b2a      	ldr	r3, [pc, #168]	; (8003578 <MX_TIM4_Init+0xf8>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034d2:	4b29      	ldr	r3, [pc, #164]	; (8003578 <MX_TIM4_Init+0xf8>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80034d8:	4827      	ldr	r0, [pc, #156]	; (8003578 <MX_TIM4_Init+0xf8>)
 80034da:	f00c f83a 	bl	800f552 <HAL_TIM_Base_Init>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80034e4:	f000 fa94 	bl	8003a10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034ec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80034ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034f2:	4619      	mov	r1, r3
 80034f4:	4820      	ldr	r0, [pc, #128]	; (8003578 <MX_TIM4_Init+0xf8>)
 80034f6:	f00c fdf5 	bl	80100e4 <HAL_TIM_ConfigClockSource>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8003500:	f000 fa86 	bl	8003a10 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8003504:	481c      	ldr	r0, [pc, #112]	; (8003578 <MX_TIM4_Init+0xf8>)
 8003506:	f00c f963 	bl	800f7d0 <HAL_TIM_OC_Init>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8003510:	f000 fa7e 	bl	8003a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003514:	2300      	movs	r3, #0
 8003516:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003518:	2300      	movs	r3, #0
 800351a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800351c:	f107 031c 	add.w	r3, r7, #28
 8003520:	4619      	mov	r1, r3
 8003522:	4815      	ldr	r0, [pc, #84]	; (8003578 <MX_TIM4_Init+0xf8>)
 8003524:	f00d fb28 	bl	8010b78 <HAL_TIMEx_MasterConfigSynchronization>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800352e:	f000 fa6f 	bl	8003a10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003532:	2300      	movs	r3, #0
 8003534:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003536:	2300      	movs	r3, #0
 8003538:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800353a:	2300      	movs	r3, #0
 800353c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800353e:	2300      	movs	r3, #0
 8003540:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003542:	463b      	mov	r3, r7
 8003544:	2200      	movs	r2, #0
 8003546:	4619      	mov	r1, r3
 8003548:	480b      	ldr	r0, [pc, #44]	; (8003578 <MX_TIM4_Init+0xf8>)
 800354a:	f00c fd51 	bl	800fff0 <HAL_TIM_OC_ConfigChannel>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8003554:	f000 fa5c 	bl	8003a10 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003558:	463b      	mov	r3, r7
 800355a:	2204      	movs	r2, #4
 800355c:	4619      	mov	r1, r3
 800355e:	4806      	ldr	r0, [pc, #24]	; (8003578 <MX_TIM4_Init+0xf8>)
 8003560:	f00c fd46 	bl	800fff0 <HAL_TIM_OC_ConfigChannel>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 800356a:	f000 fa51 	bl	8003a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800356e:	bf00      	nop
 8003570:	3738      	adds	r7, #56	; 0x38
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	200006dc 	.word	0x200006dc
 800357c:	40000800 	.word	0x40000800

08003580 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b08c      	sub	sp, #48	; 0x30
 8003584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003586:	f107 030c 	add.w	r3, r7, #12
 800358a:	2224      	movs	r2, #36	; 0x24
 800358c:	2100      	movs	r1, #0
 800358e:	4618      	mov	r0, r3
 8003590:	f014 f9ee 	bl	8017970 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003594:	463b      	mov	r3, r7
 8003596:	2200      	movs	r2, #0
 8003598:	601a      	str	r2, [r3, #0]
 800359a:	605a      	str	r2, [r3, #4]
 800359c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800359e:	4b21      	ldr	r3, [pc, #132]	; (8003624 <MX_TIM5_Init+0xa4>)
 80035a0:	4a21      	ldr	r2, [pc, #132]	; (8003628 <MX_TIM5_Init+0xa8>)
 80035a2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1;
 80035a4:	4b1f      	ldr	r3, [pc, #124]	; (8003624 <MX_TIM5_Init+0xa4>)
 80035a6:	2201      	movs	r2, #1
 80035a8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035aa:	4b1e      	ldr	r3, [pc, #120]	; (8003624 <MX_TIM5_Init+0xa4>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80035b0:	4b1c      	ldr	r3, [pc, #112]	; (8003624 <MX_TIM5_Init+0xa4>)
 80035b2:	f04f 32ff 	mov.w	r2, #4294967295
 80035b6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035b8:	4b1a      	ldr	r3, [pc, #104]	; (8003624 <MX_TIM5_Init+0xa4>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035be:	4b19      	ldr	r3, [pc, #100]	; (8003624 <MX_TIM5_Init+0xa4>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80035c4:	2301      	movs	r3, #1
 80035c6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80035c8:	2300      	movs	r3, #0
 80035ca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80035cc:	2301      	movs	r3, #1
 80035ce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80035d0:	2300      	movs	r3, #0
 80035d2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80035d4:	230f      	movs	r3, #15
 80035d6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80035d8:	2300      	movs	r3, #0
 80035da:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80035dc:	2301      	movs	r3, #1
 80035de:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80035e0:	2300      	movs	r3, #0
 80035e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80035e4:	230f      	movs	r3, #15
 80035e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80035e8:	f107 030c 	add.w	r3, r7, #12
 80035ec:	4619      	mov	r1, r3
 80035ee:	480d      	ldr	r0, [pc, #52]	; (8003624 <MX_TIM5_Init+0xa4>)
 80035f0:	f00c faaa 	bl	800fb48 <HAL_TIM_Encoder_Init>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 80035fa:	f000 fa09 	bl	8003a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035fe:	2300      	movs	r3, #0
 8003600:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003602:	2300      	movs	r3, #0
 8003604:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003606:	463b      	mov	r3, r7
 8003608:	4619      	mov	r1, r3
 800360a:	4806      	ldr	r0, [pc, #24]	; (8003624 <MX_TIM5_Init+0xa4>)
 800360c:	f00d fab4 	bl	8010b78 <HAL_TIMEx_MasterConfigSynchronization>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8003616:	f000 f9fb 	bl	8003a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800361a:	bf00      	nop
 800361c:	3730      	adds	r7, #48	; 0x30
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	20000728 	.word	0x20000728
 8003628:	40000c00 	.word	0x40000c00

0800362c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003632:	1d3b      	adds	r3, r7, #4
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	605a      	str	r2, [r3, #4]
 800363a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800363c:	4b14      	ldr	r3, [pc, #80]	; (8003690 <MX_TIM7_Init+0x64>)
 800363e:	4a15      	ldr	r2, [pc, #84]	; (8003694 <MX_TIM7_Init+0x68>)
 8003640:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 199;
 8003642:	4b13      	ldr	r3, [pc, #76]	; (8003690 <MX_TIM7_Init+0x64>)
 8003644:	22c7      	movs	r2, #199	; 0xc7
 8003646:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003648:	4b11      	ldr	r3, [pc, #68]	; (8003690 <MX_TIM7_Init+0x64>)
 800364a:	2200      	movs	r2, #0
 800364c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 800364e:	4b10      	ldr	r3, [pc, #64]	; (8003690 <MX_TIM7_Init+0x64>)
 8003650:	2263      	movs	r2, #99	; 0x63
 8003652:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003654:	4b0e      	ldr	r3, [pc, #56]	; (8003690 <MX_TIM7_Init+0x64>)
 8003656:	2200      	movs	r2, #0
 8003658:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800365a:	480d      	ldr	r0, [pc, #52]	; (8003690 <MX_TIM7_Init+0x64>)
 800365c:	f00b ff79 	bl	800f552 <HAL_TIM_Base_Init>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8003666:	f000 f9d3 	bl	8003a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800366a:	2300      	movs	r3, #0
 800366c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800366e:	2300      	movs	r3, #0
 8003670:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003672:	1d3b      	adds	r3, r7, #4
 8003674:	4619      	mov	r1, r3
 8003676:	4806      	ldr	r0, [pc, #24]	; (8003690 <MX_TIM7_Init+0x64>)
 8003678:	f00d fa7e 	bl	8010b78 <HAL_TIMEx_MasterConfigSynchronization>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8003682:	f000 f9c5 	bl	8003a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003686:	bf00      	nop
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20000774 	.word	0x20000774
 8003694:	40001400 	.word	0x40001400

08003698 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800369e:	463b      	mov	r3, r7
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	605a      	str	r2, [r3, #4]
 80036a6:	609a      	str	r2, [r3, #8]
 80036a8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80036aa:	4b16      	ldr	r3, [pc, #88]	; (8003704 <MX_TIM12_Init+0x6c>)
 80036ac:	4a16      	ldr	r2, [pc, #88]	; (8003708 <MX_TIM12_Init+0x70>)
 80036ae:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 199;
 80036b0:	4b14      	ldr	r3, [pc, #80]	; (8003704 <MX_TIM12_Init+0x6c>)
 80036b2:	22c7      	movs	r2, #199	; 0xc7
 80036b4:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036b6:	4b13      	ldr	r3, [pc, #76]	; (8003704 <MX_TIM12_Init+0x6c>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80036bc:	4b11      	ldr	r3, [pc, #68]	; (8003704 <MX_TIM12_Init+0x6c>)
 80036be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036c2:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036c4:	4b0f      	ldr	r3, [pc, #60]	; (8003704 <MX_TIM12_Init+0x6c>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036ca:	4b0e      	ldr	r3, [pc, #56]	; (8003704 <MX_TIM12_Init+0x6c>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80036d0:	480c      	ldr	r0, [pc, #48]	; (8003704 <MX_TIM12_Init+0x6c>)
 80036d2:	f00b ff3e 	bl	800f552 <HAL_TIM_Base_Init>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 80036dc:	f000 f998 	bl	8003a10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036e4:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80036e6:	463b      	mov	r3, r7
 80036e8:	4619      	mov	r1, r3
 80036ea:	4806      	ldr	r0, [pc, #24]	; (8003704 <MX_TIM12_Init+0x6c>)
 80036ec:	f00c fcfa 	bl	80100e4 <HAL_TIM_ConfigClockSource>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 80036f6:	f000 f98b 	bl	8003a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 80036fa:	bf00      	nop
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	200007c0 	.word	0x200007c0
 8003708:	40001800 	.word	0x40001800

0800370c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003710:	4b22      	ldr	r3, [pc, #136]	; (800379c <MX_UART4_Init+0x90>)
 8003712:	4a23      	ldr	r2, [pc, #140]	; (80037a0 <MX_UART4_Init+0x94>)
 8003714:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8003716:	4b21      	ldr	r3, [pc, #132]	; (800379c <MX_UART4_Init+0x90>)
 8003718:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800371c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800371e:	4b1f      	ldr	r3, [pc, #124]	; (800379c <MX_UART4_Init+0x90>)
 8003720:	2200      	movs	r2, #0
 8003722:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003724:	4b1d      	ldr	r3, [pc, #116]	; (800379c <MX_UART4_Init+0x90>)
 8003726:	2200      	movs	r2, #0
 8003728:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800372a:	4b1c      	ldr	r3, [pc, #112]	; (800379c <MX_UART4_Init+0x90>)
 800372c:	2200      	movs	r2, #0
 800372e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003730:	4b1a      	ldr	r3, [pc, #104]	; (800379c <MX_UART4_Init+0x90>)
 8003732:	220c      	movs	r2, #12
 8003734:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003736:	4b19      	ldr	r3, [pc, #100]	; (800379c <MX_UART4_Init+0x90>)
 8003738:	2200      	movs	r2, #0
 800373a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800373c:	4b17      	ldr	r3, [pc, #92]	; (800379c <MX_UART4_Init+0x90>)
 800373e:	2200      	movs	r2, #0
 8003740:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003742:	4b16      	ldr	r3, [pc, #88]	; (800379c <MX_UART4_Init+0x90>)
 8003744:	2200      	movs	r2, #0
 8003746:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003748:	4b14      	ldr	r3, [pc, #80]	; (800379c <MX_UART4_Init+0x90>)
 800374a:	2200      	movs	r2, #0
 800374c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800374e:	4b13      	ldr	r3, [pc, #76]	; (800379c <MX_UART4_Init+0x90>)
 8003750:	2200      	movs	r2, #0
 8003752:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003754:	4811      	ldr	r0, [pc, #68]	; (800379c <MX_UART4_Init+0x90>)
 8003756:	f00d fabb 	bl	8010cd0 <HAL_UART_Init>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8003760:	f000 f956 	bl	8003a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003764:	2100      	movs	r1, #0
 8003766:	480d      	ldr	r0, [pc, #52]	; (800379c <MX_UART4_Init+0x90>)
 8003768:	f00f ff03 	bl	8013572 <HAL_UARTEx_SetTxFifoThreshold>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8003772:	f000 f94d 	bl	8003a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003776:	2100      	movs	r1, #0
 8003778:	4808      	ldr	r0, [pc, #32]	; (800379c <MX_UART4_Init+0x90>)
 800377a:	f00f ff38 	bl	80135ee <HAL_UARTEx_SetRxFifoThreshold>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8003784:	f000 f944 	bl	8003a10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003788:	4804      	ldr	r0, [pc, #16]	; (800379c <MX_UART4_Init+0x90>)
 800378a:	f00f feb9 	bl	8013500 <HAL_UARTEx_DisableFifoMode>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d001      	beq.n	8003798 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8003794:	f000 f93c 	bl	8003a10 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003798:	bf00      	nop
 800379a:	bd80      	pop	{r7, pc}
 800379c:	2000080c 	.word	0x2000080c
 80037a0:	40004c00 	.word	0x40004c00

080037a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80037aa:	4b15      	ldr	r3, [pc, #84]	; (8003800 <MX_DMA_Init+0x5c>)
 80037ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80037b0:	4a13      	ldr	r2, [pc, #76]	; (8003800 <MX_DMA_Init+0x5c>)
 80037b2:	f043 0301 	orr.w	r3, r3, #1
 80037b6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80037ba:	4b11      	ldr	r3, [pc, #68]	; (8003800 <MX_DMA_Init+0x5c>)
 80037bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	607b      	str	r3, [r7, #4]
 80037c6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80037c8:	2200      	movs	r2, #0
 80037ca:	2100      	movs	r1, #0
 80037cc:	200b      	movs	r0, #11
 80037ce:	f002 fe46 	bl	800645e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80037d2:	200b      	movs	r0, #11
 80037d4:	f002 fe5d 	bl	8006492 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80037d8:	2200      	movs	r2, #0
 80037da:	2100      	movs	r1, #0
 80037dc:	200c      	movs	r0, #12
 80037de:	f002 fe3e 	bl	800645e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80037e2:	200c      	movs	r0, #12
 80037e4:	f002 fe55 	bl	8006492 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80037e8:	2200      	movs	r2, #0
 80037ea:	2100      	movs	r1, #0
 80037ec:	200d      	movs	r0, #13
 80037ee:	f002 fe36 	bl	800645e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80037f2:	200d      	movs	r0, #13
 80037f4:	f002 fe4d 	bl	8006492 <HAL_NVIC_EnableIRQ>

}
 80037f8:	bf00      	nop
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	58024400 	.word	0x58024400

08003804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b08c      	sub	sp, #48	; 0x30
 8003808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800380a:	f107 031c 	add.w	r3, r7, #28
 800380e:	2200      	movs	r2, #0
 8003810:	601a      	str	r2, [r3, #0]
 8003812:	605a      	str	r2, [r3, #4]
 8003814:	609a      	str	r2, [r3, #8]
 8003816:	60da      	str	r2, [r3, #12]
 8003818:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800381a:	4b77      	ldr	r3, [pc, #476]	; (80039f8 <MX_GPIO_Init+0x1f4>)
 800381c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003820:	4a75      	ldr	r2, [pc, #468]	; (80039f8 <MX_GPIO_Init+0x1f4>)
 8003822:	f043 0310 	orr.w	r3, r3, #16
 8003826:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800382a:	4b73      	ldr	r3, [pc, #460]	; (80039f8 <MX_GPIO_Init+0x1f4>)
 800382c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003830:	f003 0310 	and.w	r3, r3, #16
 8003834:	61bb      	str	r3, [r7, #24]
 8003836:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003838:	4b6f      	ldr	r3, [pc, #444]	; (80039f8 <MX_GPIO_Init+0x1f4>)
 800383a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800383e:	4a6e      	ldr	r2, [pc, #440]	; (80039f8 <MX_GPIO_Init+0x1f4>)
 8003840:	f043 0304 	orr.w	r3, r3, #4
 8003844:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003848:	4b6b      	ldr	r3, [pc, #428]	; (80039f8 <MX_GPIO_Init+0x1f4>)
 800384a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800384e:	f003 0304 	and.w	r3, r3, #4
 8003852:	617b      	str	r3, [r7, #20]
 8003854:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003856:	4b68      	ldr	r3, [pc, #416]	; (80039f8 <MX_GPIO_Init+0x1f4>)
 8003858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800385c:	4a66      	ldr	r2, [pc, #408]	; (80039f8 <MX_GPIO_Init+0x1f4>)
 800385e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003862:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003866:	4b64      	ldr	r3, [pc, #400]	; (80039f8 <MX_GPIO_Init+0x1f4>)
 8003868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800386c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003870:	613b      	str	r3, [r7, #16]
 8003872:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003874:	4b60      	ldr	r3, [pc, #384]	; (80039f8 <MX_GPIO_Init+0x1f4>)
 8003876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800387a:	4a5f      	ldr	r2, [pc, #380]	; (80039f8 <MX_GPIO_Init+0x1f4>)
 800387c:	f043 0301 	orr.w	r3, r3, #1
 8003880:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003884:	4b5c      	ldr	r3, [pc, #368]	; (80039f8 <MX_GPIO_Init+0x1f4>)
 8003886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	60fb      	str	r3, [r7, #12]
 8003890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003892:	4b59      	ldr	r3, [pc, #356]	; (80039f8 <MX_GPIO_Init+0x1f4>)
 8003894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003898:	4a57      	ldr	r2, [pc, #348]	; (80039f8 <MX_GPIO_Init+0x1f4>)
 800389a:	f043 0302 	orr.w	r3, r3, #2
 800389e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038a2:	4b55      	ldr	r3, [pc, #340]	; (80039f8 <MX_GPIO_Init+0x1f4>)
 80038a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	60bb      	str	r3, [r7, #8]
 80038ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80038b0:	4b51      	ldr	r3, [pc, #324]	; (80039f8 <MX_GPIO_Init+0x1f4>)
 80038b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038b6:	4a50      	ldr	r2, [pc, #320]	; (80039f8 <MX_GPIO_Init+0x1f4>)
 80038b8:	f043 0308 	orr.w	r3, r3, #8
 80038bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038c0:	4b4d      	ldr	r3, [pc, #308]	; (80039f8 <MX_GPIO_Init+0x1f4>)
 80038c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038c6:	f003 0308 	and.w	r3, r3, #8
 80038ca:	607b      	str	r3, [r7, #4]
 80038cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin
 80038ce:	2200      	movs	r2, #0
 80038d0:	f64f 4178 	movw	r1, #64632	; 0xfc78
 80038d4:	4849      	ldr	r0, [pc, #292]	; (80039fc <MX_GPIO_Init+0x1f8>)
 80038d6:	f006 fb99 	bl	800a00c <HAL_GPIO_WritePin>
                          |SERVO0_Pin|SERVO1_Pin|SERVO2_Pin|SERVO3_Pin
                          |SERVO4_Pin|SERVO5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 80038da:	2200      	movs	r2, #0
 80038dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038e0:	4847      	ldr	r0, [pc, #284]	; (8003a00 <MX_GPIO_Init+0x1fc>)
 80038e2:	f006 fb93 	bl	800a00c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SERVO6_Pin|SPI2_CS_Pin|LCD_BL_Pin|LCD_RST_Pin
 80038e6:	2200      	movs	r2, #0
 80038e8:	f641 0198 	movw	r1, #6296	; 0x1898
 80038ec:	4845      	ldr	r0, [pc, #276]	; (8003a04 <MX_GPIO_Init+0x200>)
 80038ee:	f006 fb8d 	bl	800a00c <HAL_GPIO_WritePin>
                          |LCD_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SERVO7_GPIO_Port, SERVO7_Pin, GPIO_PIN_RESET);
 80038f2:	2200      	movs	r2, #0
 80038f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038f8:	4843      	ldr	r0, [pc, #268]	; (8003a08 <MX_GPIO_Init+0x204>)
 80038fa:	f006 fb87 	bl	800a00c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_RW_Pin|LCD_RS_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 80038fe:	2200      	movs	r2, #0
 8003900:	2198      	movs	r1, #152	; 0x98
 8003902:	4842      	ldr	r0, [pc, #264]	; (8003a0c <MX_GPIO_Init+0x208>)
 8003904:	f006 fb82 	bl	800a00c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin
                           SERVO0_Pin SERVO1_Pin SERVO2_Pin SERVO3_Pin
                           SERVO4_Pin SERVO5_Pin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin
 8003908:	f64f 4378 	movw	r3, #64632	; 0xfc78
 800390c:	61fb      	str	r3, [r7, #28]
                          |SERVO0_Pin|SERVO1_Pin|SERVO2_Pin|SERVO3_Pin
                          |SERVO4_Pin|SERVO5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800390e:	2301      	movs	r3, #1
 8003910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003912:	2300      	movs	r3, #0
 8003914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003916:	2303      	movs	r3, #3
 8003918:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800391a:	f107 031c 	add.w	r3, r7, #28
 800391e:	4619      	mov	r1, r3
 8003920:	4836      	ldr	r0, [pc, #216]	; (80039fc <MX_GPIO_Init+0x1f8>)
 8003922:	f006 f9c3 	bl	8009cac <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BUILTIN_Pin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 8003926:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800392a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800392c:	2301      	movs	r3, #1
 800392e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003930:	2300      	movs	r3, #0
 8003932:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003934:	2300      	movs	r3, #0
 8003936:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 8003938:	f107 031c 	add.w	r3, r7, #28
 800393c:	4619      	mov	r1, r3
 800393e:	4830      	ldr	r0, [pc, #192]	; (8003a00 <MX_GPIO_Init+0x1fc>)
 8003940:	f006 f9b4 	bl	8009cac <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8003944:	2304      	movs	r3, #4
 8003946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003948:	2300      	movs	r3, #0
 800394a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800394c:	2300      	movs	r3, #0
 800394e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8003950:	f107 031c 	add.w	r3, r7, #28
 8003954:	4619      	mov	r1, r3
 8003956:	482c      	ldr	r0, [pc, #176]	; (8003a08 <MX_GPIO_Init+0x204>)
 8003958:	f006 f9a8 	bl	8009cac <HAL_GPIO_Init>

  /*Configure GPIO pins : SERVO6_Pin LCD_EN_Pin */
  GPIO_InitStruct.Pin = SERVO6_Pin|LCD_EN_Pin;
 800395c:	f44f 6308 	mov.w	r3, #2176	; 0x880
 8003960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003962:	2301      	movs	r3, #1
 8003964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003966:	2300      	movs	r3, #0
 8003968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800396a:	2303      	movs	r3, #3
 800396c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800396e:	f107 031c 	add.w	r3, r7, #28
 8003972:	4619      	mov	r1, r3
 8003974:	4823      	ldr	r0, [pc, #140]	; (8003a04 <MX_GPIO_Init+0x200>)
 8003976:	f006 f999 	bl	8009cac <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CS_Pin LCD_BL_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin|LCD_BL_Pin|LCD_RST_Pin;
 800397a:	f241 0318 	movw	r3, #4120	; 0x1018
 800397e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003980:	2301      	movs	r3, #1
 8003982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003984:	2300      	movs	r3, #0
 8003986:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003988:	2300      	movs	r3, #0
 800398a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800398c:	f107 031c 	add.w	r3, r7, #28
 8003990:	4619      	mov	r1, r3
 8003992:	481c      	ldr	r0, [pc, #112]	; (8003a04 <MX_GPIO_Init+0x200>)
 8003994:	f006 f98a 	bl	8009cac <HAL_GPIO_Init>

  /*Configure GPIO pin : SERVO7_Pin */
  GPIO_InitStruct.Pin = SERVO7_Pin;
 8003998:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800399c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800399e:	2301      	movs	r3, #1
 80039a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a2:	2300      	movs	r3, #0
 80039a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039a6:	2303      	movs	r3, #3
 80039a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SERVO7_GPIO_Port, &GPIO_InitStruct);
 80039aa:	f107 031c 	add.w	r3, r7, #28
 80039ae:	4619      	mov	r1, r3
 80039b0:	4815      	ldr	r0, [pc, #84]	; (8003a08 <MX_GPIO_Init+0x204>)
 80039b2:	f006 f97b 	bl	8009cac <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RW_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_RW_Pin|LCD_RS_Pin;
 80039b6:	2318      	movs	r3, #24
 80039b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039ba:	2301      	movs	r3, #1
 80039bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039be:	2300      	movs	r3, #0
 80039c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039c2:	2303      	movs	r3, #3
 80039c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039c6:	f107 031c 	add.w	r3, r7, #28
 80039ca:	4619      	mov	r1, r3
 80039cc:	480f      	ldr	r0, [pc, #60]	; (8003a0c <MX_GPIO_Init+0x208>)
 80039ce:	f006 f96d 	bl	8009cac <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 80039d2:	2380      	movs	r3, #128	; 0x80
 80039d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039d6:	2301      	movs	r3, #1
 80039d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039da:	2300      	movs	r3, #0
 80039dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039de:	2300      	movs	r3, #0
 80039e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80039e2:	f107 031c 	add.w	r3, r7, #28
 80039e6:	4619      	mov	r1, r3
 80039e8:	4808      	ldr	r0, [pc, #32]	; (8003a0c <MX_GPIO_Init+0x208>)
 80039ea:	f006 f95f 	bl	8009cac <HAL_GPIO_Init>

}
 80039ee:	bf00      	nop
 80039f0:	3730      	adds	r7, #48	; 0x30
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	58024400 	.word	0x58024400
 80039fc:	58021000 	.word	0x58021000
 8003a00:	58020800 	.word	0x58020800
 8003a04:	58020400 	.word	0x58020400
 8003a08:	58020000 	.word	0x58020000
 8003a0c:	58020c00 	.word	0x58020c00

08003a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a14:	b672      	cpsid	i
}
 8003a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a18:	e7fe      	b.n	8003a18 <Error_Handler+0x8>
	...

08003a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a22:	4b0a      	ldr	r3, [pc, #40]	; (8003a4c <HAL_MspInit+0x30>)
 8003a24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a28:	4a08      	ldr	r2, [pc, #32]	; (8003a4c <HAL_MspInit+0x30>)
 8003a2a:	f043 0302 	orr.w	r3, r3, #2
 8003a2e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003a32:	4b06      	ldr	r3, [pc, #24]	; (8003a4c <HAL_MspInit+0x30>)
 8003a34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	607b      	str	r3, [r7, #4]
 8003a3e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr
 8003a4c:	58024400 	.word	0x58024400

08003a50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b0b8      	sub	sp, #224	; 0xe0
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a58:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	605a      	str	r2, [r3, #4]
 8003a62:	609a      	str	r2, [r3, #8]
 8003a64:	60da      	str	r2, [r3, #12]
 8003a66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a68:	f107 0310 	add.w	r3, r7, #16
 8003a6c:	22bc      	movs	r2, #188	; 0xbc
 8003a6e:	2100      	movs	r1, #0
 8003a70:	4618      	mov	r0, r3
 8003a72:	f013 ff7d 	bl	8017970 <memset>
  if(hadc->Instance==ADC1)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a2e      	ldr	r2, [pc, #184]	; (8003b34 <HAL_ADC_MspInit+0xe4>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d154      	bne.n	8003b2a <HAL_ADC_MspInit+0xda>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003a80:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003a84:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8003a86:	2302      	movs	r3, #2
 8003a88:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 15;
 8003a8a:	230f      	movs	r3, #15
 8003a8c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8003a8e:	2302      	movs	r3, #2
 8003a90:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8003a92:	2302      	movs	r3, #2
 8003a94:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8003a96:	2302      	movs	r3, #2
 8003a98:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8003a9a:	23c0      	movs	r3, #192	; 0xc0
 8003a9c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8003a9e:	2320      	movs	r3, #32
 8003aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003aac:	f107 0310 	add.w	r3, r7, #16
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f008 fd9d 	bl	800c5f0 <HAL_RCCEx_PeriphCLKConfig>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8003abc:	f7ff ffa8 	bl	8003a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003ac0:	4b1d      	ldr	r3, [pc, #116]	; (8003b38 <HAL_ADC_MspInit+0xe8>)
 8003ac2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003ac6:	4a1c      	ldr	r2, [pc, #112]	; (8003b38 <HAL_ADC_MspInit+0xe8>)
 8003ac8:	f043 0320 	orr.w	r3, r3, #32
 8003acc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003ad0:	4b19      	ldr	r3, [pc, #100]	; (8003b38 <HAL_ADC_MspInit+0xe8>)
 8003ad2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003ad6:	f003 0320 	and.w	r3, r3, #32
 8003ada:	60fb      	str	r3, [r7, #12]
 8003adc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ade:	4b16      	ldr	r3, [pc, #88]	; (8003b38 <HAL_ADC_MspInit+0xe8>)
 8003ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ae4:	4a14      	ldr	r2, [pc, #80]	; (8003b38 <HAL_ADC_MspInit+0xe8>)
 8003ae6:	f043 0304 	orr.w	r3, r3, #4
 8003aea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003aee:	4b12      	ldr	r3, [pc, #72]	; (8003b38 <HAL_ADC_MspInit+0xe8>)
 8003af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	60bb      	str	r3, [r7, #8]
 8003afa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003afc:	2301      	movs	r3, #1
 8003afe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b02:	2303      	movs	r3, #3
 8003b04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b0e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003b12:	4619      	mov	r1, r3
 8003b14:	4809      	ldr	r0, [pc, #36]	; (8003b3c <HAL_ADC_MspInit+0xec>)
 8003b16:	f006 f8c9 	bl	8009cac <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	2012      	movs	r0, #18
 8003b20:	f002 fc9d 	bl	800645e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003b24:	2012      	movs	r0, #18
 8003b26:	f002 fcb4 	bl	8006492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003b2a:	bf00      	nop
 8003b2c:	37e0      	adds	r7, #224	; 0xe0
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	40022000 	.word	0x40022000
 8003b38:	58024400 	.word	0x58024400
 8003b3c:	58020800 	.word	0x58020800

08003b40 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b0ba      	sub	sp, #232	; 0xe8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b48:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	605a      	str	r2, [r3, #4]
 8003b52:	609a      	str	r2, [r3, #8]
 8003b54:	60da      	str	r2, [r3, #12]
 8003b56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b58:	f107 0318 	add.w	r3, r7, #24
 8003b5c:	22bc      	movs	r2, #188	; 0xbc
 8003b5e:	2100      	movs	r1, #0
 8003b60:	4618      	mov	r0, r3
 8003b62:	f013 ff05 	bl	8017970 <memset>
  if(hfdcan->Instance==FDCAN1)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a63      	ldr	r2, [pc, #396]	; (8003cf8 <HAL_FDCAN_MspInit+0x1b8>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d15d      	bne.n	8003c2c <HAL_FDCAN_MspInit+0xec>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003b70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b74:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8003b76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003b7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b7e:	f107 0318 	add.w	r3, r7, #24
 8003b82:	4618      	mov	r0, r3
 8003b84:	f008 fd34 	bl	800c5f0 <HAL_RCCEx_PeriphCLKConfig>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 8003b8e:	f7ff ff3f 	bl	8003a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8003b92:	4b5a      	ldr	r3, [pc, #360]	; (8003cfc <HAL_FDCAN_MspInit+0x1bc>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	3301      	adds	r3, #1
 8003b98:	4a58      	ldr	r2, [pc, #352]	; (8003cfc <HAL_FDCAN_MspInit+0x1bc>)
 8003b9a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8003b9c:	4b57      	ldr	r3, [pc, #348]	; (8003cfc <HAL_FDCAN_MspInit+0x1bc>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d10e      	bne.n	8003bc2 <HAL_FDCAN_MspInit+0x82>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8003ba4:	4b56      	ldr	r3, [pc, #344]	; (8003d00 <HAL_FDCAN_MspInit+0x1c0>)
 8003ba6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003baa:	4a55      	ldr	r2, [pc, #340]	; (8003d00 <HAL_FDCAN_MspInit+0x1c0>)
 8003bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bb0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003bb4:	4b52      	ldr	r3, [pc, #328]	; (8003d00 <HAL_FDCAN_MspInit+0x1c0>)
 8003bb6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bbe:	617b      	str	r3, [r7, #20]
 8003bc0:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bc2:	4b4f      	ldr	r3, [pc, #316]	; (8003d00 <HAL_FDCAN_MspInit+0x1c0>)
 8003bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bc8:	4a4d      	ldr	r2, [pc, #308]	; (8003d00 <HAL_FDCAN_MspInit+0x1c0>)
 8003bca:	f043 0308 	orr.w	r3, r3, #8
 8003bce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003bd2:	4b4b      	ldr	r3, [pc, #300]	; (8003d00 <HAL_FDCAN_MspInit+0x1c0>)
 8003bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bd8:	f003 0308 	and.w	r3, r3, #8
 8003bdc:	613b      	str	r3, [r7, #16]
 8003bde:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003be0:	2303      	movs	r3, #3
 8003be2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be6:	2302      	movs	r3, #2
 8003be8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bec:	2300      	movs	r3, #0
 8003bee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003bf8:	2309      	movs	r3, #9
 8003bfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003bfe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003c02:	4619      	mov	r1, r3
 8003c04:	483f      	ldr	r0, [pc, #252]	; (8003d04 <HAL_FDCAN_MspInit+0x1c4>)
 8003c06:	f006 f851 	bl	8009cac <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	2013      	movs	r0, #19
 8003c10:	f002 fc25 	bl	800645e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8003c14:	2013      	movs	r0, #19
 8003c16:	f002 fc3c 	bl	8006492 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	2015      	movs	r0, #21
 8003c20:	f002 fc1d 	bl	800645e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8003c24:	2015      	movs	r0, #21
 8003c26:	f002 fc34 	bl	8006492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8003c2a:	e061      	b.n	8003cf0 <HAL_FDCAN_MspInit+0x1b0>
  else if(hfdcan->Instance==FDCAN2)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a35      	ldr	r2, [pc, #212]	; (8003d08 <HAL_FDCAN_MspInit+0x1c8>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d15c      	bne.n	8003cf0 <HAL_FDCAN_MspInit+0x1b0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003c36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c3a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8003c3c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003c40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c44:	f107 0318 	add.w	r3, r7, #24
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f008 fcd1 	bl	800c5f0 <HAL_RCCEx_PeriphCLKConfig>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d001      	beq.n	8003c58 <HAL_FDCAN_MspInit+0x118>
      Error_Handler();
 8003c54:	f7ff fedc 	bl	8003a10 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8003c58:	4b28      	ldr	r3, [pc, #160]	; (8003cfc <HAL_FDCAN_MspInit+0x1bc>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	4a27      	ldr	r2, [pc, #156]	; (8003cfc <HAL_FDCAN_MspInit+0x1bc>)
 8003c60:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8003c62:	4b26      	ldr	r3, [pc, #152]	; (8003cfc <HAL_FDCAN_MspInit+0x1bc>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d10e      	bne.n	8003c88 <HAL_FDCAN_MspInit+0x148>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8003c6a:	4b25      	ldr	r3, [pc, #148]	; (8003d00 <HAL_FDCAN_MspInit+0x1c0>)
 8003c6c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003c70:	4a23      	ldr	r2, [pc, #140]	; (8003d00 <HAL_FDCAN_MspInit+0x1c0>)
 8003c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c76:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003c7a:	4b21      	ldr	r3, [pc, #132]	; (8003d00 <HAL_FDCAN_MspInit+0x1c0>)
 8003c7c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c84:	60fb      	str	r3, [r7, #12]
 8003c86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c88:	4b1d      	ldr	r3, [pc, #116]	; (8003d00 <HAL_FDCAN_MspInit+0x1c0>)
 8003c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c8e:	4a1c      	ldr	r2, [pc, #112]	; (8003d00 <HAL_FDCAN_MspInit+0x1c0>)
 8003c90:	f043 0302 	orr.w	r3, r3, #2
 8003c94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c98:	4b19      	ldr	r3, [pc, #100]	; (8003d00 <HAL_FDCAN_MspInit+0x1c0>)
 8003c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	60bb      	str	r3, [r7, #8]
 8003ca4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003ca6:	2360      	movs	r3, #96	; 0x60
 8003ca8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cac:	2302      	movs	r3, #2
 8003cae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8003cbe:	2309      	movs	r3, #9
 8003cc0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cc4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003cc8:	4619      	mov	r1, r3
 8003cca:	4810      	ldr	r0, [pc, #64]	; (8003d0c <HAL_FDCAN_MspInit+0x1cc>)
 8003ccc:	f005 ffee 	bl	8009cac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	2014      	movs	r0, #20
 8003cd6:	f002 fbc2 	bl	800645e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8003cda:	2014      	movs	r0, #20
 8003cdc:	f002 fbd9 	bl	8006492 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 0, 0);
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	2016      	movs	r0, #22
 8003ce6:	f002 fbba 	bl	800645e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 8003cea:	2016      	movs	r0, #22
 8003cec:	f002 fbd1 	bl	8006492 <HAL_NVIC_EnableIRQ>
}
 8003cf0:	bf00      	nop
 8003cf2:	37e8      	adds	r7, #232	; 0xe8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	4000a000 	.word	0x4000a000
 8003cfc:	20001050 	.word	0x20001050
 8003d00:	58024400 	.word	0x58024400
 8003d04:	58020c00 	.word	0x58020c00
 8003d08:	4000a400 	.word	0x4000a400
 8003d0c:	58020400 	.word	0x58020400

08003d10 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b0b2      	sub	sp, #200	; 0xc8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003d18:	f107 030c 	add.w	r3, r7, #12
 8003d1c:	22bc      	movs	r2, #188	; 0xbc
 8003d1e:	2100      	movs	r1, #0
 8003d20:	4618      	mov	r0, r3
 8003d22:	f013 fe25 	bl	8017970 <memset>
  if(hrtc->Instance==RTC)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a0f      	ldr	r2, [pc, #60]	; (8003d68 <HAL_RTC_MspInit+0x58>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d116      	bne.n	8003d5e <HAL_RTC_MspInit+0x4e>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003d30:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d34:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003d36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d3e:	f107 030c 	add.w	r3, r7, #12
 8003d42:	4618      	mov	r0, r3
 8003d44:	f008 fc54 	bl	800c5f0 <HAL_RCCEx_PeriphCLKConfig>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003d4e:	f7ff fe5f 	bl	8003a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003d52:	4b06      	ldr	r3, [pc, #24]	; (8003d6c <HAL_RTC_MspInit+0x5c>)
 8003d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d56:	4a05      	ldr	r2, [pc, #20]	; (8003d6c <HAL_RTC_MspInit+0x5c>)
 8003d58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d5c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003d5e:	bf00      	nop
 8003d60:	37c8      	adds	r7, #200	; 0xc8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	58004000 	.word	0x58004000
 8003d6c:	58024400 	.word	0x58024400

08003d70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b0b8      	sub	sp, #224	; 0xe0
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d78:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	605a      	str	r2, [r3, #4]
 8003d82:	609a      	str	r2, [r3, #8]
 8003d84:	60da      	str	r2, [r3, #12]
 8003d86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003d88:	f107 0310 	add.w	r3, r7, #16
 8003d8c:	22bc      	movs	r2, #188	; 0xbc
 8003d8e:	2100      	movs	r1, #0
 8003d90:	4618      	mov	r0, r3
 8003d92:	f013 fded 	bl	8017970 <memset>
  if(hspi->Instance==SPI2)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a56      	ldr	r2, [pc, #344]	; (8003ef4 <HAL_SPI_MspInit+0x184>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	f040 80a5 	bne.w	8003eec <HAL_SPI_MspInit+0x17c>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8003da2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003da6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003da8:	2300      	movs	r3, #0
 8003daa:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003dac:	f107 0310 	add.w	r3, r7, #16
 8003db0:	4618      	mov	r0, r3
 8003db2:	f008 fc1d 	bl	800c5f0 <HAL_RCCEx_PeriphCLKConfig>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8003dbc:	f7ff fe28 	bl	8003a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003dc0:	4b4d      	ldr	r3, [pc, #308]	; (8003ef8 <HAL_SPI_MspInit+0x188>)
 8003dc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003dc6:	4a4c      	ldr	r2, [pc, #304]	; (8003ef8 <HAL_SPI_MspInit+0x188>)
 8003dc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dcc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003dd0:	4b49      	ldr	r3, [pc, #292]	; (8003ef8 <HAL_SPI_MspInit+0x188>)
 8003dd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003dd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dda:	60fb      	str	r3, [r7, #12]
 8003ddc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dde:	4b46      	ldr	r3, [pc, #280]	; (8003ef8 <HAL_SPI_MspInit+0x188>)
 8003de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003de4:	4a44      	ldr	r2, [pc, #272]	; (8003ef8 <HAL_SPI_MspInit+0x188>)
 8003de6:	f043 0302 	orr.w	r3, r3, #2
 8003dea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003dee:	4b42      	ldr	r3, [pc, #264]	; (8003ef8 <HAL_SPI_MspInit+0x188>)
 8003df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	60bb      	str	r3, [r7, #8]
 8003dfa:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003dfc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003e00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e04:	2302      	movs	r3, #2
 8003e06:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e10:	2300      	movs	r3, #0
 8003e12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003e16:	2305      	movs	r3, #5
 8003e18:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e1c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003e20:	4619      	mov	r1, r3
 8003e22:	4836      	ldr	r0, [pc, #216]	; (8003efc <HAL_SPI_MspInit+0x18c>)
 8003e24:	f005 ff42 	bl	8009cac <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream1;
 8003e28:	4b35      	ldr	r3, [pc, #212]	; (8003f00 <HAL_SPI_MspInit+0x190>)
 8003e2a:	4a36      	ldr	r2, [pc, #216]	; (8003f04 <HAL_SPI_MspInit+0x194>)
 8003e2c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8003e2e:	4b34      	ldr	r3, [pc, #208]	; (8003f00 <HAL_SPI_MspInit+0x190>)
 8003e30:	2228      	movs	r2, #40	; 0x28
 8003e32:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e34:	4b32      	ldr	r3, [pc, #200]	; (8003f00 <HAL_SPI_MspInit+0x190>)
 8003e36:	2240      	movs	r2, #64	; 0x40
 8003e38:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e3a:	4b31      	ldr	r3, [pc, #196]	; (8003f00 <HAL_SPI_MspInit+0x190>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003e40:	4b2f      	ldr	r3, [pc, #188]	; (8003f00 <HAL_SPI_MspInit+0x190>)
 8003e42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e46:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e48:	4b2d      	ldr	r3, [pc, #180]	; (8003f00 <HAL_SPI_MspInit+0x190>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e4e:	4b2c      	ldr	r3, [pc, #176]	; (8003f00 <HAL_SPI_MspInit+0x190>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8003e54:	4b2a      	ldr	r3, [pc, #168]	; (8003f00 <HAL_SPI_MspInit+0x190>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003e5a:	4b29      	ldr	r3, [pc, #164]	; (8003f00 <HAL_SPI_MspInit+0x190>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e60:	4b27      	ldr	r3, [pc, #156]	; (8003f00 <HAL_SPI_MspInit+0x190>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8003e66:	4826      	ldr	r0, [pc, #152]	; (8003f00 <HAL_SPI_MspInit+0x190>)
 8003e68:	f002 fb2e 	bl	80064c8 <HAL_DMA_Init>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8003e72:	f7ff fdcd 	bl	8003a10 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a21      	ldr	r2, [pc, #132]	; (8003f00 <HAL_SPI_MspInit+0x190>)
 8003e7a:	679a      	str	r2, [r3, #120]	; 0x78
 8003e7c:	4a20      	ldr	r2, [pc, #128]	; (8003f00 <HAL_SPI_MspInit+0x190>)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream2;
 8003e82:	4b21      	ldr	r3, [pc, #132]	; (8003f08 <HAL_SPI_MspInit+0x198>)
 8003e84:	4a21      	ldr	r2, [pc, #132]	; (8003f0c <HAL_SPI_MspInit+0x19c>)
 8003e86:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8003e88:	4b1f      	ldr	r3, [pc, #124]	; (8003f08 <HAL_SPI_MspInit+0x198>)
 8003e8a:	2227      	movs	r2, #39	; 0x27
 8003e8c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e8e:	4b1e      	ldr	r3, [pc, #120]	; (8003f08 <HAL_SPI_MspInit+0x198>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e94:	4b1c      	ldr	r3, [pc, #112]	; (8003f08 <HAL_SPI_MspInit+0x198>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e9a:	4b1b      	ldr	r3, [pc, #108]	; (8003f08 <HAL_SPI_MspInit+0x198>)
 8003e9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ea0:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ea2:	4b19      	ldr	r3, [pc, #100]	; (8003f08 <HAL_SPI_MspInit+0x198>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ea8:	4b17      	ldr	r3, [pc, #92]	; (8003f08 <HAL_SPI_MspInit+0x198>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8003eae:	4b16      	ldr	r3, [pc, #88]	; (8003f08 <HAL_SPI_MspInit+0x198>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003eb4:	4b14      	ldr	r3, [pc, #80]	; (8003f08 <HAL_SPI_MspInit+0x198>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003eba:	4b13      	ldr	r3, [pc, #76]	; (8003f08 <HAL_SPI_MspInit+0x198>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003ec0:	4811      	ldr	r0, [pc, #68]	; (8003f08 <HAL_SPI_MspInit+0x198>)
 8003ec2:	f002 fb01 	bl	80064c8 <HAL_DMA_Init>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <HAL_SPI_MspInit+0x160>
    {
      Error_Handler();
 8003ecc:	f7ff fda0 	bl	8003a10 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a0d      	ldr	r2, [pc, #52]	; (8003f08 <HAL_SPI_MspInit+0x198>)
 8003ed4:	67da      	str	r2, [r3, #124]	; 0x7c
 8003ed6:	4a0c      	ldr	r2, [pc, #48]	; (8003f08 <HAL_SPI_MspInit+0x198>)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003edc:	2200      	movs	r2, #0
 8003ede:	2100      	movs	r1, #0
 8003ee0:	2024      	movs	r0, #36	; 0x24
 8003ee2:	f002 fabc 	bl	800645e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003ee6:	2024      	movs	r0, #36	; 0x24
 8003ee8:	f002 fad3 	bl	8006492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003eec:	bf00      	nop
 8003eee:	37e0      	adds	r7, #224	; 0xe0
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40003800 	.word	0x40003800
 8003ef8:	58024400 	.word	0x58024400
 8003efc:	58020400 	.word	0x58020400
 8003f00:	20000554 	.word	0x20000554
 8003f04:	40020028 	.word	0x40020028
 8003f08:	200005cc 	.word	0x200005cc
 8003f0c:	40020040 	.word	0x40020040

08003f10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b088      	sub	sp, #32
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f20:	d117      	bne.n	8003f52 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f22:	4b43      	ldr	r3, [pc, #268]	; (8004030 <HAL_TIM_Base_MspInit+0x120>)
 8003f24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f28:	4a41      	ldr	r2, [pc, #260]	; (8004030 <HAL_TIM_Base_MspInit+0x120>)
 8003f2a:	f043 0301 	orr.w	r3, r3, #1
 8003f2e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003f32:	4b3f      	ldr	r3, [pc, #252]	; (8004030 <HAL_TIM_Base_MspInit+0x120>)
 8003f34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	61fb      	str	r3, [r7, #28]
 8003f3e:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003f40:	2200      	movs	r2, #0
 8003f42:	2100      	movs	r1, #0
 8003f44:	201c      	movs	r0, #28
 8003f46:	f002 fa8a 	bl	800645e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003f4a:	201c      	movs	r0, #28
 8003f4c:	f002 faa1 	bl	8006492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8003f50:	e06a      	b.n	8004028 <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM3)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a37      	ldr	r2, [pc, #220]	; (8004034 <HAL_TIM_Base_MspInit+0x124>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d117      	bne.n	8003f8c <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f5c:	4b34      	ldr	r3, [pc, #208]	; (8004030 <HAL_TIM_Base_MspInit+0x120>)
 8003f5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f62:	4a33      	ldr	r2, [pc, #204]	; (8004030 <HAL_TIM_Base_MspInit+0x120>)
 8003f64:	f043 0302 	orr.w	r3, r3, #2
 8003f68:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003f6c:	4b30      	ldr	r3, [pc, #192]	; (8004030 <HAL_TIM_Base_MspInit+0x120>)
 8003f6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	61bb      	str	r3, [r7, #24]
 8003f78:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	201d      	movs	r0, #29
 8003f80:	f002 fa6d 	bl	800645e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003f84:	201d      	movs	r0, #29
 8003f86:	f002 fa84 	bl	8006492 <HAL_NVIC_EnableIRQ>
}
 8003f8a:	e04d      	b.n	8004028 <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM4)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a29      	ldr	r2, [pc, #164]	; (8004038 <HAL_TIM_Base_MspInit+0x128>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d117      	bne.n	8003fc6 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003f96:	4b26      	ldr	r3, [pc, #152]	; (8004030 <HAL_TIM_Base_MspInit+0x120>)
 8003f98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f9c:	4a24      	ldr	r2, [pc, #144]	; (8004030 <HAL_TIM_Base_MspInit+0x120>)
 8003f9e:	f043 0304 	orr.w	r3, r3, #4
 8003fa2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003fa6:	4b22      	ldr	r3, [pc, #136]	; (8004030 <HAL_TIM_Base_MspInit+0x120>)
 8003fa8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003fac:	f003 0304 	and.w	r3, r3, #4
 8003fb0:	617b      	str	r3, [r7, #20]
 8003fb2:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	2100      	movs	r1, #0
 8003fb8:	201e      	movs	r0, #30
 8003fba:	f002 fa50 	bl	800645e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003fbe:	201e      	movs	r0, #30
 8003fc0:	f002 fa67 	bl	8006492 <HAL_NVIC_EnableIRQ>
}
 8003fc4:	e030      	b.n	8004028 <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM7)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a1c      	ldr	r2, [pc, #112]	; (800403c <HAL_TIM_Base_MspInit+0x12c>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d117      	bne.n	8004000 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003fd0:	4b17      	ldr	r3, [pc, #92]	; (8004030 <HAL_TIM_Base_MspInit+0x120>)
 8003fd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003fd6:	4a16      	ldr	r2, [pc, #88]	; (8004030 <HAL_TIM_Base_MspInit+0x120>)
 8003fd8:	f043 0320 	orr.w	r3, r3, #32
 8003fdc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003fe0:	4b13      	ldr	r3, [pc, #76]	; (8004030 <HAL_TIM_Base_MspInit+0x120>)
 8003fe2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003fe6:	f003 0320 	and.w	r3, r3, #32
 8003fea:	613b      	str	r3, [r7, #16]
 8003fec:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003fee:	2200      	movs	r2, #0
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	2037      	movs	r0, #55	; 0x37
 8003ff4:	f002 fa33 	bl	800645e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003ff8:	2037      	movs	r0, #55	; 0x37
 8003ffa:	f002 fa4a 	bl	8006492 <HAL_NVIC_EnableIRQ>
}
 8003ffe:	e013      	b.n	8004028 <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM12)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a0e      	ldr	r2, [pc, #56]	; (8004040 <HAL_TIM_Base_MspInit+0x130>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d10e      	bne.n	8004028 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800400a:	4b09      	ldr	r3, [pc, #36]	; (8004030 <HAL_TIM_Base_MspInit+0x120>)
 800400c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004010:	4a07      	ldr	r2, [pc, #28]	; (8004030 <HAL_TIM_Base_MspInit+0x120>)
 8004012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004016:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800401a:	4b05      	ldr	r3, [pc, #20]	; (8004030 <HAL_TIM_Base_MspInit+0x120>)
 800401c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004024:	60fb      	str	r3, [r7, #12]
 8004026:	68fb      	ldr	r3, [r7, #12]
}
 8004028:	bf00      	nop
 800402a:	3720      	adds	r7, #32
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	58024400 	.word	0x58024400
 8004034:	40000400 	.word	0x40000400
 8004038:	40000800 	.word	0x40000800
 800403c:	40001400 	.word	0x40001400
 8004040:	40001800 	.word	0x40001800

08004044 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b08a      	sub	sp, #40	; 0x28
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800404c:	f107 0314 	add.w	r3, r7, #20
 8004050:	2200      	movs	r2, #0
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	605a      	str	r2, [r3, #4]
 8004056:	609a      	str	r2, [r3, #8]
 8004058:	60da      	str	r2, [r3, #12]
 800405a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a1a      	ldr	r2, [pc, #104]	; (80040cc <HAL_TIM_Encoder_MspInit+0x88>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d12d      	bne.n	80040c2 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004066:	4b1a      	ldr	r3, [pc, #104]	; (80040d0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8004068:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800406c:	4a18      	ldr	r2, [pc, #96]	; (80040d0 <HAL_TIM_Encoder_MspInit+0x8c>)
 800406e:	f043 0308 	orr.w	r3, r3, #8
 8004072:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004076:	4b16      	ldr	r3, [pc, #88]	; (80040d0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8004078:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800407c:	f003 0308 	and.w	r3, r3, #8
 8004080:	613b      	str	r3, [r7, #16]
 8004082:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004084:	4b12      	ldr	r3, [pc, #72]	; (80040d0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8004086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800408a:	4a11      	ldr	r2, [pc, #68]	; (80040d0 <HAL_TIM_Encoder_MspInit+0x8c>)
 800408c:	f043 0301 	orr.w	r3, r3, #1
 8004090:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004094:	4b0e      	ldr	r3, [pc, #56]	; (80040d0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8004096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	60fb      	str	r3, [r7, #12]
 80040a0:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80040a2:	2303      	movs	r3, #3
 80040a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040a6:	2302      	movs	r3, #2
 80040a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040aa:	2300      	movs	r3, #0
 80040ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040ae:	2300      	movs	r3, #0
 80040b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80040b2:	2302      	movs	r3, #2
 80040b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040b6:	f107 0314 	add.w	r3, r7, #20
 80040ba:	4619      	mov	r1, r3
 80040bc:	4805      	ldr	r0, [pc, #20]	; (80040d4 <HAL_TIM_Encoder_MspInit+0x90>)
 80040be:	f005 fdf5 	bl	8009cac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80040c2:	bf00      	nop
 80040c4:	3728      	adds	r7, #40	; 0x28
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	40000c00 	.word	0x40000c00
 80040d0:	58024400 	.word	0x58024400
 80040d4:	58020000 	.word	0x58020000

080040d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b0b8      	sub	sp, #224	; 0xe0
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040e0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	605a      	str	r2, [r3, #4]
 80040ea:	609a      	str	r2, [r3, #8]
 80040ec:	60da      	str	r2, [r3, #12]
 80040ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80040f0:	f107 0310 	add.w	r3, r7, #16
 80040f4:	22bc      	movs	r2, #188	; 0xbc
 80040f6:	2100      	movs	r1, #0
 80040f8:	4618      	mov	r0, r3
 80040fa:	f013 fc39 	bl	8017970 <memset>
  if(huart->Instance==UART4)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a40      	ldr	r2, [pc, #256]	; (8004204 <HAL_UART_MspInit+0x12c>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d179      	bne.n	80041fc <HAL_UART_MspInit+0x124>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8004108:	2302      	movs	r3, #2
 800410a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800410c:	2300      	movs	r3, #0
 800410e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004112:	f107 0310 	add.w	r3, r7, #16
 8004116:	4618      	mov	r0, r3
 8004118:	f008 fa6a 	bl	800c5f0 <HAL_RCCEx_PeriphCLKConfig>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004122:	f7ff fc75 	bl	8003a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004126:	4b38      	ldr	r3, [pc, #224]	; (8004208 <HAL_UART_MspInit+0x130>)
 8004128:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800412c:	4a36      	ldr	r2, [pc, #216]	; (8004208 <HAL_UART_MspInit+0x130>)
 800412e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004132:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004136:	4b34      	ldr	r3, [pc, #208]	; (8004208 <HAL_UART_MspInit+0x130>)
 8004138:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800413c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004140:	60fb      	str	r3, [r7, #12]
 8004142:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004144:	4b30      	ldr	r3, [pc, #192]	; (8004208 <HAL_UART_MspInit+0x130>)
 8004146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800414a:	4a2f      	ldr	r2, [pc, #188]	; (8004208 <HAL_UART_MspInit+0x130>)
 800414c:	f043 0302 	orr.w	r3, r3, #2
 8004150:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004154:	4b2c      	ldr	r3, [pc, #176]	; (8004208 <HAL_UART_MspInit+0x130>)
 8004156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	60bb      	str	r3, [r7, #8]
 8004160:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004162:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004166:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800416a:	2302      	movs	r3, #2
 800416c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004170:	2300      	movs	r3, #0
 8004172:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004176:	2300      	movs	r3, #0
 8004178:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800417c:	2308      	movs	r3, #8
 800417e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004182:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004186:	4619      	mov	r1, r3
 8004188:	4820      	ldr	r0, [pc, #128]	; (800420c <HAL_UART_MspInit+0x134>)
 800418a:	f005 fd8f 	bl	8009cac <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream0;
 800418e:	4b20      	ldr	r3, [pc, #128]	; (8004210 <HAL_UART_MspInit+0x138>)
 8004190:	4a20      	ldr	r2, [pc, #128]	; (8004214 <HAL_UART_MspInit+0x13c>)
 8004192:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8004194:	4b1e      	ldr	r3, [pc, #120]	; (8004210 <HAL_UART_MspInit+0x138>)
 8004196:	223f      	movs	r2, #63	; 0x3f
 8004198:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800419a:	4b1d      	ldr	r3, [pc, #116]	; (8004210 <HAL_UART_MspInit+0x138>)
 800419c:	2200      	movs	r2, #0
 800419e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041a0:	4b1b      	ldr	r3, [pc, #108]	; (8004210 <HAL_UART_MspInit+0x138>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80041a6:	4b1a      	ldr	r3, [pc, #104]	; (8004210 <HAL_UART_MspInit+0x138>)
 80041a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041ac:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80041ae:	4b18      	ldr	r3, [pc, #96]	; (8004210 <HAL_UART_MspInit+0x138>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80041b4:	4b16      	ldr	r3, [pc, #88]	; (8004210 <HAL_UART_MspInit+0x138>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80041ba:	4b15      	ldr	r3, [pc, #84]	; (8004210 <HAL_UART_MspInit+0x138>)
 80041bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041c0:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80041c2:	4b13      	ldr	r3, [pc, #76]	; (8004210 <HAL_UART_MspInit+0x138>)
 80041c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80041c8:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80041ca:	4b11      	ldr	r3, [pc, #68]	; (8004210 <HAL_UART_MspInit+0x138>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80041d0:	480f      	ldr	r0, [pc, #60]	; (8004210 <HAL_UART_MspInit+0x138>)
 80041d2:	f002 f979 	bl	80064c8 <HAL_DMA_Init>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d001      	beq.n	80041e0 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 80041dc:	f7ff fc18 	bl	8003a10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a0b      	ldr	r2, [pc, #44]	; (8004210 <HAL_UART_MspInit+0x138>)
 80041e4:	67da      	str	r2, [r3, #124]	; 0x7c
 80041e6:	4a0a      	ldr	r2, [pc, #40]	; (8004210 <HAL_UART_MspInit+0x138>)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80041ec:	2200      	movs	r2, #0
 80041ee:	2100      	movs	r1, #0
 80041f0:	2034      	movs	r0, #52	; 0x34
 80041f2:	f002 f934 	bl	800645e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80041f6:	2034      	movs	r0, #52	; 0x34
 80041f8:	f002 f94b 	bl	8006492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80041fc:	bf00      	nop
 80041fe:	37e0      	adds	r7, #224	; 0xe0
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	40004c00 	.word	0x40004c00
 8004208:	58024400 	.word	0x58024400
 800420c:	58020400 	.word	0x58020400
 8004210:	2000089c 	.word	0x2000089c
 8004214:	40020010 	.word	0x40020010

08004218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800421c:	e7fe      	b.n	800421c <NMI_Handler+0x4>

0800421e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800421e:	b480      	push	{r7}
 8004220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004222:	e7fe      	b.n	8004222 <HardFault_Handler+0x4>

08004224 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004228:	e7fe      	b.n	8004228 <MemManage_Handler+0x4>

0800422a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800422a:	b480      	push	{r7}
 800422c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800422e:	e7fe      	b.n	800422e <BusFault_Handler+0x4>

08004230 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004234:	e7fe      	b.n	8004234 <UsageFault_Handler+0x4>

08004236 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004236:	b480      	push	{r7}
 8004238:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800423a:	bf00      	nop
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004244:	b480      	push	{r7}
 8004246:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004248:	bf00      	nop
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004252:	b480      	push	{r7}
 8004254:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004256:	bf00      	nop
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004264:	f000 fa82 	bl	800476c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004268:	bf00      	nop
 800426a:	bd80      	pop	{r7, pc}

0800426c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8004270:	4802      	ldr	r0, [pc, #8]	; (800427c <DMA1_Stream0_IRQHandler+0x10>)
 8004272:	f003 f9e9 	bl	8007648 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004276:	bf00      	nop
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	2000089c 	.word	0x2000089c

08004280 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004284:	4802      	ldr	r0, [pc, #8]	; (8004290 <DMA1_Stream1_IRQHandler+0x10>)
 8004286:	f003 f9df 	bl	8007648 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800428a:	bf00      	nop
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	20000554 	.word	0x20000554

08004294 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8004298:	4802      	ldr	r0, [pc, #8]	; (80042a4 <DMA1_Stream2_IRQHandler+0x10>)
 800429a:	f003 f9d5 	bl	8007648 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800429e:	bf00      	nop
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	200005cc 	.word	0x200005cc

080042a8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80042ac:	4802      	ldr	r0, [pc, #8]	; (80042b8 <ADC_IRQHandler+0x10>)
 80042ae:	f000 ff93 	bl	80051d8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80042b2:	bf00      	nop
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	20000304 	.word	0x20000304

080042bc <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80042c0:	4802      	ldr	r0, [pc, #8]	; (80042cc <FDCAN1_IT0_IRQHandler+0x10>)
 80042c2:	f004 fffb 	bl	80092bc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80042c6:	bf00      	nop
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	20000368 	.word	0x20000368

080042d0 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80042d4:	4802      	ldr	r0, [pc, #8]	; (80042e0 <FDCAN2_IT0_IRQHandler+0x10>)
 80042d6:	f004 fff1 	bl	80092bc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 80042da:	bf00      	nop
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	20000408 	.word	0x20000408

080042e4 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80042e8:	4802      	ldr	r0, [pc, #8]	; (80042f4 <FDCAN1_IT1_IRQHandler+0x10>)
 80042ea:	f004 ffe7 	bl	80092bc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 80042ee:	bf00      	nop
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	20000368 	.word	0x20000368

080042f8 <FDCAN2_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 1.
  */
void FDCAN2_IT1_IRQHandler(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 0 */

  /* USER CODE END FDCAN2_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80042fc:	4802      	ldr	r0, [pc, #8]	; (8004308 <FDCAN2_IT1_IRQHandler+0x10>)
 80042fe:	f004 ffdd 	bl	80092bc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 1 */

  /* USER CODE END FDCAN2_IT1_IRQn 1 */
}
 8004302:	bf00      	nop
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	20000408 	.word	0x20000408

0800430c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004310:	4802      	ldr	r0, [pc, #8]	; (800431c <TIM2_IRQHandler+0x10>)
 8004312:	f00b fd4d 	bl	800fdb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004316:	bf00      	nop
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	20000644 	.word	0x20000644

08004320 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004324:	4802      	ldr	r0, [pc, #8]	; (8004330 <TIM3_IRQHandler+0x10>)
 8004326:	f00b fd43 	bl	800fdb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800432a:	bf00      	nop
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	20000690 	.word	0x20000690

08004334 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004338:	4802      	ldr	r0, [pc, #8]	; (8004344 <TIM4_IRQHandler+0x10>)
 800433a:	f00b fd39 	bl	800fdb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800433e:	bf00      	nop
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	200006dc 	.word	0x200006dc

08004348 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800434c:	4802      	ldr	r0, [pc, #8]	; (8004358 <SPI2_IRQHandler+0x10>)
 800434e:	f00a fe37 	bl	800efc0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004352:	bf00      	nop
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	200004cc 	.word	0x200004cc

0800435c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004360:	4802      	ldr	r0, [pc, #8]	; (800436c <UART4_IRQHandler+0x10>)
 8004362:	f00c fe03 	bl	8010f6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8004366:	bf00      	nop
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	2000080c 	.word	0x2000080c

08004370 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004374:	4802      	ldr	r0, [pc, #8]	; (8004380 <TIM7_IRQHandler+0x10>)
 8004376:	f00b fd1b 	bl	800fdb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800437a:	bf00      	nop
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	20000774 	.word	0x20000774

08004384 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004388:	4802      	ldr	r0, [pc, #8]	; (8004394 <OTG_FS_IRQHandler+0x10>)
 800438a:	f005 ffaf 	bl	800a2ec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800438e:	bf00      	nop
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	2000253c 	.word	0x2000253c

08004398 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
	return 1;
 800439c:	2301      	movs	r3, #1
}
 800439e:	4618      	mov	r0, r3
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <_kill>:

int _kill(int pid, int sig)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80043b2:	f013 faa5 	bl	8017900 <__errno>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2216      	movs	r2, #22
 80043ba:	601a      	str	r2, [r3, #0]
	return -1;
 80043bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3708      	adds	r7, #8
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <_exit>:

void _exit (int status)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80043d0:	f04f 31ff 	mov.w	r1, #4294967295
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f7ff ffe7 	bl	80043a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80043da:	e7fe      	b.n	80043da <_exit+0x12>

080043dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043e8:	2300      	movs	r3, #0
 80043ea:	617b      	str	r3, [r7, #20]
 80043ec:	e00a      	b.n	8004404 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80043ee:	f3af 8000 	nop.w
 80043f2:	4601      	mov	r1, r0
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	1c5a      	adds	r2, r3, #1
 80043f8:	60ba      	str	r2, [r7, #8]
 80043fa:	b2ca      	uxtb	r2, r1
 80043fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	3301      	adds	r3, #1
 8004402:	617b      	str	r3, [r7, #20]
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	429a      	cmp	r2, r3
 800440a:	dbf0      	blt.n	80043ee <_read+0x12>
	}

return len;
 800440c:	687b      	ldr	r3, [r7, #4]
}
 800440e:	4618      	mov	r0, r3
 8004410:	3718      	adds	r7, #24
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b086      	sub	sp, #24
 800441a:	af00      	add	r7, sp, #0
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	60b9      	str	r1, [r7, #8]
 8004420:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004422:	2300      	movs	r3, #0
 8004424:	617b      	str	r3, [r7, #20]
 8004426:	e009      	b.n	800443c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	1c5a      	adds	r2, r3, #1
 800442c:	60ba      	str	r2, [r7, #8]
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	4618      	mov	r0, r3
 8004432:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	3301      	adds	r3, #1
 800443a:	617b      	str	r3, [r7, #20]
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	429a      	cmp	r2, r3
 8004442:	dbf1      	blt.n	8004428 <_write+0x12>
	}
	return len;
 8004444:	687b      	ldr	r3, [r7, #4]
}
 8004446:	4618      	mov	r0, r3
 8004448:	3718      	adds	r7, #24
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <_close>:

int _close(int file)
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
	return -1;
 8004456:	f04f 33ff 	mov.w	r3, #4294967295
}
 800445a:	4618      	mov	r0, r3
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004466:	b480      	push	{r7}
 8004468:	b083      	sub	sp, #12
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
 800446e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004476:	605a      	str	r2, [r3, #4]
	return 0;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <_isatty>:

int _isatty(int file)
{
 8004486:	b480      	push	{r7}
 8004488:	b083      	sub	sp, #12
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
	return 1;
 800448e:	2301      	movs	r3, #1
}
 8004490:	4618      	mov	r0, r3
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
	return 0;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
	...

080044b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80044c0:	4a14      	ldr	r2, [pc, #80]	; (8004514 <_sbrk+0x5c>)
 80044c2:	4b15      	ldr	r3, [pc, #84]	; (8004518 <_sbrk+0x60>)
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80044cc:	4b13      	ldr	r3, [pc, #76]	; (800451c <_sbrk+0x64>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d102      	bne.n	80044da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80044d4:	4b11      	ldr	r3, [pc, #68]	; (800451c <_sbrk+0x64>)
 80044d6:	4a12      	ldr	r2, [pc, #72]	; (8004520 <_sbrk+0x68>)
 80044d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80044da:	4b10      	ldr	r3, [pc, #64]	; (800451c <_sbrk+0x64>)
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4413      	add	r3, r2
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d207      	bcs.n	80044f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80044e8:	f013 fa0a 	bl	8017900 <__errno>
 80044ec:	4603      	mov	r3, r0
 80044ee:	220c      	movs	r2, #12
 80044f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80044f2:	f04f 33ff 	mov.w	r3, #4294967295
 80044f6:	e009      	b.n	800450c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80044f8:	4b08      	ldr	r3, [pc, #32]	; (800451c <_sbrk+0x64>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80044fe:	4b07      	ldr	r3, [pc, #28]	; (800451c <_sbrk+0x64>)
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4413      	add	r3, r2
 8004506:	4a05      	ldr	r2, [pc, #20]	; (800451c <_sbrk+0x64>)
 8004508:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800450a:	68fb      	ldr	r3, [r7, #12]
}
 800450c:	4618      	mov	r0, r3
 800450e:	3718      	adds	r7, #24
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	20020000 	.word	0x20020000
 8004518:	00000400 	.word	0x00000400
 800451c:	20001054 	.word	0x20001054
 8004520:	20002c78 	.word	0x20002c78

08004524 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004524:	b480      	push	{r7}
 8004526:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004528:	4b37      	ldr	r3, [pc, #220]	; (8004608 <SystemInit+0xe4>)
 800452a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800452e:	4a36      	ldr	r2, [pc, #216]	; (8004608 <SystemInit+0xe4>)
 8004530:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004534:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004538:	4b34      	ldr	r3, [pc, #208]	; (800460c <SystemInit+0xe8>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 030f 	and.w	r3, r3, #15
 8004540:	2b06      	cmp	r3, #6
 8004542:	d807      	bhi.n	8004554 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004544:	4b31      	ldr	r3, [pc, #196]	; (800460c <SystemInit+0xe8>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f023 030f 	bic.w	r3, r3, #15
 800454c:	4a2f      	ldr	r2, [pc, #188]	; (800460c <SystemInit+0xe8>)
 800454e:	f043 0307 	orr.w	r3, r3, #7
 8004552:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004554:	4b2e      	ldr	r3, [pc, #184]	; (8004610 <SystemInit+0xec>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a2d      	ldr	r2, [pc, #180]	; (8004610 <SystemInit+0xec>)
 800455a:	f043 0301 	orr.w	r3, r3, #1
 800455e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004560:	4b2b      	ldr	r3, [pc, #172]	; (8004610 <SystemInit+0xec>)
 8004562:	2200      	movs	r2, #0
 8004564:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004566:	4b2a      	ldr	r3, [pc, #168]	; (8004610 <SystemInit+0xec>)
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	4929      	ldr	r1, [pc, #164]	; (8004610 <SystemInit+0xec>)
 800456c:	4b29      	ldr	r3, [pc, #164]	; (8004614 <SystemInit+0xf0>)
 800456e:	4013      	ands	r3, r2
 8004570:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004572:	4b26      	ldr	r3, [pc, #152]	; (800460c <SystemInit+0xe8>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0308 	and.w	r3, r3, #8
 800457a:	2b00      	cmp	r3, #0
 800457c:	d007      	beq.n	800458e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800457e:	4b23      	ldr	r3, [pc, #140]	; (800460c <SystemInit+0xe8>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f023 030f 	bic.w	r3, r3, #15
 8004586:	4a21      	ldr	r2, [pc, #132]	; (800460c <SystemInit+0xe8>)
 8004588:	f043 0307 	orr.w	r3, r3, #7
 800458c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800458e:	4b20      	ldr	r3, [pc, #128]	; (8004610 <SystemInit+0xec>)
 8004590:	2200      	movs	r2, #0
 8004592:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004594:	4b1e      	ldr	r3, [pc, #120]	; (8004610 <SystemInit+0xec>)
 8004596:	2200      	movs	r2, #0
 8004598:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800459a:	4b1d      	ldr	r3, [pc, #116]	; (8004610 <SystemInit+0xec>)
 800459c:	2200      	movs	r2, #0
 800459e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80045a0:	4b1b      	ldr	r3, [pc, #108]	; (8004610 <SystemInit+0xec>)
 80045a2:	4a1d      	ldr	r2, [pc, #116]	; (8004618 <SystemInit+0xf4>)
 80045a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80045a6:	4b1a      	ldr	r3, [pc, #104]	; (8004610 <SystemInit+0xec>)
 80045a8:	4a1c      	ldr	r2, [pc, #112]	; (800461c <SystemInit+0xf8>)
 80045aa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80045ac:	4b18      	ldr	r3, [pc, #96]	; (8004610 <SystemInit+0xec>)
 80045ae:	4a1c      	ldr	r2, [pc, #112]	; (8004620 <SystemInit+0xfc>)
 80045b0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80045b2:	4b17      	ldr	r3, [pc, #92]	; (8004610 <SystemInit+0xec>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80045b8:	4b15      	ldr	r3, [pc, #84]	; (8004610 <SystemInit+0xec>)
 80045ba:	4a19      	ldr	r2, [pc, #100]	; (8004620 <SystemInit+0xfc>)
 80045bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80045be:	4b14      	ldr	r3, [pc, #80]	; (8004610 <SystemInit+0xec>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80045c4:	4b12      	ldr	r3, [pc, #72]	; (8004610 <SystemInit+0xec>)
 80045c6:	4a16      	ldr	r2, [pc, #88]	; (8004620 <SystemInit+0xfc>)
 80045c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80045ca:	4b11      	ldr	r3, [pc, #68]	; (8004610 <SystemInit+0xec>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80045d0:	4b0f      	ldr	r3, [pc, #60]	; (8004610 <SystemInit+0xec>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a0e      	ldr	r2, [pc, #56]	; (8004610 <SystemInit+0xec>)
 80045d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80045dc:	4b0c      	ldr	r3, [pc, #48]	; (8004610 <SystemInit+0xec>)
 80045de:	2200      	movs	r2, #0
 80045e0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80045e2:	4b10      	ldr	r3, [pc, #64]	; (8004624 <SystemInit+0x100>)
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	4b10      	ldr	r3, [pc, #64]	; (8004628 <SystemInit+0x104>)
 80045e8:	4013      	ands	r3, r2
 80045ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045ee:	d202      	bcs.n	80045f6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80045f0:	4b0e      	ldr	r3, [pc, #56]	; (800462c <SystemInit+0x108>)
 80045f2:	2201      	movs	r2, #1
 80045f4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80045f6:	4b0e      	ldr	r3, [pc, #56]	; (8004630 <SystemInit+0x10c>)
 80045f8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80045fc:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 80045fe:	bf00      	nop
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr
 8004608:	e000ed00 	.word	0xe000ed00
 800460c:	52002000 	.word	0x52002000
 8004610:	58024400 	.word	0x58024400
 8004614:	eaf6ed7f 	.word	0xeaf6ed7f
 8004618:	02020200 	.word	0x02020200
 800461c:	01ff0000 	.word	0x01ff0000
 8004620:	01010280 	.word	0x01010280
 8004624:	5c001000 	.word	0x5c001000
 8004628:	ffff0000 	.word	0xffff0000
 800462c:	51008108 	.word	0x51008108
 8004630:	52004000 	.word	0x52004000

08004634 <Reset_Handler>:
 8004634:	f8df d034 	ldr.w	sp, [pc, #52]	; 800466c <LoopFillZerobss+0xe>
 8004638:	f7ff ff74 	bl	8004524 <SystemInit>
 800463c:	480c      	ldr	r0, [pc, #48]	; (8004670 <LoopFillZerobss+0x12>)
 800463e:	490d      	ldr	r1, [pc, #52]	; (8004674 <LoopFillZerobss+0x16>)
 8004640:	4a0d      	ldr	r2, [pc, #52]	; (8004678 <LoopFillZerobss+0x1a>)
 8004642:	2300      	movs	r3, #0
 8004644:	e002      	b.n	800464c <LoopCopyDataInit>

08004646 <CopyDataInit>:
 8004646:	58d4      	ldr	r4, [r2, r3]
 8004648:	50c4      	str	r4, [r0, r3]
 800464a:	3304      	adds	r3, #4

0800464c <LoopCopyDataInit>:
 800464c:	18c4      	adds	r4, r0, r3
 800464e:	428c      	cmp	r4, r1
 8004650:	d3f9      	bcc.n	8004646 <CopyDataInit>
 8004652:	4a0a      	ldr	r2, [pc, #40]	; (800467c <LoopFillZerobss+0x1e>)
 8004654:	4c0a      	ldr	r4, [pc, #40]	; (8004680 <LoopFillZerobss+0x22>)
 8004656:	2300      	movs	r3, #0
 8004658:	e001      	b.n	800465e <LoopFillZerobss>

0800465a <FillZerobss>:
 800465a:	6013      	str	r3, [r2, #0]
 800465c:	3204      	adds	r2, #4

0800465e <LoopFillZerobss>:
 800465e:	42a2      	cmp	r2, r4
 8004660:	d3fb      	bcc.n	800465a <FillZerobss>
 8004662:	f013 f953 	bl	801790c <__libc_init_array>
 8004666:	f7fe fad3 	bl	8002c10 <main>
 800466a:	4770      	bx	lr
 800466c:	20020000 	.word	0x20020000
 8004670:	20000000 	.word	0x20000000
 8004674:	200002e4 	.word	0x200002e4
 8004678:	0801b0c4 	.word	0x0801b0c4
 800467c:	200002e8 	.word	0x200002e8
 8004680:	20002c78 	.word	0x20002c78

08004684 <ADC3_IRQHandler>:
 8004684:	e7fe      	b.n	8004684 <ADC3_IRQHandler>
	...

08004688 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800468e:	2003      	movs	r0, #3
 8004690:	f001 feda 	bl	8006448 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004694:	f007 fdd6 	bl	800c244 <HAL_RCC_GetSysClockFreq>
 8004698:	4602      	mov	r2, r0
 800469a:	4b15      	ldr	r3, [pc, #84]	; (80046f0 <HAL_Init+0x68>)
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	0a1b      	lsrs	r3, r3, #8
 80046a0:	f003 030f 	and.w	r3, r3, #15
 80046a4:	4913      	ldr	r1, [pc, #76]	; (80046f4 <HAL_Init+0x6c>)
 80046a6:	5ccb      	ldrb	r3, [r1, r3]
 80046a8:	f003 031f 	and.w	r3, r3, #31
 80046ac:	fa22 f303 	lsr.w	r3, r2, r3
 80046b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80046b2:	4b0f      	ldr	r3, [pc, #60]	; (80046f0 <HAL_Init+0x68>)
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	4a0e      	ldr	r2, [pc, #56]	; (80046f4 <HAL_Init+0x6c>)
 80046bc:	5cd3      	ldrb	r3, [r2, r3]
 80046be:	f003 031f 	and.w	r3, r3, #31
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	fa22 f303 	lsr.w	r3, r2, r3
 80046c8:	4a0b      	ldr	r2, [pc, #44]	; (80046f8 <HAL_Init+0x70>)
 80046ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80046cc:	4a0b      	ldr	r2, [pc, #44]	; (80046fc <HAL_Init+0x74>)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80046d2:	2000      	movs	r0, #0
 80046d4:	f000 f814 	bl	8004700 <HAL_InitTick>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e002      	b.n	80046e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80046e2:	f7ff f99b 	bl	8003a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	58024400 	.word	0x58024400
 80046f4:	0801ac8c 	.word	0x0801ac8c
 80046f8:	20000018 	.word	0x20000018
 80046fc:	20000014 	.word	0x20000014

08004700 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004708:	4b15      	ldr	r3, [pc, #84]	; (8004760 <HAL_InitTick+0x60>)
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d101      	bne.n	8004714 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e021      	b.n	8004758 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004714:	4b13      	ldr	r3, [pc, #76]	; (8004764 <HAL_InitTick+0x64>)
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	4b11      	ldr	r3, [pc, #68]	; (8004760 <HAL_InitTick+0x60>)
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	4619      	mov	r1, r3
 800471e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004722:	fbb3 f3f1 	udiv	r3, r3, r1
 8004726:	fbb2 f3f3 	udiv	r3, r2, r3
 800472a:	4618      	mov	r0, r3
 800472c:	f001 febf 	bl	80064ae <HAL_SYSTICK_Config>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e00e      	b.n	8004758 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b0f      	cmp	r3, #15
 800473e:	d80a      	bhi.n	8004756 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004740:	2200      	movs	r2, #0
 8004742:	6879      	ldr	r1, [r7, #4]
 8004744:	f04f 30ff 	mov.w	r0, #4294967295
 8004748:	f001 fe89 	bl	800645e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800474c:	4a06      	ldr	r2, [pc, #24]	; (8004768 <HAL_InitTick+0x68>)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004752:	2300      	movs	r3, #0
 8004754:	e000      	b.n	8004758 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
}
 8004758:	4618      	mov	r0, r3
 800475a:	3708      	adds	r7, #8
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	20000020 	.word	0x20000020
 8004764:	20000014 	.word	0x20000014
 8004768:	2000001c 	.word	0x2000001c

0800476c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004770:	4b06      	ldr	r3, [pc, #24]	; (800478c <HAL_IncTick+0x20>)
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	461a      	mov	r2, r3
 8004776:	4b06      	ldr	r3, [pc, #24]	; (8004790 <HAL_IncTick+0x24>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4413      	add	r3, r2
 800477c:	4a04      	ldr	r2, [pc, #16]	; (8004790 <HAL_IncTick+0x24>)
 800477e:	6013      	str	r3, [r2, #0]
}
 8004780:	bf00      	nop
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	20000020 	.word	0x20000020
 8004790:	20001058 	.word	0x20001058

08004794 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
  return uwTick;
 8004798:	4b03      	ldr	r3, [pc, #12]	; (80047a8 <HAL_GetTick+0x14>)
 800479a:	681b      	ldr	r3, [r3, #0]
}
 800479c:	4618      	mov	r0, r3
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	20001058 	.word	0x20001058

080047ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80047b4:	f7ff ffee 	bl	8004794 <HAL_GetTick>
 80047b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c4:	d005      	beq.n	80047d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80047c6:	4b0a      	ldr	r3, [pc, #40]	; (80047f0 <HAL_Delay+0x44>)
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	461a      	mov	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4413      	add	r3, r2
 80047d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80047d2:	bf00      	nop
 80047d4:	f7ff ffde 	bl	8004794 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d8f7      	bhi.n	80047d4 <HAL_Delay+0x28>
  {
  }
}
 80047e4:	bf00      	nop
 80047e6:	bf00      	nop
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	20000020 	.word	0x20000020

080047f4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80047f4:	b480      	push	{r7}
 80047f6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80047f8:	4b03      	ldr	r3, [pc, #12]	; (8004808 <HAL_GetREVID+0x14>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	0c1b      	lsrs	r3, r3, #16
}
 80047fe:	4618      	mov	r0, r3
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr
 8004808:	5c001000 	.word	0x5c001000

0800480c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	431a      	orrs	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	609a      	str	r2, [r3, #8]
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004832:	b480      	push	{r7}
 8004834:	b083      	sub	sp, #12
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
 800483a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	431a      	orrs	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	609a      	str	r2, [r3, #8]
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004868:	4618      	mov	r0, r3
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004874:	b480      	push	{r7}
 8004876:	b087      	sub	sp, #28
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
 8004880:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	3360      	adds	r3, #96	; 0x60
 8004886:	461a      	mov	r2, r3
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4413      	add	r3, r2
 800488e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	430b      	orrs	r3, r1
 80048a2:	431a      	orrs	r2, r3
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80048a8:	bf00      	nop
 80048aa:	371c      	adds	r7, #28
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	f003 031f 	and.w	r3, r3, #31
 80048ce:	6879      	ldr	r1, [r7, #4]
 80048d0:	fa01 f303 	lsl.w	r3, r1, r3
 80048d4:	431a      	orrs	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	611a      	str	r2, [r3, #16]
}
 80048da:	bf00      	nop
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b087      	sub	sp, #28
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	60f8      	str	r0, [r7, #12]
 80048ee:	60b9      	str	r1, [r7, #8]
 80048f0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	3360      	adds	r3, #96	; 0x60
 80048f6:	461a      	mov	r2, r3
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	4413      	add	r3, r2
 80048fe:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	431a      	orrs	r2, r3
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	601a      	str	r2, [r3, #0]
  }
}
 8004910:	bf00      	nop
 8004912:	371c      	adds	r7, #28
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800492c:	2b00      	cmp	r3, #0
 800492e:	d101      	bne.n	8004934 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004930:	2301      	movs	r3, #1
 8004932:	e000      	b.n	8004936 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004942:	b480      	push	{r7}
 8004944:	b087      	sub	sp, #28
 8004946:	af00      	add	r7, sp, #0
 8004948:	60f8      	str	r0, [r7, #12]
 800494a:	60b9      	str	r1, [r7, #8]
 800494c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	3330      	adds	r3, #48	; 0x30
 8004952:	461a      	mov	r2, r3
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	0a1b      	lsrs	r3, r3, #8
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	f003 030c 	and.w	r3, r3, #12
 800495e:	4413      	add	r3, r2
 8004960:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	f003 031f 	and.w	r3, r3, #31
 800496c:	211f      	movs	r1, #31
 800496e:	fa01 f303 	lsl.w	r3, r1, r3
 8004972:	43db      	mvns	r3, r3
 8004974:	401a      	ands	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	0e9b      	lsrs	r3, r3, #26
 800497a:	f003 011f 	and.w	r1, r3, #31
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	f003 031f 	and.w	r3, r3, #31
 8004984:	fa01 f303 	lsl.w	r3, r1, r3
 8004988:	431a      	orrs	r2, r3
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800498e:	bf00      	nop
 8004990:	371c      	adds	r7, #28
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800499a:	b480      	push	{r7}
 800499c:	b083      	sub	sp, #12
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049a6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80049ae:	2301      	movs	r3, #1
 80049b0:	e000      	b.n	80049b4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b087      	sub	sp, #28
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	3314      	adds	r3, #20
 80049d0:	461a      	mov	r2, r3
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	0e5b      	lsrs	r3, r3, #25
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	4413      	add	r3, r2
 80049de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	0d1b      	lsrs	r3, r3, #20
 80049e8:	f003 031f 	and.w	r3, r3, #31
 80049ec:	2107      	movs	r1, #7
 80049ee:	fa01 f303 	lsl.w	r3, r1, r3
 80049f2:	43db      	mvns	r3, r3
 80049f4:	401a      	ands	r2, r3
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	0d1b      	lsrs	r3, r3, #20
 80049fa:	f003 031f 	and.w	r3, r3, #31
 80049fe:	6879      	ldr	r1, [r7, #4]
 8004a00:	fa01 f303 	lsl.w	r3, r1, r3
 8004a04:	431a      	orrs	r2, r3
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004a0a:	bf00      	nop
 8004a0c:	371c      	adds	r7, #28
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
	...

08004a18 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a30:	43db      	mvns	r3, r3
 8004a32:	401a      	ands	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f003 0318 	and.w	r3, r3, #24
 8004a3a:	4908      	ldr	r1, [pc, #32]	; (8004a5c <LL_ADC_SetChannelSingleDiff+0x44>)
 8004a3c:	40d9      	lsrs	r1, r3
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	400b      	ands	r3, r1
 8004a42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a46:	431a      	orrs	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8004a4e:	bf00      	nop
 8004a50:	3714      	adds	r7, #20
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	000fffff 	.word	0x000fffff

08004a60 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f003 031f 	and.w	r3, r3, #31
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689a      	ldr	r2, [r3, #8]
 8004aa4:	4b04      	ldr	r3, [pc, #16]	; (8004ab8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	6093      	str	r3, [r2, #8]
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	5fffffc0 	.word	0x5fffffc0

08004abc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004acc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ad0:	d101      	bne.n	8004ad6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e000      	b.n	8004ad8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689a      	ldr	r2, [r3, #8]
 8004af0:	4b05      	ldr	r3, [pc, #20]	; (8004b08 <LL_ADC_EnableInternalRegulator+0x24>)
 8004af2:	4013      	ands	r3, r2
 8004af4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr
 8004b08:	6fffffc0 	.word	0x6fffffc0

08004b0c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b20:	d101      	bne.n	8004b26 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004b22:	2301      	movs	r3, #1
 8004b24:	e000      	b.n	8004b28 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689a      	ldr	r2, [r3, #8]
 8004b40:	4b05      	ldr	r3, [pc, #20]	; (8004b58 <LL_ADC_Enable+0x24>)
 8004b42:	4013      	ands	r3, r2
 8004b44:	f043 0201 	orr.w	r2, r3, #1
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	7fffffc0 	.word	0x7fffffc0

08004b5c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d101      	bne.n	8004b74 <LL_ADC_IsEnabled+0x18>
 8004b70:	2301      	movs	r3, #1
 8004b72:	e000      	b.n	8004b76 <LL_ADC_IsEnabled+0x1a>
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
	...

08004b84 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689a      	ldr	r2, [r3, #8]
 8004b90:	4b05      	ldr	r3, [pc, #20]	; (8004ba8 <LL_ADC_REG_StartConversion+0x24>)
 8004b92:	4013      	ands	r3, r2
 8004b94:	f043 0204 	orr.w	r2, r3, #4
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	7fffffc0 	.word	0x7fffffc0

08004bac <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f003 0304 	and.w	r3, r3, #4
 8004bbc:	2b04      	cmp	r3, #4
 8004bbe:	d101      	bne.n	8004bc4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e000      	b.n	8004bc6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b083      	sub	sp, #12
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f003 0308 	and.w	r3, r3, #8
 8004be2:	2b08      	cmp	r3, #8
 8004be4:	d101      	bne.n	8004bea <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004be6:	2301      	movs	r3, #1
 8004be8:	e000      	b.n	8004bec <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004bf8:	b590      	push	{r4, r7, lr}
 8004bfa:	b089      	sub	sp, #36	; 0x24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c00:	2300      	movs	r3, #0
 8004c02:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004c04:	2300      	movs	r3, #0
 8004c06:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e18f      	b.n	8004f32 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d109      	bne.n	8004c34 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f7fe ff15 	bl	8003a50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7ff ff3f 	bl	8004abc <LL_ADC_IsDeepPowerDownEnabled>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d004      	beq.n	8004c4e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7ff ff25 	bl	8004a98 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7ff ff5a 	bl	8004b0c <LL_ADC_IsInternalRegulatorEnabled>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d114      	bne.n	8004c88 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7ff ff3e 	bl	8004ae4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c68:	4b87      	ldr	r3, [pc, #540]	; (8004e88 <HAL_ADC_Init+0x290>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	099b      	lsrs	r3, r3, #6
 8004c6e:	4a87      	ldr	r2, [pc, #540]	; (8004e8c <HAL_ADC_Init+0x294>)
 8004c70:	fba2 2303 	umull	r2, r3, r2, r3
 8004c74:	099b      	lsrs	r3, r3, #6
 8004c76:	3301      	adds	r3, #1
 8004c78:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004c7a:	e002      	b.n	8004c82 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1f9      	bne.n	8004c7c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7ff ff3d 	bl	8004b0c <LL_ADC_IsInternalRegulatorEnabled>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d10d      	bne.n	8004cb4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c9c:	f043 0210 	orr.w	r2, r3, #16
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca8:	f043 0201 	orr.w	r2, r3, #1
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7ff ff77 	bl	8004bac <LL_ADC_REG_IsConversionOngoing>
 8004cbe:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc4:	f003 0310 	and.w	r3, r3, #16
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f040 8129 	bne.w	8004f20 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f040 8125 	bne.w	8004f20 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cda:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004cde:	f043 0202 	orr.w	r2, r3, #2
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7ff ff36 	bl	8004b5c <LL_ADC_IsEnabled>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d136      	bne.n	8004d64 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a65      	ldr	r2, [pc, #404]	; (8004e90 <HAL_ADC_Init+0x298>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d004      	beq.n	8004d0a <HAL_ADC_Init+0x112>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a63      	ldr	r2, [pc, #396]	; (8004e94 <HAL_ADC_Init+0x29c>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d10e      	bne.n	8004d28 <HAL_ADC_Init+0x130>
 8004d0a:	4861      	ldr	r0, [pc, #388]	; (8004e90 <HAL_ADC_Init+0x298>)
 8004d0c:	f7ff ff26 	bl	8004b5c <LL_ADC_IsEnabled>
 8004d10:	4604      	mov	r4, r0
 8004d12:	4860      	ldr	r0, [pc, #384]	; (8004e94 <HAL_ADC_Init+0x29c>)
 8004d14:	f7ff ff22 	bl	8004b5c <LL_ADC_IsEnabled>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	4323      	orrs	r3, r4
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	bf0c      	ite	eq
 8004d20:	2301      	moveq	r3, #1
 8004d22:	2300      	movne	r3, #0
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	e008      	b.n	8004d3a <HAL_ADC_Init+0x142>
 8004d28:	485b      	ldr	r0, [pc, #364]	; (8004e98 <HAL_ADC_Init+0x2a0>)
 8004d2a:	f7ff ff17 	bl	8004b5c <LL_ADC_IsEnabled>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	bf0c      	ite	eq
 8004d34:	2301      	moveq	r3, #1
 8004d36:	2300      	movne	r3, #0
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d012      	beq.n	8004d64 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a53      	ldr	r2, [pc, #332]	; (8004e90 <HAL_ADC_Init+0x298>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d004      	beq.n	8004d52 <HAL_ADC_Init+0x15a>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a51      	ldr	r2, [pc, #324]	; (8004e94 <HAL_ADC_Init+0x29c>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d101      	bne.n	8004d56 <HAL_ADC_Init+0x15e>
 8004d52:	4a52      	ldr	r2, [pc, #328]	; (8004e9c <HAL_ADC_Init+0x2a4>)
 8004d54:	e000      	b.n	8004d58 <HAL_ADC_Init+0x160>
 8004d56:	4a52      	ldr	r2, [pc, #328]	; (8004ea0 <HAL_ADC_Init+0x2a8>)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	4610      	mov	r0, r2
 8004d60:	f7ff fd54 	bl	800480c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004d64:	f7ff fd46 	bl	80047f4 <HAL_GetREVID>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	f241 0203 	movw	r2, #4099	; 0x1003
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d914      	bls.n	8004d9c <HAL_ADC_Init+0x1a4>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	2b10      	cmp	r3, #16
 8004d78:	d110      	bne.n	8004d9c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	7d5b      	ldrb	r3, [r3, #21]
 8004d7e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004d84:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004d8a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	7f1b      	ldrb	r3, [r3, #28]
 8004d90:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004d92:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004d94:	f043 030c 	orr.w	r3, r3, #12
 8004d98:	61bb      	str	r3, [r7, #24]
 8004d9a:	e00d      	b.n	8004db8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	7d5b      	ldrb	r3, [r3, #21]
 8004da0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004da6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004dac:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	7f1b      	ldrb	r3, [r3, #28]
 8004db2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004db4:	4313      	orrs	r3, r2
 8004db6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	7f1b      	ldrb	r3, [r3, #28]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d106      	bne.n	8004dce <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	045b      	lsls	r3, r3, #17
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d009      	beq.n	8004dea <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dda:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004de4:	69ba      	ldr	r2, [r7, #24]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68da      	ldr	r2, [r3, #12]
 8004df0:	4b2c      	ldr	r3, [pc, #176]	; (8004ea4 <HAL_ADC_Init+0x2ac>)
 8004df2:	4013      	ands	r3, r2
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	6812      	ldr	r2, [r2, #0]
 8004df8:	69b9      	ldr	r1, [r7, #24]
 8004dfa:	430b      	orrs	r3, r1
 8004dfc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7ff fed2 	bl	8004bac <LL_ADC_REG_IsConversionOngoing>
 8004e08:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7ff fedf 	bl	8004bd2 <LL_ADC_INJ_IsConversionOngoing>
 8004e14:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d15f      	bne.n	8004edc <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d15c      	bne.n	8004edc <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	7d1b      	ldrb	r3, [r3, #20]
 8004e26:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	4b1c      	ldr	r3, [pc, #112]	; (8004ea8 <HAL_ADC_Init+0x2b0>)
 8004e38:	4013      	ands	r3, r2
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	6812      	ldr	r2, [r2, #0]
 8004e3e:	69b9      	ldr	r1, [r7, #24]
 8004e40:	430b      	orrs	r3, r1
 8004e42:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d130      	bne.n	8004eb0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	691a      	ldr	r2, [r3, #16]
 8004e5a:	4b14      	ldr	r3, [pc, #80]	; (8004eac <HAL_ADC_Init+0x2b4>)
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004e62:	3a01      	subs	r2, #1
 8004e64:	0411      	lsls	r1, r2, #16
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004e6a:	4311      	orrs	r1, r2
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004e70:	4311      	orrs	r1, r2
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004e76:	430a      	orrs	r2, r1
 8004e78:	431a      	orrs	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f042 0201 	orr.w	r2, r2, #1
 8004e82:	611a      	str	r2, [r3, #16]
 8004e84:	e01c      	b.n	8004ec0 <HAL_ADC_Init+0x2c8>
 8004e86:	bf00      	nop
 8004e88:	20000014 	.word	0x20000014
 8004e8c:	053e2d63 	.word	0x053e2d63
 8004e90:	40022000 	.word	0x40022000
 8004e94:	40022100 	.word	0x40022100
 8004e98:	58026000 	.word	0x58026000
 8004e9c:	40022300 	.word	0x40022300
 8004ea0:	58026300 	.word	0x58026300
 8004ea4:	fff0c003 	.word	0xfff0c003
 8004ea8:	ffffbffc 	.word	0xffffbffc
 8004eac:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	691a      	ldr	r2, [r3, #16]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f022 0201 	bic.w	r2, r2, #1
 8004ebe:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 ffa6 	bl	8005e28 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d10c      	bne.n	8004efe <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eea:	f023 010f 	bic.w	r1, r3, #15
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	1e5a      	subs	r2, r3, #1
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	631a      	str	r2, [r3, #48]	; 0x30
 8004efc:	e007      	b.n	8004f0e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 020f 	bic.w	r2, r2, #15
 8004f0c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f12:	f023 0303 	bic.w	r3, r3, #3
 8004f16:	f043 0201 	orr.w	r2, r3, #1
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	655a      	str	r2, [r3, #84]	; 0x54
 8004f1e:	e007      	b.n	8004f30 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f24:	f043 0210 	orr.w	r2, r3, #16
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004f30:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3724      	adds	r7, #36	; 0x24
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd90      	pop	{r4, r7, pc}
 8004f3a:	bf00      	nop

08004f3c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b086      	sub	sp, #24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a90      	ldr	r2, [pc, #576]	; (800518c <HAL_ADC_Start_IT+0x250>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d004      	beq.n	8004f58 <HAL_ADC_Start_IT+0x1c>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a8f      	ldr	r2, [pc, #572]	; (8005190 <HAL_ADC_Start_IT+0x254>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d101      	bne.n	8004f5c <HAL_ADC_Start_IT+0x20>
 8004f58:	4b8e      	ldr	r3, [pc, #568]	; (8005194 <HAL_ADC_Start_IT+0x258>)
 8004f5a:	e000      	b.n	8004f5e <HAL_ADC_Start_IT+0x22>
 8004f5c:	4b8e      	ldr	r3, [pc, #568]	; (8005198 <HAL_ADC_Start_IT+0x25c>)
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7ff fd7e 	bl	8004a60 <LL_ADC_GetMultimode>
 8004f64:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7ff fe1e 	bl	8004bac <LL_ADC_REG_IsConversionOngoing>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f040 8119 	bne.w	80051aa <HAL_ADC_Start_IT+0x26e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d101      	bne.n	8004f86 <HAL_ADC_Start_IT+0x4a>
 8004f82:	2302      	movs	r3, #2
 8004f84:	e116      	b.n	80051b4 <HAL_ADC_Start_IT+0x278>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 fec0 	bl	8005d14 <ADC_Enable>
 8004f94:	4603      	mov	r3, r0
 8004f96:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004f98:	7dfb      	ldrb	r3, [r7, #23]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	f040 8100 	bne.w	80051a0 <HAL_ADC_Start_IT+0x264>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fa4:	4b7d      	ldr	r3, [pc, #500]	; (800519c <HAL_ADC_Start_IT+0x260>)
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a76      	ldr	r2, [pc, #472]	; (8005190 <HAL_ADC_Start_IT+0x254>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d002      	beq.n	8004fc0 <HAL_ADC_Start_IT+0x84>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	e000      	b.n	8004fc2 <HAL_ADC_Start_IT+0x86>
 8004fc0:	4b72      	ldr	r3, [pc, #456]	; (800518c <HAL_ADC_Start_IT+0x250>)
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	6812      	ldr	r2, [r2, #0]
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d002      	beq.n	8004fd0 <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d105      	bne.n	8004fdc <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d006      	beq.n	8004ff6 <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fec:	f023 0206 	bic.w	r2, r3, #6
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	659a      	str	r2, [r3, #88]	; 0x58
 8004ff4:	e002      	b.n	8004ffc <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	221c      	movs	r2, #28
 8005002:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	685a      	ldr	r2, [r3, #4]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f022 021c 	bic.w	r2, r2, #28
 800501a:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	2b08      	cmp	r3, #8
 8005022:	d108      	bne.n	8005036 <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f042 0208 	orr.w	r2, r2, #8
 8005032:	605a      	str	r2, [r3, #4]
          break;
 8005034:	e008      	b.n	8005048 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f042 0204 	orr.w	r2, r2, #4
 8005044:	605a      	str	r2, [r3, #4]
          break;
 8005046:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504c:	2b00      	cmp	r3, #0
 800504e:	d107      	bne.n	8005060 <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f042 0210 	orr.w	r2, r2, #16
 800505e:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a4a      	ldr	r2, [pc, #296]	; (8005190 <HAL_ADC_Start_IT+0x254>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d002      	beq.n	8005070 <HAL_ADC_Start_IT+0x134>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	e000      	b.n	8005072 <HAL_ADC_Start_IT+0x136>
 8005070:	4b46      	ldr	r3, [pc, #280]	; (800518c <HAL_ADC_Start_IT+0x250>)
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	6812      	ldr	r2, [r2, #0]
 8005076:	4293      	cmp	r3, r2
 8005078:	d008      	beq.n	800508c <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d005      	beq.n	800508c <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	2b05      	cmp	r3, #5
 8005084:	d002      	beq.n	800508c <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	2b09      	cmp	r3, #9
 800508a:	d13b      	bne.n	8005104 <HAL_ADC_Start_IT+0x1c8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d02d      	beq.n	80050f6 <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80050a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	2b08      	cmp	r3, #8
 80050b0:	d110      	bne.n	80050d4 <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 0220 	bic.w	r2, r2, #32
 80050c0:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	685a      	ldr	r2, [r3, #4]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050d0:	605a      	str	r2, [r3, #4]
              break;
 80050d2:	e011      	b.n	80050f8 <HAL_ADC_Start_IT+0x1bc>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685a      	ldr	r2, [r3, #4]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050e2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	685a      	ldr	r2, [r3, #4]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0220 	orr.w	r2, r2, #32
 80050f2:	605a      	str	r2, [r3, #4]
              break;
 80050f4:	e000      	b.n	80050f8 <HAL_ADC_Start_IT+0x1bc>
          }
        }
 80050f6:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4618      	mov	r0, r3
 80050fe:	f7ff fd41 	bl	8004b84 <LL_ADC_REG_StartConversion>
 8005102:	e056      	b.n	80051b2 <HAL_ADC_Start_IT+0x276>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005108:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a1e      	ldr	r2, [pc, #120]	; (8005190 <HAL_ADC_Start_IT+0x254>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d002      	beq.n	8005120 <HAL_ADC_Start_IT+0x1e4>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	e000      	b.n	8005122 <HAL_ADC_Start_IT+0x1e6>
 8005120:	4b1a      	ldr	r3, [pc, #104]	; (800518c <HAL_ADC_Start_IT+0x250>)
 8005122:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d03f      	beq.n	80051b0 <HAL_ADC_Start_IT+0x274>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005134:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005138:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	2b08      	cmp	r3, #8
 8005146:	d110      	bne.n	800516a <HAL_ADC_Start_IT+0x22e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	685a      	ldr	r2, [r3, #4]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f022 0220 	bic.w	r2, r2, #32
 8005156:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005166:	605a      	str	r2, [r3, #4]
              break;
 8005168:	e023      	b.n	80051b2 <HAL_ADC_Start_IT+0x276>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005178:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f042 0220 	orr.w	r2, r2, #32
 8005188:	605a      	str	r2, [r3, #4]
              break;
 800518a:	e012      	b.n	80051b2 <HAL_ADC_Start_IT+0x276>
 800518c:	40022000 	.word	0x40022000
 8005190:	40022100 	.word	0x40022100
 8005194:	40022300 	.word	0x40022300
 8005198:	58026300 	.word	0x58026300
 800519c:	fffff0fe 	.word	0xfffff0fe
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80051a8:	e003      	b.n	80051b2 <HAL_ADC_Start_IT+0x276>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80051aa:	2302      	movs	r3, #2
 80051ac:	75fb      	strb	r3, [r7, #23]
 80051ae:	e000      	b.n	80051b2 <HAL_ADC_Start_IT+0x276>
        }
 80051b0:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 80051b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3718      	adds	r7, #24
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	370c      	adds	r7, #12
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
	...

080051d8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b08a      	sub	sp, #40	; 0x28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80051e0:	2300      	movs	r3, #0
 80051e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a87      	ldr	r2, [pc, #540]	; (8005418 <HAL_ADC_IRQHandler+0x240>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d004      	beq.n	8005208 <HAL_ADC_IRQHandler+0x30>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a86      	ldr	r2, [pc, #536]	; (800541c <HAL_ADC_IRQHandler+0x244>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d101      	bne.n	800520c <HAL_ADC_IRQHandler+0x34>
 8005208:	4b85      	ldr	r3, [pc, #532]	; (8005420 <HAL_ADC_IRQHandler+0x248>)
 800520a:	e000      	b.n	800520e <HAL_ADC_IRQHandler+0x36>
 800520c:	4b85      	ldr	r3, [pc, #532]	; (8005424 <HAL_ADC_IRQHandler+0x24c>)
 800520e:	4618      	mov	r0, r3
 8005210:	f7ff fc26 	bl	8004a60 <LL_ADC_GetMultimode>
 8005214:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	f003 0302 	and.w	r3, r3, #2
 800521c:	2b00      	cmp	r3, #0
 800521e:	d017      	beq.n	8005250 <HAL_ADC_IRQHandler+0x78>
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d012      	beq.n	8005250 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800522e:	f003 0310 	and.w	r3, r3, #16
 8005232:	2b00      	cmp	r3, #0
 8005234:	d105      	bne.n	8005242 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800523a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 ff48 	bl	80060d8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2202      	movs	r2, #2
 800524e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	f003 0304 	and.w	r3, r3, #4
 8005256:	2b00      	cmp	r3, #0
 8005258:	d004      	beq.n	8005264 <HAL_ADC_IRQHandler+0x8c>
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	f003 0304 	and.w	r3, r3, #4
 8005260:	2b00      	cmp	r3, #0
 8005262:	d10a      	bne.n	800527a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800526a:	2b00      	cmp	r3, #0
 800526c:	f000 8083 	beq.w	8005376 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	f003 0308 	and.w	r3, r3, #8
 8005276:	2b00      	cmp	r3, #0
 8005278:	d07d      	beq.n	8005376 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800527e:	f003 0310 	and.w	r3, r3, #16
 8005282:	2b00      	cmp	r3, #0
 8005284:	d105      	bne.n	8005292 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800528a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4618      	mov	r0, r3
 8005298:	f7ff fb40 	bl	800491c <LL_ADC_REG_IsTriggerSourceSWStart>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d062      	beq.n	8005368 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a5d      	ldr	r2, [pc, #372]	; (800541c <HAL_ADC_IRQHandler+0x244>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d002      	beq.n	80052b2 <HAL_ADC_IRQHandler+0xda>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	e000      	b.n	80052b4 <HAL_ADC_IRQHandler+0xdc>
 80052b2:	4b59      	ldr	r3, [pc, #356]	; (8005418 <HAL_ADC_IRQHandler+0x240>)
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	6812      	ldr	r2, [r2, #0]
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d008      	beq.n	80052ce <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d005      	beq.n	80052ce <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	2b05      	cmp	r3, #5
 80052c6:	d002      	beq.n	80052ce <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	2b09      	cmp	r3, #9
 80052cc:	d104      	bne.n	80052d8 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	623b      	str	r3, [r7, #32]
 80052d6:	e00c      	b.n	80052f2 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a4f      	ldr	r2, [pc, #316]	; (800541c <HAL_ADC_IRQHandler+0x244>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d002      	beq.n	80052e8 <HAL_ADC_IRQHandler+0x110>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	e000      	b.n	80052ea <HAL_ADC_IRQHandler+0x112>
 80052e8:	4b4b      	ldr	r3, [pc, #300]	; (8005418 <HAL_ADC_IRQHandler+0x240>)
 80052ea:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80052f2:	6a3b      	ldr	r3, [r7, #32]
 80052f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d135      	bne.n	8005368 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0308 	and.w	r3, r3, #8
 8005306:	2b08      	cmp	r3, #8
 8005308:	d12e      	bne.n	8005368 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4618      	mov	r0, r3
 8005310:	f7ff fc4c 	bl	8004bac <LL_ADC_REG_IsConversionOngoing>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d11a      	bne.n	8005350 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f022 020c 	bic.w	r2, r2, #12
 8005328:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800532e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800533a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d112      	bne.n	8005368 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005346:	f043 0201 	orr.w	r2, r3, #1
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	655a      	str	r2, [r3, #84]	; 0x54
 800534e:	e00b      	b.n	8005368 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005354:	f043 0210 	orr.w	r2, r3, #16
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005360:	f043 0201 	orr.w	r2, r3, #1
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7fd fc3b 	bl	8002be4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	220c      	movs	r2, #12
 8005374:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	f003 0320 	and.w	r3, r3, #32
 800537c:	2b00      	cmp	r3, #0
 800537e:	d004      	beq.n	800538a <HAL_ADC_IRQHandler+0x1b2>
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	f003 0320 	and.w	r3, r3, #32
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10b      	bne.n	80053a2 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005390:	2b00      	cmp	r3, #0
 8005392:	f000 80a0 	beq.w	80054d6 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539c:	2b00      	cmp	r3, #0
 800539e:	f000 809a 	beq.w	80054d6 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a6:	f003 0310 	and.w	r3, r3, #16
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d105      	bne.n	80053ba <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4618      	mov	r0, r3
 80053c0:	f7ff faeb 	bl	800499a <LL_ADC_INJ_IsTriggerSourceSWStart>
 80053c4:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7ff faa6 	bl	800491c <LL_ADC_REG_IsTriggerSourceSWStart>
 80053d0:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a11      	ldr	r2, [pc, #68]	; (800541c <HAL_ADC_IRQHandler+0x244>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d002      	beq.n	80053e2 <HAL_ADC_IRQHandler+0x20a>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	e000      	b.n	80053e4 <HAL_ADC_IRQHandler+0x20c>
 80053e2:	4b0d      	ldr	r3, [pc, #52]	; (8005418 <HAL_ADC_IRQHandler+0x240>)
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	6812      	ldr	r2, [r2, #0]
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d008      	beq.n	80053fe <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d005      	beq.n	80053fe <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	2b06      	cmp	r3, #6
 80053f6:	d002      	beq.n	80053fe <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	2b07      	cmp	r3, #7
 80053fc:	d104      	bne.n	8005408 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	623b      	str	r3, [r7, #32]
 8005406:	e014      	b.n	8005432 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a03      	ldr	r2, [pc, #12]	; (800541c <HAL_ADC_IRQHandler+0x244>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d00a      	beq.n	8005428 <HAL_ADC_IRQHandler+0x250>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	e008      	b.n	800542a <HAL_ADC_IRQHandler+0x252>
 8005418:	40022000 	.word	0x40022000
 800541c:	40022100 	.word	0x40022100
 8005420:	40022300 	.word	0x40022300
 8005424:	58026300 	.word	0x58026300
 8005428:	4b84      	ldr	r3, [pc, #528]	; (800563c <HAL_ADC_IRQHandler+0x464>)
 800542a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d047      	beq.n	80054c8 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005438:	6a3b      	ldr	r3, [r7, #32]
 800543a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d007      	beq.n	8005452 <HAL_ADC_IRQHandler+0x27a>
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d03f      	beq.n	80054c8 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005448:	6a3b      	ldr	r3, [r7, #32]
 800544a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800544e:	2b00      	cmp	r3, #0
 8005450:	d13a      	bne.n	80054c8 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800545c:	2b40      	cmp	r3, #64	; 0x40
 800545e:	d133      	bne.n	80054c8 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005460:	6a3b      	ldr	r3, [r7, #32]
 8005462:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d12e      	bne.n	80054c8 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4618      	mov	r0, r3
 8005470:	f7ff fbaf 	bl	8004bd2 <LL_ADC_INJ_IsConversionOngoing>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d11a      	bne.n	80054b0 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	685a      	ldr	r2, [r3, #4]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005488:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800549a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d112      	bne.n	80054c8 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a6:	f043 0201 	orr.w	r2, r3, #1
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	655a      	str	r2, [r3, #84]	; 0x54
 80054ae:	e00b      	b.n	80054c8 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b4:	f043 0210 	orr.w	r2, r3, #16
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054c0:	f043 0201 	orr.w	r2, r3, #1
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 fddd 	bl	8006088 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2260      	movs	r2, #96	; 0x60
 80054d4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d011      	beq.n	8005504 <HAL_ADC_IRQHandler+0x32c>
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00c      	beq.n	8005504 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f8a8 	bl	800564c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2280      	movs	r2, #128	; 0x80
 8005502:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800550a:	2b00      	cmp	r3, #0
 800550c:	d012      	beq.n	8005534 <HAL_ADC_IRQHandler+0x35c>
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005514:	2b00      	cmp	r3, #0
 8005516:	d00d      	beq.n	8005534 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800551c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 fdc3 	bl	80060b0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005532:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800553a:	2b00      	cmp	r3, #0
 800553c:	d012      	beq.n	8005564 <HAL_ADC_IRQHandler+0x38c>
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00d      	beq.n	8005564 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800554c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 fdb5 	bl	80060c4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005562:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	f003 0310 	and.w	r3, r3, #16
 800556a:	2b00      	cmp	r3, #0
 800556c:	d043      	beq.n	80055f6 <HAL_ADC_IRQHandler+0x41e>
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	f003 0310 	and.w	r3, r3, #16
 8005574:	2b00      	cmp	r3, #0
 8005576:	d03e      	beq.n	80055f6 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557c:	2b00      	cmp	r3, #0
 800557e:	d102      	bne.n	8005586 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8005580:	2301      	movs	r3, #1
 8005582:	627b      	str	r3, [r7, #36]	; 0x24
 8005584:	e021      	b.n	80055ca <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d015      	beq.n	80055b8 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a2a      	ldr	r2, [pc, #168]	; (800563c <HAL_ADC_IRQHandler+0x464>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d004      	beq.n	80055a0 <HAL_ADC_IRQHandler+0x3c8>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a29      	ldr	r2, [pc, #164]	; (8005640 <HAL_ADC_IRQHandler+0x468>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d101      	bne.n	80055a4 <HAL_ADC_IRQHandler+0x3cc>
 80055a0:	4b28      	ldr	r3, [pc, #160]	; (8005644 <HAL_ADC_IRQHandler+0x46c>)
 80055a2:	e000      	b.n	80055a6 <HAL_ADC_IRQHandler+0x3ce>
 80055a4:	4b28      	ldr	r3, [pc, #160]	; (8005648 <HAL_ADC_IRQHandler+0x470>)
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7ff fa68 	bl	8004a7c <LL_ADC_GetMultiDMATransfer>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00b      	beq.n	80055ca <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80055b2:	2301      	movs	r3, #1
 80055b4:	627b      	str	r3, [r7, #36]	; 0x24
 80055b6:	e008      	b.n	80055ca <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	f003 0303 	and.w	r3, r3, #3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d001      	beq.n	80055ca <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80055c6:	2301      	movs	r3, #1
 80055c8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d10e      	bne.n	80055ee <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055e0:	f043 0202 	orr.w	r2, r3, #2
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 f839 	bl	8005660 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2210      	movs	r2, #16
 80055f4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d018      	beq.n	8005632 <HAL_ADC_IRQHandler+0x45a>
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005606:	2b00      	cmp	r3, #0
 8005608:	d013      	beq.n	8005632 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800560e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800561a:	f043 0208 	orr.w	r2, r3, #8
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800562a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 fd35 	bl	800609c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005632:	bf00      	nop
 8005634:	3728      	adds	r7, #40	; 0x28
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	40022000 	.word	0x40022000
 8005640:	40022100 	.word	0x40022100
 8005644:	40022300 	.word	0x40022300
 8005648:	58026300 	.word	0x58026300

0800564c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005674:	b590      	push	{r4, r7, lr}
 8005676:	b0a1      	sub	sp, #132	; 0x84
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800567e:	2300      	movs	r3, #0
 8005680:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005684:	2300      	movs	r3, #0
 8005686:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	4a9d      	ldr	r2, [pc, #628]	; (8005904 <HAL_ADC_ConfigChannel+0x290>)
 800568e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005696:	2b01      	cmp	r3, #1
 8005698:	d101      	bne.n	800569e <HAL_ADC_ConfigChannel+0x2a>
 800569a:	2302      	movs	r3, #2
 800569c:	e321      	b.n	8005ce2 <HAL_ADC_ConfigChannel+0x66e>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7ff fa7e 	bl	8004bac <LL_ADC_REG_IsConversionOngoing>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f040 8306 	bne.w	8005cc4 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d108      	bne.n	80056d6 <HAL_ADC_ConfigChannel+0x62>
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	0e9b      	lsrs	r3, r3, #26
 80056ca:	f003 031f 	and.w	r3, r3, #31
 80056ce:	2201      	movs	r2, #1
 80056d0:	fa02 f303 	lsl.w	r3, r2, r3
 80056d4:	e016      	b.n	8005704 <HAL_ADC_ConfigChannel+0x90>
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056de:	fa93 f3a3 	rbit	r3, r3
 80056e2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80056e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056e6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80056e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80056ee:	2320      	movs	r3, #32
 80056f0:	e003      	b.n	80056fa <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80056f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056f4:	fab3 f383 	clz	r3, r3
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	f003 031f 	and.w	r3, r3, #31
 80056fe:	2201      	movs	r2, #1
 8005700:	fa02 f303 	lsl.w	r3, r2, r3
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	6812      	ldr	r2, [r2, #0]
 8005708:	69d1      	ldr	r1, [r2, #28]
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	6812      	ldr	r2, [r2, #0]
 800570e:	430b      	orrs	r3, r1
 8005710:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6818      	ldr	r0, [r3, #0]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	6859      	ldr	r1, [r3, #4]
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	461a      	mov	r2, r3
 8005720:	f7ff f90f 	bl	8004942 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4618      	mov	r0, r3
 800572a:	f7ff fa3f 	bl	8004bac <LL_ADC_REG_IsConversionOngoing>
 800572e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4618      	mov	r0, r3
 8005736:	f7ff fa4c 	bl	8004bd2 <LL_ADC_INJ_IsConversionOngoing>
 800573a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800573c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800573e:	2b00      	cmp	r3, #0
 8005740:	f040 80b3 	bne.w	80058aa <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005744:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005746:	2b00      	cmp	r3, #0
 8005748:	f040 80af 	bne.w	80058aa <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6818      	ldr	r0, [r3, #0]
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	6819      	ldr	r1, [r3, #0]
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	461a      	mov	r2, r3
 800575a:	f7ff f931 	bl	80049c0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800575e:	4b6a      	ldr	r3, [pc, #424]	; (8005908 <HAL_ADC_ConfigChannel+0x294>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005766:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800576a:	d10b      	bne.n	8005784 <HAL_ADC_ConfigChannel+0x110>
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	695a      	ldr	r2, [r3, #20]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	089b      	lsrs	r3, r3, #2
 8005778:	f003 0307 	and.w	r3, r3, #7
 800577c:	005b      	lsls	r3, r3, #1
 800577e:	fa02 f303 	lsl.w	r3, r2, r3
 8005782:	e01d      	b.n	80057c0 <HAL_ADC_ConfigChannel+0x14c>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	f003 0310 	and.w	r3, r3, #16
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10b      	bne.n	80057aa <HAL_ADC_ConfigChannel+0x136>
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	695a      	ldr	r2, [r3, #20]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	089b      	lsrs	r3, r3, #2
 800579e:	f003 0307 	and.w	r3, r3, #7
 80057a2:	005b      	lsls	r3, r3, #1
 80057a4:	fa02 f303 	lsl.w	r3, r2, r3
 80057a8:	e00a      	b.n	80057c0 <HAL_ADC_ConfigChannel+0x14c>
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	695a      	ldr	r2, [r3, #20]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	089b      	lsrs	r3, r3, #2
 80057b6:	f003 0304 	and.w	r3, r3, #4
 80057ba:	005b      	lsls	r3, r3, #1
 80057bc:	fa02 f303 	lsl.w	r3, r2, r3
 80057c0:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	2b04      	cmp	r3, #4
 80057c8:	d027      	beq.n	800581a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6818      	ldr	r0, [r3, #0]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	6919      	ldr	r1, [r3, #16]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057d8:	f7ff f84c 	bl	8004874 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6818      	ldr	r0, [r3, #0]
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	6919      	ldr	r1, [r3, #16]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	7e5b      	ldrb	r3, [r3, #25]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d102      	bne.n	80057f2 <HAL_ADC_ConfigChannel+0x17e>
 80057ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80057f0:	e000      	b.n	80057f4 <HAL_ADC_ConfigChannel+0x180>
 80057f2:	2300      	movs	r3, #0
 80057f4:	461a      	mov	r2, r3
 80057f6:	f7ff f876 	bl	80048e6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6818      	ldr	r0, [r3, #0]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	6919      	ldr	r1, [r3, #16]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	7e1b      	ldrb	r3, [r3, #24]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d102      	bne.n	8005810 <HAL_ADC_ConfigChannel+0x19c>
 800580a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800580e:	e000      	b.n	8005812 <HAL_ADC_ConfigChannel+0x19e>
 8005810:	2300      	movs	r3, #0
 8005812:	461a      	mov	r2, r3
 8005814:	f7ff f84e 	bl	80048b4 <LL_ADC_SetDataRightShift>
 8005818:	e047      	b.n	80058aa <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005820:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	069b      	lsls	r3, r3, #26
 800582a:	429a      	cmp	r2, r3
 800582c:	d107      	bne.n	800583e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800583c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005844:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	069b      	lsls	r3, r3, #26
 800584e:	429a      	cmp	r2, r3
 8005850:	d107      	bne.n	8005862 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005860:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005868:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	069b      	lsls	r3, r3, #26
 8005872:	429a      	cmp	r2, r3
 8005874:	d107      	bne.n	8005886 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005884:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800588c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	069b      	lsls	r3, r3, #26
 8005896:	429a      	cmp	r2, r3
 8005898:	d107      	bne.n	80058aa <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80058a8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7ff f954 	bl	8004b5c <LL_ADC_IsEnabled>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	f040 820d 	bne.w	8005cd6 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6818      	ldr	r0, [r3, #0]
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	6819      	ldr	r1, [r3, #0]
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	461a      	mov	r2, r3
 80058ca:	f7ff f8a5 	bl	8004a18 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	4a0c      	ldr	r2, [pc, #48]	; (8005904 <HAL_ADC_ConfigChannel+0x290>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	f040 8133 	bne.w	8005b40 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d110      	bne.n	800590c <HAL_ADC_ConfigChannel+0x298>
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	0e9b      	lsrs	r3, r3, #26
 80058f0:	3301      	adds	r3, #1
 80058f2:	f003 031f 	and.w	r3, r3, #31
 80058f6:	2b09      	cmp	r3, #9
 80058f8:	bf94      	ite	ls
 80058fa:	2301      	movls	r3, #1
 80058fc:	2300      	movhi	r3, #0
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	e01e      	b.n	8005940 <HAL_ADC_ConfigChannel+0x2cc>
 8005902:	bf00      	nop
 8005904:	47ff0000 	.word	0x47ff0000
 8005908:	5c001000 	.word	0x5c001000
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005912:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005914:	fa93 f3a3 	rbit	r3, r3
 8005918:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800591a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800591c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800591e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005920:	2b00      	cmp	r3, #0
 8005922:	d101      	bne.n	8005928 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8005924:	2320      	movs	r3, #32
 8005926:	e003      	b.n	8005930 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8005928:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800592a:	fab3 f383 	clz	r3, r3
 800592e:	b2db      	uxtb	r3, r3
 8005930:	3301      	adds	r3, #1
 8005932:	f003 031f 	and.w	r3, r3, #31
 8005936:	2b09      	cmp	r3, #9
 8005938:	bf94      	ite	ls
 800593a:	2301      	movls	r3, #1
 800593c:	2300      	movhi	r3, #0
 800593e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005940:	2b00      	cmp	r3, #0
 8005942:	d079      	beq.n	8005a38 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800594c:	2b00      	cmp	r3, #0
 800594e:	d107      	bne.n	8005960 <HAL_ADC_ConfigChannel+0x2ec>
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	0e9b      	lsrs	r3, r3, #26
 8005956:	3301      	adds	r3, #1
 8005958:	069b      	lsls	r3, r3, #26
 800595a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800595e:	e015      	b.n	800598c <HAL_ADC_ConfigChannel+0x318>
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005968:	fa93 f3a3 	rbit	r3, r3
 800596c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800596e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005970:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8005972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8005978:	2320      	movs	r3, #32
 800597a:	e003      	b.n	8005984 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800597c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800597e:	fab3 f383 	clz	r3, r3
 8005982:	b2db      	uxtb	r3, r3
 8005984:	3301      	adds	r3, #1
 8005986:	069b      	lsls	r3, r3, #26
 8005988:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005994:	2b00      	cmp	r3, #0
 8005996:	d109      	bne.n	80059ac <HAL_ADC_ConfigChannel+0x338>
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	0e9b      	lsrs	r3, r3, #26
 800599e:	3301      	adds	r3, #1
 80059a0:	f003 031f 	and.w	r3, r3, #31
 80059a4:	2101      	movs	r1, #1
 80059a6:	fa01 f303 	lsl.w	r3, r1, r3
 80059aa:	e017      	b.n	80059dc <HAL_ADC_ConfigChannel+0x368>
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059b4:	fa93 f3a3 	rbit	r3, r3
 80059b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80059ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059bc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80059be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d101      	bne.n	80059c8 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80059c4:	2320      	movs	r3, #32
 80059c6:	e003      	b.n	80059d0 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80059c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059ca:	fab3 f383 	clz	r3, r3
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	3301      	adds	r3, #1
 80059d2:	f003 031f 	and.w	r3, r3, #31
 80059d6:	2101      	movs	r1, #1
 80059d8:	fa01 f303 	lsl.w	r3, r1, r3
 80059dc:	ea42 0103 	orr.w	r1, r2, r3
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d10a      	bne.n	8005a02 <HAL_ADC_ConfigChannel+0x38e>
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	0e9b      	lsrs	r3, r3, #26
 80059f2:	3301      	adds	r3, #1
 80059f4:	f003 021f 	and.w	r2, r3, #31
 80059f8:	4613      	mov	r3, r2
 80059fa:	005b      	lsls	r3, r3, #1
 80059fc:	4413      	add	r3, r2
 80059fe:	051b      	lsls	r3, r3, #20
 8005a00:	e018      	b.n	8005a34 <HAL_ADC_ConfigChannel+0x3c0>
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a0a:	fa93 f3a3 	rbit	r3, r3
 8005a0e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a12:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d101      	bne.n	8005a1e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8005a1a:	2320      	movs	r3, #32
 8005a1c:	e003      	b.n	8005a26 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8005a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a20:	fab3 f383 	clz	r3, r3
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	3301      	adds	r3, #1
 8005a28:	f003 021f 	and.w	r2, r3, #31
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	005b      	lsls	r3, r3, #1
 8005a30:	4413      	add	r3, r2
 8005a32:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005a34:	430b      	orrs	r3, r1
 8005a36:	e07e      	b.n	8005b36 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d107      	bne.n	8005a54 <HAL_ADC_ConfigChannel+0x3e0>
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	0e9b      	lsrs	r3, r3, #26
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	069b      	lsls	r3, r3, #26
 8005a4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005a52:	e015      	b.n	8005a80 <HAL_ADC_ConfigChannel+0x40c>
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5c:	fa93 f3a3 	rbit	r3, r3
 8005a60:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d101      	bne.n	8005a70 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8005a6c:	2320      	movs	r3, #32
 8005a6e:	e003      	b.n	8005a78 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8005a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a72:	fab3 f383 	clz	r3, r3
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	3301      	adds	r3, #1
 8005a7a:	069b      	lsls	r3, r3, #26
 8005a7c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d109      	bne.n	8005aa0 <HAL_ADC_ConfigChannel+0x42c>
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	0e9b      	lsrs	r3, r3, #26
 8005a92:	3301      	adds	r3, #1
 8005a94:	f003 031f 	and.w	r3, r3, #31
 8005a98:	2101      	movs	r1, #1
 8005a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a9e:	e017      	b.n	8005ad0 <HAL_ADC_ConfigChannel+0x45c>
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	fa93 f3a3 	rbit	r3, r3
 8005aac:	61bb      	str	r3, [r7, #24]
  return result;
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005ab2:	6a3b      	ldr	r3, [r7, #32]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d101      	bne.n	8005abc <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8005ab8:	2320      	movs	r3, #32
 8005aba:	e003      	b.n	8005ac4 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8005abc:	6a3b      	ldr	r3, [r7, #32]
 8005abe:	fab3 f383 	clz	r3, r3
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	f003 031f 	and.w	r3, r3, #31
 8005aca:	2101      	movs	r1, #1
 8005acc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ad0:	ea42 0103 	orr.w	r1, r2, r3
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10d      	bne.n	8005afc <HAL_ADC_ConfigChannel+0x488>
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	0e9b      	lsrs	r3, r3, #26
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	f003 021f 	and.w	r2, r3, #31
 8005aec:	4613      	mov	r3, r2
 8005aee:	005b      	lsls	r3, r3, #1
 8005af0:	4413      	add	r3, r2
 8005af2:	3b1e      	subs	r3, #30
 8005af4:	051b      	lsls	r3, r3, #20
 8005af6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005afa:	e01b      	b.n	8005b34 <HAL_ADC_ConfigChannel+0x4c0>
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	fa93 f3a3 	rbit	r3, r3
 8005b08:	60fb      	str	r3, [r7, #12]
  return result;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d101      	bne.n	8005b18 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8005b14:	2320      	movs	r3, #32
 8005b16:	e003      	b.n	8005b20 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	fab3 f383 	clz	r3, r3
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	3301      	adds	r3, #1
 8005b22:	f003 021f 	and.w	r2, r3, #31
 8005b26:	4613      	mov	r3, r2
 8005b28:	005b      	lsls	r3, r3, #1
 8005b2a:	4413      	add	r3, r2
 8005b2c:	3b1e      	subs	r3, #30
 8005b2e:	051b      	lsls	r3, r3, #20
 8005b30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b34:	430b      	orrs	r3, r1
 8005b36:	683a      	ldr	r2, [r7, #0]
 8005b38:	6892      	ldr	r2, [r2, #8]
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	f7fe ff40 	bl	80049c0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f280 80c6 	bge.w	8005cd6 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a67      	ldr	r2, [pc, #412]	; (8005cec <HAL_ADC_ConfigChannel+0x678>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d004      	beq.n	8005b5e <HAL_ADC_ConfigChannel+0x4ea>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a65      	ldr	r2, [pc, #404]	; (8005cf0 <HAL_ADC_ConfigChannel+0x67c>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d101      	bne.n	8005b62 <HAL_ADC_ConfigChannel+0x4ee>
 8005b5e:	4b65      	ldr	r3, [pc, #404]	; (8005cf4 <HAL_ADC_ConfigChannel+0x680>)
 8005b60:	e000      	b.n	8005b64 <HAL_ADC_ConfigChannel+0x4f0>
 8005b62:	4b65      	ldr	r3, [pc, #404]	; (8005cf8 <HAL_ADC_ConfigChannel+0x684>)
 8005b64:	4618      	mov	r0, r3
 8005b66:	f7fe fe77 	bl	8004858 <LL_ADC_GetCommonPathInternalCh>
 8005b6a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a5e      	ldr	r2, [pc, #376]	; (8005cec <HAL_ADC_ConfigChannel+0x678>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d004      	beq.n	8005b80 <HAL_ADC_ConfigChannel+0x50c>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a5d      	ldr	r2, [pc, #372]	; (8005cf0 <HAL_ADC_ConfigChannel+0x67c>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d10e      	bne.n	8005b9e <HAL_ADC_ConfigChannel+0x52a>
 8005b80:	485a      	ldr	r0, [pc, #360]	; (8005cec <HAL_ADC_ConfigChannel+0x678>)
 8005b82:	f7fe ffeb 	bl	8004b5c <LL_ADC_IsEnabled>
 8005b86:	4604      	mov	r4, r0
 8005b88:	4859      	ldr	r0, [pc, #356]	; (8005cf0 <HAL_ADC_ConfigChannel+0x67c>)
 8005b8a:	f7fe ffe7 	bl	8004b5c <LL_ADC_IsEnabled>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	4323      	orrs	r3, r4
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	bf0c      	ite	eq
 8005b96:	2301      	moveq	r3, #1
 8005b98:	2300      	movne	r3, #0
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	e008      	b.n	8005bb0 <HAL_ADC_ConfigChannel+0x53c>
 8005b9e:	4857      	ldr	r0, [pc, #348]	; (8005cfc <HAL_ADC_ConfigChannel+0x688>)
 8005ba0:	f7fe ffdc 	bl	8004b5c <LL_ADC_IsEnabled>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	bf0c      	ite	eq
 8005baa:	2301      	moveq	r3, #1
 8005bac:	2300      	movne	r3, #0
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d07d      	beq.n	8005cb0 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a51      	ldr	r2, [pc, #324]	; (8005d00 <HAL_ADC_ConfigChannel+0x68c>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d130      	bne.n	8005c20 <HAL_ADC_ConfigChannel+0x5ac>
 8005bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d12b      	bne.n	8005c20 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a4b      	ldr	r2, [pc, #300]	; (8005cfc <HAL_ADC_ConfigChannel+0x688>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	f040 8081 	bne.w	8005cd6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a44      	ldr	r2, [pc, #272]	; (8005cec <HAL_ADC_ConfigChannel+0x678>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d004      	beq.n	8005be8 <HAL_ADC_ConfigChannel+0x574>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a43      	ldr	r2, [pc, #268]	; (8005cf0 <HAL_ADC_ConfigChannel+0x67c>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d101      	bne.n	8005bec <HAL_ADC_ConfigChannel+0x578>
 8005be8:	4a42      	ldr	r2, [pc, #264]	; (8005cf4 <HAL_ADC_ConfigChannel+0x680>)
 8005bea:	e000      	b.n	8005bee <HAL_ADC_ConfigChannel+0x57a>
 8005bec:	4a42      	ldr	r2, [pc, #264]	; (8005cf8 <HAL_ADC_ConfigChannel+0x684>)
 8005bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bf0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	4610      	mov	r0, r2
 8005bf8:	f7fe fe1b 	bl	8004832 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005bfc:	4b41      	ldr	r3, [pc, #260]	; (8005d04 <HAL_ADC_ConfigChannel+0x690>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	099b      	lsrs	r3, r3, #6
 8005c02:	4a41      	ldr	r2, [pc, #260]	; (8005d08 <HAL_ADC_ConfigChannel+0x694>)
 8005c04:	fba2 2303 	umull	r2, r3, r2, r3
 8005c08:	099b      	lsrs	r3, r3, #6
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	005b      	lsls	r3, r3, #1
 8005c0e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005c10:	e002      	b.n	8005c18 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	3b01      	subs	r3, #1
 8005c16:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1f9      	bne.n	8005c12 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005c1e:	e05a      	b.n	8005cd6 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a39      	ldr	r2, [pc, #228]	; (8005d0c <HAL_ADC_ConfigChannel+0x698>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d11e      	bne.n	8005c68 <HAL_ADC_ConfigChannel+0x5f4>
 8005c2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d119      	bne.n	8005c68 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a30      	ldr	r2, [pc, #192]	; (8005cfc <HAL_ADC_ConfigChannel+0x688>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d14b      	bne.n	8005cd6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a2a      	ldr	r2, [pc, #168]	; (8005cec <HAL_ADC_ConfigChannel+0x678>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d004      	beq.n	8005c52 <HAL_ADC_ConfigChannel+0x5de>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a28      	ldr	r2, [pc, #160]	; (8005cf0 <HAL_ADC_ConfigChannel+0x67c>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d101      	bne.n	8005c56 <HAL_ADC_ConfigChannel+0x5e2>
 8005c52:	4a28      	ldr	r2, [pc, #160]	; (8005cf4 <HAL_ADC_ConfigChannel+0x680>)
 8005c54:	e000      	b.n	8005c58 <HAL_ADC_ConfigChannel+0x5e4>
 8005c56:	4a28      	ldr	r2, [pc, #160]	; (8005cf8 <HAL_ADC_ConfigChannel+0x684>)
 8005c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c5e:	4619      	mov	r1, r3
 8005c60:	4610      	mov	r0, r2
 8005c62:	f7fe fde6 	bl	8004832 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005c66:	e036      	b.n	8005cd6 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a28      	ldr	r2, [pc, #160]	; (8005d10 <HAL_ADC_ConfigChannel+0x69c>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d131      	bne.n	8005cd6 <HAL_ADC_ConfigChannel+0x662>
 8005c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d12c      	bne.n	8005cd6 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a1e      	ldr	r2, [pc, #120]	; (8005cfc <HAL_ADC_ConfigChannel+0x688>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d127      	bne.n	8005cd6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a18      	ldr	r2, [pc, #96]	; (8005cec <HAL_ADC_ConfigChannel+0x678>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d004      	beq.n	8005c9a <HAL_ADC_ConfigChannel+0x626>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a16      	ldr	r2, [pc, #88]	; (8005cf0 <HAL_ADC_ConfigChannel+0x67c>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d101      	bne.n	8005c9e <HAL_ADC_ConfigChannel+0x62a>
 8005c9a:	4a16      	ldr	r2, [pc, #88]	; (8005cf4 <HAL_ADC_ConfigChannel+0x680>)
 8005c9c:	e000      	b.n	8005ca0 <HAL_ADC_ConfigChannel+0x62c>
 8005c9e:	4a16      	ldr	r2, [pc, #88]	; (8005cf8 <HAL_ADC_ConfigChannel+0x684>)
 8005ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ca2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	4610      	mov	r0, r2
 8005caa:	f7fe fdc2 	bl	8004832 <LL_ADC_SetCommonPathInternalCh>
 8005cae:	e012      	b.n	8005cd6 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cb4:	f043 0220 	orr.w	r2, r3, #32
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005cc2:	e008      	b.n	8005cd6 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cc8:	f043 0220 	orr.w	r2, r3, #32
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005cde:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3784      	adds	r7, #132	; 0x84
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd90      	pop	{r4, r7, pc}
 8005cea:	bf00      	nop
 8005cec:	40022000 	.word	0x40022000
 8005cf0:	40022100 	.word	0x40022100
 8005cf4:	40022300 	.word	0x40022300
 8005cf8:	58026300 	.word	0x58026300
 8005cfc:	58026000 	.word	0x58026000
 8005d00:	cb840000 	.word	0xcb840000
 8005d04:	20000014 	.word	0x20000014
 8005d08:	053e2d63 	.word	0x053e2d63
 8005d0c:	c7520000 	.word	0xc7520000
 8005d10:	cfb80000 	.word	0xcfb80000

08005d14 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4618      	mov	r0, r3
 8005d22:	f7fe ff1b 	bl	8004b5c <LL_ADC_IsEnabled>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d16e      	bne.n	8005e0a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689a      	ldr	r2, [r3, #8]
 8005d32:	4b38      	ldr	r3, [pc, #224]	; (8005e14 <ADC_Enable+0x100>)
 8005d34:	4013      	ands	r3, r2
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00d      	beq.n	8005d56 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d3e:	f043 0210 	orr.w	r2, r3, #16
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d4a:	f043 0201 	orr.w	r2, r3, #1
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e05a      	b.n	8005e0c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7fe feea 	bl	8004b34 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005d60:	f7fe fd18 	bl	8004794 <HAL_GetTick>
 8005d64:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a2b      	ldr	r2, [pc, #172]	; (8005e18 <ADC_Enable+0x104>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d004      	beq.n	8005d7a <ADC_Enable+0x66>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a29      	ldr	r2, [pc, #164]	; (8005e1c <ADC_Enable+0x108>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d101      	bne.n	8005d7e <ADC_Enable+0x6a>
 8005d7a:	4b29      	ldr	r3, [pc, #164]	; (8005e20 <ADC_Enable+0x10c>)
 8005d7c:	e000      	b.n	8005d80 <ADC_Enable+0x6c>
 8005d7e:	4b29      	ldr	r3, [pc, #164]	; (8005e24 <ADC_Enable+0x110>)
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7fe fe6d 	bl	8004a60 <LL_ADC_GetMultimode>
 8005d86:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a23      	ldr	r2, [pc, #140]	; (8005e1c <ADC_Enable+0x108>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d002      	beq.n	8005d98 <ADC_Enable+0x84>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	e000      	b.n	8005d9a <ADC_Enable+0x86>
 8005d98:	4b1f      	ldr	r3, [pc, #124]	; (8005e18 <ADC_Enable+0x104>)
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	6812      	ldr	r2, [r2, #0]
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d02c      	beq.n	8005dfc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d130      	bne.n	8005e0a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005da8:	e028      	b.n	8005dfc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7fe fed4 	bl	8004b5c <LL_ADC_IsEnabled>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d104      	bne.n	8005dc4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7fe feb8 	bl	8004b34 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005dc4:	f7fe fce6 	bl	8004794 <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d914      	bls.n	8005dfc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 0301 	and.w	r3, r3, #1
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d00d      	beq.n	8005dfc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de4:	f043 0210 	orr.w	r2, r3, #16
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df0:	f043 0201 	orr.w	r2, r3, #1
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e007      	b.n	8005e0c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0301 	and.w	r3, r3, #1
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d1cf      	bne.n	8005daa <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3710      	adds	r7, #16
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	8000003f 	.word	0x8000003f
 8005e18:	40022000 	.word	0x40022000
 8005e1c:	40022100 	.word	0x40022100
 8005e20:	40022300 	.word	0x40022300
 8005e24:	58026300 	.word	0x58026300

08005e28 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a79      	ldr	r2, [pc, #484]	; (800601c <ADC_ConfigureBoostMode+0x1f4>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d004      	beq.n	8005e44 <ADC_ConfigureBoostMode+0x1c>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a78      	ldr	r2, [pc, #480]	; (8006020 <ADC_ConfigureBoostMode+0x1f8>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d109      	bne.n	8005e58 <ADC_ConfigureBoostMode+0x30>
 8005e44:	4b77      	ldr	r3, [pc, #476]	; (8006024 <ADC_ConfigureBoostMode+0x1fc>)
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	bf14      	ite	ne
 8005e50:	2301      	movne	r3, #1
 8005e52:	2300      	moveq	r3, #0
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	e008      	b.n	8005e6a <ADC_ConfigureBoostMode+0x42>
 8005e58:	4b73      	ldr	r3, [pc, #460]	; (8006028 <ADC_ConfigureBoostMode+0x200>)
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	bf14      	ite	ne
 8005e64:	2301      	movne	r3, #1
 8005e66:	2300      	moveq	r3, #0
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d01c      	beq.n	8005ea8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005e6e:	f006 fb63 	bl	800c538 <HAL_RCC_GetHCLKFreq>
 8005e72:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e7c:	d010      	beq.n	8005ea0 <ADC_ConfigureBoostMode+0x78>
 8005e7e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e82:	d871      	bhi.n	8005f68 <ADC_ConfigureBoostMode+0x140>
 8005e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e88:	d002      	beq.n	8005e90 <ADC_ConfigureBoostMode+0x68>
 8005e8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e8e:	d16b      	bne.n	8005f68 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	0c1b      	lsrs	r3, r3, #16
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e9c:	60fb      	str	r3, [r7, #12]
        break;
 8005e9e:	e066      	b.n	8005f6e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	089b      	lsrs	r3, r3, #2
 8005ea4:	60fb      	str	r3, [r7, #12]
        break;
 8005ea6:	e062      	b.n	8005f6e <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005ea8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005eac:	f007 fae6 	bl	800d47c <HAL_RCCEx_GetPeriphCLKFreq>
 8005eb0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005eba:	d051      	beq.n	8005f60 <ADC_ConfigureBoostMode+0x138>
 8005ebc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005ec0:	d854      	bhi.n	8005f6c <ADC_ConfigureBoostMode+0x144>
 8005ec2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005ec6:	d047      	beq.n	8005f58 <ADC_ConfigureBoostMode+0x130>
 8005ec8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005ecc:	d84e      	bhi.n	8005f6c <ADC_ConfigureBoostMode+0x144>
 8005ece:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005ed2:	d03d      	beq.n	8005f50 <ADC_ConfigureBoostMode+0x128>
 8005ed4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005ed8:	d848      	bhi.n	8005f6c <ADC_ConfigureBoostMode+0x144>
 8005eda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ede:	d033      	beq.n	8005f48 <ADC_ConfigureBoostMode+0x120>
 8005ee0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ee4:	d842      	bhi.n	8005f6c <ADC_ConfigureBoostMode+0x144>
 8005ee6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005eea:	d029      	beq.n	8005f40 <ADC_ConfigureBoostMode+0x118>
 8005eec:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005ef0:	d83c      	bhi.n	8005f6c <ADC_ConfigureBoostMode+0x144>
 8005ef2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005ef6:	d01a      	beq.n	8005f2e <ADC_ConfigureBoostMode+0x106>
 8005ef8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005efc:	d836      	bhi.n	8005f6c <ADC_ConfigureBoostMode+0x144>
 8005efe:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005f02:	d014      	beq.n	8005f2e <ADC_ConfigureBoostMode+0x106>
 8005f04:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005f08:	d830      	bhi.n	8005f6c <ADC_ConfigureBoostMode+0x144>
 8005f0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f0e:	d00e      	beq.n	8005f2e <ADC_ConfigureBoostMode+0x106>
 8005f10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f14:	d82a      	bhi.n	8005f6c <ADC_ConfigureBoostMode+0x144>
 8005f16:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005f1a:	d008      	beq.n	8005f2e <ADC_ConfigureBoostMode+0x106>
 8005f1c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005f20:	d824      	bhi.n	8005f6c <ADC_ConfigureBoostMode+0x144>
 8005f22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f26:	d002      	beq.n	8005f2e <ADC_ConfigureBoostMode+0x106>
 8005f28:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005f2c:	d11e      	bne.n	8005f6c <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	0c9b      	lsrs	r3, r3, #18
 8005f34:	005b      	lsls	r3, r3, #1
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f3c:	60fb      	str	r3, [r7, #12]
        break;
 8005f3e:	e016      	b.n	8005f6e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	091b      	lsrs	r3, r3, #4
 8005f44:	60fb      	str	r3, [r7, #12]
        break;
 8005f46:	e012      	b.n	8005f6e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	095b      	lsrs	r3, r3, #5
 8005f4c:	60fb      	str	r3, [r7, #12]
        break;
 8005f4e:	e00e      	b.n	8005f6e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	099b      	lsrs	r3, r3, #6
 8005f54:	60fb      	str	r3, [r7, #12]
        break;
 8005f56:	e00a      	b.n	8005f6e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	09db      	lsrs	r3, r3, #7
 8005f5c:	60fb      	str	r3, [r7, #12]
        break;
 8005f5e:	e006      	b.n	8005f6e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	0a1b      	lsrs	r3, r3, #8
 8005f64:	60fb      	str	r3, [r7, #12]
        break;
 8005f66:	e002      	b.n	8005f6e <ADC_ConfigureBoostMode+0x146>
        break;
 8005f68:	bf00      	nop
 8005f6a:	e000      	b.n	8005f6e <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8005f6c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005f6e:	f7fe fc41 	bl	80047f4 <HAL_GetREVID>
 8005f72:	4603      	mov	r3, r0
 8005f74:	f241 0203 	movw	r2, #4099	; 0x1003
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d815      	bhi.n	8005fa8 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	4a2b      	ldr	r2, [pc, #172]	; (800602c <ADC_ConfigureBoostMode+0x204>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d908      	bls.n	8005f96 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	689a      	ldr	r2, [r3, #8]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f92:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005f94:	e03e      	b.n	8006014 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	689a      	ldr	r2, [r3, #8]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fa4:	609a      	str	r2, [r3, #8]
}
 8005fa6:	e035      	b.n	8006014 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	085b      	lsrs	r3, r3, #1
 8005fac:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	4a1f      	ldr	r2, [pc, #124]	; (8006030 <ADC_ConfigureBoostMode+0x208>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d808      	bhi.n	8005fc8 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	689a      	ldr	r2, [r3, #8]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005fc4:	609a      	str	r2, [r3, #8]
}
 8005fc6:	e025      	b.n	8006014 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	4a1a      	ldr	r2, [pc, #104]	; (8006034 <ADC_ConfigureBoostMode+0x20c>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d80a      	bhi.n	8005fe6 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fe2:	609a      	str	r2, [r3, #8]
}
 8005fe4:	e016      	b.n	8006014 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	4a13      	ldr	r2, [pc, #76]	; (8006038 <ADC_ConfigureBoostMode+0x210>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d80a      	bhi.n	8006004 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006000:	609a      	str	r2, [r3, #8]
}
 8006002:	e007      	b.n	8006014 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	689a      	ldr	r2, [r3, #8]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006012:	609a      	str	r2, [r3, #8]
}
 8006014:	bf00      	nop
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	40022000 	.word	0x40022000
 8006020:	40022100 	.word	0x40022100
 8006024:	40022300 	.word	0x40022300
 8006028:	58026300 	.word	0x58026300
 800602c:	01312d00 	.word	0x01312d00
 8006030:	005f5e10 	.word	0x005f5e10
 8006034:	00bebc20 	.word	0x00bebc20
 8006038:	017d7840 	.word	0x017d7840

0800603c <LL_ADC_IsEnabled>:
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f003 0301 	and.w	r3, r3, #1
 800604c:	2b01      	cmp	r3, #1
 800604e:	d101      	bne.n	8006054 <LL_ADC_IsEnabled+0x18>
 8006050:	2301      	movs	r3, #1
 8006052:	e000      	b.n	8006056 <LL_ADC_IsEnabled+0x1a>
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	370c      	adds	r7, #12
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr

08006062 <LL_ADC_REG_IsConversionOngoing>:
{
 8006062:	b480      	push	{r7}
 8006064:	b083      	sub	sp, #12
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	f003 0304 	and.w	r3, r3, #4
 8006072:	2b04      	cmp	r3, #4
 8006074:	d101      	bne.n	800607a <LL_ADC_REG_IsConversionOngoing+0x18>
 8006076:	2301      	movs	r3, #1
 8006078:	e000      	b.n	800607c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006090:	bf00      	nop
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80060b8:	bf00      	nop
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80060cc:	bf00      	nop
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80060ec:	b590      	push	{r4, r7, lr}
 80060ee:	b09f      	sub	sp, #124	; 0x7c
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80060f6:	2300      	movs	r3, #0
 80060f8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006102:	2b01      	cmp	r3, #1
 8006104:	d101      	bne.n	800610a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006106:	2302      	movs	r3, #2
 8006108:	e0be      	b.n	8006288 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006112:	2300      	movs	r3, #0
 8006114:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006116:	2300      	movs	r3, #0
 8006118:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a5c      	ldr	r2, [pc, #368]	; (8006290 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d102      	bne.n	800612a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006124:	4b5b      	ldr	r3, [pc, #364]	; (8006294 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006126:	60bb      	str	r3, [r7, #8]
 8006128:	e001      	b.n	800612e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800612a:	2300      	movs	r3, #0
 800612c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d10b      	bne.n	800614c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006138:	f043 0220 	orr.w	r2, r3, #32
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e09d      	b.n	8006288 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	4618      	mov	r0, r3
 8006150:	f7ff ff87 	bl	8006062 <LL_ADC_REG_IsConversionOngoing>
 8006154:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4618      	mov	r0, r3
 800615c:	f7ff ff81 	bl	8006062 <LL_ADC_REG_IsConversionOngoing>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d17f      	bne.n	8006266 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006166:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006168:	2b00      	cmp	r3, #0
 800616a:	d17c      	bne.n	8006266 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a47      	ldr	r2, [pc, #284]	; (8006290 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d004      	beq.n	8006180 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a46      	ldr	r2, [pc, #280]	; (8006294 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d101      	bne.n	8006184 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8006180:	4b45      	ldr	r3, [pc, #276]	; (8006298 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006182:	e000      	b.n	8006186 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006184:	4b45      	ldr	r3, [pc, #276]	; (800629c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006186:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d039      	beq.n	8006204 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	431a      	orrs	r2, r3
 800619e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061a0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a3a      	ldr	r2, [pc, #232]	; (8006290 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d004      	beq.n	80061b6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a38      	ldr	r2, [pc, #224]	; (8006294 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d10e      	bne.n	80061d4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80061b6:	4836      	ldr	r0, [pc, #216]	; (8006290 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80061b8:	f7ff ff40 	bl	800603c <LL_ADC_IsEnabled>
 80061bc:	4604      	mov	r4, r0
 80061be:	4835      	ldr	r0, [pc, #212]	; (8006294 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80061c0:	f7ff ff3c 	bl	800603c <LL_ADC_IsEnabled>
 80061c4:	4603      	mov	r3, r0
 80061c6:	4323      	orrs	r3, r4
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	bf0c      	ite	eq
 80061cc:	2301      	moveq	r3, #1
 80061ce:	2300      	movne	r3, #0
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	e008      	b.n	80061e6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80061d4:	4832      	ldr	r0, [pc, #200]	; (80062a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80061d6:	f7ff ff31 	bl	800603c <LL_ADC_IsEnabled>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	bf0c      	ite	eq
 80061e0:	2301      	moveq	r3, #1
 80061e2:	2300      	movne	r3, #0
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d047      	beq.n	800627a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80061ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061ec:	689a      	ldr	r2, [r3, #8]
 80061ee:	4b2d      	ldr	r3, [pc, #180]	; (80062a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80061f0:	4013      	ands	r3, r2
 80061f2:	683a      	ldr	r2, [r7, #0]
 80061f4:	6811      	ldr	r1, [r2, #0]
 80061f6:	683a      	ldr	r2, [r7, #0]
 80061f8:	6892      	ldr	r2, [r2, #8]
 80061fa:	430a      	orrs	r2, r1
 80061fc:	431a      	orrs	r2, r3
 80061fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006200:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006202:	e03a      	b.n	800627a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800620c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800620e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a1e      	ldr	r2, [pc, #120]	; (8006290 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d004      	beq.n	8006224 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a1d      	ldr	r2, [pc, #116]	; (8006294 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d10e      	bne.n	8006242 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8006224:	481a      	ldr	r0, [pc, #104]	; (8006290 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006226:	f7ff ff09 	bl	800603c <LL_ADC_IsEnabled>
 800622a:	4604      	mov	r4, r0
 800622c:	4819      	ldr	r0, [pc, #100]	; (8006294 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800622e:	f7ff ff05 	bl	800603c <LL_ADC_IsEnabled>
 8006232:	4603      	mov	r3, r0
 8006234:	4323      	orrs	r3, r4
 8006236:	2b00      	cmp	r3, #0
 8006238:	bf0c      	ite	eq
 800623a:	2301      	moveq	r3, #1
 800623c:	2300      	movne	r3, #0
 800623e:	b2db      	uxtb	r3, r3
 8006240:	e008      	b.n	8006254 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8006242:	4817      	ldr	r0, [pc, #92]	; (80062a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006244:	f7ff fefa 	bl	800603c <LL_ADC_IsEnabled>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	bf0c      	ite	eq
 800624e:	2301      	moveq	r3, #1
 8006250:	2300      	movne	r3, #0
 8006252:	b2db      	uxtb	r3, r3
 8006254:	2b00      	cmp	r3, #0
 8006256:	d010      	beq.n	800627a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800625a:	689a      	ldr	r2, [r3, #8]
 800625c:	4b11      	ldr	r3, [pc, #68]	; (80062a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800625e:	4013      	ands	r3, r2
 8006260:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006262:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006264:	e009      	b.n	800627a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800626a:	f043 0220 	orr.w	r2, r3, #32
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8006278:	e000      	b.n	800627c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800627a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006284:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8006288:	4618      	mov	r0, r3
 800628a:	377c      	adds	r7, #124	; 0x7c
 800628c:	46bd      	mov	sp, r7
 800628e:	bd90      	pop	{r4, r7, pc}
 8006290:	40022000 	.word	0x40022000
 8006294:	40022100 	.word	0x40022100
 8006298:	40022300 	.word	0x40022300
 800629c:	58026300 	.word	0x58026300
 80062a0:	58026000 	.word	0x58026000
 80062a4:	fffff0e0 	.word	0xfffff0e0

080062a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f003 0307 	and.w	r3, r3, #7
 80062b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80062b8:	4b0b      	ldr	r3, [pc, #44]	; (80062e8 <__NVIC_SetPriorityGrouping+0x40>)
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80062c4:	4013      	ands	r3, r2
 80062c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80062d0:	4b06      	ldr	r3, [pc, #24]	; (80062ec <__NVIC_SetPriorityGrouping+0x44>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80062d6:	4a04      	ldr	r2, [pc, #16]	; (80062e8 <__NVIC_SetPriorityGrouping+0x40>)
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	60d3      	str	r3, [r2, #12]
}
 80062dc:	bf00      	nop
 80062de:	3714      	adds	r7, #20
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr
 80062e8:	e000ed00 	.word	0xe000ed00
 80062ec:	05fa0000 	.word	0x05fa0000

080062f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80062f0:	b480      	push	{r7}
 80062f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80062f4:	4b04      	ldr	r3, [pc, #16]	; (8006308 <__NVIC_GetPriorityGrouping+0x18>)
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	0a1b      	lsrs	r3, r3, #8
 80062fa:	f003 0307 	and.w	r3, r3, #7
}
 80062fe:	4618      	mov	r0, r3
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr
 8006308:	e000ed00 	.word	0xe000ed00

0800630c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	4603      	mov	r3, r0
 8006314:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006316:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800631a:	2b00      	cmp	r3, #0
 800631c:	db0b      	blt.n	8006336 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800631e:	88fb      	ldrh	r3, [r7, #6]
 8006320:	f003 021f 	and.w	r2, r3, #31
 8006324:	4907      	ldr	r1, [pc, #28]	; (8006344 <__NVIC_EnableIRQ+0x38>)
 8006326:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800632a:	095b      	lsrs	r3, r3, #5
 800632c:	2001      	movs	r0, #1
 800632e:	fa00 f202 	lsl.w	r2, r0, r2
 8006332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006336:	bf00      	nop
 8006338:	370c      	adds	r7, #12
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	e000e100 	.word	0xe000e100

08006348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	4603      	mov	r3, r0
 8006350:	6039      	str	r1, [r7, #0]
 8006352:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006354:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006358:	2b00      	cmp	r3, #0
 800635a:	db0a      	blt.n	8006372 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	b2da      	uxtb	r2, r3
 8006360:	490c      	ldr	r1, [pc, #48]	; (8006394 <__NVIC_SetPriority+0x4c>)
 8006362:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006366:	0112      	lsls	r2, r2, #4
 8006368:	b2d2      	uxtb	r2, r2
 800636a:	440b      	add	r3, r1
 800636c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006370:	e00a      	b.n	8006388 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	b2da      	uxtb	r2, r3
 8006376:	4908      	ldr	r1, [pc, #32]	; (8006398 <__NVIC_SetPriority+0x50>)
 8006378:	88fb      	ldrh	r3, [r7, #6]
 800637a:	f003 030f 	and.w	r3, r3, #15
 800637e:	3b04      	subs	r3, #4
 8006380:	0112      	lsls	r2, r2, #4
 8006382:	b2d2      	uxtb	r2, r2
 8006384:	440b      	add	r3, r1
 8006386:	761a      	strb	r2, [r3, #24]
}
 8006388:	bf00      	nop
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr
 8006394:	e000e100 	.word	0xe000e100
 8006398:	e000ed00 	.word	0xe000ed00

0800639c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800639c:	b480      	push	{r7}
 800639e:	b089      	sub	sp, #36	; 0x24
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f003 0307 	and.w	r3, r3, #7
 80063ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	f1c3 0307 	rsb	r3, r3, #7
 80063b6:	2b04      	cmp	r3, #4
 80063b8:	bf28      	it	cs
 80063ba:	2304      	movcs	r3, #4
 80063bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	3304      	adds	r3, #4
 80063c2:	2b06      	cmp	r3, #6
 80063c4:	d902      	bls.n	80063cc <NVIC_EncodePriority+0x30>
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	3b03      	subs	r3, #3
 80063ca:	e000      	b.n	80063ce <NVIC_EncodePriority+0x32>
 80063cc:	2300      	movs	r3, #0
 80063ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063d0:	f04f 32ff 	mov.w	r2, #4294967295
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	fa02 f303 	lsl.w	r3, r2, r3
 80063da:	43da      	mvns	r2, r3
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	401a      	ands	r2, r3
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80063e4:	f04f 31ff 	mov.w	r1, #4294967295
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	fa01 f303 	lsl.w	r3, r1, r3
 80063ee:	43d9      	mvns	r1, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063f4:	4313      	orrs	r3, r2
         );
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3724      	adds	r7, #36	; 0x24
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr
	...

08006404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	3b01      	subs	r3, #1
 8006410:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006414:	d301      	bcc.n	800641a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006416:	2301      	movs	r3, #1
 8006418:	e00f      	b.n	800643a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800641a:	4a0a      	ldr	r2, [pc, #40]	; (8006444 <SysTick_Config+0x40>)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	3b01      	subs	r3, #1
 8006420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006422:	210f      	movs	r1, #15
 8006424:	f04f 30ff 	mov.w	r0, #4294967295
 8006428:	f7ff ff8e 	bl	8006348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800642c:	4b05      	ldr	r3, [pc, #20]	; (8006444 <SysTick_Config+0x40>)
 800642e:	2200      	movs	r2, #0
 8006430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006432:	4b04      	ldr	r3, [pc, #16]	; (8006444 <SysTick_Config+0x40>)
 8006434:	2207      	movs	r2, #7
 8006436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3708      	adds	r7, #8
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	e000e010 	.word	0xe000e010

08006448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f7ff ff29 	bl	80062a8 <__NVIC_SetPriorityGrouping>
}
 8006456:	bf00      	nop
 8006458:	3708      	adds	r7, #8
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b086      	sub	sp, #24
 8006462:	af00      	add	r7, sp, #0
 8006464:	4603      	mov	r3, r0
 8006466:	60b9      	str	r1, [r7, #8]
 8006468:	607a      	str	r2, [r7, #4]
 800646a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800646c:	f7ff ff40 	bl	80062f0 <__NVIC_GetPriorityGrouping>
 8006470:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	68b9      	ldr	r1, [r7, #8]
 8006476:	6978      	ldr	r0, [r7, #20]
 8006478:	f7ff ff90 	bl	800639c <NVIC_EncodePriority>
 800647c:	4602      	mov	r2, r0
 800647e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006482:	4611      	mov	r1, r2
 8006484:	4618      	mov	r0, r3
 8006486:	f7ff ff5f 	bl	8006348 <__NVIC_SetPriority>
}
 800648a:	bf00      	nop
 800648c:	3718      	adds	r7, #24
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b082      	sub	sp, #8
 8006496:	af00      	add	r7, sp, #0
 8006498:	4603      	mov	r3, r0
 800649a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800649c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7ff ff33 	bl	800630c <__NVIC_EnableIRQ>
}
 80064a6:	bf00      	nop
 80064a8:	3708      	adds	r7, #8
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b082      	sub	sp, #8
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f7ff ffa4 	bl	8006404 <SysTick_Config>
 80064bc:	4603      	mov	r3, r0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3708      	adds	r7, #8
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
	...

080064c8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b086      	sub	sp, #24
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80064d0:	f7fe f960 	bl	8004794 <HAL_GetTick>
 80064d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d101      	bne.n	80064e0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e316      	b.n	8006b0e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a66      	ldr	r2, [pc, #408]	; (8006680 <HAL_DMA_Init+0x1b8>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d04a      	beq.n	8006580 <HAL_DMA_Init+0xb8>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a65      	ldr	r2, [pc, #404]	; (8006684 <HAL_DMA_Init+0x1bc>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d045      	beq.n	8006580 <HAL_DMA_Init+0xb8>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a63      	ldr	r2, [pc, #396]	; (8006688 <HAL_DMA_Init+0x1c0>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d040      	beq.n	8006580 <HAL_DMA_Init+0xb8>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a62      	ldr	r2, [pc, #392]	; (800668c <HAL_DMA_Init+0x1c4>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d03b      	beq.n	8006580 <HAL_DMA_Init+0xb8>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a60      	ldr	r2, [pc, #384]	; (8006690 <HAL_DMA_Init+0x1c8>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d036      	beq.n	8006580 <HAL_DMA_Init+0xb8>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a5f      	ldr	r2, [pc, #380]	; (8006694 <HAL_DMA_Init+0x1cc>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d031      	beq.n	8006580 <HAL_DMA_Init+0xb8>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a5d      	ldr	r2, [pc, #372]	; (8006698 <HAL_DMA_Init+0x1d0>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d02c      	beq.n	8006580 <HAL_DMA_Init+0xb8>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a5c      	ldr	r2, [pc, #368]	; (800669c <HAL_DMA_Init+0x1d4>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d027      	beq.n	8006580 <HAL_DMA_Init+0xb8>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a5a      	ldr	r2, [pc, #360]	; (80066a0 <HAL_DMA_Init+0x1d8>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d022      	beq.n	8006580 <HAL_DMA_Init+0xb8>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a59      	ldr	r2, [pc, #356]	; (80066a4 <HAL_DMA_Init+0x1dc>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d01d      	beq.n	8006580 <HAL_DMA_Init+0xb8>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a57      	ldr	r2, [pc, #348]	; (80066a8 <HAL_DMA_Init+0x1e0>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d018      	beq.n	8006580 <HAL_DMA_Init+0xb8>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a56      	ldr	r2, [pc, #344]	; (80066ac <HAL_DMA_Init+0x1e4>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d013      	beq.n	8006580 <HAL_DMA_Init+0xb8>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a54      	ldr	r2, [pc, #336]	; (80066b0 <HAL_DMA_Init+0x1e8>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d00e      	beq.n	8006580 <HAL_DMA_Init+0xb8>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a53      	ldr	r2, [pc, #332]	; (80066b4 <HAL_DMA_Init+0x1ec>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d009      	beq.n	8006580 <HAL_DMA_Init+0xb8>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a51      	ldr	r2, [pc, #324]	; (80066b8 <HAL_DMA_Init+0x1f0>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d004      	beq.n	8006580 <HAL_DMA_Init+0xb8>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a50      	ldr	r2, [pc, #320]	; (80066bc <HAL_DMA_Init+0x1f4>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d101      	bne.n	8006584 <HAL_DMA_Init+0xbc>
 8006580:	2301      	movs	r3, #1
 8006582:	e000      	b.n	8006586 <HAL_DMA_Init+0xbe>
 8006584:	2300      	movs	r3, #0
 8006586:	2b00      	cmp	r3, #0
 8006588:	f000 813b 	beq.w	8006802 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2202      	movs	r2, #2
 8006590:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a37      	ldr	r2, [pc, #220]	; (8006680 <HAL_DMA_Init+0x1b8>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d04a      	beq.n	800663c <HAL_DMA_Init+0x174>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a36      	ldr	r2, [pc, #216]	; (8006684 <HAL_DMA_Init+0x1bc>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d045      	beq.n	800663c <HAL_DMA_Init+0x174>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a34      	ldr	r2, [pc, #208]	; (8006688 <HAL_DMA_Init+0x1c0>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d040      	beq.n	800663c <HAL_DMA_Init+0x174>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a33      	ldr	r2, [pc, #204]	; (800668c <HAL_DMA_Init+0x1c4>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d03b      	beq.n	800663c <HAL_DMA_Init+0x174>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a31      	ldr	r2, [pc, #196]	; (8006690 <HAL_DMA_Init+0x1c8>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d036      	beq.n	800663c <HAL_DMA_Init+0x174>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a30      	ldr	r2, [pc, #192]	; (8006694 <HAL_DMA_Init+0x1cc>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d031      	beq.n	800663c <HAL_DMA_Init+0x174>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a2e      	ldr	r2, [pc, #184]	; (8006698 <HAL_DMA_Init+0x1d0>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d02c      	beq.n	800663c <HAL_DMA_Init+0x174>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a2d      	ldr	r2, [pc, #180]	; (800669c <HAL_DMA_Init+0x1d4>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d027      	beq.n	800663c <HAL_DMA_Init+0x174>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a2b      	ldr	r2, [pc, #172]	; (80066a0 <HAL_DMA_Init+0x1d8>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d022      	beq.n	800663c <HAL_DMA_Init+0x174>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a2a      	ldr	r2, [pc, #168]	; (80066a4 <HAL_DMA_Init+0x1dc>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d01d      	beq.n	800663c <HAL_DMA_Init+0x174>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a28      	ldr	r2, [pc, #160]	; (80066a8 <HAL_DMA_Init+0x1e0>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d018      	beq.n	800663c <HAL_DMA_Init+0x174>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a27      	ldr	r2, [pc, #156]	; (80066ac <HAL_DMA_Init+0x1e4>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d013      	beq.n	800663c <HAL_DMA_Init+0x174>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a25      	ldr	r2, [pc, #148]	; (80066b0 <HAL_DMA_Init+0x1e8>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d00e      	beq.n	800663c <HAL_DMA_Init+0x174>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a24      	ldr	r2, [pc, #144]	; (80066b4 <HAL_DMA_Init+0x1ec>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d009      	beq.n	800663c <HAL_DMA_Init+0x174>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a22      	ldr	r2, [pc, #136]	; (80066b8 <HAL_DMA_Init+0x1f0>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d004      	beq.n	800663c <HAL_DMA_Init+0x174>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a21      	ldr	r2, [pc, #132]	; (80066bc <HAL_DMA_Init+0x1f4>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d108      	bne.n	800664e <HAL_DMA_Init+0x186>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f022 0201 	bic.w	r2, r2, #1
 800664a:	601a      	str	r2, [r3, #0]
 800664c:	e007      	b.n	800665e <HAL_DMA_Init+0x196>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f022 0201 	bic.w	r2, r2, #1
 800665c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800665e:	e02f      	b.n	80066c0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006660:	f7fe f898 	bl	8004794 <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	2b05      	cmp	r3, #5
 800666c:	d928      	bls.n	80066c0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2220      	movs	r2, #32
 8006672:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2203      	movs	r2, #3
 8006678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e246      	b.n	8006b0e <HAL_DMA_Init+0x646>
 8006680:	40020010 	.word	0x40020010
 8006684:	40020028 	.word	0x40020028
 8006688:	40020040 	.word	0x40020040
 800668c:	40020058 	.word	0x40020058
 8006690:	40020070 	.word	0x40020070
 8006694:	40020088 	.word	0x40020088
 8006698:	400200a0 	.word	0x400200a0
 800669c:	400200b8 	.word	0x400200b8
 80066a0:	40020410 	.word	0x40020410
 80066a4:	40020428 	.word	0x40020428
 80066a8:	40020440 	.word	0x40020440
 80066ac:	40020458 	.word	0x40020458
 80066b0:	40020470 	.word	0x40020470
 80066b4:	40020488 	.word	0x40020488
 80066b8:	400204a0 	.word	0x400204a0
 80066bc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0301 	and.w	r3, r3, #1
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1c8      	bne.n	8006660 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80066d6:	697a      	ldr	r2, [r7, #20]
 80066d8:	4b83      	ldr	r3, [pc, #524]	; (80068e8 <HAL_DMA_Init+0x420>)
 80066da:	4013      	ands	r3, r2
 80066dc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80066e6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066f2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	699b      	ldr	r3, [r3, #24]
 80066f8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066fe:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a1b      	ldr	r3, [r3, #32]
 8006704:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	4313      	orrs	r3, r2
 800670a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006710:	2b04      	cmp	r3, #4
 8006712:	d107      	bne.n	8006724 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671c:	4313      	orrs	r3, r2
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	4313      	orrs	r3, r2
 8006722:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006724:	4b71      	ldr	r3, [pc, #452]	; (80068ec <HAL_DMA_Init+0x424>)
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	4b71      	ldr	r3, [pc, #452]	; (80068f0 <HAL_DMA_Init+0x428>)
 800672a:	4013      	ands	r3, r2
 800672c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006730:	d328      	bcc.n	8006784 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	2b28      	cmp	r3, #40	; 0x28
 8006738:	d903      	bls.n	8006742 <HAL_DMA_Init+0x27a>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	2b2e      	cmp	r3, #46	; 0x2e
 8006740:	d917      	bls.n	8006772 <HAL_DMA_Init+0x2aa>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	2b3e      	cmp	r3, #62	; 0x3e
 8006748:	d903      	bls.n	8006752 <HAL_DMA_Init+0x28a>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	2b42      	cmp	r3, #66	; 0x42
 8006750:	d90f      	bls.n	8006772 <HAL_DMA_Init+0x2aa>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	2b46      	cmp	r3, #70	; 0x46
 8006758:	d903      	bls.n	8006762 <HAL_DMA_Init+0x29a>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	2b48      	cmp	r3, #72	; 0x48
 8006760:	d907      	bls.n	8006772 <HAL_DMA_Init+0x2aa>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	2b4e      	cmp	r3, #78	; 0x4e
 8006768:	d905      	bls.n	8006776 <HAL_DMA_Init+0x2ae>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	2b52      	cmp	r3, #82	; 0x52
 8006770:	d801      	bhi.n	8006776 <HAL_DMA_Init+0x2ae>
 8006772:	2301      	movs	r3, #1
 8006774:	e000      	b.n	8006778 <HAL_DMA_Init+0x2b0>
 8006776:	2300      	movs	r3, #0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d003      	beq.n	8006784 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006782:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	f023 0307 	bic.w	r3, r3, #7
 800679a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a0:	697a      	ldr	r2, [r7, #20]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067aa:	2b04      	cmp	r3, #4
 80067ac:	d117      	bne.n	80067de <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b2:	697a      	ldr	r2, [r7, #20]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00e      	beq.n	80067de <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f001 ff1d 	bl	8008600 <DMA_CheckFifoParam>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d008      	beq.n	80067de <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2240      	movs	r2, #64	; 0x40
 80067d0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2201      	movs	r2, #1
 80067d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e197      	b.n	8006b0e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f001 fe58 	bl	800849c <DMA_CalcBaseAndBitshift>
 80067ec:	4603      	mov	r3, r0
 80067ee:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067f4:	f003 031f 	and.w	r3, r3, #31
 80067f8:	223f      	movs	r2, #63	; 0x3f
 80067fa:	409a      	lsls	r2, r3
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	609a      	str	r2, [r3, #8]
 8006800:	e0cd      	b.n	800699e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a3b      	ldr	r2, [pc, #236]	; (80068f4 <HAL_DMA_Init+0x42c>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d022      	beq.n	8006852 <HAL_DMA_Init+0x38a>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a39      	ldr	r2, [pc, #228]	; (80068f8 <HAL_DMA_Init+0x430>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d01d      	beq.n	8006852 <HAL_DMA_Init+0x38a>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a38      	ldr	r2, [pc, #224]	; (80068fc <HAL_DMA_Init+0x434>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d018      	beq.n	8006852 <HAL_DMA_Init+0x38a>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a36      	ldr	r2, [pc, #216]	; (8006900 <HAL_DMA_Init+0x438>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d013      	beq.n	8006852 <HAL_DMA_Init+0x38a>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a35      	ldr	r2, [pc, #212]	; (8006904 <HAL_DMA_Init+0x43c>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d00e      	beq.n	8006852 <HAL_DMA_Init+0x38a>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a33      	ldr	r2, [pc, #204]	; (8006908 <HAL_DMA_Init+0x440>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d009      	beq.n	8006852 <HAL_DMA_Init+0x38a>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a32      	ldr	r2, [pc, #200]	; (800690c <HAL_DMA_Init+0x444>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d004      	beq.n	8006852 <HAL_DMA_Init+0x38a>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a30      	ldr	r2, [pc, #192]	; (8006910 <HAL_DMA_Init+0x448>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d101      	bne.n	8006856 <HAL_DMA_Init+0x38e>
 8006852:	2301      	movs	r3, #1
 8006854:	e000      	b.n	8006858 <HAL_DMA_Init+0x390>
 8006856:	2300      	movs	r3, #0
 8006858:	2b00      	cmp	r3, #0
 800685a:	f000 8097 	beq.w	800698c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a24      	ldr	r2, [pc, #144]	; (80068f4 <HAL_DMA_Init+0x42c>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d021      	beq.n	80068ac <HAL_DMA_Init+0x3e4>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a22      	ldr	r2, [pc, #136]	; (80068f8 <HAL_DMA_Init+0x430>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d01c      	beq.n	80068ac <HAL_DMA_Init+0x3e4>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a21      	ldr	r2, [pc, #132]	; (80068fc <HAL_DMA_Init+0x434>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d017      	beq.n	80068ac <HAL_DMA_Init+0x3e4>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a1f      	ldr	r2, [pc, #124]	; (8006900 <HAL_DMA_Init+0x438>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d012      	beq.n	80068ac <HAL_DMA_Init+0x3e4>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a1e      	ldr	r2, [pc, #120]	; (8006904 <HAL_DMA_Init+0x43c>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d00d      	beq.n	80068ac <HAL_DMA_Init+0x3e4>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a1c      	ldr	r2, [pc, #112]	; (8006908 <HAL_DMA_Init+0x440>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d008      	beq.n	80068ac <HAL_DMA_Init+0x3e4>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a1b      	ldr	r2, [pc, #108]	; (800690c <HAL_DMA_Init+0x444>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d003      	beq.n	80068ac <HAL_DMA_Init+0x3e4>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a19      	ldr	r2, [pc, #100]	; (8006910 <HAL_DMA_Init+0x448>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2202      	movs	r2, #2
 80068b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80068c6:	697a      	ldr	r2, [r7, #20]
 80068c8:	4b12      	ldr	r3, [pc, #72]	; (8006914 <HAL_DMA_Init+0x44c>)
 80068ca:	4013      	ands	r3, r2
 80068cc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	2b40      	cmp	r3, #64	; 0x40
 80068d4:	d020      	beq.n	8006918 <HAL_DMA_Init+0x450>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	2b80      	cmp	r3, #128	; 0x80
 80068dc:	d102      	bne.n	80068e4 <HAL_DMA_Init+0x41c>
 80068de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80068e2:	e01a      	b.n	800691a <HAL_DMA_Init+0x452>
 80068e4:	2300      	movs	r3, #0
 80068e6:	e018      	b.n	800691a <HAL_DMA_Init+0x452>
 80068e8:	fe10803f 	.word	0xfe10803f
 80068ec:	5c001000 	.word	0x5c001000
 80068f0:	ffff0000 	.word	0xffff0000
 80068f4:	58025408 	.word	0x58025408
 80068f8:	5802541c 	.word	0x5802541c
 80068fc:	58025430 	.word	0x58025430
 8006900:	58025444 	.word	0x58025444
 8006904:	58025458 	.word	0x58025458
 8006908:	5802546c 	.word	0x5802546c
 800690c:	58025480 	.word	0x58025480
 8006910:	58025494 	.word	0x58025494
 8006914:	fffe000f 	.word	0xfffe000f
 8006918:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	68d2      	ldr	r2, [r2, #12]
 800691e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006920:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006928:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006930:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006938:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	69db      	ldr	r3, [r3, #28]
 800693e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006940:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006948:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800694a:	697a      	ldr	r2, [r7, #20]
 800694c:	4313      	orrs	r3, r2
 800694e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	697a      	ldr	r2, [r7, #20]
 8006956:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	461a      	mov	r2, r3
 800695e:	4b6e      	ldr	r3, [pc, #440]	; (8006b18 <HAL_DMA_Init+0x650>)
 8006960:	4413      	add	r3, r2
 8006962:	4a6e      	ldr	r2, [pc, #440]	; (8006b1c <HAL_DMA_Init+0x654>)
 8006964:	fba2 2303 	umull	r2, r3, r2, r3
 8006968:	091b      	lsrs	r3, r3, #4
 800696a:	009a      	lsls	r2, r3, #2
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f001 fd93 	bl	800849c <DMA_CalcBaseAndBitshift>
 8006976:	4603      	mov	r3, r0
 8006978:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800697e:	f003 031f 	and.w	r3, r3, #31
 8006982:	2201      	movs	r2, #1
 8006984:	409a      	lsls	r2, r3
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	605a      	str	r2, [r3, #4]
 800698a:	e008      	b.n	800699e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2240      	movs	r2, #64	; 0x40
 8006990:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2203      	movs	r2, #3
 8006996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e0b7      	b.n	8006b0e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a5f      	ldr	r2, [pc, #380]	; (8006b20 <HAL_DMA_Init+0x658>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d072      	beq.n	8006a8e <HAL_DMA_Init+0x5c6>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a5d      	ldr	r2, [pc, #372]	; (8006b24 <HAL_DMA_Init+0x65c>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d06d      	beq.n	8006a8e <HAL_DMA_Init+0x5c6>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a5c      	ldr	r2, [pc, #368]	; (8006b28 <HAL_DMA_Init+0x660>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d068      	beq.n	8006a8e <HAL_DMA_Init+0x5c6>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a5a      	ldr	r2, [pc, #360]	; (8006b2c <HAL_DMA_Init+0x664>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d063      	beq.n	8006a8e <HAL_DMA_Init+0x5c6>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a59      	ldr	r2, [pc, #356]	; (8006b30 <HAL_DMA_Init+0x668>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d05e      	beq.n	8006a8e <HAL_DMA_Init+0x5c6>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a57      	ldr	r2, [pc, #348]	; (8006b34 <HAL_DMA_Init+0x66c>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d059      	beq.n	8006a8e <HAL_DMA_Init+0x5c6>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a56      	ldr	r2, [pc, #344]	; (8006b38 <HAL_DMA_Init+0x670>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d054      	beq.n	8006a8e <HAL_DMA_Init+0x5c6>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a54      	ldr	r2, [pc, #336]	; (8006b3c <HAL_DMA_Init+0x674>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d04f      	beq.n	8006a8e <HAL_DMA_Init+0x5c6>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a53      	ldr	r2, [pc, #332]	; (8006b40 <HAL_DMA_Init+0x678>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d04a      	beq.n	8006a8e <HAL_DMA_Init+0x5c6>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a51      	ldr	r2, [pc, #324]	; (8006b44 <HAL_DMA_Init+0x67c>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d045      	beq.n	8006a8e <HAL_DMA_Init+0x5c6>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a50      	ldr	r2, [pc, #320]	; (8006b48 <HAL_DMA_Init+0x680>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d040      	beq.n	8006a8e <HAL_DMA_Init+0x5c6>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a4e      	ldr	r2, [pc, #312]	; (8006b4c <HAL_DMA_Init+0x684>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d03b      	beq.n	8006a8e <HAL_DMA_Init+0x5c6>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a4d      	ldr	r2, [pc, #308]	; (8006b50 <HAL_DMA_Init+0x688>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d036      	beq.n	8006a8e <HAL_DMA_Init+0x5c6>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a4b      	ldr	r2, [pc, #300]	; (8006b54 <HAL_DMA_Init+0x68c>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d031      	beq.n	8006a8e <HAL_DMA_Init+0x5c6>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a4a      	ldr	r2, [pc, #296]	; (8006b58 <HAL_DMA_Init+0x690>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d02c      	beq.n	8006a8e <HAL_DMA_Init+0x5c6>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a48      	ldr	r2, [pc, #288]	; (8006b5c <HAL_DMA_Init+0x694>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d027      	beq.n	8006a8e <HAL_DMA_Init+0x5c6>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a47      	ldr	r2, [pc, #284]	; (8006b60 <HAL_DMA_Init+0x698>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d022      	beq.n	8006a8e <HAL_DMA_Init+0x5c6>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a45      	ldr	r2, [pc, #276]	; (8006b64 <HAL_DMA_Init+0x69c>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d01d      	beq.n	8006a8e <HAL_DMA_Init+0x5c6>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a44      	ldr	r2, [pc, #272]	; (8006b68 <HAL_DMA_Init+0x6a0>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d018      	beq.n	8006a8e <HAL_DMA_Init+0x5c6>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a42      	ldr	r2, [pc, #264]	; (8006b6c <HAL_DMA_Init+0x6a4>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d013      	beq.n	8006a8e <HAL_DMA_Init+0x5c6>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a41      	ldr	r2, [pc, #260]	; (8006b70 <HAL_DMA_Init+0x6a8>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d00e      	beq.n	8006a8e <HAL_DMA_Init+0x5c6>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a3f      	ldr	r2, [pc, #252]	; (8006b74 <HAL_DMA_Init+0x6ac>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d009      	beq.n	8006a8e <HAL_DMA_Init+0x5c6>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a3e      	ldr	r2, [pc, #248]	; (8006b78 <HAL_DMA_Init+0x6b0>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d004      	beq.n	8006a8e <HAL_DMA_Init+0x5c6>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a3c      	ldr	r2, [pc, #240]	; (8006b7c <HAL_DMA_Init+0x6b4>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d101      	bne.n	8006a92 <HAL_DMA_Init+0x5ca>
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e000      	b.n	8006a94 <HAL_DMA_Init+0x5cc>
 8006a92:	2300      	movs	r3, #0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d032      	beq.n	8006afe <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f001 fe2d 	bl	80086f8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	2b80      	cmp	r3, #128	; 0x80
 8006aa4:	d102      	bne.n	8006aac <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685a      	ldr	r2, [r3, #4]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ab4:	b2d2      	uxtb	r2, r2
 8006ab6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006ac0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d010      	beq.n	8006aec <HAL_DMA_Init+0x624>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	2b08      	cmp	r3, #8
 8006ad0:	d80c      	bhi.n	8006aec <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f001 feaa 	bl	800882c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006adc:	2200      	movs	r2, #0
 8006ade:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006ae8:	605a      	str	r2, [r3, #4]
 8006aea:	e008      	b.n	8006afe <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3718      	adds	r7, #24
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	a7fdabf8 	.word	0xa7fdabf8
 8006b1c:	cccccccd 	.word	0xcccccccd
 8006b20:	40020010 	.word	0x40020010
 8006b24:	40020028 	.word	0x40020028
 8006b28:	40020040 	.word	0x40020040
 8006b2c:	40020058 	.word	0x40020058
 8006b30:	40020070 	.word	0x40020070
 8006b34:	40020088 	.word	0x40020088
 8006b38:	400200a0 	.word	0x400200a0
 8006b3c:	400200b8 	.word	0x400200b8
 8006b40:	40020410 	.word	0x40020410
 8006b44:	40020428 	.word	0x40020428
 8006b48:	40020440 	.word	0x40020440
 8006b4c:	40020458 	.word	0x40020458
 8006b50:	40020470 	.word	0x40020470
 8006b54:	40020488 	.word	0x40020488
 8006b58:	400204a0 	.word	0x400204a0
 8006b5c:	400204b8 	.word	0x400204b8
 8006b60:	58025408 	.word	0x58025408
 8006b64:	5802541c 	.word	0x5802541c
 8006b68:	58025430 	.word	0x58025430
 8006b6c:	58025444 	.word	0x58025444
 8006b70:	58025458 	.word	0x58025458
 8006b74:	5802546c 	.word	0x5802546c
 8006b78:	58025480 	.word	0x58025480
 8006b7c:	58025494 	.word	0x58025494

08006b80 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b086      	sub	sp, #24
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006b88:	f7fd fe04 	bl	8004794 <HAL_GetTick>
 8006b8c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d101      	bne.n	8006b98 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e2dc      	b.n	8007152 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d008      	beq.n	8006bb6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2280      	movs	r2, #128	; 0x80
 8006ba8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e2cd      	b.n	8007152 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a76      	ldr	r2, [pc, #472]	; (8006d94 <HAL_DMA_Abort+0x214>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d04a      	beq.n	8006c56 <HAL_DMA_Abort+0xd6>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a74      	ldr	r2, [pc, #464]	; (8006d98 <HAL_DMA_Abort+0x218>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d045      	beq.n	8006c56 <HAL_DMA_Abort+0xd6>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a73      	ldr	r2, [pc, #460]	; (8006d9c <HAL_DMA_Abort+0x21c>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d040      	beq.n	8006c56 <HAL_DMA_Abort+0xd6>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a71      	ldr	r2, [pc, #452]	; (8006da0 <HAL_DMA_Abort+0x220>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d03b      	beq.n	8006c56 <HAL_DMA_Abort+0xd6>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a70      	ldr	r2, [pc, #448]	; (8006da4 <HAL_DMA_Abort+0x224>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d036      	beq.n	8006c56 <HAL_DMA_Abort+0xd6>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a6e      	ldr	r2, [pc, #440]	; (8006da8 <HAL_DMA_Abort+0x228>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d031      	beq.n	8006c56 <HAL_DMA_Abort+0xd6>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a6d      	ldr	r2, [pc, #436]	; (8006dac <HAL_DMA_Abort+0x22c>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d02c      	beq.n	8006c56 <HAL_DMA_Abort+0xd6>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a6b      	ldr	r2, [pc, #428]	; (8006db0 <HAL_DMA_Abort+0x230>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d027      	beq.n	8006c56 <HAL_DMA_Abort+0xd6>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a6a      	ldr	r2, [pc, #424]	; (8006db4 <HAL_DMA_Abort+0x234>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d022      	beq.n	8006c56 <HAL_DMA_Abort+0xd6>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a68      	ldr	r2, [pc, #416]	; (8006db8 <HAL_DMA_Abort+0x238>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d01d      	beq.n	8006c56 <HAL_DMA_Abort+0xd6>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a67      	ldr	r2, [pc, #412]	; (8006dbc <HAL_DMA_Abort+0x23c>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d018      	beq.n	8006c56 <HAL_DMA_Abort+0xd6>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a65      	ldr	r2, [pc, #404]	; (8006dc0 <HAL_DMA_Abort+0x240>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d013      	beq.n	8006c56 <HAL_DMA_Abort+0xd6>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a64      	ldr	r2, [pc, #400]	; (8006dc4 <HAL_DMA_Abort+0x244>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d00e      	beq.n	8006c56 <HAL_DMA_Abort+0xd6>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a62      	ldr	r2, [pc, #392]	; (8006dc8 <HAL_DMA_Abort+0x248>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d009      	beq.n	8006c56 <HAL_DMA_Abort+0xd6>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a61      	ldr	r2, [pc, #388]	; (8006dcc <HAL_DMA_Abort+0x24c>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d004      	beq.n	8006c56 <HAL_DMA_Abort+0xd6>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a5f      	ldr	r2, [pc, #380]	; (8006dd0 <HAL_DMA_Abort+0x250>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d101      	bne.n	8006c5a <HAL_DMA_Abort+0xda>
 8006c56:	2301      	movs	r3, #1
 8006c58:	e000      	b.n	8006c5c <HAL_DMA_Abort+0xdc>
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d013      	beq.n	8006c88 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f022 021e 	bic.w	r2, r2, #30
 8006c6e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	695a      	ldr	r2, [r3, #20]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c7e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	617b      	str	r3, [r7, #20]
 8006c86:	e00a      	b.n	8006c9e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f022 020e 	bic.w	r2, r2, #14
 8006c96:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a3c      	ldr	r2, [pc, #240]	; (8006d94 <HAL_DMA_Abort+0x214>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d072      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a3a      	ldr	r2, [pc, #232]	; (8006d98 <HAL_DMA_Abort+0x218>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d06d      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a39      	ldr	r2, [pc, #228]	; (8006d9c <HAL_DMA_Abort+0x21c>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d068      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a37      	ldr	r2, [pc, #220]	; (8006da0 <HAL_DMA_Abort+0x220>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d063      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a36      	ldr	r2, [pc, #216]	; (8006da4 <HAL_DMA_Abort+0x224>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d05e      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a34      	ldr	r2, [pc, #208]	; (8006da8 <HAL_DMA_Abort+0x228>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d059      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a33      	ldr	r2, [pc, #204]	; (8006dac <HAL_DMA_Abort+0x22c>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d054      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a31      	ldr	r2, [pc, #196]	; (8006db0 <HAL_DMA_Abort+0x230>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d04f      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a30      	ldr	r2, [pc, #192]	; (8006db4 <HAL_DMA_Abort+0x234>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d04a      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a2e      	ldr	r2, [pc, #184]	; (8006db8 <HAL_DMA_Abort+0x238>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d045      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a2d      	ldr	r2, [pc, #180]	; (8006dbc <HAL_DMA_Abort+0x23c>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d040      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a2b      	ldr	r2, [pc, #172]	; (8006dc0 <HAL_DMA_Abort+0x240>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d03b      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a2a      	ldr	r2, [pc, #168]	; (8006dc4 <HAL_DMA_Abort+0x244>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d036      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a28      	ldr	r2, [pc, #160]	; (8006dc8 <HAL_DMA_Abort+0x248>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d031      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a27      	ldr	r2, [pc, #156]	; (8006dcc <HAL_DMA_Abort+0x24c>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d02c      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a25      	ldr	r2, [pc, #148]	; (8006dd0 <HAL_DMA_Abort+0x250>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d027      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a24      	ldr	r2, [pc, #144]	; (8006dd4 <HAL_DMA_Abort+0x254>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d022      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a22      	ldr	r2, [pc, #136]	; (8006dd8 <HAL_DMA_Abort+0x258>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d01d      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a21      	ldr	r2, [pc, #132]	; (8006ddc <HAL_DMA_Abort+0x25c>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d018      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a1f      	ldr	r2, [pc, #124]	; (8006de0 <HAL_DMA_Abort+0x260>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d013      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a1e      	ldr	r2, [pc, #120]	; (8006de4 <HAL_DMA_Abort+0x264>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d00e      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a1c      	ldr	r2, [pc, #112]	; (8006de8 <HAL_DMA_Abort+0x268>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d009      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a1b      	ldr	r2, [pc, #108]	; (8006dec <HAL_DMA_Abort+0x26c>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d004      	beq.n	8006d8e <HAL_DMA_Abort+0x20e>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a19      	ldr	r2, [pc, #100]	; (8006df0 <HAL_DMA_Abort+0x270>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d132      	bne.n	8006df4 <HAL_DMA_Abort+0x274>
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e031      	b.n	8006df6 <HAL_DMA_Abort+0x276>
 8006d92:	bf00      	nop
 8006d94:	40020010 	.word	0x40020010
 8006d98:	40020028 	.word	0x40020028
 8006d9c:	40020040 	.word	0x40020040
 8006da0:	40020058 	.word	0x40020058
 8006da4:	40020070 	.word	0x40020070
 8006da8:	40020088 	.word	0x40020088
 8006dac:	400200a0 	.word	0x400200a0
 8006db0:	400200b8 	.word	0x400200b8
 8006db4:	40020410 	.word	0x40020410
 8006db8:	40020428 	.word	0x40020428
 8006dbc:	40020440 	.word	0x40020440
 8006dc0:	40020458 	.word	0x40020458
 8006dc4:	40020470 	.word	0x40020470
 8006dc8:	40020488 	.word	0x40020488
 8006dcc:	400204a0 	.word	0x400204a0
 8006dd0:	400204b8 	.word	0x400204b8
 8006dd4:	58025408 	.word	0x58025408
 8006dd8:	5802541c 	.word	0x5802541c
 8006ddc:	58025430 	.word	0x58025430
 8006de0:	58025444 	.word	0x58025444
 8006de4:	58025458 	.word	0x58025458
 8006de8:	5802546c 	.word	0x5802546c
 8006dec:	58025480 	.word	0x58025480
 8006df0:	58025494 	.word	0x58025494
 8006df4:	2300      	movs	r3, #0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d007      	beq.n	8006e0a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e08:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a6d      	ldr	r2, [pc, #436]	; (8006fc4 <HAL_DMA_Abort+0x444>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d04a      	beq.n	8006eaa <HAL_DMA_Abort+0x32a>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a6b      	ldr	r2, [pc, #428]	; (8006fc8 <HAL_DMA_Abort+0x448>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d045      	beq.n	8006eaa <HAL_DMA_Abort+0x32a>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a6a      	ldr	r2, [pc, #424]	; (8006fcc <HAL_DMA_Abort+0x44c>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d040      	beq.n	8006eaa <HAL_DMA_Abort+0x32a>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a68      	ldr	r2, [pc, #416]	; (8006fd0 <HAL_DMA_Abort+0x450>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d03b      	beq.n	8006eaa <HAL_DMA_Abort+0x32a>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a67      	ldr	r2, [pc, #412]	; (8006fd4 <HAL_DMA_Abort+0x454>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d036      	beq.n	8006eaa <HAL_DMA_Abort+0x32a>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a65      	ldr	r2, [pc, #404]	; (8006fd8 <HAL_DMA_Abort+0x458>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d031      	beq.n	8006eaa <HAL_DMA_Abort+0x32a>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a64      	ldr	r2, [pc, #400]	; (8006fdc <HAL_DMA_Abort+0x45c>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d02c      	beq.n	8006eaa <HAL_DMA_Abort+0x32a>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a62      	ldr	r2, [pc, #392]	; (8006fe0 <HAL_DMA_Abort+0x460>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d027      	beq.n	8006eaa <HAL_DMA_Abort+0x32a>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a61      	ldr	r2, [pc, #388]	; (8006fe4 <HAL_DMA_Abort+0x464>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d022      	beq.n	8006eaa <HAL_DMA_Abort+0x32a>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a5f      	ldr	r2, [pc, #380]	; (8006fe8 <HAL_DMA_Abort+0x468>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d01d      	beq.n	8006eaa <HAL_DMA_Abort+0x32a>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a5e      	ldr	r2, [pc, #376]	; (8006fec <HAL_DMA_Abort+0x46c>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d018      	beq.n	8006eaa <HAL_DMA_Abort+0x32a>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a5c      	ldr	r2, [pc, #368]	; (8006ff0 <HAL_DMA_Abort+0x470>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d013      	beq.n	8006eaa <HAL_DMA_Abort+0x32a>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a5b      	ldr	r2, [pc, #364]	; (8006ff4 <HAL_DMA_Abort+0x474>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d00e      	beq.n	8006eaa <HAL_DMA_Abort+0x32a>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a59      	ldr	r2, [pc, #356]	; (8006ff8 <HAL_DMA_Abort+0x478>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d009      	beq.n	8006eaa <HAL_DMA_Abort+0x32a>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a58      	ldr	r2, [pc, #352]	; (8006ffc <HAL_DMA_Abort+0x47c>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d004      	beq.n	8006eaa <HAL_DMA_Abort+0x32a>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a56      	ldr	r2, [pc, #344]	; (8007000 <HAL_DMA_Abort+0x480>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d108      	bne.n	8006ebc <HAL_DMA_Abort+0x33c>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f022 0201 	bic.w	r2, r2, #1
 8006eb8:	601a      	str	r2, [r3, #0]
 8006eba:	e007      	b.n	8006ecc <HAL_DMA_Abort+0x34c>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f022 0201 	bic.w	r2, r2, #1
 8006eca:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006ecc:	e013      	b.n	8006ef6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006ece:	f7fd fc61 	bl	8004794 <HAL_GetTick>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	1ad3      	subs	r3, r2, r3
 8006ed8:	2b05      	cmp	r3, #5
 8006eda:	d90c      	bls.n	8006ef6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2220      	movs	r2, #32
 8006ee0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2203      	movs	r2, #3
 8006ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e12d      	b.n	8007152 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f003 0301 	and.w	r3, r3, #1
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1e5      	bne.n	8006ece <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a2f      	ldr	r2, [pc, #188]	; (8006fc4 <HAL_DMA_Abort+0x444>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d04a      	beq.n	8006fa2 <HAL_DMA_Abort+0x422>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a2d      	ldr	r2, [pc, #180]	; (8006fc8 <HAL_DMA_Abort+0x448>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d045      	beq.n	8006fa2 <HAL_DMA_Abort+0x422>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a2c      	ldr	r2, [pc, #176]	; (8006fcc <HAL_DMA_Abort+0x44c>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d040      	beq.n	8006fa2 <HAL_DMA_Abort+0x422>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a2a      	ldr	r2, [pc, #168]	; (8006fd0 <HAL_DMA_Abort+0x450>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d03b      	beq.n	8006fa2 <HAL_DMA_Abort+0x422>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a29      	ldr	r2, [pc, #164]	; (8006fd4 <HAL_DMA_Abort+0x454>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d036      	beq.n	8006fa2 <HAL_DMA_Abort+0x422>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a27      	ldr	r2, [pc, #156]	; (8006fd8 <HAL_DMA_Abort+0x458>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d031      	beq.n	8006fa2 <HAL_DMA_Abort+0x422>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a26      	ldr	r2, [pc, #152]	; (8006fdc <HAL_DMA_Abort+0x45c>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d02c      	beq.n	8006fa2 <HAL_DMA_Abort+0x422>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a24      	ldr	r2, [pc, #144]	; (8006fe0 <HAL_DMA_Abort+0x460>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d027      	beq.n	8006fa2 <HAL_DMA_Abort+0x422>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a23      	ldr	r2, [pc, #140]	; (8006fe4 <HAL_DMA_Abort+0x464>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d022      	beq.n	8006fa2 <HAL_DMA_Abort+0x422>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a21      	ldr	r2, [pc, #132]	; (8006fe8 <HAL_DMA_Abort+0x468>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d01d      	beq.n	8006fa2 <HAL_DMA_Abort+0x422>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a20      	ldr	r2, [pc, #128]	; (8006fec <HAL_DMA_Abort+0x46c>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d018      	beq.n	8006fa2 <HAL_DMA_Abort+0x422>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a1e      	ldr	r2, [pc, #120]	; (8006ff0 <HAL_DMA_Abort+0x470>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d013      	beq.n	8006fa2 <HAL_DMA_Abort+0x422>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a1d      	ldr	r2, [pc, #116]	; (8006ff4 <HAL_DMA_Abort+0x474>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d00e      	beq.n	8006fa2 <HAL_DMA_Abort+0x422>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a1b      	ldr	r2, [pc, #108]	; (8006ff8 <HAL_DMA_Abort+0x478>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d009      	beq.n	8006fa2 <HAL_DMA_Abort+0x422>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a1a      	ldr	r2, [pc, #104]	; (8006ffc <HAL_DMA_Abort+0x47c>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d004      	beq.n	8006fa2 <HAL_DMA_Abort+0x422>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a18      	ldr	r2, [pc, #96]	; (8007000 <HAL_DMA_Abort+0x480>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d101      	bne.n	8006fa6 <HAL_DMA_Abort+0x426>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e000      	b.n	8006fa8 <HAL_DMA_Abort+0x428>
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d02b      	beq.n	8007004 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fb0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fb6:	f003 031f 	and.w	r3, r3, #31
 8006fba:	223f      	movs	r2, #63	; 0x3f
 8006fbc:	409a      	lsls	r2, r3
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	609a      	str	r2, [r3, #8]
 8006fc2:	e02a      	b.n	800701a <HAL_DMA_Abort+0x49a>
 8006fc4:	40020010 	.word	0x40020010
 8006fc8:	40020028 	.word	0x40020028
 8006fcc:	40020040 	.word	0x40020040
 8006fd0:	40020058 	.word	0x40020058
 8006fd4:	40020070 	.word	0x40020070
 8006fd8:	40020088 	.word	0x40020088
 8006fdc:	400200a0 	.word	0x400200a0
 8006fe0:	400200b8 	.word	0x400200b8
 8006fe4:	40020410 	.word	0x40020410
 8006fe8:	40020428 	.word	0x40020428
 8006fec:	40020440 	.word	0x40020440
 8006ff0:	40020458 	.word	0x40020458
 8006ff4:	40020470 	.word	0x40020470
 8006ff8:	40020488 	.word	0x40020488
 8006ffc:	400204a0 	.word	0x400204a0
 8007000:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007008:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800700e:	f003 031f 	and.w	r3, r3, #31
 8007012:	2201      	movs	r2, #1
 8007014:	409a      	lsls	r2, r3
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a4f      	ldr	r2, [pc, #316]	; (800715c <HAL_DMA_Abort+0x5dc>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d072      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a4d      	ldr	r2, [pc, #308]	; (8007160 <HAL_DMA_Abort+0x5e0>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d06d      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a4c      	ldr	r2, [pc, #304]	; (8007164 <HAL_DMA_Abort+0x5e4>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d068      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a4a      	ldr	r2, [pc, #296]	; (8007168 <HAL_DMA_Abort+0x5e8>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d063      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a49      	ldr	r2, [pc, #292]	; (800716c <HAL_DMA_Abort+0x5ec>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d05e      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a47      	ldr	r2, [pc, #284]	; (8007170 <HAL_DMA_Abort+0x5f0>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d059      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a46      	ldr	r2, [pc, #280]	; (8007174 <HAL_DMA_Abort+0x5f4>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d054      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a44      	ldr	r2, [pc, #272]	; (8007178 <HAL_DMA_Abort+0x5f8>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d04f      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a43      	ldr	r2, [pc, #268]	; (800717c <HAL_DMA_Abort+0x5fc>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d04a      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a41      	ldr	r2, [pc, #260]	; (8007180 <HAL_DMA_Abort+0x600>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d045      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a40      	ldr	r2, [pc, #256]	; (8007184 <HAL_DMA_Abort+0x604>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d040      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a3e      	ldr	r2, [pc, #248]	; (8007188 <HAL_DMA_Abort+0x608>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d03b      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a3d      	ldr	r2, [pc, #244]	; (800718c <HAL_DMA_Abort+0x60c>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d036      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a3b      	ldr	r2, [pc, #236]	; (8007190 <HAL_DMA_Abort+0x610>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d031      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a3a      	ldr	r2, [pc, #232]	; (8007194 <HAL_DMA_Abort+0x614>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d02c      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a38      	ldr	r2, [pc, #224]	; (8007198 <HAL_DMA_Abort+0x618>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d027      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a37      	ldr	r2, [pc, #220]	; (800719c <HAL_DMA_Abort+0x61c>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d022      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a35      	ldr	r2, [pc, #212]	; (80071a0 <HAL_DMA_Abort+0x620>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d01d      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a34      	ldr	r2, [pc, #208]	; (80071a4 <HAL_DMA_Abort+0x624>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d018      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a32      	ldr	r2, [pc, #200]	; (80071a8 <HAL_DMA_Abort+0x628>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d013      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a31      	ldr	r2, [pc, #196]	; (80071ac <HAL_DMA_Abort+0x62c>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d00e      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a2f      	ldr	r2, [pc, #188]	; (80071b0 <HAL_DMA_Abort+0x630>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d009      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a2e      	ldr	r2, [pc, #184]	; (80071b4 <HAL_DMA_Abort+0x634>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d004      	beq.n	800710a <HAL_DMA_Abort+0x58a>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a2c      	ldr	r2, [pc, #176]	; (80071b8 <HAL_DMA_Abort+0x638>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d101      	bne.n	800710e <HAL_DMA_Abort+0x58e>
 800710a:	2301      	movs	r3, #1
 800710c:	e000      	b.n	8007110 <HAL_DMA_Abort+0x590>
 800710e:	2300      	movs	r3, #0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d015      	beq.n	8007140 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800711c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00c      	beq.n	8007140 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007130:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007134:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800713e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3718      	adds	r7, #24
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	40020010 	.word	0x40020010
 8007160:	40020028 	.word	0x40020028
 8007164:	40020040 	.word	0x40020040
 8007168:	40020058 	.word	0x40020058
 800716c:	40020070 	.word	0x40020070
 8007170:	40020088 	.word	0x40020088
 8007174:	400200a0 	.word	0x400200a0
 8007178:	400200b8 	.word	0x400200b8
 800717c:	40020410 	.word	0x40020410
 8007180:	40020428 	.word	0x40020428
 8007184:	40020440 	.word	0x40020440
 8007188:	40020458 	.word	0x40020458
 800718c:	40020470 	.word	0x40020470
 8007190:	40020488 	.word	0x40020488
 8007194:	400204a0 	.word	0x400204a0
 8007198:	400204b8 	.word	0x400204b8
 800719c:	58025408 	.word	0x58025408
 80071a0:	5802541c 	.word	0x5802541c
 80071a4:	58025430 	.word	0x58025430
 80071a8:	58025444 	.word	0x58025444
 80071ac:	58025458 	.word	0x58025458
 80071b0:	5802546c 	.word	0x5802546c
 80071b4:	58025480 	.word	0x58025480
 80071b8:	58025494 	.word	0x58025494

080071bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d101      	bne.n	80071ce <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e237      	b.n	800763e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	d004      	beq.n	80071e4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2280      	movs	r2, #128	; 0x80
 80071de:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	e22c      	b.n	800763e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a5c      	ldr	r2, [pc, #368]	; (800735c <HAL_DMA_Abort_IT+0x1a0>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d04a      	beq.n	8007284 <HAL_DMA_Abort_IT+0xc8>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a5b      	ldr	r2, [pc, #364]	; (8007360 <HAL_DMA_Abort_IT+0x1a4>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d045      	beq.n	8007284 <HAL_DMA_Abort_IT+0xc8>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a59      	ldr	r2, [pc, #356]	; (8007364 <HAL_DMA_Abort_IT+0x1a8>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d040      	beq.n	8007284 <HAL_DMA_Abort_IT+0xc8>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a58      	ldr	r2, [pc, #352]	; (8007368 <HAL_DMA_Abort_IT+0x1ac>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d03b      	beq.n	8007284 <HAL_DMA_Abort_IT+0xc8>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a56      	ldr	r2, [pc, #344]	; (800736c <HAL_DMA_Abort_IT+0x1b0>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d036      	beq.n	8007284 <HAL_DMA_Abort_IT+0xc8>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a55      	ldr	r2, [pc, #340]	; (8007370 <HAL_DMA_Abort_IT+0x1b4>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d031      	beq.n	8007284 <HAL_DMA_Abort_IT+0xc8>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a53      	ldr	r2, [pc, #332]	; (8007374 <HAL_DMA_Abort_IT+0x1b8>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d02c      	beq.n	8007284 <HAL_DMA_Abort_IT+0xc8>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a52      	ldr	r2, [pc, #328]	; (8007378 <HAL_DMA_Abort_IT+0x1bc>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d027      	beq.n	8007284 <HAL_DMA_Abort_IT+0xc8>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a50      	ldr	r2, [pc, #320]	; (800737c <HAL_DMA_Abort_IT+0x1c0>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d022      	beq.n	8007284 <HAL_DMA_Abort_IT+0xc8>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a4f      	ldr	r2, [pc, #316]	; (8007380 <HAL_DMA_Abort_IT+0x1c4>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d01d      	beq.n	8007284 <HAL_DMA_Abort_IT+0xc8>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a4d      	ldr	r2, [pc, #308]	; (8007384 <HAL_DMA_Abort_IT+0x1c8>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d018      	beq.n	8007284 <HAL_DMA_Abort_IT+0xc8>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a4c      	ldr	r2, [pc, #304]	; (8007388 <HAL_DMA_Abort_IT+0x1cc>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d013      	beq.n	8007284 <HAL_DMA_Abort_IT+0xc8>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a4a      	ldr	r2, [pc, #296]	; (800738c <HAL_DMA_Abort_IT+0x1d0>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d00e      	beq.n	8007284 <HAL_DMA_Abort_IT+0xc8>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a49      	ldr	r2, [pc, #292]	; (8007390 <HAL_DMA_Abort_IT+0x1d4>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d009      	beq.n	8007284 <HAL_DMA_Abort_IT+0xc8>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a47      	ldr	r2, [pc, #284]	; (8007394 <HAL_DMA_Abort_IT+0x1d8>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d004      	beq.n	8007284 <HAL_DMA_Abort_IT+0xc8>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a46      	ldr	r2, [pc, #280]	; (8007398 <HAL_DMA_Abort_IT+0x1dc>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d101      	bne.n	8007288 <HAL_DMA_Abort_IT+0xcc>
 8007284:	2301      	movs	r3, #1
 8007286:	e000      	b.n	800728a <HAL_DMA_Abort_IT+0xce>
 8007288:	2300      	movs	r3, #0
 800728a:	2b00      	cmp	r3, #0
 800728c:	f000 8086 	beq.w	800739c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2204      	movs	r2, #4
 8007294:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a2f      	ldr	r2, [pc, #188]	; (800735c <HAL_DMA_Abort_IT+0x1a0>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d04a      	beq.n	8007338 <HAL_DMA_Abort_IT+0x17c>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a2e      	ldr	r2, [pc, #184]	; (8007360 <HAL_DMA_Abort_IT+0x1a4>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d045      	beq.n	8007338 <HAL_DMA_Abort_IT+0x17c>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a2c      	ldr	r2, [pc, #176]	; (8007364 <HAL_DMA_Abort_IT+0x1a8>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d040      	beq.n	8007338 <HAL_DMA_Abort_IT+0x17c>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a2b      	ldr	r2, [pc, #172]	; (8007368 <HAL_DMA_Abort_IT+0x1ac>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d03b      	beq.n	8007338 <HAL_DMA_Abort_IT+0x17c>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a29      	ldr	r2, [pc, #164]	; (800736c <HAL_DMA_Abort_IT+0x1b0>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d036      	beq.n	8007338 <HAL_DMA_Abort_IT+0x17c>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a28      	ldr	r2, [pc, #160]	; (8007370 <HAL_DMA_Abort_IT+0x1b4>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d031      	beq.n	8007338 <HAL_DMA_Abort_IT+0x17c>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a26      	ldr	r2, [pc, #152]	; (8007374 <HAL_DMA_Abort_IT+0x1b8>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d02c      	beq.n	8007338 <HAL_DMA_Abort_IT+0x17c>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a25      	ldr	r2, [pc, #148]	; (8007378 <HAL_DMA_Abort_IT+0x1bc>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d027      	beq.n	8007338 <HAL_DMA_Abort_IT+0x17c>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a23      	ldr	r2, [pc, #140]	; (800737c <HAL_DMA_Abort_IT+0x1c0>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d022      	beq.n	8007338 <HAL_DMA_Abort_IT+0x17c>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a22      	ldr	r2, [pc, #136]	; (8007380 <HAL_DMA_Abort_IT+0x1c4>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d01d      	beq.n	8007338 <HAL_DMA_Abort_IT+0x17c>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a20      	ldr	r2, [pc, #128]	; (8007384 <HAL_DMA_Abort_IT+0x1c8>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d018      	beq.n	8007338 <HAL_DMA_Abort_IT+0x17c>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a1f      	ldr	r2, [pc, #124]	; (8007388 <HAL_DMA_Abort_IT+0x1cc>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d013      	beq.n	8007338 <HAL_DMA_Abort_IT+0x17c>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a1d      	ldr	r2, [pc, #116]	; (800738c <HAL_DMA_Abort_IT+0x1d0>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d00e      	beq.n	8007338 <HAL_DMA_Abort_IT+0x17c>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a1c      	ldr	r2, [pc, #112]	; (8007390 <HAL_DMA_Abort_IT+0x1d4>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d009      	beq.n	8007338 <HAL_DMA_Abort_IT+0x17c>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a1a      	ldr	r2, [pc, #104]	; (8007394 <HAL_DMA_Abort_IT+0x1d8>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d004      	beq.n	8007338 <HAL_DMA_Abort_IT+0x17c>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a19      	ldr	r2, [pc, #100]	; (8007398 <HAL_DMA_Abort_IT+0x1dc>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d108      	bne.n	800734a <HAL_DMA_Abort_IT+0x18e>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f022 0201 	bic.w	r2, r2, #1
 8007346:	601a      	str	r2, [r3, #0]
 8007348:	e178      	b.n	800763c <HAL_DMA_Abort_IT+0x480>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f022 0201 	bic.w	r2, r2, #1
 8007358:	601a      	str	r2, [r3, #0]
 800735a:	e16f      	b.n	800763c <HAL_DMA_Abort_IT+0x480>
 800735c:	40020010 	.word	0x40020010
 8007360:	40020028 	.word	0x40020028
 8007364:	40020040 	.word	0x40020040
 8007368:	40020058 	.word	0x40020058
 800736c:	40020070 	.word	0x40020070
 8007370:	40020088 	.word	0x40020088
 8007374:	400200a0 	.word	0x400200a0
 8007378:	400200b8 	.word	0x400200b8
 800737c:	40020410 	.word	0x40020410
 8007380:	40020428 	.word	0x40020428
 8007384:	40020440 	.word	0x40020440
 8007388:	40020458 	.word	0x40020458
 800738c:	40020470 	.word	0x40020470
 8007390:	40020488 	.word	0x40020488
 8007394:	400204a0 	.word	0x400204a0
 8007398:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f022 020e 	bic.w	r2, r2, #14
 80073aa:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a6c      	ldr	r2, [pc, #432]	; (8007564 <HAL_DMA_Abort_IT+0x3a8>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d04a      	beq.n	800744c <HAL_DMA_Abort_IT+0x290>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a6b      	ldr	r2, [pc, #428]	; (8007568 <HAL_DMA_Abort_IT+0x3ac>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d045      	beq.n	800744c <HAL_DMA_Abort_IT+0x290>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a69      	ldr	r2, [pc, #420]	; (800756c <HAL_DMA_Abort_IT+0x3b0>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d040      	beq.n	800744c <HAL_DMA_Abort_IT+0x290>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a68      	ldr	r2, [pc, #416]	; (8007570 <HAL_DMA_Abort_IT+0x3b4>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d03b      	beq.n	800744c <HAL_DMA_Abort_IT+0x290>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a66      	ldr	r2, [pc, #408]	; (8007574 <HAL_DMA_Abort_IT+0x3b8>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d036      	beq.n	800744c <HAL_DMA_Abort_IT+0x290>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a65      	ldr	r2, [pc, #404]	; (8007578 <HAL_DMA_Abort_IT+0x3bc>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d031      	beq.n	800744c <HAL_DMA_Abort_IT+0x290>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a63      	ldr	r2, [pc, #396]	; (800757c <HAL_DMA_Abort_IT+0x3c0>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d02c      	beq.n	800744c <HAL_DMA_Abort_IT+0x290>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a62      	ldr	r2, [pc, #392]	; (8007580 <HAL_DMA_Abort_IT+0x3c4>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d027      	beq.n	800744c <HAL_DMA_Abort_IT+0x290>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a60      	ldr	r2, [pc, #384]	; (8007584 <HAL_DMA_Abort_IT+0x3c8>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d022      	beq.n	800744c <HAL_DMA_Abort_IT+0x290>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a5f      	ldr	r2, [pc, #380]	; (8007588 <HAL_DMA_Abort_IT+0x3cc>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d01d      	beq.n	800744c <HAL_DMA_Abort_IT+0x290>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a5d      	ldr	r2, [pc, #372]	; (800758c <HAL_DMA_Abort_IT+0x3d0>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d018      	beq.n	800744c <HAL_DMA_Abort_IT+0x290>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a5c      	ldr	r2, [pc, #368]	; (8007590 <HAL_DMA_Abort_IT+0x3d4>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d013      	beq.n	800744c <HAL_DMA_Abort_IT+0x290>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a5a      	ldr	r2, [pc, #360]	; (8007594 <HAL_DMA_Abort_IT+0x3d8>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d00e      	beq.n	800744c <HAL_DMA_Abort_IT+0x290>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a59      	ldr	r2, [pc, #356]	; (8007598 <HAL_DMA_Abort_IT+0x3dc>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d009      	beq.n	800744c <HAL_DMA_Abort_IT+0x290>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a57      	ldr	r2, [pc, #348]	; (800759c <HAL_DMA_Abort_IT+0x3e0>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d004      	beq.n	800744c <HAL_DMA_Abort_IT+0x290>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a56      	ldr	r2, [pc, #344]	; (80075a0 <HAL_DMA_Abort_IT+0x3e4>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d108      	bne.n	800745e <HAL_DMA_Abort_IT+0x2a2>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f022 0201 	bic.w	r2, r2, #1
 800745a:	601a      	str	r2, [r3, #0]
 800745c:	e007      	b.n	800746e <HAL_DMA_Abort_IT+0x2b2>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f022 0201 	bic.w	r2, r2, #1
 800746c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a3c      	ldr	r2, [pc, #240]	; (8007564 <HAL_DMA_Abort_IT+0x3a8>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d072      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a3a      	ldr	r2, [pc, #232]	; (8007568 <HAL_DMA_Abort_IT+0x3ac>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d06d      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a39      	ldr	r2, [pc, #228]	; (800756c <HAL_DMA_Abort_IT+0x3b0>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d068      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a37      	ldr	r2, [pc, #220]	; (8007570 <HAL_DMA_Abort_IT+0x3b4>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d063      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a36      	ldr	r2, [pc, #216]	; (8007574 <HAL_DMA_Abort_IT+0x3b8>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d05e      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a34      	ldr	r2, [pc, #208]	; (8007578 <HAL_DMA_Abort_IT+0x3bc>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d059      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a33      	ldr	r2, [pc, #204]	; (800757c <HAL_DMA_Abort_IT+0x3c0>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d054      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a31      	ldr	r2, [pc, #196]	; (8007580 <HAL_DMA_Abort_IT+0x3c4>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d04f      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a30      	ldr	r2, [pc, #192]	; (8007584 <HAL_DMA_Abort_IT+0x3c8>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d04a      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a2e      	ldr	r2, [pc, #184]	; (8007588 <HAL_DMA_Abort_IT+0x3cc>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d045      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a2d      	ldr	r2, [pc, #180]	; (800758c <HAL_DMA_Abort_IT+0x3d0>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d040      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a2b      	ldr	r2, [pc, #172]	; (8007590 <HAL_DMA_Abort_IT+0x3d4>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d03b      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a2a      	ldr	r2, [pc, #168]	; (8007594 <HAL_DMA_Abort_IT+0x3d8>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d036      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a28      	ldr	r2, [pc, #160]	; (8007598 <HAL_DMA_Abort_IT+0x3dc>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d031      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a27      	ldr	r2, [pc, #156]	; (800759c <HAL_DMA_Abort_IT+0x3e0>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d02c      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a25      	ldr	r2, [pc, #148]	; (80075a0 <HAL_DMA_Abort_IT+0x3e4>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d027      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a24      	ldr	r2, [pc, #144]	; (80075a4 <HAL_DMA_Abort_IT+0x3e8>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d022      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a22      	ldr	r2, [pc, #136]	; (80075a8 <HAL_DMA_Abort_IT+0x3ec>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d01d      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a21      	ldr	r2, [pc, #132]	; (80075ac <HAL_DMA_Abort_IT+0x3f0>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d018      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a1f      	ldr	r2, [pc, #124]	; (80075b0 <HAL_DMA_Abort_IT+0x3f4>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d013      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a1e      	ldr	r2, [pc, #120]	; (80075b4 <HAL_DMA_Abort_IT+0x3f8>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d00e      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a1c      	ldr	r2, [pc, #112]	; (80075b8 <HAL_DMA_Abort_IT+0x3fc>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d009      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a1b      	ldr	r2, [pc, #108]	; (80075bc <HAL_DMA_Abort_IT+0x400>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d004      	beq.n	800755e <HAL_DMA_Abort_IT+0x3a2>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a19      	ldr	r2, [pc, #100]	; (80075c0 <HAL_DMA_Abort_IT+0x404>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d132      	bne.n	80075c4 <HAL_DMA_Abort_IT+0x408>
 800755e:	2301      	movs	r3, #1
 8007560:	e031      	b.n	80075c6 <HAL_DMA_Abort_IT+0x40a>
 8007562:	bf00      	nop
 8007564:	40020010 	.word	0x40020010
 8007568:	40020028 	.word	0x40020028
 800756c:	40020040 	.word	0x40020040
 8007570:	40020058 	.word	0x40020058
 8007574:	40020070 	.word	0x40020070
 8007578:	40020088 	.word	0x40020088
 800757c:	400200a0 	.word	0x400200a0
 8007580:	400200b8 	.word	0x400200b8
 8007584:	40020410 	.word	0x40020410
 8007588:	40020428 	.word	0x40020428
 800758c:	40020440 	.word	0x40020440
 8007590:	40020458 	.word	0x40020458
 8007594:	40020470 	.word	0x40020470
 8007598:	40020488 	.word	0x40020488
 800759c:	400204a0 	.word	0x400204a0
 80075a0:	400204b8 	.word	0x400204b8
 80075a4:	58025408 	.word	0x58025408
 80075a8:	5802541c 	.word	0x5802541c
 80075ac:	58025430 	.word	0x58025430
 80075b0:	58025444 	.word	0x58025444
 80075b4:	58025458 	.word	0x58025458
 80075b8:	5802546c 	.word	0x5802546c
 80075bc:	58025480 	.word	0x58025480
 80075c0:	58025494 	.word	0x58025494
 80075c4:	2300      	movs	r3, #0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d028      	beq.n	800761c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075d8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075de:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075e4:	f003 031f 	and.w	r3, r3, #31
 80075e8:	2201      	movs	r2, #1
 80075ea:	409a      	lsls	r2, r3
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80075f8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00c      	beq.n	800761c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800760c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007610:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800761a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007630:	2b00      	cmp	r3, #0
 8007632:	d003      	beq.n	800763c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop

08007648 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b08a      	sub	sp, #40	; 0x28
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007650:	2300      	movs	r3, #0
 8007652:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007654:	4b67      	ldr	r3, [pc, #412]	; (80077f4 <HAL_DMA_IRQHandler+0x1ac>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a67      	ldr	r2, [pc, #412]	; (80077f8 <HAL_DMA_IRQHandler+0x1b0>)
 800765a:	fba2 2303 	umull	r2, r3, r2, r3
 800765e:	0a9b      	lsrs	r3, r3, #10
 8007660:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007666:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800766c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800766e:	6a3b      	ldr	r3, [r7, #32]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a5f      	ldr	r2, [pc, #380]	; (80077fc <HAL_DMA_IRQHandler+0x1b4>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d04a      	beq.n	800771a <HAL_DMA_IRQHandler+0xd2>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a5d      	ldr	r2, [pc, #372]	; (8007800 <HAL_DMA_IRQHandler+0x1b8>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d045      	beq.n	800771a <HAL_DMA_IRQHandler+0xd2>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a5c      	ldr	r2, [pc, #368]	; (8007804 <HAL_DMA_IRQHandler+0x1bc>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d040      	beq.n	800771a <HAL_DMA_IRQHandler+0xd2>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a5a      	ldr	r2, [pc, #360]	; (8007808 <HAL_DMA_IRQHandler+0x1c0>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d03b      	beq.n	800771a <HAL_DMA_IRQHandler+0xd2>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a59      	ldr	r2, [pc, #356]	; (800780c <HAL_DMA_IRQHandler+0x1c4>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d036      	beq.n	800771a <HAL_DMA_IRQHandler+0xd2>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a57      	ldr	r2, [pc, #348]	; (8007810 <HAL_DMA_IRQHandler+0x1c8>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d031      	beq.n	800771a <HAL_DMA_IRQHandler+0xd2>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a56      	ldr	r2, [pc, #344]	; (8007814 <HAL_DMA_IRQHandler+0x1cc>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d02c      	beq.n	800771a <HAL_DMA_IRQHandler+0xd2>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a54      	ldr	r2, [pc, #336]	; (8007818 <HAL_DMA_IRQHandler+0x1d0>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d027      	beq.n	800771a <HAL_DMA_IRQHandler+0xd2>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a53      	ldr	r2, [pc, #332]	; (800781c <HAL_DMA_IRQHandler+0x1d4>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d022      	beq.n	800771a <HAL_DMA_IRQHandler+0xd2>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a51      	ldr	r2, [pc, #324]	; (8007820 <HAL_DMA_IRQHandler+0x1d8>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d01d      	beq.n	800771a <HAL_DMA_IRQHandler+0xd2>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a50      	ldr	r2, [pc, #320]	; (8007824 <HAL_DMA_IRQHandler+0x1dc>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d018      	beq.n	800771a <HAL_DMA_IRQHandler+0xd2>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a4e      	ldr	r2, [pc, #312]	; (8007828 <HAL_DMA_IRQHandler+0x1e0>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d013      	beq.n	800771a <HAL_DMA_IRQHandler+0xd2>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a4d      	ldr	r2, [pc, #308]	; (800782c <HAL_DMA_IRQHandler+0x1e4>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d00e      	beq.n	800771a <HAL_DMA_IRQHandler+0xd2>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a4b      	ldr	r2, [pc, #300]	; (8007830 <HAL_DMA_IRQHandler+0x1e8>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d009      	beq.n	800771a <HAL_DMA_IRQHandler+0xd2>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a4a      	ldr	r2, [pc, #296]	; (8007834 <HAL_DMA_IRQHandler+0x1ec>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d004      	beq.n	800771a <HAL_DMA_IRQHandler+0xd2>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a48      	ldr	r2, [pc, #288]	; (8007838 <HAL_DMA_IRQHandler+0x1f0>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d101      	bne.n	800771e <HAL_DMA_IRQHandler+0xd6>
 800771a:	2301      	movs	r3, #1
 800771c:	e000      	b.n	8007720 <HAL_DMA_IRQHandler+0xd8>
 800771e:	2300      	movs	r3, #0
 8007720:	2b00      	cmp	r3, #0
 8007722:	f000 842b 	beq.w	8007f7c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800772a:	f003 031f 	and.w	r3, r3, #31
 800772e:	2208      	movs	r2, #8
 8007730:	409a      	lsls	r2, r3
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	4013      	ands	r3, r2
 8007736:	2b00      	cmp	r3, #0
 8007738:	f000 80a2 	beq.w	8007880 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a2e      	ldr	r2, [pc, #184]	; (80077fc <HAL_DMA_IRQHandler+0x1b4>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d04a      	beq.n	80077dc <HAL_DMA_IRQHandler+0x194>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a2d      	ldr	r2, [pc, #180]	; (8007800 <HAL_DMA_IRQHandler+0x1b8>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d045      	beq.n	80077dc <HAL_DMA_IRQHandler+0x194>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a2b      	ldr	r2, [pc, #172]	; (8007804 <HAL_DMA_IRQHandler+0x1bc>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d040      	beq.n	80077dc <HAL_DMA_IRQHandler+0x194>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a2a      	ldr	r2, [pc, #168]	; (8007808 <HAL_DMA_IRQHandler+0x1c0>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d03b      	beq.n	80077dc <HAL_DMA_IRQHandler+0x194>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a28      	ldr	r2, [pc, #160]	; (800780c <HAL_DMA_IRQHandler+0x1c4>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d036      	beq.n	80077dc <HAL_DMA_IRQHandler+0x194>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a27      	ldr	r2, [pc, #156]	; (8007810 <HAL_DMA_IRQHandler+0x1c8>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d031      	beq.n	80077dc <HAL_DMA_IRQHandler+0x194>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a25      	ldr	r2, [pc, #148]	; (8007814 <HAL_DMA_IRQHandler+0x1cc>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d02c      	beq.n	80077dc <HAL_DMA_IRQHandler+0x194>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a24      	ldr	r2, [pc, #144]	; (8007818 <HAL_DMA_IRQHandler+0x1d0>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d027      	beq.n	80077dc <HAL_DMA_IRQHandler+0x194>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a22      	ldr	r2, [pc, #136]	; (800781c <HAL_DMA_IRQHandler+0x1d4>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d022      	beq.n	80077dc <HAL_DMA_IRQHandler+0x194>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a21      	ldr	r2, [pc, #132]	; (8007820 <HAL_DMA_IRQHandler+0x1d8>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d01d      	beq.n	80077dc <HAL_DMA_IRQHandler+0x194>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a1f      	ldr	r2, [pc, #124]	; (8007824 <HAL_DMA_IRQHandler+0x1dc>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d018      	beq.n	80077dc <HAL_DMA_IRQHandler+0x194>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a1e      	ldr	r2, [pc, #120]	; (8007828 <HAL_DMA_IRQHandler+0x1e0>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d013      	beq.n	80077dc <HAL_DMA_IRQHandler+0x194>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a1c      	ldr	r2, [pc, #112]	; (800782c <HAL_DMA_IRQHandler+0x1e4>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d00e      	beq.n	80077dc <HAL_DMA_IRQHandler+0x194>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a1b      	ldr	r2, [pc, #108]	; (8007830 <HAL_DMA_IRQHandler+0x1e8>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d009      	beq.n	80077dc <HAL_DMA_IRQHandler+0x194>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a19      	ldr	r2, [pc, #100]	; (8007834 <HAL_DMA_IRQHandler+0x1ec>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d004      	beq.n	80077dc <HAL_DMA_IRQHandler+0x194>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a18      	ldr	r2, [pc, #96]	; (8007838 <HAL_DMA_IRQHandler+0x1f0>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d12f      	bne.n	800783c <HAL_DMA_IRQHandler+0x1f4>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f003 0304 	and.w	r3, r3, #4
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	bf14      	ite	ne
 80077ea:	2301      	movne	r3, #1
 80077ec:	2300      	moveq	r3, #0
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	e02e      	b.n	8007850 <HAL_DMA_IRQHandler+0x208>
 80077f2:	bf00      	nop
 80077f4:	20000014 	.word	0x20000014
 80077f8:	1b4e81b5 	.word	0x1b4e81b5
 80077fc:	40020010 	.word	0x40020010
 8007800:	40020028 	.word	0x40020028
 8007804:	40020040 	.word	0x40020040
 8007808:	40020058 	.word	0x40020058
 800780c:	40020070 	.word	0x40020070
 8007810:	40020088 	.word	0x40020088
 8007814:	400200a0 	.word	0x400200a0
 8007818:	400200b8 	.word	0x400200b8
 800781c:	40020410 	.word	0x40020410
 8007820:	40020428 	.word	0x40020428
 8007824:	40020440 	.word	0x40020440
 8007828:	40020458 	.word	0x40020458
 800782c:	40020470 	.word	0x40020470
 8007830:	40020488 	.word	0x40020488
 8007834:	400204a0 	.word	0x400204a0
 8007838:	400204b8 	.word	0x400204b8
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f003 0308 	and.w	r3, r3, #8
 8007846:	2b00      	cmp	r3, #0
 8007848:	bf14      	ite	ne
 800784a:	2301      	movne	r3, #1
 800784c:	2300      	moveq	r3, #0
 800784e:	b2db      	uxtb	r3, r3
 8007850:	2b00      	cmp	r3, #0
 8007852:	d015      	beq.n	8007880 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f022 0204 	bic.w	r2, r2, #4
 8007862:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007868:	f003 031f 	and.w	r3, r3, #31
 800786c:	2208      	movs	r2, #8
 800786e:	409a      	lsls	r2, r3
 8007870:	6a3b      	ldr	r3, [r7, #32]
 8007872:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007878:	f043 0201 	orr.w	r2, r3, #1
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007884:	f003 031f 	and.w	r3, r3, #31
 8007888:	69ba      	ldr	r2, [r7, #24]
 800788a:	fa22 f303 	lsr.w	r3, r2, r3
 800788e:	f003 0301 	and.w	r3, r3, #1
 8007892:	2b00      	cmp	r3, #0
 8007894:	d06e      	beq.n	8007974 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a69      	ldr	r2, [pc, #420]	; (8007a40 <HAL_DMA_IRQHandler+0x3f8>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d04a      	beq.n	8007936 <HAL_DMA_IRQHandler+0x2ee>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a67      	ldr	r2, [pc, #412]	; (8007a44 <HAL_DMA_IRQHandler+0x3fc>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d045      	beq.n	8007936 <HAL_DMA_IRQHandler+0x2ee>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a66      	ldr	r2, [pc, #408]	; (8007a48 <HAL_DMA_IRQHandler+0x400>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d040      	beq.n	8007936 <HAL_DMA_IRQHandler+0x2ee>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a64      	ldr	r2, [pc, #400]	; (8007a4c <HAL_DMA_IRQHandler+0x404>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d03b      	beq.n	8007936 <HAL_DMA_IRQHandler+0x2ee>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a63      	ldr	r2, [pc, #396]	; (8007a50 <HAL_DMA_IRQHandler+0x408>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d036      	beq.n	8007936 <HAL_DMA_IRQHandler+0x2ee>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a61      	ldr	r2, [pc, #388]	; (8007a54 <HAL_DMA_IRQHandler+0x40c>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d031      	beq.n	8007936 <HAL_DMA_IRQHandler+0x2ee>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a60      	ldr	r2, [pc, #384]	; (8007a58 <HAL_DMA_IRQHandler+0x410>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d02c      	beq.n	8007936 <HAL_DMA_IRQHandler+0x2ee>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a5e      	ldr	r2, [pc, #376]	; (8007a5c <HAL_DMA_IRQHandler+0x414>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d027      	beq.n	8007936 <HAL_DMA_IRQHandler+0x2ee>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a5d      	ldr	r2, [pc, #372]	; (8007a60 <HAL_DMA_IRQHandler+0x418>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d022      	beq.n	8007936 <HAL_DMA_IRQHandler+0x2ee>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a5b      	ldr	r2, [pc, #364]	; (8007a64 <HAL_DMA_IRQHandler+0x41c>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d01d      	beq.n	8007936 <HAL_DMA_IRQHandler+0x2ee>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a5a      	ldr	r2, [pc, #360]	; (8007a68 <HAL_DMA_IRQHandler+0x420>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d018      	beq.n	8007936 <HAL_DMA_IRQHandler+0x2ee>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a58      	ldr	r2, [pc, #352]	; (8007a6c <HAL_DMA_IRQHandler+0x424>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d013      	beq.n	8007936 <HAL_DMA_IRQHandler+0x2ee>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a57      	ldr	r2, [pc, #348]	; (8007a70 <HAL_DMA_IRQHandler+0x428>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d00e      	beq.n	8007936 <HAL_DMA_IRQHandler+0x2ee>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a55      	ldr	r2, [pc, #340]	; (8007a74 <HAL_DMA_IRQHandler+0x42c>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d009      	beq.n	8007936 <HAL_DMA_IRQHandler+0x2ee>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a54      	ldr	r2, [pc, #336]	; (8007a78 <HAL_DMA_IRQHandler+0x430>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d004      	beq.n	8007936 <HAL_DMA_IRQHandler+0x2ee>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a52      	ldr	r2, [pc, #328]	; (8007a7c <HAL_DMA_IRQHandler+0x434>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d10a      	bne.n	800794c <HAL_DMA_IRQHandler+0x304>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	695b      	ldr	r3, [r3, #20]
 800793c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007940:	2b00      	cmp	r3, #0
 8007942:	bf14      	ite	ne
 8007944:	2301      	movne	r3, #1
 8007946:	2300      	moveq	r3, #0
 8007948:	b2db      	uxtb	r3, r3
 800794a:	e003      	b.n	8007954 <HAL_DMA_IRQHandler+0x30c>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2300      	movs	r3, #0
 8007954:	2b00      	cmp	r3, #0
 8007956:	d00d      	beq.n	8007974 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800795c:	f003 031f 	and.w	r3, r3, #31
 8007960:	2201      	movs	r2, #1
 8007962:	409a      	lsls	r2, r3
 8007964:	6a3b      	ldr	r3, [r7, #32]
 8007966:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800796c:	f043 0202 	orr.w	r2, r3, #2
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007978:	f003 031f 	and.w	r3, r3, #31
 800797c:	2204      	movs	r2, #4
 800797e:	409a      	lsls	r2, r3
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	4013      	ands	r3, r2
 8007984:	2b00      	cmp	r3, #0
 8007986:	f000 808f 	beq.w	8007aa8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a2c      	ldr	r2, [pc, #176]	; (8007a40 <HAL_DMA_IRQHandler+0x3f8>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d04a      	beq.n	8007a2a <HAL_DMA_IRQHandler+0x3e2>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a2a      	ldr	r2, [pc, #168]	; (8007a44 <HAL_DMA_IRQHandler+0x3fc>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d045      	beq.n	8007a2a <HAL_DMA_IRQHandler+0x3e2>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a29      	ldr	r2, [pc, #164]	; (8007a48 <HAL_DMA_IRQHandler+0x400>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d040      	beq.n	8007a2a <HAL_DMA_IRQHandler+0x3e2>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a27      	ldr	r2, [pc, #156]	; (8007a4c <HAL_DMA_IRQHandler+0x404>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d03b      	beq.n	8007a2a <HAL_DMA_IRQHandler+0x3e2>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a26      	ldr	r2, [pc, #152]	; (8007a50 <HAL_DMA_IRQHandler+0x408>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d036      	beq.n	8007a2a <HAL_DMA_IRQHandler+0x3e2>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a24      	ldr	r2, [pc, #144]	; (8007a54 <HAL_DMA_IRQHandler+0x40c>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d031      	beq.n	8007a2a <HAL_DMA_IRQHandler+0x3e2>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a23      	ldr	r2, [pc, #140]	; (8007a58 <HAL_DMA_IRQHandler+0x410>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d02c      	beq.n	8007a2a <HAL_DMA_IRQHandler+0x3e2>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a21      	ldr	r2, [pc, #132]	; (8007a5c <HAL_DMA_IRQHandler+0x414>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d027      	beq.n	8007a2a <HAL_DMA_IRQHandler+0x3e2>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a20      	ldr	r2, [pc, #128]	; (8007a60 <HAL_DMA_IRQHandler+0x418>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d022      	beq.n	8007a2a <HAL_DMA_IRQHandler+0x3e2>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a1e      	ldr	r2, [pc, #120]	; (8007a64 <HAL_DMA_IRQHandler+0x41c>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d01d      	beq.n	8007a2a <HAL_DMA_IRQHandler+0x3e2>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a1d      	ldr	r2, [pc, #116]	; (8007a68 <HAL_DMA_IRQHandler+0x420>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d018      	beq.n	8007a2a <HAL_DMA_IRQHandler+0x3e2>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a1b      	ldr	r2, [pc, #108]	; (8007a6c <HAL_DMA_IRQHandler+0x424>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d013      	beq.n	8007a2a <HAL_DMA_IRQHandler+0x3e2>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a1a      	ldr	r2, [pc, #104]	; (8007a70 <HAL_DMA_IRQHandler+0x428>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d00e      	beq.n	8007a2a <HAL_DMA_IRQHandler+0x3e2>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a18      	ldr	r2, [pc, #96]	; (8007a74 <HAL_DMA_IRQHandler+0x42c>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d009      	beq.n	8007a2a <HAL_DMA_IRQHandler+0x3e2>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a17      	ldr	r2, [pc, #92]	; (8007a78 <HAL_DMA_IRQHandler+0x430>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d004      	beq.n	8007a2a <HAL_DMA_IRQHandler+0x3e2>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a15      	ldr	r2, [pc, #84]	; (8007a7c <HAL_DMA_IRQHandler+0x434>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d12a      	bne.n	8007a80 <HAL_DMA_IRQHandler+0x438>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 0302 	and.w	r3, r3, #2
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	bf14      	ite	ne
 8007a38:	2301      	movne	r3, #1
 8007a3a:	2300      	moveq	r3, #0
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	e023      	b.n	8007a88 <HAL_DMA_IRQHandler+0x440>
 8007a40:	40020010 	.word	0x40020010
 8007a44:	40020028 	.word	0x40020028
 8007a48:	40020040 	.word	0x40020040
 8007a4c:	40020058 	.word	0x40020058
 8007a50:	40020070 	.word	0x40020070
 8007a54:	40020088 	.word	0x40020088
 8007a58:	400200a0 	.word	0x400200a0
 8007a5c:	400200b8 	.word	0x400200b8
 8007a60:	40020410 	.word	0x40020410
 8007a64:	40020428 	.word	0x40020428
 8007a68:	40020440 	.word	0x40020440
 8007a6c:	40020458 	.word	0x40020458
 8007a70:	40020470 	.word	0x40020470
 8007a74:	40020488 	.word	0x40020488
 8007a78:	400204a0 	.word	0x400204a0
 8007a7c:	400204b8 	.word	0x400204b8
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2300      	movs	r3, #0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00d      	beq.n	8007aa8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a90:	f003 031f 	and.w	r3, r3, #31
 8007a94:	2204      	movs	r2, #4
 8007a96:	409a      	lsls	r2, r3
 8007a98:	6a3b      	ldr	r3, [r7, #32]
 8007a9a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aa0:	f043 0204 	orr.w	r2, r3, #4
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aac:	f003 031f 	and.w	r3, r3, #31
 8007ab0:	2210      	movs	r2, #16
 8007ab2:	409a      	lsls	r2, r3
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f000 80a6 	beq.w	8007c0a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a85      	ldr	r2, [pc, #532]	; (8007cd8 <HAL_DMA_IRQHandler+0x690>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d04a      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x516>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a83      	ldr	r2, [pc, #524]	; (8007cdc <HAL_DMA_IRQHandler+0x694>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d045      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x516>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a82      	ldr	r2, [pc, #520]	; (8007ce0 <HAL_DMA_IRQHandler+0x698>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d040      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x516>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a80      	ldr	r2, [pc, #512]	; (8007ce4 <HAL_DMA_IRQHandler+0x69c>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d03b      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x516>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a7f      	ldr	r2, [pc, #508]	; (8007ce8 <HAL_DMA_IRQHandler+0x6a0>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d036      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x516>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a7d      	ldr	r2, [pc, #500]	; (8007cec <HAL_DMA_IRQHandler+0x6a4>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d031      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x516>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a7c      	ldr	r2, [pc, #496]	; (8007cf0 <HAL_DMA_IRQHandler+0x6a8>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d02c      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x516>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a7a      	ldr	r2, [pc, #488]	; (8007cf4 <HAL_DMA_IRQHandler+0x6ac>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d027      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x516>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a79      	ldr	r2, [pc, #484]	; (8007cf8 <HAL_DMA_IRQHandler+0x6b0>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d022      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x516>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a77      	ldr	r2, [pc, #476]	; (8007cfc <HAL_DMA_IRQHandler+0x6b4>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d01d      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x516>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a76      	ldr	r2, [pc, #472]	; (8007d00 <HAL_DMA_IRQHandler+0x6b8>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d018      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x516>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a74      	ldr	r2, [pc, #464]	; (8007d04 <HAL_DMA_IRQHandler+0x6bc>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d013      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x516>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a73      	ldr	r2, [pc, #460]	; (8007d08 <HAL_DMA_IRQHandler+0x6c0>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d00e      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x516>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a71      	ldr	r2, [pc, #452]	; (8007d0c <HAL_DMA_IRQHandler+0x6c4>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d009      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x516>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a70      	ldr	r2, [pc, #448]	; (8007d10 <HAL_DMA_IRQHandler+0x6c8>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d004      	beq.n	8007b5e <HAL_DMA_IRQHandler+0x516>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a6e      	ldr	r2, [pc, #440]	; (8007d14 <HAL_DMA_IRQHandler+0x6cc>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d10a      	bne.n	8007b74 <HAL_DMA_IRQHandler+0x52c>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 0308 	and.w	r3, r3, #8
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	bf14      	ite	ne
 8007b6c:	2301      	movne	r3, #1
 8007b6e:	2300      	moveq	r3, #0
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	e009      	b.n	8007b88 <HAL_DMA_IRQHandler+0x540>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f003 0304 	and.w	r3, r3, #4
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	bf14      	ite	ne
 8007b82:	2301      	movne	r3, #1
 8007b84:	2300      	moveq	r3, #0
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d03e      	beq.n	8007c0a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b90:	f003 031f 	and.w	r3, r3, #31
 8007b94:	2210      	movs	r2, #16
 8007b96:	409a      	lsls	r2, r3
 8007b98:	6a3b      	ldr	r3, [r7, #32]
 8007b9a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d018      	beq.n	8007bdc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d108      	bne.n	8007bca <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d024      	beq.n	8007c0a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	4798      	blx	r3
 8007bc8:	e01f      	b.n	8007c0a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d01b      	beq.n	8007c0a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	4798      	blx	r3
 8007bda:	e016      	b.n	8007c0a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d107      	bne.n	8007bfa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f022 0208 	bic.w	r2, r2, #8
 8007bf8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d003      	beq.n	8007c0a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c0e:	f003 031f 	and.w	r3, r3, #31
 8007c12:	2220      	movs	r2, #32
 8007c14:	409a      	lsls	r2, r3
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	4013      	ands	r3, r2
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	f000 8110 	beq.w	8007e40 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a2c      	ldr	r2, [pc, #176]	; (8007cd8 <HAL_DMA_IRQHandler+0x690>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d04a      	beq.n	8007cc0 <HAL_DMA_IRQHandler+0x678>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a2b      	ldr	r2, [pc, #172]	; (8007cdc <HAL_DMA_IRQHandler+0x694>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d045      	beq.n	8007cc0 <HAL_DMA_IRQHandler+0x678>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a29      	ldr	r2, [pc, #164]	; (8007ce0 <HAL_DMA_IRQHandler+0x698>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d040      	beq.n	8007cc0 <HAL_DMA_IRQHandler+0x678>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a28      	ldr	r2, [pc, #160]	; (8007ce4 <HAL_DMA_IRQHandler+0x69c>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d03b      	beq.n	8007cc0 <HAL_DMA_IRQHandler+0x678>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a26      	ldr	r2, [pc, #152]	; (8007ce8 <HAL_DMA_IRQHandler+0x6a0>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d036      	beq.n	8007cc0 <HAL_DMA_IRQHandler+0x678>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a25      	ldr	r2, [pc, #148]	; (8007cec <HAL_DMA_IRQHandler+0x6a4>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d031      	beq.n	8007cc0 <HAL_DMA_IRQHandler+0x678>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a23      	ldr	r2, [pc, #140]	; (8007cf0 <HAL_DMA_IRQHandler+0x6a8>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d02c      	beq.n	8007cc0 <HAL_DMA_IRQHandler+0x678>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a22      	ldr	r2, [pc, #136]	; (8007cf4 <HAL_DMA_IRQHandler+0x6ac>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d027      	beq.n	8007cc0 <HAL_DMA_IRQHandler+0x678>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a20      	ldr	r2, [pc, #128]	; (8007cf8 <HAL_DMA_IRQHandler+0x6b0>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d022      	beq.n	8007cc0 <HAL_DMA_IRQHandler+0x678>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a1f      	ldr	r2, [pc, #124]	; (8007cfc <HAL_DMA_IRQHandler+0x6b4>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d01d      	beq.n	8007cc0 <HAL_DMA_IRQHandler+0x678>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a1d      	ldr	r2, [pc, #116]	; (8007d00 <HAL_DMA_IRQHandler+0x6b8>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d018      	beq.n	8007cc0 <HAL_DMA_IRQHandler+0x678>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a1c      	ldr	r2, [pc, #112]	; (8007d04 <HAL_DMA_IRQHandler+0x6bc>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d013      	beq.n	8007cc0 <HAL_DMA_IRQHandler+0x678>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a1a      	ldr	r2, [pc, #104]	; (8007d08 <HAL_DMA_IRQHandler+0x6c0>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d00e      	beq.n	8007cc0 <HAL_DMA_IRQHandler+0x678>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a19      	ldr	r2, [pc, #100]	; (8007d0c <HAL_DMA_IRQHandler+0x6c4>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d009      	beq.n	8007cc0 <HAL_DMA_IRQHandler+0x678>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a17      	ldr	r2, [pc, #92]	; (8007d10 <HAL_DMA_IRQHandler+0x6c8>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d004      	beq.n	8007cc0 <HAL_DMA_IRQHandler+0x678>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a16      	ldr	r2, [pc, #88]	; (8007d14 <HAL_DMA_IRQHandler+0x6cc>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d12b      	bne.n	8007d18 <HAL_DMA_IRQHandler+0x6d0>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f003 0310 	and.w	r3, r3, #16
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	bf14      	ite	ne
 8007cce:	2301      	movne	r3, #1
 8007cd0:	2300      	moveq	r3, #0
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	e02a      	b.n	8007d2c <HAL_DMA_IRQHandler+0x6e4>
 8007cd6:	bf00      	nop
 8007cd8:	40020010 	.word	0x40020010
 8007cdc:	40020028 	.word	0x40020028
 8007ce0:	40020040 	.word	0x40020040
 8007ce4:	40020058 	.word	0x40020058
 8007ce8:	40020070 	.word	0x40020070
 8007cec:	40020088 	.word	0x40020088
 8007cf0:	400200a0 	.word	0x400200a0
 8007cf4:	400200b8 	.word	0x400200b8
 8007cf8:	40020410 	.word	0x40020410
 8007cfc:	40020428 	.word	0x40020428
 8007d00:	40020440 	.word	0x40020440
 8007d04:	40020458 	.word	0x40020458
 8007d08:	40020470 	.word	0x40020470
 8007d0c:	40020488 	.word	0x40020488
 8007d10:	400204a0 	.word	0x400204a0
 8007d14:	400204b8 	.word	0x400204b8
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 0302 	and.w	r3, r3, #2
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	bf14      	ite	ne
 8007d26:	2301      	movne	r3, #1
 8007d28:	2300      	moveq	r3, #0
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	f000 8087 	beq.w	8007e40 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d36:	f003 031f 	and.w	r3, r3, #31
 8007d3a:	2220      	movs	r2, #32
 8007d3c:	409a      	lsls	r2, r3
 8007d3e:	6a3b      	ldr	r3, [r7, #32]
 8007d40:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	2b04      	cmp	r3, #4
 8007d4c:	d139      	bne.n	8007dc2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f022 0216 	bic.w	r2, r2, #22
 8007d5c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	695a      	ldr	r2, [r3, #20]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d6c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d103      	bne.n	8007d7e <HAL_DMA_IRQHandler+0x736>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d007      	beq.n	8007d8e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f022 0208 	bic.w	r2, r2, #8
 8007d8c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d92:	f003 031f 	and.w	r3, r3, #31
 8007d96:	223f      	movs	r2, #63	; 0x3f
 8007d98:	409a      	lsls	r2, r3
 8007d9a:	6a3b      	ldr	r3, [r7, #32]
 8007d9c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2201      	movs	r2, #1
 8007da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	f000 834a 	beq.w	800844c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	4798      	blx	r3
          }
          return;
 8007dc0:	e344      	b.n	800844c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d018      	beq.n	8007e02 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d108      	bne.n	8007df0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d02c      	beq.n	8007e40 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	4798      	blx	r3
 8007dee:	e027      	b.n	8007e40 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d023      	beq.n	8007e40 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	4798      	blx	r3
 8007e00:	e01e      	b.n	8007e40 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d10f      	bne.n	8007e30 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f022 0210 	bic.w	r2, r2, #16
 8007e1e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d003      	beq.n	8007e40 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	f000 8306 	beq.w	8008456 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e4e:	f003 0301 	and.w	r3, r3, #1
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	f000 8088 	beq.w	8007f68 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2204      	movs	r2, #4
 8007e5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a7a      	ldr	r2, [pc, #488]	; (8008050 <HAL_DMA_IRQHandler+0xa08>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d04a      	beq.n	8007f00 <HAL_DMA_IRQHandler+0x8b8>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a79      	ldr	r2, [pc, #484]	; (8008054 <HAL_DMA_IRQHandler+0xa0c>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d045      	beq.n	8007f00 <HAL_DMA_IRQHandler+0x8b8>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a77      	ldr	r2, [pc, #476]	; (8008058 <HAL_DMA_IRQHandler+0xa10>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d040      	beq.n	8007f00 <HAL_DMA_IRQHandler+0x8b8>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a76      	ldr	r2, [pc, #472]	; (800805c <HAL_DMA_IRQHandler+0xa14>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d03b      	beq.n	8007f00 <HAL_DMA_IRQHandler+0x8b8>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a74      	ldr	r2, [pc, #464]	; (8008060 <HAL_DMA_IRQHandler+0xa18>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d036      	beq.n	8007f00 <HAL_DMA_IRQHandler+0x8b8>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a73      	ldr	r2, [pc, #460]	; (8008064 <HAL_DMA_IRQHandler+0xa1c>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d031      	beq.n	8007f00 <HAL_DMA_IRQHandler+0x8b8>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a71      	ldr	r2, [pc, #452]	; (8008068 <HAL_DMA_IRQHandler+0xa20>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d02c      	beq.n	8007f00 <HAL_DMA_IRQHandler+0x8b8>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a70      	ldr	r2, [pc, #448]	; (800806c <HAL_DMA_IRQHandler+0xa24>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d027      	beq.n	8007f00 <HAL_DMA_IRQHandler+0x8b8>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a6e      	ldr	r2, [pc, #440]	; (8008070 <HAL_DMA_IRQHandler+0xa28>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d022      	beq.n	8007f00 <HAL_DMA_IRQHandler+0x8b8>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a6d      	ldr	r2, [pc, #436]	; (8008074 <HAL_DMA_IRQHandler+0xa2c>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d01d      	beq.n	8007f00 <HAL_DMA_IRQHandler+0x8b8>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a6b      	ldr	r2, [pc, #428]	; (8008078 <HAL_DMA_IRQHandler+0xa30>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d018      	beq.n	8007f00 <HAL_DMA_IRQHandler+0x8b8>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a6a      	ldr	r2, [pc, #424]	; (800807c <HAL_DMA_IRQHandler+0xa34>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d013      	beq.n	8007f00 <HAL_DMA_IRQHandler+0x8b8>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a68      	ldr	r2, [pc, #416]	; (8008080 <HAL_DMA_IRQHandler+0xa38>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d00e      	beq.n	8007f00 <HAL_DMA_IRQHandler+0x8b8>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a67      	ldr	r2, [pc, #412]	; (8008084 <HAL_DMA_IRQHandler+0xa3c>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d009      	beq.n	8007f00 <HAL_DMA_IRQHandler+0x8b8>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a65      	ldr	r2, [pc, #404]	; (8008088 <HAL_DMA_IRQHandler+0xa40>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d004      	beq.n	8007f00 <HAL_DMA_IRQHandler+0x8b8>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a64      	ldr	r2, [pc, #400]	; (800808c <HAL_DMA_IRQHandler+0xa44>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d108      	bne.n	8007f12 <HAL_DMA_IRQHandler+0x8ca>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f022 0201 	bic.w	r2, r2, #1
 8007f0e:	601a      	str	r2, [r3, #0]
 8007f10:	e007      	b.n	8007f22 <HAL_DMA_IRQHandler+0x8da>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f022 0201 	bic.w	r2, r2, #1
 8007f20:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	3301      	adds	r3, #1
 8007f26:	60fb      	str	r3, [r7, #12]
 8007f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d307      	bcc.n	8007f3e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f003 0301 	and.w	r3, r3, #1
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d1f2      	bne.n	8007f22 <HAL_DMA_IRQHandler+0x8da>
 8007f3c:	e000      	b.n	8007f40 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007f3e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f003 0301 	and.w	r3, r3, #1
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d004      	beq.n	8007f58 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2203      	movs	r2, #3
 8007f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007f56:	e003      	b.n	8007f60 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	f000 8272 	beq.w	8008456 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	4798      	blx	r3
 8007f7a:	e26c      	b.n	8008456 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a43      	ldr	r2, [pc, #268]	; (8008090 <HAL_DMA_IRQHandler+0xa48>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d022      	beq.n	8007fcc <HAL_DMA_IRQHandler+0x984>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a42      	ldr	r2, [pc, #264]	; (8008094 <HAL_DMA_IRQHandler+0xa4c>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d01d      	beq.n	8007fcc <HAL_DMA_IRQHandler+0x984>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a40      	ldr	r2, [pc, #256]	; (8008098 <HAL_DMA_IRQHandler+0xa50>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d018      	beq.n	8007fcc <HAL_DMA_IRQHandler+0x984>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a3f      	ldr	r2, [pc, #252]	; (800809c <HAL_DMA_IRQHandler+0xa54>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d013      	beq.n	8007fcc <HAL_DMA_IRQHandler+0x984>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a3d      	ldr	r2, [pc, #244]	; (80080a0 <HAL_DMA_IRQHandler+0xa58>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d00e      	beq.n	8007fcc <HAL_DMA_IRQHandler+0x984>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a3c      	ldr	r2, [pc, #240]	; (80080a4 <HAL_DMA_IRQHandler+0xa5c>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d009      	beq.n	8007fcc <HAL_DMA_IRQHandler+0x984>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a3a      	ldr	r2, [pc, #232]	; (80080a8 <HAL_DMA_IRQHandler+0xa60>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d004      	beq.n	8007fcc <HAL_DMA_IRQHandler+0x984>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a39      	ldr	r2, [pc, #228]	; (80080ac <HAL_DMA_IRQHandler+0xa64>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d101      	bne.n	8007fd0 <HAL_DMA_IRQHandler+0x988>
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e000      	b.n	8007fd2 <HAL_DMA_IRQHandler+0x98a>
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	f000 823f 	beq.w	8008456 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fe4:	f003 031f 	and.w	r3, r3, #31
 8007fe8:	2204      	movs	r2, #4
 8007fea:	409a      	lsls	r2, r3
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	4013      	ands	r3, r2
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	f000 80cd 	beq.w	8008190 <HAL_DMA_IRQHandler+0xb48>
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	f003 0304 	and.w	r3, r3, #4
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	f000 80c7 	beq.w	8008190 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008006:	f003 031f 	and.w	r3, r3, #31
 800800a:	2204      	movs	r2, #4
 800800c:	409a      	lsls	r2, r3
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008018:	2b00      	cmp	r3, #0
 800801a:	d049      	beq.n	80080b0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008022:	2b00      	cmp	r3, #0
 8008024:	d109      	bne.n	800803a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800802a:	2b00      	cmp	r3, #0
 800802c:	f000 8210 	beq.w	8008450 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008038:	e20a      	b.n	8008450 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800803e:	2b00      	cmp	r3, #0
 8008040:	f000 8206 	beq.w	8008450 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800804c:	e200      	b.n	8008450 <HAL_DMA_IRQHandler+0xe08>
 800804e:	bf00      	nop
 8008050:	40020010 	.word	0x40020010
 8008054:	40020028 	.word	0x40020028
 8008058:	40020040 	.word	0x40020040
 800805c:	40020058 	.word	0x40020058
 8008060:	40020070 	.word	0x40020070
 8008064:	40020088 	.word	0x40020088
 8008068:	400200a0 	.word	0x400200a0
 800806c:	400200b8 	.word	0x400200b8
 8008070:	40020410 	.word	0x40020410
 8008074:	40020428 	.word	0x40020428
 8008078:	40020440 	.word	0x40020440
 800807c:	40020458 	.word	0x40020458
 8008080:	40020470 	.word	0x40020470
 8008084:	40020488 	.word	0x40020488
 8008088:	400204a0 	.word	0x400204a0
 800808c:	400204b8 	.word	0x400204b8
 8008090:	58025408 	.word	0x58025408
 8008094:	5802541c 	.word	0x5802541c
 8008098:	58025430 	.word	0x58025430
 800809c:	58025444 	.word	0x58025444
 80080a0:	58025458 	.word	0x58025458
 80080a4:	5802546c 	.word	0x5802546c
 80080a8:	58025480 	.word	0x58025480
 80080ac:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	f003 0320 	and.w	r3, r3, #32
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d160      	bne.n	800817c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a7f      	ldr	r2, [pc, #508]	; (80082bc <HAL_DMA_IRQHandler+0xc74>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d04a      	beq.n	800815a <HAL_DMA_IRQHandler+0xb12>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a7d      	ldr	r2, [pc, #500]	; (80082c0 <HAL_DMA_IRQHandler+0xc78>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d045      	beq.n	800815a <HAL_DMA_IRQHandler+0xb12>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a7c      	ldr	r2, [pc, #496]	; (80082c4 <HAL_DMA_IRQHandler+0xc7c>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d040      	beq.n	800815a <HAL_DMA_IRQHandler+0xb12>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a7a      	ldr	r2, [pc, #488]	; (80082c8 <HAL_DMA_IRQHandler+0xc80>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d03b      	beq.n	800815a <HAL_DMA_IRQHandler+0xb12>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a79      	ldr	r2, [pc, #484]	; (80082cc <HAL_DMA_IRQHandler+0xc84>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d036      	beq.n	800815a <HAL_DMA_IRQHandler+0xb12>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a77      	ldr	r2, [pc, #476]	; (80082d0 <HAL_DMA_IRQHandler+0xc88>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d031      	beq.n	800815a <HAL_DMA_IRQHandler+0xb12>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a76      	ldr	r2, [pc, #472]	; (80082d4 <HAL_DMA_IRQHandler+0xc8c>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d02c      	beq.n	800815a <HAL_DMA_IRQHandler+0xb12>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a74      	ldr	r2, [pc, #464]	; (80082d8 <HAL_DMA_IRQHandler+0xc90>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d027      	beq.n	800815a <HAL_DMA_IRQHandler+0xb12>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a73      	ldr	r2, [pc, #460]	; (80082dc <HAL_DMA_IRQHandler+0xc94>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d022      	beq.n	800815a <HAL_DMA_IRQHandler+0xb12>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a71      	ldr	r2, [pc, #452]	; (80082e0 <HAL_DMA_IRQHandler+0xc98>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d01d      	beq.n	800815a <HAL_DMA_IRQHandler+0xb12>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a70      	ldr	r2, [pc, #448]	; (80082e4 <HAL_DMA_IRQHandler+0xc9c>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d018      	beq.n	800815a <HAL_DMA_IRQHandler+0xb12>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a6e      	ldr	r2, [pc, #440]	; (80082e8 <HAL_DMA_IRQHandler+0xca0>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d013      	beq.n	800815a <HAL_DMA_IRQHandler+0xb12>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a6d      	ldr	r2, [pc, #436]	; (80082ec <HAL_DMA_IRQHandler+0xca4>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d00e      	beq.n	800815a <HAL_DMA_IRQHandler+0xb12>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a6b      	ldr	r2, [pc, #428]	; (80082f0 <HAL_DMA_IRQHandler+0xca8>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d009      	beq.n	800815a <HAL_DMA_IRQHandler+0xb12>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a6a      	ldr	r2, [pc, #424]	; (80082f4 <HAL_DMA_IRQHandler+0xcac>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d004      	beq.n	800815a <HAL_DMA_IRQHandler+0xb12>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a68      	ldr	r2, [pc, #416]	; (80082f8 <HAL_DMA_IRQHandler+0xcb0>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d108      	bne.n	800816c <HAL_DMA_IRQHandler+0xb24>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f022 0208 	bic.w	r2, r2, #8
 8008168:	601a      	str	r2, [r3, #0]
 800816a:	e007      	b.n	800817c <HAL_DMA_IRQHandler+0xb34>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f022 0204 	bic.w	r2, r2, #4
 800817a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008180:	2b00      	cmp	r3, #0
 8008182:	f000 8165 	beq.w	8008450 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800818e:	e15f      	b.n	8008450 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008194:	f003 031f 	and.w	r3, r3, #31
 8008198:	2202      	movs	r2, #2
 800819a:	409a      	lsls	r2, r3
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	4013      	ands	r3, r2
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	f000 80c5 	beq.w	8008330 <HAL_DMA_IRQHandler+0xce8>
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	f003 0302 	and.w	r3, r3, #2
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	f000 80bf 	beq.w	8008330 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081b6:	f003 031f 	and.w	r3, r3, #31
 80081ba:	2202      	movs	r2, #2
 80081bc:	409a      	lsls	r2, r3
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d018      	beq.n	80081fe <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d109      	bne.n	80081ea <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f000 813a 	beq.w	8008454 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80081e8:	e134      	b.n	8008454 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	f000 8130 	beq.w	8008454 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80081fc:	e12a      	b.n	8008454 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	f003 0320 	and.w	r3, r3, #32
 8008204:	2b00      	cmp	r3, #0
 8008206:	f040 8089 	bne.w	800831c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a2b      	ldr	r2, [pc, #172]	; (80082bc <HAL_DMA_IRQHandler+0xc74>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d04a      	beq.n	80082aa <HAL_DMA_IRQHandler+0xc62>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a29      	ldr	r2, [pc, #164]	; (80082c0 <HAL_DMA_IRQHandler+0xc78>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d045      	beq.n	80082aa <HAL_DMA_IRQHandler+0xc62>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a28      	ldr	r2, [pc, #160]	; (80082c4 <HAL_DMA_IRQHandler+0xc7c>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d040      	beq.n	80082aa <HAL_DMA_IRQHandler+0xc62>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a26      	ldr	r2, [pc, #152]	; (80082c8 <HAL_DMA_IRQHandler+0xc80>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d03b      	beq.n	80082aa <HAL_DMA_IRQHandler+0xc62>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a25      	ldr	r2, [pc, #148]	; (80082cc <HAL_DMA_IRQHandler+0xc84>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d036      	beq.n	80082aa <HAL_DMA_IRQHandler+0xc62>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a23      	ldr	r2, [pc, #140]	; (80082d0 <HAL_DMA_IRQHandler+0xc88>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d031      	beq.n	80082aa <HAL_DMA_IRQHandler+0xc62>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a22      	ldr	r2, [pc, #136]	; (80082d4 <HAL_DMA_IRQHandler+0xc8c>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d02c      	beq.n	80082aa <HAL_DMA_IRQHandler+0xc62>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a20      	ldr	r2, [pc, #128]	; (80082d8 <HAL_DMA_IRQHandler+0xc90>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d027      	beq.n	80082aa <HAL_DMA_IRQHandler+0xc62>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a1f      	ldr	r2, [pc, #124]	; (80082dc <HAL_DMA_IRQHandler+0xc94>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d022      	beq.n	80082aa <HAL_DMA_IRQHandler+0xc62>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a1d      	ldr	r2, [pc, #116]	; (80082e0 <HAL_DMA_IRQHandler+0xc98>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d01d      	beq.n	80082aa <HAL_DMA_IRQHandler+0xc62>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a1c      	ldr	r2, [pc, #112]	; (80082e4 <HAL_DMA_IRQHandler+0xc9c>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d018      	beq.n	80082aa <HAL_DMA_IRQHandler+0xc62>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a1a      	ldr	r2, [pc, #104]	; (80082e8 <HAL_DMA_IRQHandler+0xca0>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d013      	beq.n	80082aa <HAL_DMA_IRQHandler+0xc62>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a19      	ldr	r2, [pc, #100]	; (80082ec <HAL_DMA_IRQHandler+0xca4>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d00e      	beq.n	80082aa <HAL_DMA_IRQHandler+0xc62>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a17      	ldr	r2, [pc, #92]	; (80082f0 <HAL_DMA_IRQHandler+0xca8>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d009      	beq.n	80082aa <HAL_DMA_IRQHandler+0xc62>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a16      	ldr	r2, [pc, #88]	; (80082f4 <HAL_DMA_IRQHandler+0xcac>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d004      	beq.n	80082aa <HAL_DMA_IRQHandler+0xc62>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a14      	ldr	r2, [pc, #80]	; (80082f8 <HAL_DMA_IRQHandler+0xcb0>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d128      	bne.n	80082fc <HAL_DMA_IRQHandler+0xcb4>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f022 0214 	bic.w	r2, r2, #20
 80082b8:	601a      	str	r2, [r3, #0]
 80082ba:	e027      	b.n	800830c <HAL_DMA_IRQHandler+0xcc4>
 80082bc:	40020010 	.word	0x40020010
 80082c0:	40020028 	.word	0x40020028
 80082c4:	40020040 	.word	0x40020040
 80082c8:	40020058 	.word	0x40020058
 80082cc:	40020070 	.word	0x40020070
 80082d0:	40020088 	.word	0x40020088
 80082d4:	400200a0 	.word	0x400200a0
 80082d8:	400200b8 	.word	0x400200b8
 80082dc:	40020410 	.word	0x40020410
 80082e0:	40020428 	.word	0x40020428
 80082e4:	40020440 	.word	0x40020440
 80082e8:	40020458 	.word	0x40020458
 80082ec:	40020470 	.word	0x40020470
 80082f0:	40020488 	.word	0x40020488
 80082f4:	400204a0 	.word	0x400204a0
 80082f8:	400204b8 	.word	0x400204b8
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f022 020a 	bic.w	r2, r2, #10
 800830a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2200      	movs	r2, #0
 8008318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008320:	2b00      	cmp	r3, #0
 8008322:	f000 8097 	beq.w	8008454 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800832e:	e091      	b.n	8008454 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008334:	f003 031f 	and.w	r3, r3, #31
 8008338:	2208      	movs	r2, #8
 800833a:	409a      	lsls	r2, r3
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	4013      	ands	r3, r2
 8008340:	2b00      	cmp	r3, #0
 8008342:	f000 8088 	beq.w	8008456 <HAL_DMA_IRQHandler+0xe0e>
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	f003 0308 	and.w	r3, r3, #8
 800834c:	2b00      	cmp	r3, #0
 800834e:	f000 8082 	beq.w	8008456 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a41      	ldr	r2, [pc, #260]	; (800845c <HAL_DMA_IRQHandler+0xe14>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d04a      	beq.n	80083f2 <HAL_DMA_IRQHandler+0xdaa>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a3f      	ldr	r2, [pc, #252]	; (8008460 <HAL_DMA_IRQHandler+0xe18>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d045      	beq.n	80083f2 <HAL_DMA_IRQHandler+0xdaa>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a3e      	ldr	r2, [pc, #248]	; (8008464 <HAL_DMA_IRQHandler+0xe1c>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d040      	beq.n	80083f2 <HAL_DMA_IRQHandler+0xdaa>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a3c      	ldr	r2, [pc, #240]	; (8008468 <HAL_DMA_IRQHandler+0xe20>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d03b      	beq.n	80083f2 <HAL_DMA_IRQHandler+0xdaa>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a3b      	ldr	r2, [pc, #236]	; (800846c <HAL_DMA_IRQHandler+0xe24>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d036      	beq.n	80083f2 <HAL_DMA_IRQHandler+0xdaa>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a39      	ldr	r2, [pc, #228]	; (8008470 <HAL_DMA_IRQHandler+0xe28>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d031      	beq.n	80083f2 <HAL_DMA_IRQHandler+0xdaa>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a38      	ldr	r2, [pc, #224]	; (8008474 <HAL_DMA_IRQHandler+0xe2c>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d02c      	beq.n	80083f2 <HAL_DMA_IRQHandler+0xdaa>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a36      	ldr	r2, [pc, #216]	; (8008478 <HAL_DMA_IRQHandler+0xe30>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d027      	beq.n	80083f2 <HAL_DMA_IRQHandler+0xdaa>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a35      	ldr	r2, [pc, #212]	; (800847c <HAL_DMA_IRQHandler+0xe34>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d022      	beq.n	80083f2 <HAL_DMA_IRQHandler+0xdaa>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a33      	ldr	r2, [pc, #204]	; (8008480 <HAL_DMA_IRQHandler+0xe38>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d01d      	beq.n	80083f2 <HAL_DMA_IRQHandler+0xdaa>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a32      	ldr	r2, [pc, #200]	; (8008484 <HAL_DMA_IRQHandler+0xe3c>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d018      	beq.n	80083f2 <HAL_DMA_IRQHandler+0xdaa>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a30      	ldr	r2, [pc, #192]	; (8008488 <HAL_DMA_IRQHandler+0xe40>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d013      	beq.n	80083f2 <HAL_DMA_IRQHandler+0xdaa>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a2f      	ldr	r2, [pc, #188]	; (800848c <HAL_DMA_IRQHandler+0xe44>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d00e      	beq.n	80083f2 <HAL_DMA_IRQHandler+0xdaa>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a2d      	ldr	r2, [pc, #180]	; (8008490 <HAL_DMA_IRQHandler+0xe48>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d009      	beq.n	80083f2 <HAL_DMA_IRQHandler+0xdaa>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a2c      	ldr	r2, [pc, #176]	; (8008494 <HAL_DMA_IRQHandler+0xe4c>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d004      	beq.n	80083f2 <HAL_DMA_IRQHandler+0xdaa>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a2a      	ldr	r2, [pc, #168]	; (8008498 <HAL_DMA_IRQHandler+0xe50>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d108      	bne.n	8008404 <HAL_DMA_IRQHandler+0xdbc>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f022 021c 	bic.w	r2, r2, #28
 8008400:	601a      	str	r2, [r3, #0]
 8008402:	e007      	b.n	8008414 <HAL_DMA_IRQHandler+0xdcc>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f022 020e 	bic.w	r2, r2, #14
 8008412:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008418:	f003 031f 	and.w	r3, r3, #31
 800841c:	2201      	movs	r2, #1
 800841e:	409a      	lsls	r2, r3
 8008420:	69fb      	ldr	r3, [r7, #28]
 8008422:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2201      	movs	r2, #1
 8008428:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2201      	movs	r2, #1
 800842e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800843e:	2b00      	cmp	r3, #0
 8008440:	d009      	beq.n	8008456 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	4798      	blx	r3
 800844a:	e004      	b.n	8008456 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800844c:	bf00      	nop
 800844e:	e002      	b.n	8008456 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008450:	bf00      	nop
 8008452:	e000      	b.n	8008456 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008454:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008456:	3728      	adds	r7, #40	; 0x28
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	40020010 	.word	0x40020010
 8008460:	40020028 	.word	0x40020028
 8008464:	40020040 	.word	0x40020040
 8008468:	40020058 	.word	0x40020058
 800846c:	40020070 	.word	0x40020070
 8008470:	40020088 	.word	0x40020088
 8008474:	400200a0 	.word	0x400200a0
 8008478:	400200b8 	.word	0x400200b8
 800847c:	40020410 	.word	0x40020410
 8008480:	40020428 	.word	0x40020428
 8008484:	40020440 	.word	0x40020440
 8008488:	40020458 	.word	0x40020458
 800848c:	40020470 	.word	0x40020470
 8008490:	40020488 	.word	0x40020488
 8008494:	400204a0 	.word	0x400204a0
 8008498:	400204b8 	.word	0x400204b8

0800849c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800849c:	b480      	push	{r7}
 800849e:	b085      	sub	sp, #20
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a42      	ldr	r2, [pc, #264]	; (80085b4 <DMA_CalcBaseAndBitshift+0x118>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d04a      	beq.n	8008544 <DMA_CalcBaseAndBitshift+0xa8>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a41      	ldr	r2, [pc, #260]	; (80085b8 <DMA_CalcBaseAndBitshift+0x11c>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d045      	beq.n	8008544 <DMA_CalcBaseAndBitshift+0xa8>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a3f      	ldr	r2, [pc, #252]	; (80085bc <DMA_CalcBaseAndBitshift+0x120>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d040      	beq.n	8008544 <DMA_CalcBaseAndBitshift+0xa8>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a3e      	ldr	r2, [pc, #248]	; (80085c0 <DMA_CalcBaseAndBitshift+0x124>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d03b      	beq.n	8008544 <DMA_CalcBaseAndBitshift+0xa8>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a3c      	ldr	r2, [pc, #240]	; (80085c4 <DMA_CalcBaseAndBitshift+0x128>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d036      	beq.n	8008544 <DMA_CalcBaseAndBitshift+0xa8>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a3b      	ldr	r2, [pc, #236]	; (80085c8 <DMA_CalcBaseAndBitshift+0x12c>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d031      	beq.n	8008544 <DMA_CalcBaseAndBitshift+0xa8>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a39      	ldr	r2, [pc, #228]	; (80085cc <DMA_CalcBaseAndBitshift+0x130>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d02c      	beq.n	8008544 <DMA_CalcBaseAndBitshift+0xa8>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a38      	ldr	r2, [pc, #224]	; (80085d0 <DMA_CalcBaseAndBitshift+0x134>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d027      	beq.n	8008544 <DMA_CalcBaseAndBitshift+0xa8>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a36      	ldr	r2, [pc, #216]	; (80085d4 <DMA_CalcBaseAndBitshift+0x138>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d022      	beq.n	8008544 <DMA_CalcBaseAndBitshift+0xa8>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a35      	ldr	r2, [pc, #212]	; (80085d8 <DMA_CalcBaseAndBitshift+0x13c>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d01d      	beq.n	8008544 <DMA_CalcBaseAndBitshift+0xa8>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a33      	ldr	r2, [pc, #204]	; (80085dc <DMA_CalcBaseAndBitshift+0x140>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d018      	beq.n	8008544 <DMA_CalcBaseAndBitshift+0xa8>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a32      	ldr	r2, [pc, #200]	; (80085e0 <DMA_CalcBaseAndBitshift+0x144>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d013      	beq.n	8008544 <DMA_CalcBaseAndBitshift+0xa8>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a30      	ldr	r2, [pc, #192]	; (80085e4 <DMA_CalcBaseAndBitshift+0x148>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d00e      	beq.n	8008544 <DMA_CalcBaseAndBitshift+0xa8>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a2f      	ldr	r2, [pc, #188]	; (80085e8 <DMA_CalcBaseAndBitshift+0x14c>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d009      	beq.n	8008544 <DMA_CalcBaseAndBitshift+0xa8>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a2d      	ldr	r2, [pc, #180]	; (80085ec <DMA_CalcBaseAndBitshift+0x150>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d004      	beq.n	8008544 <DMA_CalcBaseAndBitshift+0xa8>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a2c      	ldr	r2, [pc, #176]	; (80085f0 <DMA_CalcBaseAndBitshift+0x154>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d101      	bne.n	8008548 <DMA_CalcBaseAndBitshift+0xac>
 8008544:	2301      	movs	r3, #1
 8008546:	e000      	b.n	800854a <DMA_CalcBaseAndBitshift+0xae>
 8008548:	2300      	movs	r3, #0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d024      	beq.n	8008598 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	b2db      	uxtb	r3, r3
 8008554:	3b10      	subs	r3, #16
 8008556:	4a27      	ldr	r2, [pc, #156]	; (80085f4 <DMA_CalcBaseAndBitshift+0x158>)
 8008558:	fba2 2303 	umull	r2, r3, r2, r3
 800855c:	091b      	lsrs	r3, r3, #4
 800855e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f003 0307 	and.w	r3, r3, #7
 8008566:	4a24      	ldr	r2, [pc, #144]	; (80085f8 <DMA_CalcBaseAndBitshift+0x15c>)
 8008568:	5cd3      	ldrb	r3, [r2, r3]
 800856a:	461a      	mov	r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2b03      	cmp	r3, #3
 8008574:	d908      	bls.n	8008588 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	461a      	mov	r2, r3
 800857c:	4b1f      	ldr	r3, [pc, #124]	; (80085fc <DMA_CalcBaseAndBitshift+0x160>)
 800857e:	4013      	ands	r3, r2
 8008580:	1d1a      	adds	r2, r3, #4
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	659a      	str	r2, [r3, #88]	; 0x58
 8008586:	e00d      	b.n	80085a4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	461a      	mov	r2, r3
 800858e:	4b1b      	ldr	r3, [pc, #108]	; (80085fc <DMA_CalcBaseAndBitshift+0x160>)
 8008590:	4013      	ands	r3, r2
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	6593      	str	r3, [r2, #88]	; 0x58
 8008596:	e005      	b.n	80085a4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3714      	adds	r7, #20
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr
 80085b4:	40020010 	.word	0x40020010
 80085b8:	40020028 	.word	0x40020028
 80085bc:	40020040 	.word	0x40020040
 80085c0:	40020058 	.word	0x40020058
 80085c4:	40020070 	.word	0x40020070
 80085c8:	40020088 	.word	0x40020088
 80085cc:	400200a0 	.word	0x400200a0
 80085d0:	400200b8 	.word	0x400200b8
 80085d4:	40020410 	.word	0x40020410
 80085d8:	40020428 	.word	0x40020428
 80085dc:	40020440 	.word	0x40020440
 80085e0:	40020458 	.word	0x40020458
 80085e4:	40020470 	.word	0x40020470
 80085e8:	40020488 	.word	0x40020488
 80085ec:	400204a0 	.word	0x400204a0
 80085f0:	400204b8 	.word	0x400204b8
 80085f4:	aaaaaaab 	.word	0xaaaaaaab
 80085f8:	0801ac9c 	.word	0x0801ac9c
 80085fc:	fffffc00 	.word	0xfffffc00

08008600 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008600:	b480      	push	{r7}
 8008602:	b085      	sub	sp, #20
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008608:	2300      	movs	r3, #0
 800860a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	699b      	ldr	r3, [r3, #24]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d120      	bne.n	8008656 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008618:	2b03      	cmp	r3, #3
 800861a:	d858      	bhi.n	80086ce <DMA_CheckFifoParam+0xce>
 800861c:	a201      	add	r2, pc, #4	; (adr r2, 8008624 <DMA_CheckFifoParam+0x24>)
 800861e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008622:	bf00      	nop
 8008624:	08008635 	.word	0x08008635
 8008628:	08008647 	.word	0x08008647
 800862c:	08008635 	.word	0x08008635
 8008630:	080086cf 	.word	0x080086cf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008638:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800863c:	2b00      	cmp	r3, #0
 800863e:	d048      	beq.n	80086d2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008640:	2301      	movs	r3, #1
 8008642:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008644:	e045      	b.n	80086d2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800864a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800864e:	d142      	bne.n	80086d6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008654:	e03f      	b.n	80086d6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	699b      	ldr	r3, [r3, #24]
 800865a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800865e:	d123      	bne.n	80086a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008664:	2b03      	cmp	r3, #3
 8008666:	d838      	bhi.n	80086da <DMA_CheckFifoParam+0xda>
 8008668:	a201      	add	r2, pc, #4	; (adr r2, 8008670 <DMA_CheckFifoParam+0x70>)
 800866a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800866e:	bf00      	nop
 8008670:	08008681 	.word	0x08008681
 8008674:	08008687 	.word	0x08008687
 8008678:	08008681 	.word	0x08008681
 800867c:	08008699 	.word	0x08008699
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	73fb      	strb	r3, [r7, #15]
        break;
 8008684:	e030      	b.n	80086e8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800868a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800868e:	2b00      	cmp	r3, #0
 8008690:	d025      	beq.n	80086de <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008696:	e022      	b.n	80086de <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800869c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80086a0:	d11f      	bne.n	80086e2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80086a2:	2301      	movs	r3, #1
 80086a4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80086a6:	e01c      	b.n	80086e2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ac:	2b02      	cmp	r3, #2
 80086ae:	d902      	bls.n	80086b6 <DMA_CheckFifoParam+0xb6>
 80086b0:	2b03      	cmp	r3, #3
 80086b2:	d003      	beq.n	80086bc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80086b4:	e018      	b.n	80086e8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80086b6:	2301      	movs	r3, #1
 80086b8:	73fb      	strb	r3, [r7, #15]
        break;
 80086ba:	e015      	b.n	80086e8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00e      	beq.n	80086e6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	73fb      	strb	r3, [r7, #15]
    break;
 80086cc:	e00b      	b.n	80086e6 <DMA_CheckFifoParam+0xe6>
        break;
 80086ce:	bf00      	nop
 80086d0:	e00a      	b.n	80086e8 <DMA_CheckFifoParam+0xe8>
        break;
 80086d2:	bf00      	nop
 80086d4:	e008      	b.n	80086e8 <DMA_CheckFifoParam+0xe8>
        break;
 80086d6:	bf00      	nop
 80086d8:	e006      	b.n	80086e8 <DMA_CheckFifoParam+0xe8>
        break;
 80086da:	bf00      	nop
 80086dc:	e004      	b.n	80086e8 <DMA_CheckFifoParam+0xe8>
        break;
 80086de:	bf00      	nop
 80086e0:	e002      	b.n	80086e8 <DMA_CheckFifoParam+0xe8>
        break;
 80086e2:	bf00      	nop
 80086e4:	e000      	b.n	80086e8 <DMA_CheckFifoParam+0xe8>
    break;
 80086e6:	bf00      	nop
    }
  }

  return status;
 80086e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3714      	adds	r7, #20
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop

080086f8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b085      	sub	sp, #20
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a38      	ldr	r2, [pc, #224]	; (80087ec <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d022      	beq.n	8008756 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a36      	ldr	r2, [pc, #216]	; (80087f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d01d      	beq.n	8008756 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a35      	ldr	r2, [pc, #212]	; (80087f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d018      	beq.n	8008756 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a33      	ldr	r2, [pc, #204]	; (80087f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d013      	beq.n	8008756 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a32      	ldr	r2, [pc, #200]	; (80087fc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d00e      	beq.n	8008756 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a30      	ldr	r2, [pc, #192]	; (8008800 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d009      	beq.n	8008756 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a2f      	ldr	r2, [pc, #188]	; (8008804 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d004      	beq.n	8008756 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a2d      	ldr	r2, [pc, #180]	; (8008808 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d101      	bne.n	800875a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008756:	2301      	movs	r3, #1
 8008758:	e000      	b.n	800875c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800875a:	2300      	movs	r3, #0
 800875c:	2b00      	cmp	r3, #0
 800875e:	d01a      	beq.n	8008796 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	b2db      	uxtb	r3, r3
 8008766:	3b08      	subs	r3, #8
 8008768:	4a28      	ldr	r2, [pc, #160]	; (800880c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800876a:	fba2 2303 	umull	r2, r3, r2, r3
 800876e:	091b      	lsrs	r3, r3, #4
 8008770:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008772:	68fa      	ldr	r2, [r7, #12]
 8008774:	4b26      	ldr	r3, [pc, #152]	; (8008810 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008776:	4413      	add	r3, r2
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	461a      	mov	r2, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	4a24      	ldr	r2, [pc, #144]	; (8008814 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008784:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f003 031f 	and.w	r3, r3, #31
 800878c:	2201      	movs	r2, #1
 800878e:	409a      	lsls	r2, r3
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008794:	e024      	b.n	80087e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	b2db      	uxtb	r3, r3
 800879c:	3b10      	subs	r3, #16
 800879e:	4a1e      	ldr	r2, [pc, #120]	; (8008818 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80087a0:	fba2 2303 	umull	r2, r3, r2, r3
 80087a4:	091b      	lsrs	r3, r3, #4
 80087a6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	4a1c      	ldr	r2, [pc, #112]	; (800881c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d806      	bhi.n	80087be <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	4a1b      	ldr	r2, [pc, #108]	; (8008820 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d902      	bls.n	80087be <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	3308      	adds	r3, #8
 80087bc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80087be:	68fa      	ldr	r2, [r7, #12]
 80087c0:	4b18      	ldr	r3, [pc, #96]	; (8008824 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80087c2:	4413      	add	r3, r2
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	461a      	mov	r2, r3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	4a16      	ldr	r2, [pc, #88]	; (8008828 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80087d0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f003 031f 	and.w	r3, r3, #31
 80087d8:	2201      	movs	r2, #1
 80087da:	409a      	lsls	r2, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	669a      	str	r2, [r3, #104]	; 0x68
}
 80087e0:	bf00      	nop
 80087e2:	3714      	adds	r7, #20
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr
 80087ec:	58025408 	.word	0x58025408
 80087f0:	5802541c 	.word	0x5802541c
 80087f4:	58025430 	.word	0x58025430
 80087f8:	58025444 	.word	0x58025444
 80087fc:	58025458 	.word	0x58025458
 8008800:	5802546c 	.word	0x5802546c
 8008804:	58025480 	.word	0x58025480
 8008808:	58025494 	.word	0x58025494
 800880c:	cccccccd 	.word	0xcccccccd
 8008810:	16009600 	.word	0x16009600
 8008814:	58025880 	.word	0x58025880
 8008818:	aaaaaaab 	.word	0xaaaaaaab
 800881c:	400204b8 	.word	0x400204b8
 8008820:	4002040f 	.word	0x4002040f
 8008824:	10008200 	.word	0x10008200
 8008828:	40020880 	.word	0x40020880

0800882c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800882c:	b480      	push	{r7}
 800882e:	b085      	sub	sp, #20
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	b2db      	uxtb	r3, r3
 800883a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d04a      	beq.n	80088d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2b08      	cmp	r3, #8
 8008846:	d847      	bhi.n	80088d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a25      	ldr	r2, [pc, #148]	; (80088e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d022      	beq.n	8008898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a24      	ldr	r2, [pc, #144]	; (80088e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d01d      	beq.n	8008898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a22      	ldr	r2, [pc, #136]	; (80088ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d018      	beq.n	8008898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a21      	ldr	r2, [pc, #132]	; (80088f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d013      	beq.n	8008898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a1f      	ldr	r2, [pc, #124]	; (80088f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d00e      	beq.n	8008898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a1e      	ldr	r2, [pc, #120]	; (80088f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d009      	beq.n	8008898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a1c      	ldr	r2, [pc, #112]	; (80088fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d004      	beq.n	8008898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a1b      	ldr	r2, [pc, #108]	; (8008900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d101      	bne.n	800889c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008898:	2301      	movs	r3, #1
 800889a:	e000      	b.n	800889e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800889c:	2300      	movs	r3, #0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d00a      	beq.n	80088b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80088a2:	68fa      	ldr	r2, [r7, #12]
 80088a4:	4b17      	ldr	r3, [pc, #92]	; (8008904 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80088a6:	4413      	add	r3, r2
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	461a      	mov	r2, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	4a15      	ldr	r2, [pc, #84]	; (8008908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80088b4:	671a      	str	r2, [r3, #112]	; 0x70
 80088b6:	e009      	b.n	80088cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80088b8:	68fa      	ldr	r2, [r7, #12]
 80088ba:	4b14      	ldr	r3, [pc, #80]	; (800890c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80088bc:	4413      	add	r3, r2
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	461a      	mov	r2, r3
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	4a11      	ldr	r2, [pc, #68]	; (8008910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80088ca:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	3b01      	subs	r3, #1
 80088d0:	2201      	movs	r2, #1
 80088d2:	409a      	lsls	r2, r3
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80088d8:	bf00      	nop
 80088da:	3714      	adds	r7, #20
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr
 80088e4:	58025408 	.word	0x58025408
 80088e8:	5802541c 	.word	0x5802541c
 80088ec:	58025430 	.word	0x58025430
 80088f0:	58025444 	.word	0x58025444
 80088f4:	58025458 	.word	0x58025458
 80088f8:	5802546c 	.word	0x5802546c
 80088fc:	58025480 	.word	0x58025480
 8008900:	58025494 	.word	0x58025494
 8008904:	1600963f 	.word	0x1600963f
 8008908:	58025940 	.word	0x58025940
 800890c:	1000823f 	.word	0x1000823f
 8008910:	40020940 	.word	0x40020940

08008914 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b098      	sub	sp, #96	; 0x60
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800891c:	4a84      	ldr	r2, [pc, #528]	; (8008b30 <HAL_FDCAN_Init+0x21c>)
 800891e:	f107 030c 	add.w	r3, r7, #12
 8008922:	4611      	mov	r1, r2
 8008924:	224c      	movs	r2, #76	; 0x4c
 8008926:	4618      	mov	r0, r3
 8008928:	f00f f814 	bl	8017954 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d101      	bne.n	8008936 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8008932:	2301      	movs	r3, #1
 8008934:	e1c6      	b.n	8008cc4 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a7e      	ldr	r2, [pc, #504]	; (8008b34 <HAL_FDCAN_Init+0x220>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d106      	bne.n	800894e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008948:	461a      	mov	r2, r3
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008954:	b2db      	uxtb	r3, r3
 8008956:	2b00      	cmp	r3, #0
 8008958:	d106      	bne.n	8008968 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2200      	movs	r2, #0
 800895e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f7fb f8ec 	bl	8003b40 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	699a      	ldr	r2, [r3, #24]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f022 0210 	bic.w	r2, r2, #16
 8008976:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008978:	f7fb ff0c 	bl	8004794 <HAL_GetTick>
 800897c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800897e:	e014      	b.n	80089aa <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008980:	f7fb ff08 	bl	8004794 <HAL_GetTick>
 8008984:	4602      	mov	r2, r0
 8008986:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008988:	1ad3      	subs	r3, r2, r3
 800898a:	2b0a      	cmp	r3, #10
 800898c:	d90d      	bls.n	80089aa <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008994:	f043 0201 	orr.w	r2, r3, #1
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2203      	movs	r2, #3
 80089a2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	e18c      	b.n	8008cc4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	699b      	ldr	r3, [r3, #24]
 80089b0:	f003 0308 	and.w	r3, r3, #8
 80089b4:	2b08      	cmp	r3, #8
 80089b6:	d0e3      	beq.n	8008980 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	699a      	ldr	r2, [r3, #24]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f042 0201 	orr.w	r2, r2, #1
 80089c6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80089c8:	f7fb fee4 	bl	8004794 <HAL_GetTick>
 80089cc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80089ce:	e014      	b.n	80089fa <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80089d0:	f7fb fee0 	bl	8004794 <HAL_GetTick>
 80089d4:	4602      	mov	r2, r0
 80089d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089d8:	1ad3      	subs	r3, r2, r3
 80089da:	2b0a      	cmp	r3, #10
 80089dc:	d90d      	bls.n	80089fa <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80089e4:	f043 0201 	orr.w	r2, r3, #1
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2203      	movs	r2, #3
 80089f2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80089f6:	2301      	movs	r3, #1
 80089f8:	e164      	b.n	8008cc4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	699b      	ldr	r3, [r3, #24]
 8008a00:	f003 0301 	and.w	r3, r3, #1
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d0e3      	beq.n	80089d0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	699a      	ldr	r2, [r3, #24]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f042 0202 	orr.w	r2, r2, #2
 8008a16:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	7c1b      	ldrb	r3, [r3, #16]
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d108      	bne.n	8008a32 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	699a      	ldr	r2, [r3, #24]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a2e:	619a      	str	r2, [r3, #24]
 8008a30:	e007      	b.n	8008a42 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	699a      	ldr	r2, [r3, #24]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a40:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	7c5b      	ldrb	r3, [r3, #17]
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d108      	bne.n	8008a5c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	699a      	ldr	r2, [r3, #24]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a58:	619a      	str	r2, [r3, #24]
 8008a5a:	e007      	b.n	8008a6c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	699a      	ldr	r2, [r3, #24]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008a6a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	7c9b      	ldrb	r3, [r3, #18]
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d108      	bne.n	8008a86 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	699a      	ldr	r2, [r3, #24]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008a82:	619a      	str	r2, [r3, #24]
 8008a84:	e007      	b.n	8008a96 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	699a      	ldr	r2, [r3, #24]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008a94:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	699b      	ldr	r3, [r3, #24]
 8008a9c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	689a      	ldr	r2, [r3, #8]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	430a      	orrs	r2, r1
 8008aaa:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	699a      	ldr	r2, [r3, #24]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8008aba:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	691a      	ldr	r2, [r3, #16]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f022 0210 	bic.w	r2, r2, #16
 8008aca:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	68db      	ldr	r3, [r3, #12]
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d108      	bne.n	8008ae6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	699a      	ldr	r2, [r3, #24]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f042 0204 	orr.w	r2, r2, #4
 8008ae2:	619a      	str	r2, [r3, #24]
 8008ae4:	e030      	b.n	8008b48 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	68db      	ldr	r3, [r3, #12]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d02c      	beq.n	8008b48 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	68db      	ldr	r3, [r3, #12]
 8008af2:	2b02      	cmp	r3, #2
 8008af4:	d020      	beq.n	8008b38 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	699a      	ldr	r2, [r3, #24]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008b04:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	691a      	ldr	r2, [r3, #16]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f042 0210 	orr.w	r2, r2, #16
 8008b14:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	68db      	ldr	r3, [r3, #12]
 8008b1a:	2b03      	cmp	r3, #3
 8008b1c:	d114      	bne.n	8008b48 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	699a      	ldr	r2, [r3, #24]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f042 0220 	orr.w	r2, r2, #32
 8008b2c:	619a      	str	r2, [r3, #24]
 8008b2e:	e00b      	b.n	8008b48 <HAL_FDCAN_Init+0x234>
 8008b30:	0801a7f8 	.word	0x0801a7f8
 8008b34:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	699a      	ldr	r2, [r3, #24]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f042 0220 	orr.w	r2, r2, #32
 8008b46:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	699b      	ldr	r3, [r3, #24]
 8008b4c:	3b01      	subs	r3, #1
 8008b4e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	69db      	ldr	r3, [r3, #28]
 8008b54:	3b01      	subs	r3, #1
 8008b56:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008b58:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a1b      	ldr	r3, [r3, #32]
 8008b5e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008b60:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	695b      	ldr	r3, [r3, #20]
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008b70:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008b72:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b7c:	d115      	bne.n	8008baa <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b82:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b88:	3b01      	subs	r3, #1
 8008b8a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8008b8c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b92:	3b01      	subs	r3, #1
 8008b94:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8008b96:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b9e:	3b01      	subs	r3, #1
 8008ba0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8008ba6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8008ba8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00a      	beq.n	8008bc8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	430a      	orrs	r2, r1
 8008bc4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bd0:	4413      	add	r3, r2
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d011      	beq.n	8008bfa <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008bde:	f023 0107 	bic.w	r1, r3, #7
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	3360      	adds	r3, #96	; 0x60
 8008bea:	443b      	add	r3, r7
 8008bec:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	430a      	orrs	r2, r1
 8008bf6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d011      	beq.n	8008c26 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008c0a:	f023 0107 	bic.w	r1, r3, #7
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	3360      	adds	r3, #96	; 0x60
 8008c16:	443b      	add	r3, r7
 8008c18:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	430a      	orrs	r2, r1
 8008c22:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d012      	beq.n	8008c54 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008c36:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	3360      	adds	r3, #96	; 0x60
 8008c42:	443b      	add	r3, r7
 8008c44:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8008c48:	011a      	lsls	r2, r3, #4
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	430a      	orrs	r2, r1
 8008c50:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d012      	beq.n	8008c82 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008c64:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	3360      	adds	r3, #96	; 0x60
 8008c70:	443b      	add	r3, r7
 8008c72:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8008c76:	021a      	lsls	r2, r3, #8
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	430a      	orrs	r2, r1
 8008c7e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a11      	ldr	r2, [pc, #68]	; (8008ccc <HAL_FDCAN_Init+0x3b8>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d107      	bne.n	8008c9c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	689a      	ldr	r2, [r3, #8]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	f022 0203 	bic.w	r2, r2, #3
 8008c9a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 fdf5 	bl	80098a4 <FDCAN_CalcultateRamBlockAddresses>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8008cc0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3760      	adds	r7, #96	; 0x60
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	4000a000 	.word	0x4000a000

08008cd0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b087      	sub	sp, #28
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008ce0:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8008ce2:	7bfb      	ldrb	r3, [r7, #15]
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d002      	beq.n	8008cee <HAL_FDCAN_ConfigFilter+0x1e>
 8008ce8:	7bfb      	ldrb	r3, [r7, #15]
 8008cea:	2b02      	cmp	r3, #2
 8008cec:	d157      	bne.n	8008d9e <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d12b      	bne.n	8008d4e <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	2b07      	cmp	r3, #7
 8008cfc:	d10d      	bne.n	8008d1a <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	691b      	ldr	r3, [r3, #16]
 8008d02:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	69db      	ldr	r3, [r3, #28]
 8008d08:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8008d0a:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8008d10:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8008d12:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8008d16:	617b      	str	r3, [r7, #20]
 8008d18:	e00e      	b.n	8008d38 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	68db      	ldr	r3, [r3, #12]
 8008d24:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8008d26:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	691b      	ldr	r3, [r3, #16]
 8008d2c:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8008d2e:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8008d34:	4313      	orrs	r3, r2
 8008d36:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	4413      	add	r3, r2
 8008d44:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	697a      	ldr	r2, [r7, #20]
 8008d4a:	601a      	str	r2, [r3, #0]
 8008d4c:	e025      	b.n	8008d9a <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	68db      	ldr	r3, [r3, #12]
 8008d52:	075a      	lsls	r2, r3, #29
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	691b      	ldr	r3, [r3, #16]
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	2b07      	cmp	r3, #7
 8008d62:	d103      	bne.n	8008d6c <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	699b      	ldr	r3, [r3, #24]
 8008d68:	613b      	str	r3, [r7, #16]
 8008d6a:	e006      	b.n	8008d7a <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	689b      	ldr	r3, [r3, #8]
 8008d70:	079a      	lsls	r2, r3, #30
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	695b      	ldr	r3, [r3, #20]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	00db      	lsls	r3, r3, #3
 8008d84:	4413      	add	r3, r2
 8008d86:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	697a      	ldr	r2, [r7, #20]
 8008d8c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	3304      	adds	r3, #4
 8008d92:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	693a      	ldr	r2, [r7, #16]
 8008d98:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	e008      	b.n	8008db0 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008da4:	f043 0202 	orr.w	r2, r3, #2
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
  }
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	371c      	adds	r7, #28
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d111      	bne.n	8008df4 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2202      	movs	r2, #2
 8008dd4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	699a      	ldr	r2, [r3, #24]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f022 0201 	bic.w	r2, r2, #1
 8008de6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8008df0:	2300      	movs	r3, #0
 8008df2:	e008      	b.n	8008e06 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008dfa:	f043 0204 	orr.w	r2, r3, #4
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8008e04:	2301      	movs	r3, #1
  }
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	370c      	adds	r7, #12
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr

08008e12 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8008e12:	b580      	push	{r7, lr}
 8008e14:	b086      	sub	sp, #24
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	60f8      	str	r0, [r7, #12]
 8008e1a:	60b9      	str	r1, [r7, #8]
 8008e1c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	2b02      	cmp	r3, #2
 8008e28:	d141      	bne.n	8008eae <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008e32:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d109      	bne.n	8008e4e <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008e40:	f043 0220 	orr.w	r2, r3, #32
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	e038      	b.n	8008ec0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d009      	beq.n	8008e72 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008e64:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e026      	b.n	8008ec0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008e7a:	0c1b      	lsrs	r3, r3, #16
 8008e7c:	f003 031f 	and.w	r3, r3, #31
 8008e80:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	68b9      	ldr	r1, [r7, #8]
 8008e88:	68f8      	ldr	r0, [r7, #12]
 8008e8a:	f000 fe91 	bl	8009bb0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	2101      	movs	r1, #1
 8008e94:	697a      	ldr	r2, [r7, #20]
 8008e96:	fa01 f202 	lsl.w	r2, r1, r2
 8008e9a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	409a      	lsls	r2, r3
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	e008      	b.n	8008ec0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008eb4:	f043 0208 	orr.w	r2, r3, #8
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8008ebe:	2301      	movs	r3, #1
  }
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3718      	adds	r7, #24
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b08b      	sub	sp, #44	; 0x2c
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	60f8      	str	r0, [r7, #12]
 8008ed0:	60b9      	str	r1, [r7, #8]
 8008ed2:	607a      	str	r2, [r7, #4]
 8008ed4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008ee0:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8008ee2:	7efb      	ldrb	r3, [r7, #27]
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	f040 814b 	bne.w	8009180 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	2b40      	cmp	r3, #64	; 0x40
 8008eee:	d14d      	bne.n	8008f8c <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008ef8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d109      	bne.n	8008f14 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008f06:	f043 0220 	orr.w	r2, r3, #32
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8008f10:	2301      	movs	r3, #1
 8008f12:	e13e      	b.n	8009192 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008f1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d109      	bne.n	8008f38 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008f2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8008f34:	2301      	movs	r3, #1
 8008f36:	e12c      	b.n	8009192 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008f40:	0e1b      	lsrs	r3, r3, #24
 8008f42:	f003 0301 	and.w	r3, r3, #1
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d10b      	bne.n	8008f62 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008f52:	0fdb      	lsrs	r3, r3, #31
 8008f54:	f003 0301 	and.w	r3, r3, #1
 8008f58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f5c:	d101      	bne.n	8008f62 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008f6a:	0a1b      	lsrs	r3, r3, #8
 8008f6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f70:	69fa      	ldr	r2, [r7, #28]
 8008f72:	4413      	add	r3, r2
 8008f74:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f7e:	69f9      	ldr	r1, [r7, #28]
 8008f80:	fb01 f303 	mul.w	r3, r1, r3
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	4413      	add	r3, r2
 8008f88:	627b      	str	r3, [r7, #36]	; 0x24
 8008f8a:	e069      	b.n	8009060 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	2b41      	cmp	r3, #65	; 0x41
 8008f90:	d14d      	bne.n	800902e <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008f9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d109      	bne.n	8008fb6 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008fa8:	f043 0220 	orr.w	r2, r3, #32
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e0ed      	b.n	8009192 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008fbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d109      	bne.n	8008fda <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008fcc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	e0db      	b.n	8009192 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008fe2:	0e1b      	lsrs	r3, r3, #24
 8008fe4:	f003 0301 	and.w	r3, r3, #1
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d10b      	bne.n	8009004 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008ff4:	0fdb      	lsrs	r3, r3, #31
 8008ff6:	f003 0301 	and.w	r3, r3, #1
 8008ffa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ffe:	d101      	bne.n	8009004 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8009000:	2301      	movs	r3, #1
 8009002:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800900c:	0a1b      	lsrs	r3, r3, #8
 800900e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009012:	69fa      	ldr	r2, [r7, #28]
 8009014:	4413      	add	r3, r2
 8009016:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009020:	69f9      	ldr	r1, [r7, #28]
 8009022:	fb01 f303 	mul.w	r3, r1, r3
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	4413      	add	r3, r2
 800902a:	627b      	str	r3, [r7, #36]	; 0x24
 800902c:	e018      	b.n	8009060 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009032:	68ba      	ldr	r2, [r7, #8]
 8009034:	429a      	cmp	r2, r3
 8009036:	d309      	bcc.n	800904c <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800903e:	f043 0220 	orr.w	r2, r3, #32
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8009048:	2301      	movs	r3, #1
 800904a:	e0a2      	b.n	8009192 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009054:	68b9      	ldr	r1, [r7, #8]
 8009056:	fb01 f303 	mul.w	r3, r1, r3
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	4413      	add	r3, r2
 800905e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8009060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d107      	bne.n	8009084 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8009074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	0c9b      	lsrs	r3, r3, #18
 800907a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	601a      	str	r2, [r3, #0]
 8009082:	e005      	b.n	8009090 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8009084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8009090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800909c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80090a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090aa:	3304      	adds	r3, #4
 80090ac:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80090ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	b29a      	uxth	r2, r3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80090b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80090c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80090d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80090dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	0e1b      	lsrs	r3, r3, #24
 80090e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80090ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	0fda      	lsrs	r2, r3, #31
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80090f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f6:	3304      	adds	r3, #4
 80090f8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80090fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fc:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80090fe:	2300      	movs	r3, #0
 8009100:	623b      	str	r3, [r7, #32]
 8009102:	e00a      	b.n	800911a <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8009104:	697a      	ldr	r2, [r7, #20]
 8009106:	6a3b      	ldr	r3, [r7, #32]
 8009108:	441a      	add	r2, r3
 800910a:	6839      	ldr	r1, [r7, #0]
 800910c:	6a3b      	ldr	r3, [r7, #32]
 800910e:	440b      	add	r3, r1
 8009110:	7812      	ldrb	r2, [r2, #0]
 8009112:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8009114:	6a3b      	ldr	r3, [r7, #32]
 8009116:	3301      	adds	r3, #1
 8009118:	623b      	str	r3, [r7, #32]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	68db      	ldr	r3, [r3, #12]
 800911e:	0c1b      	lsrs	r3, r3, #16
 8009120:	4a1f      	ldr	r2, [pc, #124]	; (80091a0 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8009122:	5cd3      	ldrb	r3, [r2, r3]
 8009124:	461a      	mov	r2, r3
 8009126:	6a3b      	ldr	r3, [r7, #32]
 8009128:	4293      	cmp	r3, r2
 800912a:	d3eb      	bcc.n	8009104 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	2b40      	cmp	r3, #64	; 0x40
 8009130:	d105      	bne.n	800913e <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	69fa      	ldr	r2, [r7, #28]
 8009138:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800913c:	e01e      	b.n	800917c <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	2b41      	cmp	r3, #65	; 0x41
 8009142:	d105      	bne.n	8009150 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	69fa      	ldr	r2, [r7, #28]
 800914a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800914e:	e015      	b.n	800917c <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	2b1f      	cmp	r3, #31
 8009154:	d808      	bhi.n	8009168 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	2101      	movs	r1, #1
 800915c:	68ba      	ldr	r2, [r7, #8]
 800915e:	fa01 f202 	lsl.w	r2, r1, r2
 8009162:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8009166:	e009      	b.n	800917c <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	f003 021f 	and.w	r2, r3, #31
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	2101      	movs	r1, #1
 8009174:	fa01 f202 	lsl.w	r2, r1, r2
 8009178:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 800917c:	2300      	movs	r3, #0
 800917e:	e008      	b.n	8009192 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009186:	f043 0208 	orr.w	r2, r3, #8
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8009190:	2301      	movs	r3, #1
  }
}
 8009192:	4618      	mov	r0, r3
 8009194:	372c      	adds	r7, #44	; 0x2c
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr
 800919e:	bf00      	nop
 80091a0:	0801aca4 	.word	0x0801aca4

080091a4 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Level Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(FDCAN_HandleTypeDef *hfdcan)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b085      	sub	sp, #20
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80091b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80091b8:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 80091ba:	68fb      	ldr	r3, [r7, #12]
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3714      	adds	r7, #20
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b087      	sub	sp, #28
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	60f8      	str	r0, [r7, #12]
 80091d0:	60b9      	str	r1, [r7, #8]
 80091d2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80091da:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80091dc:	7dfb      	ldrb	r3, [r7, #23]
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d002      	beq.n	80091e8 <HAL_FDCAN_ActivateNotification+0x20>
 80091e2:	7dfb      	ldrb	r3, [r7, #23]
 80091e4:	2b02      	cmp	r3, #2
 80091e6:	d155      	bne.n	8009294 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	4013      	ands	r3, r2
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d108      	bne.n	8009208 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f042 0201 	orr.w	r2, r2, #1
 8009204:	65da      	str	r2, [r3, #92]	; 0x5c
 8009206:	e014      	b.n	8009232 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	4013      	ands	r3, r2
 8009212:	68ba      	ldr	r2, [r7, #8]
 8009214:	429a      	cmp	r2, r3
 8009216:	d108      	bne.n	800922a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f042 0202 	orr.w	r2, r2, #2
 8009226:	65da      	str	r2, [r3, #92]	; 0x5c
 8009228:	e003      	b.n	8009232 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	2203      	movs	r2, #3
 8009230:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009238:	2b00      	cmp	r3, #0
 800923a:	d009      	beq.n	8009250 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	430a      	orrs	r2, r1
 800924c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009256:	2b00      	cmp	r3, #0
 8009258:	d009      	beq.n	800926e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	430a      	orrs	r2, r1
 800926a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009274:	68ba      	ldr	r2, [r7, #8]
 8009276:	4b0f      	ldr	r3, [pc, #60]	; (80092b4 <HAL_FDCAN_ActivateNotification+0xec>)
 8009278:	4013      	ands	r3, r2
 800927a:	68fa      	ldr	r2, [r7, #12]
 800927c:	6812      	ldr	r2, [r2, #0]
 800927e:	430b      	orrs	r3, r1
 8009280:	6553      	str	r3, [r2, #84]	; 0x54
 8009282:	4b0d      	ldr	r3, [pc, #52]	; (80092b8 <HAL_FDCAN_ActivateNotification+0xf0>)
 8009284:	695a      	ldr	r2, [r3, #20]
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	0f9b      	lsrs	r3, r3, #30
 800928a:	490b      	ldr	r1, [pc, #44]	; (80092b8 <HAL_FDCAN_ActivateNotification+0xf0>)
 800928c:	4313      	orrs	r3, r2
 800928e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8009290:	2300      	movs	r3, #0
 8009292:	e008      	b.n	80092a6 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800929a:	f043 0202 	orr.w	r2, r3, #2
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80092a4:	2301      	movs	r3, #1
  }
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	371c      	adds	r7, #28
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr
 80092b2:	bf00      	nop
 80092b4:	3fcfffff 	.word	0x3fcfffff
 80092b8:	4000a800 	.word	0x4000a800

080092bc <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b096      	sub	sp, #88	; 0x58
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80092c4:	4b9a      	ldr	r3, [pc, #616]	; (8009530 <HAL_FDCAN_IRQHandler+0x274>)
 80092c6:	691b      	ldr	r3, [r3, #16]
 80092c8:	079b      	lsls	r3, r3, #30
 80092ca:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80092cc:	4b98      	ldr	r3, [pc, #608]	; (8009530 <HAL_FDCAN_IRQHandler+0x274>)
 80092ce:	695b      	ldr	r3, [r3, #20]
 80092d0:	079b      	lsls	r3, r3, #30
 80092d2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80092d4:	4013      	ands	r3, r2
 80092d6:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092de:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80092e2:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80092ec:	4013      	ands	r3, r2
 80092ee:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092f6:	f003 030f 	and.w	r3, r3, #15
 80092fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009302:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009304:	4013      	ands	r3, r2
 8009306:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800930e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009312:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800931a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800931c:	4013      	ands	r3, r2
 800931e:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009326:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 800932a:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009332:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009334:	4013      	ands	r3, r2
 8009336:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800933e:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8009342:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800934a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800934c:	4013      	ands	r3, r2
 800934e:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009356:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800935e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8009360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009362:	0a1b      	lsrs	r3, r3, #8
 8009364:	f003 0301 	and.w	r3, r3, #1
 8009368:	2b00      	cmp	r3, #0
 800936a:	d010      	beq.n	800938e <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800936c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800936e:	0a1b      	lsrs	r3, r3, #8
 8009370:	f003 0301 	and.w	r3, r3, #1
 8009374:	2b00      	cmp	r3, #0
 8009376:	d00a      	beq.n	800938e <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009380:	651a      	str	r2, [r3, #80]	; 0x50
 8009382:	4b6b      	ldr	r3, [pc, #428]	; (8009530 <HAL_FDCAN_IRQHandler+0x274>)
 8009384:	2200      	movs	r2, #0
 8009386:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 fa3f 	bl	800980c <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800938e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009390:	0a9b      	lsrs	r3, r3, #10
 8009392:	f003 0301 	and.w	r3, r3, #1
 8009396:	2b00      	cmp	r3, #0
 8009398:	d01d      	beq.n	80093d6 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800939a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800939c:	0a9b      	lsrs	r3, r3, #10
 800939e:	f003 0301 	and.w	r3, r3, #1
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d017      	beq.n	80093d6 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80093ae:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80093b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093ba:	4013      	ands	r3, r2
 80093bc:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80093c6:	651a      	str	r2, [r3, #80]	; 0x50
 80093c8:	4b59      	ldr	r3, [pc, #356]	; (8009530 <HAL_FDCAN_IRQHandler+0x274>)
 80093ca:	2200      	movs	r2, #0
 80093cc:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80093ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 f9f2 	bl	80097ba <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80093d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d00d      	beq.n	80093f8 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80093e2:	4b54      	ldr	r3, [pc, #336]	; (8009534 <HAL_FDCAN_IRQHandler+0x278>)
 80093e4:	400b      	ands	r3, r1
 80093e6:	6513      	str	r3, [r2, #80]	; 0x50
 80093e8:	4a51      	ldr	r2, [pc, #324]	; (8009530 <HAL_FDCAN_IRQHandler+0x274>)
 80093ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093ec:	0f9b      	lsrs	r3, r3, #30
 80093ee:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80093f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 f9c0 	bl	8009778 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80093f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d00d      	beq.n	800941a <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009404:	4b4b      	ldr	r3, [pc, #300]	; (8009534 <HAL_FDCAN_IRQHandler+0x278>)
 8009406:	400b      	ands	r3, r1
 8009408:	6513      	str	r3, [r2, #80]	; 0x50
 800940a:	4a49      	ldr	r2, [pc, #292]	; (8009530 <HAL_FDCAN_IRQHandler+0x274>)
 800940c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800940e:	0f9b      	lsrs	r3, r3, #30
 8009410:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8009412:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 f9ba 	bl	800978e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800941a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800941c:	2b00      	cmp	r3, #0
 800941e:	d00d      	beq.n	800943c <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009426:	4b43      	ldr	r3, [pc, #268]	; (8009534 <HAL_FDCAN_IRQHandler+0x278>)
 8009428:	400b      	ands	r3, r1
 800942a:	6513      	str	r3, [r2, #80]	; 0x50
 800942c:	4a40      	ldr	r2, [pc, #256]	; (8009530 <HAL_FDCAN_IRQHandler+0x274>)
 800942e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009430:	0f9b      	lsrs	r3, r3, #30
 8009432:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8009434:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f7f9 fa58 	bl	80028ec <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800943c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800943e:	2b00      	cmp	r3, #0
 8009440:	d00d      	beq.n	800945e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009448:	4b3a      	ldr	r3, [pc, #232]	; (8009534 <HAL_FDCAN_IRQHandler+0x278>)
 800944a:	400b      	ands	r3, r1
 800944c:	6513      	str	r3, [r2, #80]	; 0x50
 800944e:	4a38      	ldr	r2, [pc, #224]	; (8009530 <HAL_FDCAN_IRQHandler+0x274>)
 8009450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009452:	0f9b      	lsrs	r3, r3, #30
 8009454:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8009456:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f7f9 fa6d 	bl	8002938 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800945e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009460:	0adb      	lsrs	r3, r3, #11
 8009462:	f003 0301 	and.w	r3, r3, #1
 8009466:	2b00      	cmp	r3, #0
 8009468:	d010      	beq.n	800948c <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800946a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800946c:	0adb      	lsrs	r3, r3, #11
 800946e:	f003 0301 	and.w	r3, r3, #1
 8009472:	2b00      	cmp	r3, #0
 8009474:	d00a      	beq.n	800948c <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800947e:	651a      	str	r2, [r3, #80]	; 0x50
 8009480:	4b2b      	ldr	r3, [pc, #172]	; (8009530 <HAL_FDCAN_IRQHandler+0x274>)
 8009482:	2200      	movs	r2, #0
 8009484:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f7f9 faf0 	bl	8002a6c <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 800948c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800948e:	0a5b      	lsrs	r3, r3, #9
 8009490:	f003 0301 	and.w	r3, r3, #1
 8009494:	2b00      	cmp	r3, #0
 8009496:	d01d      	beq.n	80094d4 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8009498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800949a:	0a5b      	lsrs	r3, r3, #9
 800949c:	f003 0301 	and.w	r3, r3, #1
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d017      	beq.n	80094d4 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80094ac:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80094b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094b8:	4013      	ands	r3, r2
 80094ba:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094c4:	651a      	str	r2, [r3, #80]	; 0x50
 80094c6:	4b1a      	ldr	r3, [pc, #104]	; (8009530 <HAL_FDCAN_IRQHandler+0x274>)
 80094c8:	2200      	movs	r2, #0
 80094ca:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80094cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 f968 	bl	80097a4 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 80094d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094d6:	0cdb      	lsrs	r3, r3, #19
 80094d8:	f003 0301 	and.w	r3, r3, #1
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d010      	beq.n	8009502 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 80094e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e2:	0cdb      	lsrs	r3, r3, #19
 80094e4:	f003 0301 	and.w	r3, r3, #1
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d00a      	beq.n	8009502 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80094f4:	651a      	str	r2, [r3, #80]	; 0x50
 80094f6:	4b0e      	ldr	r3, [pc, #56]	; (8009530 <HAL_FDCAN_IRQHandler+0x274>)
 80094f8:	2200      	movs	r2, #0
 80094fa:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 f967 	bl	80097d0 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8009502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009504:	0c1b      	lsrs	r3, r3, #16
 8009506:	f003 0301 	and.w	r3, r3, #1
 800950a:	2b00      	cmp	r3, #0
 800950c:	d016      	beq.n	800953c <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800950e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009510:	0c1b      	lsrs	r3, r3, #16
 8009512:	f003 0301 	and.w	r3, r3, #1
 8009516:	2b00      	cmp	r3, #0
 8009518:	d010      	beq.n	800953c <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009522:	651a      	str	r2, [r3, #80]	; 0x50
 8009524:	4b02      	ldr	r3, [pc, #8]	; (8009530 <HAL_FDCAN_IRQHandler+0x274>)
 8009526:	2200      	movs	r2, #0
 8009528:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	e004      	b.n	8009538 <HAL_FDCAN_IRQHandler+0x27c>
 800952e:	bf00      	nop
 8009530:	4000a800 	.word	0x4000a800
 8009534:	3fcfffff 	.word	0x3fcfffff
 8009538:	f000 f954 	bl	80097e4 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800953c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800953e:	0c9b      	lsrs	r3, r3, #18
 8009540:	f003 0301 	and.w	r3, r3, #1
 8009544:	2b00      	cmp	r3, #0
 8009546:	d010      	beq.n	800956a <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8009548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800954a:	0c9b      	lsrs	r3, r3, #18
 800954c:	f003 0301 	and.w	r3, r3, #1
 8009550:	2b00      	cmp	r3, #0
 8009552:	d00a      	beq.n	800956a <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800955c:	651a      	str	r2, [r3, #80]	; 0x50
 800955e:	4b83      	ldr	r3, [pc, #524]	; (800976c <HAL_FDCAN_IRQHandler+0x4b0>)
 8009560:	2200      	movs	r2, #0
 8009562:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 f947 	bl	80097f8 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800956a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800956c:	0c5b      	lsrs	r3, r3, #17
 800956e:	f003 0301 	and.w	r3, r3, #1
 8009572:	2b00      	cmp	r3, #0
 8009574:	d015      	beq.n	80095a2 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8009576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009578:	0c5b      	lsrs	r3, r3, #17
 800957a:	f003 0301 	and.w	r3, r3, #1
 800957e:	2b00      	cmp	r3, #0
 8009580:	d00f      	beq.n	80095a2 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800958a:	651a      	str	r2, [r3, #80]	; 0x50
 800958c:	4b77      	ldr	r3, [pc, #476]	; (800976c <HAL_FDCAN_IRQHandler+0x4b0>)
 800958e:	2200      	movs	r2, #0
 8009590:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009598:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80095a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d00d      	beq.n	80095c4 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681a      	ldr	r2, [r3, #0]
 80095ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80095ae:	4b70      	ldr	r3, [pc, #448]	; (8009770 <HAL_FDCAN_IRQHandler+0x4b4>)
 80095b0:	400b      	ands	r3, r1
 80095b2:	6513      	str	r3, [r2, #80]	; 0x50
 80095b4:	4a6d      	ldr	r2, [pc, #436]	; (800976c <HAL_FDCAN_IRQHandler+0x4b0>)
 80095b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095b8:	0f9b      	lsrs	r3, r3, #30
 80095ba:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80095bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 f938 	bl	8009834 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80095c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d011      	beq.n	80095ee <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80095d0:	4b67      	ldr	r3, [pc, #412]	; (8009770 <HAL_FDCAN_IRQHandler+0x4b4>)
 80095d2:	400b      	ands	r3, r1
 80095d4:	6513      	str	r3, [r2, #80]	; 0x50
 80095d6:	4a65      	ldr	r2, [pc, #404]	; (800976c <HAL_FDCAN_IRQHandler+0x4b0>)
 80095d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095da:	0f9b      	lsrs	r3, r3, #30
 80095dc:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80095e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095e6:	431a      	orrs	r2, r3
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4a60      	ldr	r2, [pc, #384]	; (8009774 <HAL_FDCAN_IRQHandler+0x4b8>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	f040 80ac 	bne.w	8009752 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	f003 0303 	and.w	r3, r3, #3
 8009604:	2b00      	cmp	r3, #0
 8009606:	f000 80a4 	beq.w	8009752 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	6a1b      	ldr	r3, [r3, #32]
 8009610:	f003 030f 	and.w	r3, r3, #15
 8009614:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	685b      	ldr	r3, [r3, #4]
 800961a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800961c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800961e:	4013      	ands	r3, r2
 8009620:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	6a1b      	ldr	r3, [r3, #32]
 8009628:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800962c:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009634:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009636:	4013      	ands	r3, r2
 8009638:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	6a1b      	ldr	r3, [r3, #32]
 8009640:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8009644:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800964c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800964e:	4013      	ands	r3, r2
 8009650:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	6a1b      	ldr	r3, [r3, #32]
 8009658:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 800965c:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009664:	6a3a      	ldr	r2, [r7, #32]
 8009666:	4013      	ands	r3, r2
 8009668:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	6a1b      	ldr	r3, [r3, #32]
 8009670:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8009674:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800967c:	69fa      	ldr	r2, [r7, #28]
 800967e:	4013      	ands	r3, r2
 8009680:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009688:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	6a1b      	ldr	r3, [r3, #32]
 8009690:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8009692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009694:	2b00      	cmp	r3, #0
 8009696:	d007      	beq.n	80096a8 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800969e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80096a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 f8d1 	bl	800984a <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80096a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d007      	beq.n	80096be <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096b4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80096b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 f8d1 	bl	8009860 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 80096be:	69bb      	ldr	r3, [r7, #24]
 80096c0:	099b      	lsrs	r3, r3, #6
 80096c2:	f003 0301 	and.w	r3, r3, #1
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d01a      	beq.n	8009700 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	099b      	lsrs	r3, r3, #6
 80096ce:	f003 0301 	and.w	r3, r3, #1
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d014      	beq.n	8009700 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096dc:	0c1b      	lsrs	r3, r3, #16
 80096de:	b29b      	uxth	r3, r3
 80096e0:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096ec:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	2240      	movs	r2, #64	; 0x40
 80096f4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80096f6:	68fa      	ldr	r2, [r7, #12]
 80096f8:	6939      	ldr	r1, [r7, #16]
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 f8bb 	bl	8009876 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8009700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009702:	2b00      	cmp	r3, #0
 8009704:	d007      	beq.n	8009716 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800970c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800970e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 f8bc 	bl	800988e <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8009716:	6a3b      	ldr	r3, [r7, #32]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d00b      	beq.n	8009734 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	6a3a      	ldr	r2, [r7, #32]
 8009722:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800972a:	6a3b      	ldr	r3, [r7, #32]
 800972c:	431a      	orrs	r2, r3
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8009734:	69fb      	ldr	r3, [r7, #28]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d00b      	beq.n	8009752 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	69fa      	ldr	r2, [r7, #28]
 8009740:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8009748:	69fb      	ldr	r3, [r7, #28]
 800974a:	431a      	orrs	r2, r3
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009758:	2b00      	cmp	r3, #0
 800975a:	d002      	beq.n	8009762 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f000 f85f 	bl	8009820 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8009762:	bf00      	nop
 8009764:	3758      	adds	r7, #88	; 0x58
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	4000a800 	.word	0x4000a800
 8009770:	3fcfffff 	.word	0x3fcfffff
 8009774:	4000a000 	.word	0x4000a000

08009778 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8009778:	b480      	push	{r7}
 800977a:	b083      	sub	sp, #12
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8009782:	bf00      	nop
 8009784:	370c      	adds	r7, #12
 8009786:	46bd      	mov	sp, r7
 8009788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978c:	4770      	bx	lr

0800978e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800978e:	b480      	push	{r7}
 8009790:	b083      	sub	sp, #12
 8009792:	af00      	add	r7, sp, #0
 8009794:	6078      	str	r0, [r7, #4]
 8009796:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8009798:	bf00      	nop
 800979a:	370c      	adds	r7, #12
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80097ae:	bf00      	nop
 80097b0:	370c      	adds	r7, #12
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr

080097ba <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80097ba:	b480      	push	{r7}
 80097bc:	b083      	sub	sp, #12
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
 80097c2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80097c4:	bf00      	nop
 80097c6:	370c      	adds	r7, #12
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr

080097d0 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b083      	sub	sp, #12
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80097d8:	bf00      	nop
 80097da:	370c      	adds	r7, #12
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr

080097e4 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b083      	sub	sp, #12
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80097ec:	bf00      	nop
 80097ee:	370c      	adds	r7, #12
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr

080097f8 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b083      	sub	sp, #12
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8009800:	bf00      	nop
 8009802:	370c      	adds	r7, #12
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800980c:	b480      	push	{r7}
 800980e:	b083      	sub	sp, #12
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8009814:	bf00      	nop
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8009820:	b480      	push	{r7}
 8009822:	b083      	sub	sp, #12
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8009828:	bf00      	nop
 800982a:	370c      	adds	r7, #12
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8009834:	b480      	push	{r7}
 8009836:	b083      	sub	sp, #12
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800983e:	bf00      	nop
 8009840:	370c      	adds	r7, #12
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr

0800984a <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800984a:	b480      	push	{r7}
 800984c:	b083      	sub	sp, #12
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
 8009852:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8009854:	bf00      	nop
 8009856:	370c      	adds	r7, #12
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr

08009860 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8009860:	b480      	push	{r7}
 8009862:	b083      	sub	sp, #12
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800986a:	bf00      	nop
 800986c:	370c      	adds	r7, #12
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr

08009876 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8009876:	b480      	push	{r7}
 8009878:	b085      	sub	sp, #20
 800987a:	af00      	add	r7, sp, #0
 800987c:	60f8      	str	r0, [r7, #12]
 800987e:	60b9      	str	r1, [r7, #8]
 8009880:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8009882:	bf00      	nop
 8009884:	3714      	adds	r7, #20
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr

0800988e <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800988e:	b480      	push	{r7}
 8009890:	b083      	sub	sp, #12
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
 8009896:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8009898:	bf00      	nop
 800989a:	370c      	adds	r7, #12
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b085      	sub	sp, #20
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098b0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80098ba:	4ba7      	ldr	r3, [pc, #668]	; (8009b58 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80098bc:	4013      	ands	r3, r2
 80098be:	68ba      	ldr	r2, [r7, #8]
 80098c0:	0091      	lsls	r1, r2, #2
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	6812      	ldr	r2, [r2, #0]
 80098c6:	430b      	orrs	r3, r1
 80098c8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098d4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098dc:	041a      	lsls	r2, r3, #16
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	430a      	orrs	r2, r1
 80098e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ec:	68ba      	ldr	r2, [r7, #8]
 80098ee:	4413      	add	r3, r2
 80098f0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80098fa:	4b97      	ldr	r3, [pc, #604]	; (8009b58 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80098fc:	4013      	ands	r3, r2
 80098fe:	68ba      	ldr	r2, [r7, #8]
 8009900:	0091      	lsls	r1, r2, #2
 8009902:	687a      	ldr	r2, [r7, #4]
 8009904:	6812      	ldr	r2, [r2, #0]
 8009906:	430b      	orrs	r3, r1
 8009908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009914:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800991c:	041a      	lsls	r2, r3, #16
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	430a      	orrs	r2, r1
 8009924:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800992c:	005b      	lsls	r3, r3, #1
 800992e:	68ba      	ldr	r2, [r7, #8]
 8009930:	4413      	add	r3, r2
 8009932:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800993c:	4b86      	ldr	r3, [pc, #536]	; (8009b58 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800993e:	4013      	ands	r3, r2
 8009940:	68ba      	ldr	r2, [r7, #8]
 8009942:	0091      	lsls	r1, r2, #2
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	6812      	ldr	r2, [r2, #0]
 8009948:	430b      	orrs	r3, r1
 800994a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009956:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800995e:	041a      	lsls	r2, r3, #16
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	430a      	orrs	r2, r1
 8009966:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800996e:	687a      	ldr	r2, [r7, #4]
 8009970:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009972:	fb02 f303 	mul.w	r3, r2, r3
 8009976:	68ba      	ldr	r2, [r7, #8]
 8009978:	4413      	add	r3, r2
 800997a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8009984:	4b74      	ldr	r3, [pc, #464]	; (8009b58 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009986:	4013      	ands	r3, r2
 8009988:	68ba      	ldr	r2, [r7, #8]
 800998a:	0091      	lsls	r1, r2, #2
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	6812      	ldr	r2, [r2, #0]
 8009990:	430b      	orrs	r3, r1
 8009992:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800999e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099a6:	041a      	lsls	r2, r3, #16
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	430a      	orrs	r2, r1
 80099ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099b6:	687a      	ldr	r2, [r7, #4]
 80099b8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80099ba:	fb02 f303 	mul.w	r3, r2, r3
 80099be:	68ba      	ldr	r2, [r7, #8]
 80099c0:	4413      	add	r3, r2
 80099c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80099cc:	4b62      	ldr	r3, [pc, #392]	; (8009b58 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80099ce:	4013      	ands	r3, r2
 80099d0:	68ba      	ldr	r2, [r7, #8]
 80099d2:	0091      	lsls	r1, r2, #2
 80099d4:	687a      	ldr	r2, [r7, #4]
 80099d6:	6812      	ldr	r2, [r2, #0]
 80099d8:	430b      	orrs	r3, r1
 80099da:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099e2:	687a      	ldr	r2, [r7, #4]
 80099e4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80099e6:	fb02 f303 	mul.w	r3, r2, r3
 80099ea:	68ba      	ldr	r2, [r7, #8]
 80099ec:	4413      	add	r3, r2
 80099ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80099f8:	4b57      	ldr	r3, [pc, #348]	; (8009b58 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80099fa:	4013      	ands	r3, r2
 80099fc:	68ba      	ldr	r2, [r7, #8]
 80099fe:	0091      	lsls	r1, r2, #2
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	6812      	ldr	r2, [r2, #0]
 8009a04:	430b      	orrs	r3, r1
 8009a06:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009a12:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a1a:	041a      	lsls	r2, r3, #16
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	430a      	orrs	r2, r1
 8009a22:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a2a:	005b      	lsls	r3, r3, #1
 8009a2c:	68ba      	ldr	r2, [r7, #8]
 8009a2e:	4413      	add	r3, r2
 8009a30:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8009a3a:	4b47      	ldr	r3, [pc, #284]	; (8009b58 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009a3c:	4013      	ands	r3, r2
 8009a3e:	68ba      	ldr	r2, [r7, #8]
 8009a40:	0091      	lsls	r1, r2, #2
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	6812      	ldr	r2, [r2, #0]
 8009a46:	430b      	orrs	r3, r1
 8009a48:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8009a54:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a5c:	041a      	lsls	r2, r3, #16
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	430a      	orrs	r2, r1
 8009a64:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8009a70:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a78:	061a      	lsls	r2, r3, #24
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	430a      	orrs	r2, r1
 8009a80:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a88:	4b34      	ldr	r3, [pc, #208]	; (8009b5c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8009a8a:	4413      	add	r3, r2
 8009a8c:	009a      	lsls	r2, r3, #2
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	441a      	add	r2, r3
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aaa:	00db      	lsls	r3, r3, #3
 8009aac:	441a      	add	r2, r3
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aba:	6879      	ldr	r1, [r7, #4]
 8009abc:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8009abe:	fb01 f303 	mul.w	r3, r1, r3
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	441a      	add	r2, r3
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ad2:	6879      	ldr	r1, [r7, #4]
 8009ad4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8009ad6:	fb01 f303 	mul.w	r3, r1, r3
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	441a      	add	r2, r3
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009aea:	6879      	ldr	r1, [r7, #4]
 8009aec:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8009aee:	fb01 f303 	mul.w	r3, r1, r3
 8009af2:	009b      	lsls	r3, r3, #2
 8009af4:	441a      	add	r2, r3
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b06:	00db      	lsls	r3, r3, #3
 8009b08:	441a      	add	r2, r3
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b1a:	6879      	ldr	r1, [r7, #4]
 8009b1c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8009b1e:	fb01 f303 	mul.w	r3, r1, r3
 8009b22:	009b      	lsls	r3, r3, #2
 8009b24:	441a      	add	r2, r3
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b36:	6879      	ldr	r1, [r7, #4]
 8009b38:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8009b3a:	fb01 f303 	mul.w	r3, r1, r3
 8009b3e:	009b      	lsls	r3, r3, #2
 8009b40:	441a      	add	r2, r3
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b4e:	4a04      	ldr	r2, [pc, #16]	; (8009b60 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d915      	bls.n	8009b80 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8009b54:	e006      	b.n	8009b64 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8009b56:	bf00      	nop
 8009b58:	ffff0003 	.word	0xffff0003
 8009b5c:	10002b00 	.word	0x10002b00
 8009b60:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009b6a:	f043 0220 	orr.w	r2, r3, #32
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2203      	movs	r2, #3
 8009b78:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	e010      	b.n	8009ba2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b84:	60fb      	str	r3, [r7, #12]
 8009b86:	e005      	b.n	8009b94 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	3304      	adds	r3, #4
 8009b92:	60fb      	str	r3, [r7, #12]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b9a:	68fa      	ldr	r2, [r7, #12]
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d3f3      	bcc.n	8009b88 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8009ba0:	2300      	movs	r3, #0
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3714      	adds	r7, #20
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr
 8009bae:	bf00      	nop

08009bb0 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b089      	sub	sp, #36	; 0x24
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	60f8      	str	r0, [r7, #12]
 8009bb8:	60b9      	str	r1, [r7, #8]
 8009bba:	607a      	str	r2, [r7, #4]
 8009bbc:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d10a      	bne.n	8009bdc <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8009bce:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	61fb      	str	r3, [r7, #28]
 8009bda:	e00a      	b.n	8009bf2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8009be4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8009bea:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8009bec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009bf0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	6a1b      	ldr	r3, [r3, #32]
 8009bf6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8009bfc:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8009c02:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8009c08:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c1c:	6839      	ldr	r1, [r7, #0]
 8009c1e:	fb01 f303 	mul.w	r3, r1, r3
 8009c22:	009b      	lsls	r3, r3, #2
 8009c24:	4413      	add	r3, r2
 8009c26:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8009c28:	69bb      	ldr	r3, [r7, #24]
 8009c2a:	69fa      	ldr	r2, [r7, #28]
 8009c2c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8009c2e:	69bb      	ldr	r3, [r7, #24]
 8009c30:	3304      	adds	r3, #4
 8009c32:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8009c34:	69bb      	ldr	r3, [r7, #24]
 8009c36:	693a      	ldr	r2, [r7, #16]
 8009c38:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8009c3a:	69bb      	ldr	r3, [r7, #24]
 8009c3c:	3304      	adds	r3, #4
 8009c3e:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8009c40:	2300      	movs	r3, #0
 8009c42:	617b      	str	r3, [r7, #20]
 8009c44:	e020      	b.n	8009c88 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	3303      	adds	r3, #3
 8009c4a:	687a      	ldr	r2, [r7, #4]
 8009c4c:	4413      	add	r3, r2
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	3302      	adds	r3, #2
 8009c56:	6879      	ldr	r1, [r7, #4]
 8009c58:	440b      	add	r3, r1
 8009c5a:	781b      	ldrb	r3, [r3, #0]
 8009c5c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8009c5e:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	3301      	adds	r3, #1
 8009c64:	6879      	ldr	r1, [r7, #4]
 8009c66:	440b      	add	r3, r1
 8009c68:	781b      	ldrb	r3, [r3, #0]
 8009c6a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8009c6c:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8009c6e:	6879      	ldr	r1, [r7, #4]
 8009c70:	697a      	ldr	r2, [r7, #20]
 8009c72:	440a      	add	r2, r1
 8009c74:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8009c76:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8009c78:	69bb      	ldr	r3, [r7, #24]
 8009c7a:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8009c7c:	69bb      	ldr	r3, [r7, #24]
 8009c7e:	3304      	adds	r3, #4
 8009c80:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	3304      	adds	r3, #4
 8009c86:	617b      	str	r3, [r7, #20]
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	0c1b      	lsrs	r3, r3, #16
 8009c8e:	4a06      	ldr	r2, [pc, #24]	; (8009ca8 <FDCAN_CopyMessageToRAM+0xf8>)
 8009c90:	5cd3      	ldrb	r3, [r2, r3]
 8009c92:	461a      	mov	r2, r3
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d3d5      	bcc.n	8009c46 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8009c9a:	bf00      	nop
 8009c9c:	bf00      	nop
 8009c9e:	3724      	adds	r7, #36	; 0x24
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr
 8009ca8:	0801aca4 	.word	0x0801aca4

08009cac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b089      	sub	sp, #36	; 0x24
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009cba:	4b89      	ldr	r3, [pc, #548]	; (8009ee0 <HAL_GPIO_Init+0x234>)
 8009cbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009cbe:	e194      	b.n	8009fea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	681a      	ldr	r2, [r3, #0]
 8009cc4:	2101      	movs	r1, #1
 8009cc6:	69fb      	ldr	r3, [r7, #28]
 8009cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8009ccc:	4013      	ands	r3, r2
 8009cce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	f000 8186 	beq.w	8009fe4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	f003 0303 	and.w	r3, r3, #3
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d005      	beq.n	8009cf0 <HAL_GPIO_Init+0x44>
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	f003 0303 	and.w	r3, r3, #3
 8009cec:	2b02      	cmp	r3, #2
 8009cee:	d130      	bne.n	8009d52 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	689b      	ldr	r3, [r3, #8]
 8009cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009cf6:	69fb      	ldr	r3, [r7, #28]
 8009cf8:	005b      	lsls	r3, r3, #1
 8009cfa:	2203      	movs	r2, #3
 8009cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8009d00:	43db      	mvns	r3, r3
 8009d02:	69ba      	ldr	r2, [r7, #24]
 8009d04:	4013      	ands	r3, r2
 8009d06:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	68da      	ldr	r2, [r3, #12]
 8009d0c:	69fb      	ldr	r3, [r7, #28]
 8009d0e:	005b      	lsls	r3, r3, #1
 8009d10:	fa02 f303 	lsl.w	r3, r2, r3
 8009d14:	69ba      	ldr	r2, [r7, #24]
 8009d16:	4313      	orrs	r3, r2
 8009d18:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	69ba      	ldr	r2, [r7, #24]
 8009d1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009d26:	2201      	movs	r2, #1
 8009d28:	69fb      	ldr	r3, [r7, #28]
 8009d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d2e:	43db      	mvns	r3, r3
 8009d30:	69ba      	ldr	r2, [r7, #24]
 8009d32:	4013      	ands	r3, r2
 8009d34:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	091b      	lsrs	r3, r3, #4
 8009d3c:	f003 0201 	and.w	r2, r3, #1
 8009d40:	69fb      	ldr	r3, [r7, #28]
 8009d42:	fa02 f303 	lsl.w	r3, r2, r3
 8009d46:	69ba      	ldr	r2, [r7, #24]
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	69ba      	ldr	r2, [r7, #24]
 8009d50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	f003 0303 	and.w	r3, r3, #3
 8009d5a:	2b03      	cmp	r3, #3
 8009d5c:	d017      	beq.n	8009d8e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	68db      	ldr	r3, [r3, #12]
 8009d62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009d64:	69fb      	ldr	r3, [r7, #28]
 8009d66:	005b      	lsls	r3, r3, #1
 8009d68:	2203      	movs	r2, #3
 8009d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d6e:	43db      	mvns	r3, r3
 8009d70:	69ba      	ldr	r2, [r7, #24]
 8009d72:	4013      	ands	r3, r2
 8009d74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	689a      	ldr	r2, [r3, #8]
 8009d7a:	69fb      	ldr	r3, [r7, #28]
 8009d7c:	005b      	lsls	r3, r3, #1
 8009d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8009d82:	69ba      	ldr	r2, [r7, #24]
 8009d84:	4313      	orrs	r3, r2
 8009d86:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	69ba      	ldr	r2, [r7, #24]
 8009d8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	685b      	ldr	r3, [r3, #4]
 8009d92:	f003 0303 	and.w	r3, r3, #3
 8009d96:	2b02      	cmp	r3, #2
 8009d98:	d123      	bne.n	8009de2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009d9a:	69fb      	ldr	r3, [r7, #28]
 8009d9c:	08da      	lsrs	r2, r3, #3
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	3208      	adds	r2, #8
 8009da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009da8:	69fb      	ldr	r3, [r7, #28]
 8009daa:	f003 0307 	and.w	r3, r3, #7
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	220f      	movs	r2, #15
 8009db2:	fa02 f303 	lsl.w	r3, r2, r3
 8009db6:	43db      	mvns	r3, r3
 8009db8:	69ba      	ldr	r2, [r7, #24]
 8009dba:	4013      	ands	r3, r2
 8009dbc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	691a      	ldr	r2, [r3, #16]
 8009dc2:	69fb      	ldr	r3, [r7, #28]
 8009dc4:	f003 0307 	and.w	r3, r3, #7
 8009dc8:	009b      	lsls	r3, r3, #2
 8009dca:	fa02 f303 	lsl.w	r3, r2, r3
 8009dce:	69ba      	ldr	r2, [r7, #24]
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009dd4:	69fb      	ldr	r3, [r7, #28]
 8009dd6:	08da      	lsrs	r2, r3, #3
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	3208      	adds	r2, #8
 8009ddc:	69b9      	ldr	r1, [r7, #24]
 8009dde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009de8:	69fb      	ldr	r3, [r7, #28]
 8009dea:	005b      	lsls	r3, r3, #1
 8009dec:	2203      	movs	r2, #3
 8009dee:	fa02 f303 	lsl.w	r3, r2, r3
 8009df2:	43db      	mvns	r3, r3
 8009df4:	69ba      	ldr	r2, [r7, #24]
 8009df6:	4013      	ands	r3, r2
 8009df8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	f003 0203 	and.w	r2, r3, #3
 8009e02:	69fb      	ldr	r3, [r7, #28]
 8009e04:	005b      	lsls	r3, r3, #1
 8009e06:	fa02 f303 	lsl.w	r3, r2, r3
 8009e0a:	69ba      	ldr	r2, [r7, #24]
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	69ba      	ldr	r2, [r7, #24]
 8009e14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	f000 80e0 	beq.w	8009fe4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009e24:	4b2f      	ldr	r3, [pc, #188]	; (8009ee4 <HAL_GPIO_Init+0x238>)
 8009e26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009e2a:	4a2e      	ldr	r2, [pc, #184]	; (8009ee4 <HAL_GPIO_Init+0x238>)
 8009e2c:	f043 0302 	orr.w	r3, r3, #2
 8009e30:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009e34:	4b2b      	ldr	r3, [pc, #172]	; (8009ee4 <HAL_GPIO_Init+0x238>)
 8009e36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009e3a:	f003 0302 	and.w	r3, r3, #2
 8009e3e:	60fb      	str	r3, [r7, #12]
 8009e40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009e42:	4a29      	ldr	r2, [pc, #164]	; (8009ee8 <HAL_GPIO_Init+0x23c>)
 8009e44:	69fb      	ldr	r3, [r7, #28]
 8009e46:	089b      	lsrs	r3, r3, #2
 8009e48:	3302      	adds	r3, #2
 8009e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009e50:	69fb      	ldr	r3, [r7, #28]
 8009e52:	f003 0303 	and.w	r3, r3, #3
 8009e56:	009b      	lsls	r3, r3, #2
 8009e58:	220f      	movs	r2, #15
 8009e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8009e5e:	43db      	mvns	r3, r3
 8009e60:	69ba      	ldr	r2, [r7, #24]
 8009e62:	4013      	ands	r3, r2
 8009e64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	4a20      	ldr	r2, [pc, #128]	; (8009eec <HAL_GPIO_Init+0x240>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d052      	beq.n	8009f14 <HAL_GPIO_Init+0x268>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	4a1f      	ldr	r2, [pc, #124]	; (8009ef0 <HAL_GPIO_Init+0x244>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d031      	beq.n	8009eda <HAL_GPIO_Init+0x22e>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	4a1e      	ldr	r2, [pc, #120]	; (8009ef4 <HAL_GPIO_Init+0x248>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d02b      	beq.n	8009ed6 <HAL_GPIO_Init+0x22a>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	4a1d      	ldr	r2, [pc, #116]	; (8009ef8 <HAL_GPIO_Init+0x24c>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d025      	beq.n	8009ed2 <HAL_GPIO_Init+0x226>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	4a1c      	ldr	r2, [pc, #112]	; (8009efc <HAL_GPIO_Init+0x250>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d01f      	beq.n	8009ece <HAL_GPIO_Init+0x222>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	4a1b      	ldr	r2, [pc, #108]	; (8009f00 <HAL_GPIO_Init+0x254>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d019      	beq.n	8009eca <HAL_GPIO_Init+0x21e>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	4a1a      	ldr	r2, [pc, #104]	; (8009f04 <HAL_GPIO_Init+0x258>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d013      	beq.n	8009ec6 <HAL_GPIO_Init+0x21a>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	4a19      	ldr	r2, [pc, #100]	; (8009f08 <HAL_GPIO_Init+0x25c>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d00d      	beq.n	8009ec2 <HAL_GPIO_Init+0x216>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	4a18      	ldr	r2, [pc, #96]	; (8009f0c <HAL_GPIO_Init+0x260>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d007      	beq.n	8009ebe <HAL_GPIO_Init+0x212>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	4a17      	ldr	r2, [pc, #92]	; (8009f10 <HAL_GPIO_Init+0x264>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d101      	bne.n	8009eba <HAL_GPIO_Init+0x20e>
 8009eb6:	2309      	movs	r3, #9
 8009eb8:	e02d      	b.n	8009f16 <HAL_GPIO_Init+0x26a>
 8009eba:	230a      	movs	r3, #10
 8009ebc:	e02b      	b.n	8009f16 <HAL_GPIO_Init+0x26a>
 8009ebe:	2308      	movs	r3, #8
 8009ec0:	e029      	b.n	8009f16 <HAL_GPIO_Init+0x26a>
 8009ec2:	2307      	movs	r3, #7
 8009ec4:	e027      	b.n	8009f16 <HAL_GPIO_Init+0x26a>
 8009ec6:	2306      	movs	r3, #6
 8009ec8:	e025      	b.n	8009f16 <HAL_GPIO_Init+0x26a>
 8009eca:	2305      	movs	r3, #5
 8009ecc:	e023      	b.n	8009f16 <HAL_GPIO_Init+0x26a>
 8009ece:	2304      	movs	r3, #4
 8009ed0:	e021      	b.n	8009f16 <HAL_GPIO_Init+0x26a>
 8009ed2:	2303      	movs	r3, #3
 8009ed4:	e01f      	b.n	8009f16 <HAL_GPIO_Init+0x26a>
 8009ed6:	2302      	movs	r3, #2
 8009ed8:	e01d      	b.n	8009f16 <HAL_GPIO_Init+0x26a>
 8009eda:	2301      	movs	r3, #1
 8009edc:	e01b      	b.n	8009f16 <HAL_GPIO_Init+0x26a>
 8009ede:	bf00      	nop
 8009ee0:	58000080 	.word	0x58000080
 8009ee4:	58024400 	.word	0x58024400
 8009ee8:	58000400 	.word	0x58000400
 8009eec:	58020000 	.word	0x58020000
 8009ef0:	58020400 	.word	0x58020400
 8009ef4:	58020800 	.word	0x58020800
 8009ef8:	58020c00 	.word	0x58020c00
 8009efc:	58021000 	.word	0x58021000
 8009f00:	58021400 	.word	0x58021400
 8009f04:	58021800 	.word	0x58021800
 8009f08:	58021c00 	.word	0x58021c00
 8009f0c:	58022000 	.word	0x58022000
 8009f10:	58022400 	.word	0x58022400
 8009f14:	2300      	movs	r3, #0
 8009f16:	69fa      	ldr	r2, [r7, #28]
 8009f18:	f002 0203 	and.w	r2, r2, #3
 8009f1c:	0092      	lsls	r2, r2, #2
 8009f1e:	4093      	lsls	r3, r2
 8009f20:	69ba      	ldr	r2, [r7, #24]
 8009f22:	4313      	orrs	r3, r2
 8009f24:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009f26:	4938      	ldr	r1, [pc, #224]	; (800a008 <HAL_GPIO_Init+0x35c>)
 8009f28:	69fb      	ldr	r3, [r7, #28]
 8009f2a:	089b      	lsrs	r3, r3, #2
 8009f2c:	3302      	adds	r3, #2
 8009f2e:	69ba      	ldr	r2, [r7, #24]
 8009f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	43db      	mvns	r3, r3
 8009f40:	69ba      	ldr	r2, [r7, #24]
 8009f42:	4013      	ands	r3, r2
 8009f44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d003      	beq.n	8009f5a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8009f52:	69ba      	ldr	r2, [r7, #24]
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	4313      	orrs	r3, r2
 8009f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009f5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009f5e:	69bb      	ldr	r3, [r7, #24]
 8009f60:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	43db      	mvns	r3, r3
 8009f6e:	69ba      	ldr	r2, [r7, #24]
 8009f70:	4013      	ands	r3, r2
 8009f72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d003      	beq.n	8009f88 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009f80:	69ba      	ldr	r2, [r7, #24]
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	4313      	orrs	r3, r2
 8009f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009f88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009f8c:	69bb      	ldr	r3, [r7, #24]
 8009f8e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	43db      	mvns	r3, r3
 8009f9a:	69ba      	ldr	r2, [r7, #24]
 8009f9c:	4013      	ands	r3, r2
 8009f9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d003      	beq.n	8009fb4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8009fac:	69ba      	ldr	r2, [r7, #24]
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	69ba      	ldr	r2, [r7, #24]
 8009fb8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	43db      	mvns	r3, r3
 8009fc4:	69ba      	ldr	r2, [r7, #24]
 8009fc6:	4013      	ands	r3, r2
 8009fc8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d003      	beq.n	8009fde <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8009fd6:	69ba      	ldr	r2, [r7, #24]
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	69ba      	ldr	r2, [r7, #24]
 8009fe2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009fe4:	69fb      	ldr	r3, [r7, #28]
 8009fe6:	3301      	adds	r3, #1
 8009fe8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	681a      	ldr	r2, [r3, #0]
 8009fee:	69fb      	ldr	r3, [r7, #28]
 8009ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	f47f ae63 	bne.w	8009cc0 <HAL_GPIO_Init+0x14>
  }
}
 8009ffa:	bf00      	nop
 8009ffc:	bf00      	nop
 8009ffe:	3724      	adds	r7, #36	; 0x24
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr
 800a008:	58000400 	.word	0x58000400

0800a00c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b083      	sub	sp, #12
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	460b      	mov	r3, r1
 800a016:	807b      	strh	r3, [r7, #2]
 800a018:	4613      	mov	r3, r2
 800a01a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a01c:	787b      	ldrb	r3, [r7, #1]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d003      	beq.n	800a02a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a022:	887a      	ldrh	r2, [r7, #2]
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a028:	e003      	b.n	800a032 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a02a:	887b      	ldrh	r3, [r7, #2]
 800a02c:	041a      	lsls	r2, r3, #16
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	619a      	str	r2, [r3, #24]
}
 800a032:	bf00      	nop
 800a034:	370c      	adds	r7, #12
 800a036:	46bd      	mov	sp, r7
 800a038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03c:	4770      	bx	lr

0800a03e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a03e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a040:	b08f      	sub	sp, #60	; 0x3c
 800a042:	af0a      	add	r7, sp, #40	; 0x28
 800a044:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d101      	bne.n	800a050 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a04c:	2301      	movs	r3, #1
 800a04e:	e116      	b.n	800a27e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d106      	bne.n	800a070 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2200      	movs	r2, #0
 800a066:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f00d f912 	bl	8017294 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2203      	movs	r2, #3
 800a074:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a07c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a080:	2b00      	cmp	r3, #0
 800a082:	d102      	bne.n	800a08a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2200      	movs	r2, #0
 800a088:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4618      	mov	r0, r3
 800a090:	f009 fc5b 	bl	801394a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	603b      	str	r3, [r7, #0]
 800a09a:	687e      	ldr	r6, [r7, #4]
 800a09c:	466d      	mov	r5, sp
 800a09e:	f106 0410 	add.w	r4, r6, #16
 800a0a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a0a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a0a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a0a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a0aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a0ae:	e885 0003 	stmia.w	r5, {r0, r1}
 800a0b2:	1d33      	adds	r3, r6, #4
 800a0b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a0b6:	6838      	ldr	r0, [r7, #0]
 800a0b8:	f009 fb26 	bl	8013708 <USB_CoreInit>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d005      	beq.n	800a0ce <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2202      	movs	r2, #2
 800a0c6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	e0d7      	b.n	800a27e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	2100      	movs	r1, #0
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f009 fc49 	bl	801396c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a0da:	2300      	movs	r3, #0
 800a0dc:	73fb      	strb	r3, [r7, #15]
 800a0de:	e04a      	b.n	800a176 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a0e0:	7bfa      	ldrb	r2, [r7, #15]
 800a0e2:	6879      	ldr	r1, [r7, #4]
 800a0e4:	4613      	mov	r3, r2
 800a0e6:	00db      	lsls	r3, r3, #3
 800a0e8:	4413      	add	r3, r2
 800a0ea:	009b      	lsls	r3, r3, #2
 800a0ec:	440b      	add	r3, r1
 800a0ee:	333d      	adds	r3, #61	; 0x3d
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a0f4:	7bfa      	ldrb	r2, [r7, #15]
 800a0f6:	6879      	ldr	r1, [r7, #4]
 800a0f8:	4613      	mov	r3, r2
 800a0fa:	00db      	lsls	r3, r3, #3
 800a0fc:	4413      	add	r3, r2
 800a0fe:	009b      	lsls	r3, r3, #2
 800a100:	440b      	add	r3, r1
 800a102:	333c      	adds	r3, #60	; 0x3c
 800a104:	7bfa      	ldrb	r2, [r7, #15]
 800a106:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a108:	7bfa      	ldrb	r2, [r7, #15]
 800a10a:	7bfb      	ldrb	r3, [r7, #15]
 800a10c:	b298      	uxth	r0, r3
 800a10e:	6879      	ldr	r1, [r7, #4]
 800a110:	4613      	mov	r3, r2
 800a112:	00db      	lsls	r3, r3, #3
 800a114:	4413      	add	r3, r2
 800a116:	009b      	lsls	r3, r3, #2
 800a118:	440b      	add	r3, r1
 800a11a:	3344      	adds	r3, #68	; 0x44
 800a11c:	4602      	mov	r2, r0
 800a11e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a120:	7bfa      	ldrb	r2, [r7, #15]
 800a122:	6879      	ldr	r1, [r7, #4]
 800a124:	4613      	mov	r3, r2
 800a126:	00db      	lsls	r3, r3, #3
 800a128:	4413      	add	r3, r2
 800a12a:	009b      	lsls	r3, r3, #2
 800a12c:	440b      	add	r3, r1
 800a12e:	3340      	adds	r3, #64	; 0x40
 800a130:	2200      	movs	r2, #0
 800a132:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a134:	7bfa      	ldrb	r2, [r7, #15]
 800a136:	6879      	ldr	r1, [r7, #4]
 800a138:	4613      	mov	r3, r2
 800a13a:	00db      	lsls	r3, r3, #3
 800a13c:	4413      	add	r3, r2
 800a13e:	009b      	lsls	r3, r3, #2
 800a140:	440b      	add	r3, r1
 800a142:	3348      	adds	r3, #72	; 0x48
 800a144:	2200      	movs	r2, #0
 800a146:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a148:	7bfa      	ldrb	r2, [r7, #15]
 800a14a:	6879      	ldr	r1, [r7, #4]
 800a14c:	4613      	mov	r3, r2
 800a14e:	00db      	lsls	r3, r3, #3
 800a150:	4413      	add	r3, r2
 800a152:	009b      	lsls	r3, r3, #2
 800a154:	440b      	add	r3, r1
 800a156:	334c      	adds	r3, #76	; 0x4c
 800a158:	2200      	movs	r2, #0
 800a15a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a15c:	7bfa      	ldrb	r2, [r7, #15]
 800a15e:	6879      	ldr	r1, [r7, #4]
 800a160:	4613      	mov	r3, r2
 800a162:	00db      	lsls	r3, r3, #3
 800a164:	4413      	add	r3, r2
 800a166:	009b      	lsls	r3, r3, #2
 800a168:	440b      	add	r3, r1
 800a16a:	3354      	adds	r3, #84	; 0x54
 800a16c:	2200      	movs	r2, #0
 800a16e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a170:	7bfb      	ldrb	r3, [r7, #15]
 800a172:	3301      	adds	r3, #1
 800a174:	73fb      	strb	r3, [r7, #15]
 800a176:	7bfa      	ldrb	r2, [r7, #15]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	685b      	ldr	r3, [r3, #4]
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d3af      	bcc.n	800a0e0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a180:	2300      	movs	r3, #0
 800a182:	73fb      	strb	r3, [r7, #15]
 800a184:	e044      	b.n	800a210 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a186:	7bfa      	ldrb	r2, [r7, #15]
 800a188:	6879      	ldr	r1, [r7, #4]
 800a18a:	4613      	mov	r3, r2
 800a18c:	00db      	lsls	r3, r3, #3
 800a18e:	4413      	add	r3, r2
 800a190:	009b      	lsls	r3, r3, #2
 800a192:	440b      	add	r3, r1
 800a194:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800a198:	2200      	movs	r2, #0
 800a19a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a19c:	7bfa      	ldrb	r2, [r7, #15]
 800a19e:	6879      	ldr	r1, [r7, #4]
 800a1a0:	4613      	mov	r3, r2
 800a1a2:	00db      	lsls	r3, r3, #3
 800a1a4:	4413      	add	r3, r2
 800a1a6:	009b      	lsls	r3, r3, #2
 800a1a8:	440b      	add	r3, r1
 800a1aa:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800a1ae:	7bfa      	ldrb	r2, [r7, #15]
 800a1b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a1b2:	7bfa      	ldrb	r2, [r7, #15]
 800a1b4:	6879      	ldr	r1, [r7, #4]
 800a1b6:	4613      	mov	r3, r2
 800a1b8:	00db      	lsls	r3, r3, #3
 800a1ba:	4413      	add	r3, r2
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	440b      	add	r3, r1
 800a1c0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a1c8:	7bfa      	ldrb	r2, [r7, #15]
 800a1ca:	6879      	ldr	r1, [r7, #4]
 800a1cc:	4613      	mov	r3, r2
 800a1ce:	00db      	lsls	r3, r3, #3
 800a1d0:	4413      	add	r3, r2
 800a1d2:	009b      	lsls	r3, r3, #2
 800a1d4:	440b      	add	r3, r1
 800a1d6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800a1da:	2200      	movs	r2, #0
 800a1dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a1de:	7bfa      	ldrb	r2, [r7, #15]
 800a1e0:	6879      	ldr	r1, [r7, #4]
 800a1e2:	4613      	mov	r3, r2
 800a1e4:	00db      	lsls	r3, r3, #3
 800a1e6:	4413      	add	r3, r2
 800a1e8:	009b      	lsls	r3, r3, #2
 800a1ea:	440b      	add	r3, r1
 800a1ec:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a1f4:	7bfa      	ldrb	r2, [r7, #15]
 800a1f6:	6879      	ldr	r1, [r7, #4]
 800a1f8:	4613      	mov	r3, r2
 800a1fa:	00db      	lsls	r3, r3, #3
 800a1fc:	4413      	add	r3, r2
 800a1fe:	009b      	lsls	r3, r3, #2
 800a200:	440b      	add	r3, r1
 800a202:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800a206:	2200      	movs	r2, #0
 800a208:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a20a:	7bfb      	ldrb	r3, [r7, #15]
 800a20c:	3301      	adds	r3, #1
 800a20e:	73fb      	strb	r3, [r7, #15]
 800a210:	7bfa      	ldrb	r2, [r7, #15]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	429a      	cmp	r2, r3
 800a218:	d3b5      	bcc.n	800a186 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	603b      	str	r3, [r7, #0]
 800a220:	687e      	ldr	r6, [r7, #4]
 800a222:	466d      	mov	r5, sp
 800a224:	f106 0410 	add.w	r4, r6, #16
 800a228:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a22a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a22c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a22e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a230:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a234:	e885 0003 	stmia.w	r5, {r0, r1}
 800a238:	1d33      	adds	r3, r6, #4
 800a23a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a23c:	6838      	ldr	r0, [r7, #0]
 800a23e:	f009 fbe1 	bl	8013a04 <USB_DevInit>
 800a242:	4603      	mov	r3, r0
 800a244:	2b00      	cmp	r3, #0
 800a246:	d005      	beq.n	800a254 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2202      	movs	r2, #2
 800a24c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800a250:	2301      	movs	r3, #1
 800a252:	e014      	b.n	800a27e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2200      	movs	r2, #0
 800a258:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2201      	movs	r2, #1
 800a260:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d102      	bne.n	800a272 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f001 f98b 	bl	800b588 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4618      	mov	r0, r3
 800a278:	f00a fd2f 	bl	8014cda <USB_DevDisconnect>

  return HAL_OK;
 800a27c:	2300      	movs	r3, #0
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3714      	adds	r7, #20
 800a282:	46bd      	mov	sp, r7
 800a284:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a286 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a286:	b580      	push	{r7, lr}
 800a288:	b084      	sub	sp, #16
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a29a:	2b01      	cmp	r3, #1
 800a29c:	d101      	bne.n	800a2a2 <HAL_PCD_Start+0x1c>
 800a29e:	2302      	movs	r3, #2
 800a2a0:	e020      	b.n	800a2e4 <HAL_PCD_Start+0x5e>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d109      	bne.n	800a2c6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d005      	beq.n	800a2c6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f009 fb2c 	bl	8013928 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f00a fcdf 	bl	8014c98 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a2e2:	2300      	movs	r3, #0
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3710      	adds	r7, #16
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a2ec:	b590      	push	{r4, r7, lr}
 800a2ee:	b08d      	sub	sp, #52	; 0x34
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2fa:	6a3b      	ldr	r3, [r7, #32]
 800a2fc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4618      	mov	r0, r3
 800a304:	f00a fd9d 	bl	8014e42 <USB_GetMode>
 800a308:	4603      	mov	r3, r0
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	f040 84b7 	bne.w	800ac7e <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4618      	mov	r0, r3
 800a316:	f00a fd01 	bl	8014d1c <USB_ReadInterrupts>
 800a31a:	4603      	mov	r3, r0
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	f000 84ad 	beq.w	800ac7c <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800a322:	69fb      	ldr	r3, [r7, #28]
 800a324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a328:	689b      	ldr	r3, [r3, #8]
 800a32a:	0a1b      	lsrs	r3, r3, #8
 800a32c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4618      	mov	r0, r3
 800a33c:	f00a fcee 	bl	8014d1c <USB_ReadInterrupts>
 800a340:	4603      	mov	r3, r0
 800a342:	f003 0302 	and.w	r3, r3, #2
 800a346:	2b02      	cmp	r3, #2
 800a348:	d107      	bne.n	800a35a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	695a      	ldr	r2, [r3, #20]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f002 0202 	and.w	r2, r2, #2
 800a358:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4618      	mov	r0, r3
 800a360:	f00a fcdc 	bl	8014d1c <USB_ReadInterrupts>
 800a364:	4603      	mov	r3, r0
 800a366:	f003 0310 	and.w	r3, r3, #16
 800a36a:	2b10      	cmp	r3, #16
 800a36c:	d161      	bne.n	800a432 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	699a      	ldr	r2, [r3, #24]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f022 0210 	bic.w	r2, r2, #16
 800a37c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800a37e:	6a3b      	ldr	r3, [r7, #32]
 800a380:	6a1b      	ldr	r3, [r3, #32]
 800a382:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800a384:	69bb      	ldr	r3, [r7, #24]
 800a386:	f003 020f 	and.w	r2, r3, #15
 800a38a:	4613      	mov	r3, r2
 800a38c:	00db      	lsls	r3, r3, #3
 800a38e:	4413      	add	r3, r2
 800a390:	009b      	lsls	r3, r3, #2
 800a392:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	4413      	add	r3, r2
 800a39a:	3304      	adds	r3, #4
 800a39c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800a39e:	69bb      	ldr	r3, [r7, #24]
 800a3a0:	0c5b      	lsrs	r3, r3, #17
 800a3a2:	f003 030f 	and.w	r3, r3, #15
 800a3a6:	2b02      	cmp	r3, #2
 800a3a8:	d124      	bne.n	800a3f4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800a3aa:	69ba      	ldr	r2, [r7, #24]
 800a3ac:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800a3b0:	4013      	ands	r3, r2
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d035      	beq.n	800a422 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800a3ba:	69bb      	ldr	r3, [r7, #24]
 800a3bc:	091b      	lsrs	r3, r3, #4
 800a3be:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a3c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a3c4:	b29b      	uxth	r3, r3
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	6a38      	ldr	r0, [r7, #32]
 800a3ca:	f00a fb13 	bl	80149f4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	691a      	ldr	r2, [r3, #16]
 800a3d2:	69bb      	ldr	r3, [r7, #24]
 800a3d4:	091b      	lsrs	r3, r3, #4
 800a3d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a3da:	441a      	add	r2, r3
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	6a1a      	ldr	r2, [r3, #32]
 800a3e4:	69bb      	ldr	r3, [r7, #24]
 800a3e6:	091b      	lsrs	r3, r3, #4
 800a3e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a3ec:	441a      	add	r2, r3
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	621a      	str	r2, [r3, #32]
 800a3f2:	e016      	b.n	800a422 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800a3f4:	69bb      	ldr	r3, [r7, #24]
 800a3f6:	0c5b      	lsrs	r3, r3, #17
 800a3f8:	f003 030f 	and.w	r3, r3, #15
 800a3fc:	2b06      	cmp	r3, #6
 800a3fe:	d110      	bne.n	800a422 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a406:	2208      	movs	r2, #8
 800a408:	4619      	mov	r1, r3
 800a40a:	6a38      	ldr	r0, [r7, #32]
 800a40c:	f00a faf2 	bl	80149f4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	6a1a      	ldr	r2, [r3, #32]
 800a414:	69bb      	ldr	r3, [r7, #24]
 800a416:	091b      	lsrs	r3, r3, #4
 800a418:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a41c:	441a      	add	r2, r3
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	699a      	ldr	r2, [r3, #24]
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f042 0210 	orr.w	r2, r2, #16
 800a430:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4618      	mov	r0, r3
 800a438:	f00a fc70 	bl	8014d1c <USB_ReadInterrupts>
 800a43c:	4603      	mov	r3, r0
 800a43e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a442:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a446:	f040 80a7 	bne.w	800a598 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800a44a:	2300      	movs	r3, #0
 800a44c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	4618      	mov	r0, r3
 800a454:	f00a fc75 	bl	8014d42 <USB_ReadDevAllOutEpInterrupt>
 800a458:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800a45a:	e099      	b.n	800a590 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800a45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a45e:	f003 0301 	and.w	r3, r3, #1
 800a462:	2b00      	cmp	r3, #0
 800a464:	f000 808e 	beq.w	800a584 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a46e:	b2d2      	uxtb	r2, r2
 800a470:	4611      	mov	r1, r2
 800a472:	4618      	mov	r0, r3
 800a474:	f00a fc99 	bl	8014daa <USB_ReadDevOutEPInterrupt>
 800a478:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	f003 0301 	and.w	r3, r3, #1
 800a480:	2b00      	cmp	r3, #0
 800a482:	d00c      	beq.n	800a49e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800a484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a486:	015a      	lsls	r2, r3, #5
 800a488:	69fb      	ldr	r3, [r7, #28]
 800a48a:	4413      	add	r3, r2
 800a48c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a490:	461a      	mov	r2, r3
 800a492:	2301      	movs	r3, #1
 800a494:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800a496:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f000 feef 	bl	800b27c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	f003 0308 	and.w	r3, r3, #8
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d00c      	beq.n	800a4c2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800a4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4aa:	015a      	lsls	r2, r3, #5
 800a4ac:	69fb      	ldr	r3, [r7, #28]
 800a4ae:	4413      	add	r3, r2
 800a4b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	2308      	movs	r3, #8
 800a4b8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800a4ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f000 ffc5 	bl	800b44c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	f003 0310 	and.w	r3, r3, #16
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d008      	beq.n	800a4de <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800a4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ce:	015a      	lsls	r2, r3, #5
 800a4d0:	69fb      	ldr	r3, [r7, #28]
 800a4d2:	4413      	add	r3, r2
 800a4d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4d8:	461a      	mov	r2, r3
 800a4da:	2310      	movs	r3, #16
 800a4dc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	f003 0302 	and.w	r3, r3, #2
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d030      	beq.n	800a54a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800a4e8:	6a3b      	ldr	r3, [r7, #32]
 800a4ea:	695b      	ldr	r3, [r3, #20]
 800a4ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4f0:	2b80      	cmp	r3, #128	; 0x80
 800a4f2:	d109      	bne.n	800a508 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800a4f4:	69fb      	ldr	r3, [r7, #28]
 800a4f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4fa:	685b      	ldr	r3, [r3, #4]
 800a4fc:	69fa      	ldr	r2, [r7, #28]
 800a4fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a502:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a506:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800a508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a50a:	4613      	mov	r3, r2
 800a50c:	00db      	lsls	r3, r3, #3
 800a50e:	4413      	add	r3, r2
 800a510:	009b      	lsls	r3, r3, #2
 800a512:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	4413      	add	r3, r2
 800a51a:	3304      	adds	r3, #4
 800a51c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	78db      	ldrb	r3, [r3, #3]
 800a522:	2b01      	cmp	r3, #1
 800a524:	d108      	bne.n	800a538 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	2200      	movs	r2, #0
 800a52a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800a52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52e:	b2db      	uxtb	r3, r3
 800a530:	4619      	mov	r1, r3
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f00c ffd2 	bl	80174dc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800a538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a53a:	015a      	lsls	r2, r3, #5
 800a53c:	69fb      	ldr	r3, [r7, #28]
 800a53e:	4413      	add	r3, r2
 800a540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a544:	461a      	mov	r2, r3
 800a546:	2302      	movs	r3, #2
 800a548:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	f003 0320 	and.w	r3, r3, #32
 800a550:	2b00      	cmp	r3, #0
 800a552:	d008      	beq.n	800a566 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a556:	015a      	lsls	r2, r3, #5
 800a558:	69fb      	ldr	r3, [r7, #28]
 800a55a:	4413      	add	r3, r2
 800a55c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a560:	461a      	mov	r2, r3
 800a562:	2320      	movs	r3, #32
 800a564:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d009      	beq.n	800a584 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800a570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a572:	015a      	lsls	r2, r3, #5
 800a574:	69fb      	ldr	r3, [r7, #28]
 800a576:	4413      	add	r3, r2
 800a578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a57c:	461a      	mov	r2, r3
 800a57e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a582:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800a584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a586:	3301      	adds	r3, #1
 800a588:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a58c:	085b      	lsrs	r3, r3, #1
 800a58e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a592:	2b00      	cmp	r3, #0
 800a594:	f47f af62 	bne.w	800a45c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4618      	mov	r0, r3
 800a59e:	f00a fbbd 	bl	8014d1c <USB_ReadInterrupts>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a5a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a5ac:	f040 80db 	bne.w	800a766 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f00a fbde 	bl	8014d76 <USB_ReadDevAllInEpInterrupt>
 800a5ba:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800a5c0:	e0cd      	b.n	800a75e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800a5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c4:	f003 0301 	and.w	r3, r3, #1
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	f000 80c2 	beq.w	800a752 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5d4:	b2d2      	uxtb	r2, r2
 800a5d6:	4611      	mov	r1, r2
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f00a fc04 	bl	8014de6 <USB_ReadDevInEPInterrupt>
 800a5de:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	f003 0301 	and.w	r3, r3, #1
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d057      	beq.n	800a69a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ec:	f003 030f 	and.w	r3, r3, #15
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a5f6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a5f8:	69fb      	ldr	r3, [r7, #28]
 800a5fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	43db      	mvns	r3, r3
 800a604:	69f9      	ldr	r1, [r7, #28]
 800a606:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a60a:	4013      	ands	r3, r2
 800a60c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800a60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a610:	015a      	lsls	r2, r3, #5
 800a612:	69fb      	ldr	r3, [r7, #28]
 800a614:	4413      	add	r3, r2
 800a616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a61a:	461a      	mov	r2, r3
 800a61c:	2301      	movs	r3, #1
 800a61e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	691b      	ldr	r3, [r3, #16]
 800a624:	2b01      	cmp	r3, #1
 800a626:	d132      	bne.n	800a68e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800a628:	6879      	ldr	r1, [r7, #4]
 800a62a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a62c:	4613      	mov	r3, r2
 800a62e:	00db      	lsls	r3, r3, #3
 800a630:	4413      	add	r3, r2
 800a632:	009b      	lsls	r3, r3, #2
 800a634:	440b      	add	r3, r1
 800a636:	334c      	adds	r3, #76	; 0x4c
 800a638:	6819      	ldr	r1, [r3, #0]
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a63e:	4613      	mov	r3, r2
 800a640:	00db      	lsls	r3, r3, #3
 800a642:	4413      	add	r3, r2
 800a644:	009b      	lsls	r3, r3, #2
 800a646:	4403      	add	r3, r0
 800a648:	3348      	adds	r3, #72	; 0x48
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4419      	add	r1, r3
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a652:	4613      	mov	r3, r2
 800a654:	00db      	lsls	r3, r3, #3
 800a656:	4413      	add	r3, r2
 800a658:	009b      	lsls	r3, r3, #2
 800a65a:	4403      	add	r3, r0
 800a65c:	334c      	adds	r3, #76	; 0x4c
 800a65e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800a660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a662:	2b00      	cmp	r3, #0
 800a664:	d113      	bne.n	800a68e <HAL_PCD_IRQHandler+0x3a2>
 800a666:	6879      	ldr	r1, [r7, #4]
 800a668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a66a:	4613      	mov	r3, r2
 800a66c:	00db      	lsls	r3, r3, #3
 800a66e:	4413      	add	r3, r2
 800a670:	009b      	lsls	r3, r3, #2
 800a672:	440b      	add	r3, r1
 800a674:	3354      	adds	r3, #84	; 0x54
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d108      	bne.n	800a68e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6818      	ldr	r0, [r3, #0]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a686:	461a      	mov	r2, r3
 800a688:	2101      	movs	r1, #1
 800a68a:	f00a fc0d 	bl	8014ea8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800a68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a690:	b2db      	uxtb	r3, r3
 800a692:	4619      	mov	r1, r3
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f00c fe9c 	bl	80173d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	f003 0308 	and.w	r3, r3, #8
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d008      	beq.n	800a6b6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800a6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a6:	015a      	lsls	r2, r3, #5
 800a6a8:	69fb      	ldr	r3, [r7, #28]
 800a6aa:	4413      	add	r3, r2
 800a6ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	2308      	movs	r3, #8
 800a6b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	f003 0310 	and.w	r3, r3, #16
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d008      	beq.n	800a6d2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800a6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c2:	015a      	lsls	r2, r3, #5
 800a6c4:	69fb      	ldr	r3, [r7, #28]
 800a6c6:	4413      	add	r3, r2
 800a6c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6cc:	461a      	mov	r2, r3
 800a6ce:	2310      	movs	r3, #16
 800a6d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d008      	beq.n	800a6ee <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800a6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6de:	015a      	lsls	r2, r3, #5
 800a6e0:	69fb      	ldr	r3, [r7, #28]
 800a6e2:	4413      	add	r3, r2
 800a6e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	2340      	movs	r3, #64	; 0x40
 800a6ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800a6ee:	693b      	ldr	r3, [r7, #16]
 800a6f0:	f003 0302 	and.w	r3, r3, #2
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d023      	beq.n	800a740 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800a6f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a6fa:	6a38      	ldr	r0, [r7, #32]
 800a6fc:	f009 fae0 	bl	8013cc0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800a700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a702:	4613      	mov	r3, r2
 800a704:	00db      	lsls	r3, r3, #3
 800a706:	4413      	add	r3, r2
 800a708:	009b      	lsls	r3, r3, #2
 800a70a:	3338      	adds	r3, #56	; 0x38
 800a70c:	687a      	ldr	r2, [r7, #4]
 800a70e:	4413      	add	r3, r2
 800a710:	3304      	adds	r3, #4
 800a712:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	78db      	ldrb	r3, [r3, #3]
 800a718:	2b01      	cmp	r3, #1
 800a71a:	d108      	bne.n	800a72e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	2200      	movs	r2, #0
 800a720:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a724:	b2db      	uxtb	r3, r3
 800a726:	4619      	mov	r1, r3
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f00c fee9 	bl	8017500 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800a72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a730:	015a      	lsls	r2, r3, #5
 800a732:	69fb      	ldr	r3, [r7, #28]
 800a734:	4413      	add	r3, r2
 800a736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a73a:	461a      	mov	r2, r3
 800a73c:	2302      	movs	r3, #2
 800a73e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a746:	2b00      	cmp	r3, #0
 800a748:	d003      	beq.n	800a752 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800a74a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f000 fd08 	bl	800b162 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800a752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a754:	3301      	adds	r3, #1
 800a756:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a75a:	085b      	lsrs	r3, r3, #1
 800a75c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a760:	2b00      	cmp	r3, #0
 800a762:	f47f af2e 	bne.w	800a5c2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	4618      	mov	r0, r3
 800a76c:	f00a fad6 	bl	8014d1c <USB_ReadInterrupts>
 800a770:	4603      	mov	r3, r0
 800a772:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a776:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a77a:	d122      	bne.n	800a7c2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a77c:	69fb      	ldr	r3, [r7, #28]
 800a77e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	69fa      	ldr	r2, [r7, #28]
 800a786:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a78a:	f023 0301 	bic.w	r3, r3, #1
 800a78e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800a796:	2b01      	cmp	r3, #1
 800a798:	d108      	bne.n	800a7ac <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2200      	movs	r2, #0
 800a79e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a7a2:	2100      	movs	r1, #0
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f000 ff13 	bl	800b5d0 <HAL_PCDEx_LPM_Callback>
 800a7aa:	e002      	b.n	800a7b2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f00c fe87 	bl	80174c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	695a      	ldr	r2, [r3, #20]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800a7c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f00a faa8 	bl	8014d1c <USB_ReadInterrupts>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a7d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7d6:	d112      	bne.n	800a7fe <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800a7d8:	69fb      	ldr	r3, [r7, #28]
 800a7da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7de:	689b      	ldr	r3, [r3, #8]
 800a7e0:	f003 0301 	and.w	r3, r3, #1
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d102      	bne.n	800a7ee <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f00c fe43 	bl	8017474 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	695a      	ldr	r2, [r3, #20]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800a7fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4618      	mov	r0, r3
 800a804:	f00a fa8a 	bl	8014d1c <USB_ReadInterrupts>
 800a808:	4603      	mov	r3, r0
 800a80a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a80e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a812:	d121      	bne.n	800a858 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	695a      	ldr	r2, [r3, #20]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800a822:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d111      	bne.n	800a852 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2201      	movs	r2, #1
 800a832:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a83c:	089b      	lsrs	r3, r3, #2
 800a83e:	f003 020f 	and.w	r2, r3, #15
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a848:	2101      	movs	r1, #1
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 fec0 	bl	800b5d0 <HAL_PCDEx_LPM_Callback>
 800a850:	e002      	b.n	800a858 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f00c fe0e 	bl	8017474 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4618      	mov	r0, r3
 800a85e:	f00a fa5d 	bl	8014d1c <USB_ReadInterrupts>
 800a862:	4603      	mov	r3, r0
 800a864:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a86c:	f040 80b7 	bne.w	800a9de <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a870:	69fb      	ldr	r3, [r7, #28]
 800a872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	69fa      	ldr	r2, [r7, #28]
 800a87a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a87e:	f023 0301 	bic.w	r3, r3, #1
 800a882:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	2110      	movs	r1, #16
 800a88a:	4618      	mov	r0, r3
 800a88c:	f009 fa18 	bl	8013cc0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a890:	2300      	movs	r3, #0
 800a892:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a894:	e046      	b.n	800a924 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800a896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a898:	015a      	lsls	r2, r3, #5
 800a89a:	69fb      	ldr	r3, [r7, #28]
 800a89c:	4413      	add	r3, r2
 800a89e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8a2:	461a      	mov	r2, r3
 800a8a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a8a8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ac:	015a      	lsls	r2, r3, #5
 800a8ae:	69fb      	ldr	r3, [r7, #28]
 800a8b0:	4413      	add	r3, r2
 800a8b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8ba:	0151      	lsls	r1, r2, #5
 800a8bc:	69fa      	ldr	r2, [r7, #28]
 800a8be:	440a      	add	r2, r1
 800a8c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a8c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a8ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8cc:	015a      	lsls	r2, r3, #5
 800a8ce:	69fb      	ldr	r3, [r7, #28]
 800a8d0:	4413      	add	r3, r2
 800a8d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8d6:	461a      	mov	r2, r3
 800a8d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a8dc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8e0:	015a      	lsls	r2, r3, #5
 800a8e2:	69fb      	ldr	r3, [r7, #28]
 800a8e4:	4413      	add	r3, r2
 800a8e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8ee:	0151      	lsls	r1, r2, #5
 800a8f0:	69fa      	ldr	r2, [r7, #28]
 800a8f2:	440a      	add	r2, r1
 800a8f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a8fc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a900:	015a      	lsls	r2, r3, #5
 800a902:	69fb      	ldr	r3, [r7, #28]
 800a904:	4413      	add	r3, r2
 800a906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a90e:	0151      	lsls	r1, r2, #5
 800a910:	69fa      	ldr	r2, [r7, #28]
 800a912:	440a      	add	r2, r1
 800a914:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a918:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a91c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a920:	3301      	adds	r3, #1
 800a922:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d3b3      	bcc.n	800a896 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a92e:	69fb      	ldr	r3, [r7, #28]
 800a930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a934:	69db      	ldr	r3, [r3, #28]
 800a936:	69fa      	ldr	r2, [r7, #28]
 800a938:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a93c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800a940:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a946:	2b00      	cmp	r3, #0
 800a948:	d016      	beq.n	800a978 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a94a:	69fb      	ldr	r3, [r7, #28]
 800a94c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a950:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a954:	69fa      	ldr	r2, [r7, #28]
 800a956:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a95a:	f043 030b 	orr.w	r3, r3, #11
 800a95e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a962:	69fb      	ldr	r3, [r7, #28]
 800a964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a96a:	69fa      	ldr	r2, [r7, #28]
 800a96c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a970:	f043 030b 	orr.w	r3, r3, #11
 800a974:	6453      	str	r3, [r2, #68]	; 0x44
 800a976:	e015      	b.n	800a9a4 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a978:	69fb      	ldr	r3, [r7, #28]
 800a97a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a97e:	695a      	ldr	r2, [r3, #20]
 800a980:	69fb      	ldr	r3, [r7, #28]
 800a982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a986:	4619      	mov	r1, r3
 800a988:	f242 032b 	movw	r3, #8235	; 0x202b
 800a98c:	4313      	orrs	r3, r2
 800a98e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a990:	69fb      	ldr	r3, [r7, #28]
 800a992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a996:	691b      	ldr	r3, [r3, #16]
 800a998:	69fa      	ldr	r2, [r7, #28]
 800a99a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a99e:	f043 030b 	orr.w	r3, r3, #11
 800a9a2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a9a4:	69fb      	ldr	r3, [r7, #28]
 800a9a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	69fa      	ldr	r2, [r7, #28]
 800a9ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a9b2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a9b6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6818      	ldr	r0, [r3, #0]
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	691b      	ldr	r3, [r3, #16]
 800a9c0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a9c8:	461a      	mov	r2, r3
 800a9ca:	f00a fa6d 	bl	8014ea8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	695a      	ldr	r2, [r3, #20]
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800a9dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f00a f99a 	bl	8014d1c <USB_ReadInterrupts>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a9ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9f2:	d124      	bne.n	800aa3e <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f00a fa31 	bl	8014e60 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	4618      	mov	r0, r3
 800aa04:	f009 f9d9 	bl	8013dba <USB_GetDevSpeed>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681c      	ldr	r4, [r3, #0]
 800aa14:	f001 fd90 	bl	800c538 <HAL_RCC_GetHCLKFreq>
 800aa18:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800aa1e:	b2db      	uxtb	r3, r3
 800aa20:	461a      	mov	r2, r3
 800aa22:	4620      	mov	r0, r4
 800aa24:	f008 fede 	bl	80137e4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f00c fcfa 	bl	8017422 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	695a      	ldr	r2, [r3, #20]
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800aa3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	4618      	mov	r0, r3
 800aa44:	f00a f96a 	bl	8014d1c <USB_ReadInterrupts>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	f003 0308 	and.w	r3, r3, #8
 800aa4e:	2b08      	cmp	r3, #8
 800aa50:	d10a      	bne.n	800aa68 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f00c fcd7 	bl	8017406 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	695a      	ldr	r2, [r3, #20]
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f002 0208 	and.w	r2, r2, #8
 800aa66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f00a f955 	bl	8014d1c <USB_ReadInterrupts>
 800aa72:	4603      	mov	r3, r0
 800aa74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa78:	2b80      	cmp	r3, #128	; 0x80
 800aa7a:	d122      	bne.n	800aac2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800aa7c:	6a3b      	ldr	r3, [r7, #32]
 800aa7e:	699b      	ldr	r3, [r3, #24]
 800aa80:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aa84:	6a3b      	ldr	r3, [r7, #32]
 800aa86:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800aa88:	2301      	movs	r3, #1
 800aa8a:	627b      	str	r3, [r7, #36]	; 0x24
 800aa8c:	e014      	b.n	800aab8 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800aa8e:	6879      	ldr	r1, [r7, #4]
 800aa90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa92:	4613      	mov	r3, r2
 800aa94:	00db      	lsls	r3, r3, #3
 800aa96:	4413      	add	r3, r2
 800aa98:	009b      	lsls	r3, r3, #2
 800aa9a:	440b      	add	r3, r1
 800aa9c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800aaa0:	781b      	ldrb	r3, [r3, #0]
 800aaa2:	2b01      	cmp	r3, #1
 800aaa4:	d105      	bne.n	800aab2 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800aaa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa8:	b2db      	uxtb	r3, r3
 800aaaa:	4619      	mov	r1, r3
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f000 fb27 	bl	800b100 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800aab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab4:	3301      	adds	r3, #1
 800aab6:	627b      	str	r3, [r7, #36]	; 0x24
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	685b      	ldr	r3, [r3, #4]
 800aabc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d3e5      	bcc.n	800aa8e <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	4618      	mov	r0, r3
 800aac8:	f00a f928 	bl	8014d1c <USB_ReadInterrupts>
 800aacc:	4603      	mov	r3, r0
 800aace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aad2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aad6:	d13b      	bne.n	800ab50 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800aad8:	2301      	movs	r3, #1
 800aada:	627b      	str	r3, [r7, #36]	; 0x24
 800aadc:	e02b      	b.n	800ab36 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800aade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae0:	015a      	lsls	r2, r3, #5
 800aae2:	69fb      	ldr	r3, [r7, #28]
 800aae4:	4413      	add	r3, r2
 800aae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800aaee:	6879      	ldr	r1, [r7, #4]
 800aaf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aaf2:	4613      	mov	r3, r2
 800aaf4:	00db      	lsls	r3, r3, #3
 800aaf6:	4413      	add	r3, r2
 800aaf8:	009b      	lsls	r3, r3, #2
 800aafa:	440b      	add	r3, r1
 800aafc:	3340      	adds	r3, #64	; 0x40
 800aafe:	781b      	ldrb	r3, [r3, #0]
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	d115      	bne.n	800ab30 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800ab04:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	da12      	bge.n	800ab30 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800ab0a:	6879      	ldr	r1, [r7, #4]
 800ab0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab0e:	4613      	mov	r3, r2
 800ab10:	00db      	lsls	r3, r3, #3
 800ab12:	4413      	add	r3, r2
 800ab14:	009b      	lsls	r3, r3, #2
 800ab16:	440b      	add	r3, r1
 800ab18:	333f      	adds	r3, #63	; 0x3f
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800ab1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab20:	b2db      	uxtb	r3, r3
 800ab22:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ab26:	b2db      	uxtb	r3, r3
 800ab28:	4619      	mov	r1, r3
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f000 fae8 	bl	800b100 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ab30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab32:	3301      	adds	r3, #1
 800ab34:	627b      	str	r3, [r7, #36]	; 0x24
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d3ce      	bcc.n	800aade <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	695a      	ldr	r2, [r3, #20]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800ab4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	4618      	mov	r0, r3
 800ab56:	f00a f8e1 	bl	8014d1c <USB_ReadInterrupts>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ab60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab64:	d155      	bne.n	800ac12 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ab66:	2301      	movs	r3, #1
 800ab68:	627b      	str	r3, [r7, #36]	; 0x24
 800ab6a:	e045      	b.n	800abf8 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800ab6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6e:	015a      	lsls	r2, r3, #5
 800ab70:	69fb      	ldr	r3, [r7, #28]
 800ab72:	4413      	add	r3, r2
 800ab74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800ab7c:	6879      	ldr	r1, [r7, #4]
 800ab7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab80:	4613      	mov	r3, r2
 800ab82:	00db      	lsls	r3, r3, #3
 800ab84:	4413      	add	r3, r2
 800ab86:	009b      	lsls	r3, r3, #2
 800ab88:	440b      	add	r3, r1
 800ab8a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800ab8e:	781b      	ldrb	r3, [r3, #0]
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	d12e      	bne.n	800abf2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800ab94:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	da2b      	bge.n	800abf2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800ab9a:	69bb      	ldr	r3, [r7, #24]
 800ab9c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800aba6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800abaa:	429a      	cmp	r2, r3
 800abac:	d121      	bne.n	800abf2 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800abae:	6879      	ldr	r1, [r7, #4]
 800abb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abb2:	4613      	mov	r3, r2
 800abb4:	00db      	lsls	r3, r3, #3
 800abb6:	4413      	add	r3, r2
 800abb8:	009b      	lsls	r3, r3, #2
 800abba:	440b      	add	r3, r1
 800abbc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800abc0:	2201      	movs	r2, #1
 800abc2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800abc4:	6a3b      	ldr	r3, [r7, #32]
 800abc6:	699b      	ldr	r3, [r3, #24]
 800abc8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800abcc:	6a3b      	ldr	r3, [r7, #32]
 800abce:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800abd0:	6a3b      	ldr	r3, [r7, #32]
 800abd2:	695b      	ldr	r3, [r3, #20]
 800abd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d10a      	bne.n	800abf2 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800abdc:	69fb      	ldr	r3, [r7, #28]
 800abde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	69fa      	ldr	r2, [r7, #28]
 800abe6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800abea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800abee:	6053      	str	r3, [r2, #4]
            break;
 800abf0:	e007      	b.n	800ac02 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800abf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf4:	3301      	adds	r3, #1
 800abf6:	627b      	str	r3, [r7, #36]	; 0x24
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	685b      	ldr	r3, [r3, #4]
 800abfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d3b4      	bcc.n	800ab6c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	695a      	ldr	r2, [r3, #20]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800ac10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	4618      	mov	r0, r3
 800ac18:	f00a f880 	bl	8014d1c <USB_ReadInterrupts>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ac22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac26:	d10a      	bne.n	800ac3e <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f00c fc7b 	bl	8017524 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	695a      	ldr	r2, [r3, #20]
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800ac3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	4618      	mov	r0, r3
 800ac44:	f00a f86a 	bl	8014d1c <USB_ReadInterrupts>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	f003 0304 	and.w	r3, r3, #4
 800ac4e:	2b04      	cmp	r3, #4
 800ac50:	d115      	bne.n	800ac7e <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800ac5a:	69bb      	ldr	r3, [r7, #24]
 800ac5c:	f003 0304 	and.w	r3, r3, #4
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d002      	beq.n	800ac6a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f00c fc6b 	bl	8017540 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	6859      	ldr	r1, [r3, #4]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	69ba      	ldr	r2, [r7, #24]
 800ac76:	430a      	orrs	r2, r1
 800ac78:	605a      	str	r2, [r3, #4]
 800ac7a:	e000      	b.n	800ac7e <HAL_PCD_IRQHandler+0x992>
      return;
 800ac7c:	bf00      	nop
    }
  }
}
 800ac7e:	3734      	adds	r7, #52	; 0x34
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd90      	pop	{r4, r7, pc}

0800ac84 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b082      	sub	sp, #8
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	460b      	mov	r3, r1
 800ac8e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800ac96:	2b01      	cmp	r3, #1
 800ac98:	d101      	bne.n	800ac9e <HAL_PCD_SetAddress+0x1a>
 800ac9a:	2302      	movs	r3, #2
 800ac9c:	e013      	b.n	800acc6 <HAL_PCD_SetAddress+0x42>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2201      	movs	r2, #1
 800aca2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	78fa      	ldrb	r2, [r7, #3]
 800acaa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	78fa      	ldrb	r2, [r7, #3]
 800acb4:	4611      	mov	r1, r2
 800acb6:	4618      	mov	r0, r3
 800acb8:	f009 ffc8 	bl	8014c4c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2200      	movs	r2, #0
 800acc0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800acc4:	2300      	movs	r3, #0
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3708      	adds	r7, #8
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}

0800acce <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800acce:	b580      	push	{r7, lr}
 800acd0:	b084      	sub	sp, #16
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
 800acd6:	4608      	mov	r0, r1
 800acd8:	4611      	mov	r1, r2
 800acda:	461a      	mov	r2, r3
 800acdc:	4603      	mov	r3, r0
 800acde:	70fb      	strb	r3, [r7, #3]
 800ace0:	460b      	mov	r3, r1
 800ace2:	803b      	strh	r3, [r7, #0]
 800ace4:	4613      	mov	r3, r2
 800ace6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800ace8:	2300      	movs	r3, #0
 800acea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800acec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	da0f      	bge.n	800ad14 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800acf4:	78fb      	ldrb	r3, [r7, #3]
 800acf6:	f003 020f 	and.w	r2, r3, #15
 800acfa:	4613      	mov	r3, r2
 800acfc:	00db      	lsls	r3, r3, #3
 800acfe:	4413      	add	r3, r2
 800ad00:	009b      	lsls	r3, r3, #2
 800ad02:	3338      	adds	r3, #56	; 0x38
 800ad04:	687a      	ldr	r2, [r7, #4]
 800ad06:	4413      	add	r3, r2
 800ad08:	3304      	adds	r3, #4
 800ad0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	2201      	movs	r2, #1
 800ad10:	705a      	strb	r2, [r3, #1]
 800ad12:	e00f      	b.n	800ad34 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ad14:	78fb      	ldrb	r3, [r7, #3]
 800ad16:	f003 020f 	and.w	r2, r3, #15
 800ad1a:	4613      	mov	r3, r2
 800ad1c:	00db      	lsls	r3, r3, #3
 800ad1e:	4413      	add	r3, r2
 800ad20:	009b      	lsls	r3, r3, #2
 800ad22:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ad26:	687a      	ldr	r2, [r7, #4]
 800ad28:	4413      	add	r3, r2
 800ad2a:	3304      	adds	r3, #4
 800ad2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	2200      	movs	r2, #0
 800ad32:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800ad34:	78fb      	ldrb	r3, [r7, #3]
 800ad36:	f003 030f 	and.w	r3, r3, #15
 800ad3a:	b2da      	uxtb	r2, r3
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800ad40:	883a      	ldrh	r2, [r7, #0]
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	78ba      	ldrb	r2, [r7, #2]
 800ad4a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	785b      	ldrb	r3, [r3, #1]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d004      	beq.n	800ad5e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	781b      	ldrb	r3, [r3, #0]
 800ad58:	b29a      	uxth	r2, r3
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800ad5e:	78bb      	ldrb	r3, [r7, #2]
 800ad60:	2b02      	cmp	r3, #2
 800ad62:	d102      	bne.n	800ad6a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2200      	movs	r2, #0
 800ad68:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800ad70:	2b01      	cmp	r3, #1
 800ad72:	d101      	bne.n	800ad78 <HAL_PCD_EP_Open+0xaa>
 800ad74:	2302      	movs	r3, #2
 800ad76:	e00e      	b.n	800ad96 <HAL_PCD_EP_Open+0xc8>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	68f9      	ldr	r1, [r7, #12]
 800ad86:	4618      	mov	r0, r3
 800ad88:	f009 f83c 	bl	8013e04 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800ad94:	7afb      	ldrb	r3, [r7, #11]
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3710      	adds	r7, #16
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}

0800ad9e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ad9e:	b580      	push	{r7, lr}
 800ada0:	b084      	sub	sp, #16
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	6078      	str	r0, [r7, #4]
 800ada6:	460b      	mov	r3, r1
 800ada8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800adaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	da0f      	bge.n	800add2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800adb2:	78fb      	ldrb	r3, [r7, #3]
 800adb4:	f003 020f 	and.w	r2, r3, #15
 800adb8:	4613      	mov	r3, r2
 800adba:	00db      	lsls	r3, r3, #3
 800adbc:	4413      	add	r3, r2
 800adbe:	009b      	lsls	r3, r3, #2
 800adc0:	3338      	adds	r3, #56	; 0x38
 800adc2:	687a      	ldr	r2, [r7, #4]
 800adc4:	4413      	add	r3, r2
 800adc6:	3304      	adds	r3, #4
 800adc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	2201      	movs	r2, #1
 800adce:	705a      	strb	r2, [r3, #1]
 800add0:	e00f      	b.n	800adf2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800add2:	78fb      	ldrb	r3, [r7, #3]
 800add4:	f003 020f 	and.w	r2, r3, #15
 800add8:	4613      	mov	r3, r2
 800adda:	00db      	lsls	r3, r3, #3
 800addc:	4413      	add	r3, r2
 800adde:	009b      	lsls	r3, r3, #2
 800ade0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ade4:	687a      	ldr	r2, [r7, #4]
 800ade6:	4413      	add	r3, r2
 800ade8:	3304      	adds	r3, #4
 800adea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	2200      	movs	r2, #0
 800adf0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800adf2:	78fb      	ldrb	r3, [r7, #3]
 800adf4:	f003 030f 	and.w	r3, r3, #15
 800adf8:	b2da      	uxtb	r2, r3
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d101      	bne.n	800ae0c <HAL_PCD_EP_Close+0x6e>
 800ae08:	2302      	movs	r3, #2
 800ae0a:	e00e      	b.n	800ae2a <HAL_PCD_EP_Close+0x8c>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2201      	movs	r2, #1
 800ae10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	68f9      	ldr	r1, [r7, #12]
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f009 f87a 	bl	8013f14 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2200      	movs	r2, #0
 800ae24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800ae28:	2300      	movs	r3, #0
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3710      	adds	r7, #16
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}

0800ae32 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ae32:	b580      	push	{r7, lr}
 800ae34:	b086      	sub	sp, #24
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	60f8      	str	r0, [r7, #12]
 800ae3a:	607a      	str	r2, [r7, #4]
 800ae3c:	603b      	str	r3, [r7, #0]
 800ae3e:	460b      	mov	r3, r1
 800ae40:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ae42:	7afb      	ldrb	r3, [r7, #11]
 800ae44:	f003 020f 	and.w	r2, r3, #15
 800ae48:	4613      	mov	r3, r2
 800ae4a:	00db      	lsls	r3, r3, #3
 800ae4c:	4413      	add	r3, r2
 800ae4e:	009b      	lsls	r3, r3, #2
 800ae50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ae54:	68fa      	ldr	r2, [r7, #12]
 800ae56:	4413      	add	r3, r2
 800ae58:	3304      	adds	r3, #4
 800ae5a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	687a      	ldr	r2, [r7, #4]
 800ae60:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	683a      	ldr	r2, [r7, #0]
 800ae66:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	2200      	movs	r2, #0
 800ae72:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ae74:	7afb      	ldrb	r3, [r7, #11]
 800ae76:	f003 030f 	and.w	r3, r3, #15
 800ae7a:	b2da      	uxtb	r2, r3
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	691b      	ldr	r3, [r3, #16]
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d102      	bne.n	800ae8e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ae88:	687a      	ldr	r2, [r7, #4]
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ae8e:	7afb      	ldrb	r3, [r7, #11]
 800ae90:	f003 030f 	and.w	r3, r3, #15
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d109      	bne.n	800aeac <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	6818      	ldr	r0, [r3, #0]
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	691b      	ldr	r3, [r3, #16]
 800aea0:	b2db      	uxtb	r3, r3
 800aea2:	461a      	mov	r2, r3
 800aea4:	6979      	ldr	r1, [r7, #20]
 800aea6:	f009 fb61 	bl	801456c <USB_EP0StartXfer>
 800aeaa:	e008      	b.n	800aebe <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	6818      	ldr	r0, [r3, #0]
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	691b      	ldr	r3, [r3, #16]
 800aeb4:	b2db      	uxtb	r3, r3
 800aeb6:	461a      	mov	r2, r3
 800aeb8:	6979      	ldr	r1, [r7, #20]
 800aeba:	f009 f907 	bl	80140cc <USB_EPStartXfer>
  }

  return HAL_OK;
 800aebe:	2300      	movs	r3, #0
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3718      	adds	r7, #24
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}

0800aec8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800aec8:	b480      	push	{r7}
 800aeca:	b083      	sub	sp, #12
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	460b      	mov	r3, r1
 800aed2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800aed4:	78fb      	ldrb	r3, [r7, #3]
 800aed6:	f003 020f 	and.w	r2, r3, #15
 800aeda:	6879      	ldr	r1, [r7, #4]
 800aedc:	4613      	mov	r3, r2
 800aede:	00db      	lsls	r3, r3, #3
 800aee0:	4413      	add	r3, r2
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	440b      	add	r3, r1
 800aee6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800aeea:	681b      	ldr	r3, [r3, #0]
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	370c      	adds	r7, #12
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr

0800aef8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b086      	sub	sp, #24
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	60f8      	str	r0, [r7, #12]
 800af00:	607a      	str	r2, [r7, #4]
 800af02:	603b      	str	r3, [r7, #0]
 800af04:	460b      	mov	r3, r1
 800af06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800af08:	7afb      	ldrb	r3, [r7, #11]
 800af0a:	f003 020f 	and.w	r2, r3, #15
 800af0e:	4613      	mov	r3, r2
 800af10:	00db      	lsls	r3, r3, #3
 800af12:	4413      	add	r3, r2
 800af14:	009b      	lsls	r3, r3, #2
 800af16:	3338      	adds	r3, #56	; 0x38
 800af18:	68fa      	ldr	r2, [r7, #12]
 800af1a:	4413      	add	r3, r2
 800af1c:	3304      	adds	r3, #4
 800af1e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	687a      	ldr	r2, [r7, #4]
 800af24:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	683a      	ldr	r2, [r7, #0]
 800af2a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800af2c:	697b      	ldr	r3, [r7, #20]
 800af2e:	2200      	movs	r2, #0
 800af30:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	2201      	movs	r2, #1
 800af36:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800af38:	7afb      	ldrb	r3, [r7, #11]
 800af3a:	f003 030f 	and.w	r3, r3, #15
 800af3e:	b2da      	uxtb	r2, r3
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	691b      	ldr	r3, [r3, #16]
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d102      	bne.n	800af52 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800af4c:	687a      	ldr	r2, [r7, #4]
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800af52:	7afb      	ldrb	r3, [r7, #11]
 800af54:	f003 030f 	and.w	r3, r3, #15
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d109      	bne.n	800af70 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	6818      	ldr	r0, [r3, #0]
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	691b      	ldr	r3, [r3, #16]
 800af64:	b2db      	uxtb	r3, r3
 800af66:	461a      	mov	r2, r3
 800af68:	6979      	ldr	r1, [r7, #20]
 800af6a:	f009 faff 	bl	801456c <USB_EP0StartXfer>
 800af6e:	e008      	b.n	800af82 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	6818      	ldr	r0, [r3, #0]
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	691b      	ldr	r3, [r3, #16]
 800af78:	b2db      	uxtb	r3, r3
 800af7a:	461a      	mov	r2, r3
 800af7c:	6979      	ldr	r1, [r7, #20]
 800af7e:	f009 f8a5 	bl	80140cc <USB_EPStartXfer>
  }

  return HAL_OK;
 800af82:	2300      	movs	r3, #0
}
 800af84:	4618      	mov	r0, r3
 800af86:	3718      	adds	r7, #24
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}

0800af8c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b084      	sub	sp, #16
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
 800af94:	460b      	mov	r3, r1
 800af96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800af98:	78fb      	ldrb	r3, [r7, #3]
 800af9a:	f003 020f 	and.w	r2, r3, #15
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	429a      	cmp	r2, r3
 800afa4:	d901      	bls.n	800afaa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800afa6:	2301      	movs	r3, #1
 800afa8:	e050      	b.n	800b04c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800afaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	da0f      	bge.n	800afd2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800afb2:	78fb      	ldrb	r3, [r7, #3]
 800afb4:	f003 020f 	and.w	r2, r3, #15
 800afb8:	4613      	mov	r3, r2
 800afba:	00db      	lsls	r3, r3, #3
 800afbc:	4413      	add	r3, r2
 800afbe:	009b      	lsls	r3, r3, #2
 800afc0:	3338      	adds	r3, #56	; 0x38
 800afc2:	687a      	ldr	r2, [r7, #4]
 800afc4:	4413      	add	r3, r2
 800afc6:	3304      	adds	r3, #4
 800afc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	2201      	movs	r2, #1
 800afce:	705a      	strb	r2, [r3, #1]
 800afd0:	e00d      	b.n	800afee <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800afd2:	78fa      	ldrb	r2, [r7, #3]
 800afd4:	4613      	mov	r3, r2
 800afd6:	00db      	lsls	r3, r3, #3
 800afd8:	4413      	add	r3, r2
 800afda:	009b      	lsls	r3, r3, #2
 800afdc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800afe0:	687a      	ldr	r2, [r7, #4]
 800afe2:	4413      	add	r3, r2
 800afe4:	3304      	adds	r3, #4
 800afe6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2200      	movs	r2, #0
 800afec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	2201      	movs	r2, #1
 800aff2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800aff4:	78fb      	ldrb	r3, [r7, #3]
 800aff6:	f003 030f 	and.w	r3, r3, #15
 800affa:	b2da      	uxtb	r2, r3
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800b006:	2b01      	cmp	r3, #1
 800b008:	d101      	bne.n	800b00e <HAL_PCD_EP_SetStall+0x82>
 800b00a:	2302      	movs	r3, #2
 800b00c:	e01e      	b.n	800b04c <HAL_PCD_EP_SetStall+0xc0>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2201      	movs	r2, #1
 800b012:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	68f9      	ldr	r1, [r7, #12]
 800b01c:	4618      	mov	r0, r3
 800b01e:	f009 fd41 	bl	8014aa4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b022:	78fb      	ldrb	r3, [r7, #3]
 800b024:	f003 030f 	and.w	r3, r3, #15
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d10a      	bne.n	800b042 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6818      	ldr	r0, [r3, #0]
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	691b      	ldr	r3, [r3, #16]
 800b034:	b2d9      	uxtb	r1, r3
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b03c:	461a      	mov	r2, r3
 800b03e:	f009 ff33 	bl	8014ea8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2200      	movs	r2, #0
 800b046:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800b04a:	2300      	movs	r3, #0
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3710      	adds	r7, #16
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b084      	sub	sp, #16
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	460b      	mov	r3, r1
 800b05e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b060:	78fb      	ldrb	r3, [r7, #3]
 800b062:	f003 020f 	and.w	r2, r3, #15
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	685b      	ldr	r3, [r3, #4]
 800b06a:	429a      	cmp	r2, r3
 800b06c:	d901      	bls.n	800b072 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800b06e:	2301      	movs	r3, #1
 800b070:	e042      	b.n	800b0f8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b072:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b076:	2b00      	cmp	r3, #0
 800b078:	da0f      	bge.n	800b09a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b07a:	78fb      	ldrb	r3, [r7, #3]
 800b07c:	f003 020f 	and.w	r2, r3, #15
 800b080:	4613      	mov	r3, r2
 800b082:	00db      	lsls	r3, r3, #3
 800b084:	4413      	add	r3, r2
 800b086:	009b      	lsls	r3, r3, #2
 800b088:	3338      	adds	r3, #56	; 0x38
 800b08a:	687a      	ldr	r2, [r7, #4]
 800b08c:	4413      	add	r3, r2
 800b08e:	3304      	adds	r3, #4
 800b090:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	2201      	movs	r2, #1
 800b096:	705a      	strb	r2, [r3, #1]
 800b098:	e00f      	b.n	800b0ba <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b09a:	78fb      	ldrb	r3, [r7, #3]
 800b09c:	f003 020f 	and.w	r2, r3, #15
 800b0a0:	4613      	mov	r3, r2
 800b0a2:	00db      	lsls	r3, r3, #3
 800b0a4:	4413      	add	r3, r2
 800b0a6:	009b      	lsls	r3, r3, #2
 800b0a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b0ac:	687a      	ldr	r2, [r7, #4]
 800b0ae:	4413      	add	r3, r2
 800b0b0:	3304      	adds	r3, #4
 800b0b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b0c0:	78fb      	ldrb	r3, [r7, #3]
 800b0c2:	f003 030f 	and.w	r3, r3, #15
 800b0c6:	b2da      	uxtb	r2, r3
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800b0d2:	2b01      	cmp	r3, #1
 800b0d4:	d101      	bne.n	800b0da <HAL_PCD_EP_ClrStall+0x86>
 800b0d6:	2302      	movs	r3, #2
 800b0d8:	e00e      	b.n	800b0f8 <HAL_PCD_EP_ClrStall+0xa4>
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2201      	movs	r2, #1
 800b0de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	68f9      	ldr	r1, [r7, #12]
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f009 fd49 	bl	8014b80 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800b0f6:	2300      	movs	r3, #0
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3710      	adds	r7, #16
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}

0800b100 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b084      	sub	sp, #16
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	460b      	mov	r3, r1
 800b10a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800b10c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b110:	2b00      	cmp	r3, #0
 800b112:	da0c      	bge.n	800b12e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b114:	78fb      	ldrb	r3, [r7, #3]
 800b116:	f003 020f 	and.w	r2, r3, #15
 800b11a:	4613      	mov	r3, r2
 800b11c:	00db      	lsls	r3, r3, #3
 800b11e:	4413      	add	r3, r2
 800b120:	009b      	lsls	r3, r3, #2
 800b122:	3338      	adds	r3, #56	; 0x38
 800b124:	687a      	ldr	r2, [r7, #4]
 800b126:	4413      	add	r3, r2
 800b128:	3304      	adds	r3, #4
 800b12a:	60fb      	str	r3, [r7, #12]
 800b12c:	e00c      	b.n	800b148 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b12e:	78fb      	ldrb	r3, [r7, #3]
 800b130:	f003 020f 	and.w	r2, r3, #15
 800b134:	4613      	mov	r3, r2
 800b136:	00db      	lsls	r3, r3, #3
 800b138:	4413      	add	r3, r2
 800b13a:	009b      	lsls	r3, r3, #2
 800b13c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b140:	687a      	ldr	r2, [r7, #4]
 800b142:	4413      	add	r3, r2
 800b144:	3304      	adds	r3, #4
 800b146:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	68f9      	ldr	r1, [r7, #12]
 800b14e:	4618      	mov	r0, r3
 800b150:	f009 fb68 	bl	8014824 <USB_EPStopXfer>
 800b154:	4603      	mov	r3, r0
 800b156:	72fb      	strb	r3, [r7, #11]

  return ret;
 800b158:	7afb      	ldrb	r3, [r7, #11]
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3710      	adds	r7, #16
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}

0800b162 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b162:	b580      	push	{r7, lr}
 800b164:	b08a      	sub	sp, #40	; 0x28
 800b166:	af02      	add	r7, sp, #8
 800b168:	6078      	str	r0, [r7, #4]
 800b16a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800b176:	683a      	ldr	r2, [r7, #0]
 800b178:	4613      	mov	r3, r2
 800b17a:	00db      	lsls	r3, r3, #3
 800b17c:	4413      	add	r3, r2
 800b17e:	009b      	lsls	r3, r3, #2
 800b180:	3338      	adds	r3, #56	; 0x38
 800b182:	687a      	ldr	r2, [r7, #4]
 800b184:	4413      	add	r3, r2
 800b186:	3304      	adds	r3, #4
 800b188:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	6a1a      	ldr	r2, [r3, #32]
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	699b      	ldr	r3, [r3, #24]
 800b192:	429a      	cmp	r2, r3
 800b194:	d901      	bls.n	800b19a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800b196:	2301      	movs	r3, #1
 800b198:	e06c      	b.n	800b274 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	699a      	ldr	r2, [r3, #24]
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	6a1b      	ldr	r3, [r3, #32]
 800b1a2:	1ad3      	subs	r3, r2, r3
 800b1a4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	68db      	ldr	r3, [r3, #12]
 800b1aa:	69fa      	ldr	r2, [r7, #28]
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d902      	bls.n	800b1b6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	68db      	ldr	r3, [r3, #12]
 800b1b4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800b1b6:	69fb      	ldr	r3, [r7, #28]
 800b1b8:	3303      	adds	r3, #3
 800b1ba:	089b      	lsrs	r3, r3, #2
 800b1bc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b1be:	e02b      	b.n	800b218 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	699a      	ldr	r2, [r3, #24]
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	6a1b      	ldr	r3, [r3, #32]
 800b1c8:	1ad3      	subs	r3, r2, r3
 800b1ca:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	68db      	ldr	r3, [r3, #12]
 800b1d0:	69fa      	ldr	r2, [r7, #28]
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d902      	bls.n	800b1dc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	68db      	ldr	r3, [r3, #12]
 800b1da:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800b1dc:	69fb      	ldr	r3, [r7, #28]
 800b1de:	3303      	adds	r3, #3
 800b1e0:	089b      	lsrs	r3, r3, #2
 800b1e2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	6919      	ldr	r1, [r3, #16]
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	b2da      	uxtb	r2, r3
 800b1ec:	69fb      	ldr	r3, [r7, #28]
 800b1ee:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800b1f4:	b2db      	uxtb	r3, r3
 800b1f6:	9300      	str	r3, [sp, #0]
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	6978      	ldr	r0, [r7, #20]
 800b1fc:	f009 fbbc 	bl	8014978 <USB_WritePacket>

    ep->xfer_buff  += len;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	691a      	ldr	r2, [r3, #16]
 800b204:	69fb      	ldr	r3, [r7, #28]
 800b206:	441a      	add	r2, r3
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	6a1a      	ldr	r2, [r3, #32]
 800b210:	69fb      	ldr	r3, [r7, #28]
 800b212:	441a      	add	r2, r3
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	015a      	lsls	r2, r3, #5
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	4413      	add	r3, r2
 800b220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b224:	699b      	ldr	r3, [r3, #24]
 800b226:	b29b      	uxth	r3, r3
 800b228:	69ba      	ldr	r2, [r7, #24]
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d809      	bhi.n	800b242 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	6a1a      	ldr	r2, [r3, #32]
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b236:	429a      	cmp	r2, r3
 800b238:	d203      	bcs.n	800b242 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	699b      	ldr	r3, [r3, #24]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d1be      	bne.n	800b1c0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	699a      	ldr	r2, [r3, #24]
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	6a1b      	ldr	r3, [r3, #32]
 800b24a:	429a      	cmp	r2, r3
 800b24c:	d811      	bhi.n	800b272 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	f003 030f 	and.w	r3, r3, #15
 800b254:	2201      	movs	r2, #1
 800b256:	fa02 f303 	lsl.w	r3, r2, r3
 800b25a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	43db      	mvns	r3, r3
 800b268:	6939      	ldr	r1, [r7, #16]
 800b26a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b26e:	4013      	ands	r3, r2
 800b270:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800b272:	2300      	movs	r3, #0
}
 800b274:	4618      	mov	r0, r3
 800b276:	3720      	adds	r7, #32
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}

0800b27c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b088      	sub	sp, #32
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b28c:	69fb      	ldr	r3, [r7, #28]
 800b28e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b290:	69fb      	ldr	r3, [r7, #28]
 800b292:	333c      	adds	r3, #60	; 0x3c
 800b294:	3304      	adds	r3, #4
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	015a      	lsls	r2, r3, #5
 800b29e:	69bb      	ldr	r3, [r7, #24]
 800b2a0:	4413      	add	r3, r2
 800b2a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2a6:	689b      	ldr	r3, [r3, #8]
 800b2a8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	691b      	ldr	r3, [r3, #16]
 800b2ae:	2b01      	cmp	r3, #1
 800b2b0:	d17b      	bne.n	800b3aa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	f003 0308 	and.w	r3, r3, #8
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d015      	beq.n	800b2e8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	4a61      	ldr	r2, [pc, #388]	; (800b444 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800b2c0:	4293      	cmp	r3, r2
 800b2c2:	f240 80b9 	bls.w	800b438 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b2c6:	693b      	ldr	r3, [r7, #16]
 800b2c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	f000 80b3 	beq.w	800b438 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	015a      	lsls	r2, r3, #5
 800b2d6:	69bb      	ldr	r3, [r7, #24]
 800b2d8:	4413      	add	r3, r2
 800b2da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2de:	461a      	mov	r2, r3
 800b2e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b2e4:	6093      	str	r3, [r2, #8]
 800b2e6:	e0a7      	b.n	800b438 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	f003 0320 	and.w	r3, r3, #32
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d009      	beq.n	800b306 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	015a      	lsls	r2, r3, #5
 800b2f6:	69bb      	ldr	r3, [r7, #24]
 800b2f8:	4413      	add	r3, r2
 800b2fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2fe:	461a      	mov	r2, r3
 800b300:	2320      	movs	r3, #32
 800b302:	6093      	str	r3, [r2, #8]
 800b304:	e098      	b.n	800b438 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800b306:	693b      	ldr	r3, [r7, #16]
 800b308:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	f040 8093 	bne.w	800b438 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	4a4b      	ldr	r2, [pc, #300]	; (800b444 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800b316:	4293      	cmp	r3, r2
 800b318:	d90f      	bls.n	800b33a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b320:	2b00      	cmp	r3, #0
 800b322:	d00a      	beq.n	800b33a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	015a      	lsls	r2, r3, #5
 800b328:	69bb      	ldr	r3, [r7, #24]
 800b32a:	4413      	add	r3, r2
 800b32c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b330:	461a      	mov	r2, r3
 800b332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b336:	6093      	str	r3, [r2, #8]
 800b338:	e07e      	b.n	800b438 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800b33a:	683a      	ldr	r2, [r7, #0]
 800b33c:	4613      	mov	r3, r2
 800b33e:	00db      	lsls	r3, r3, #3
 800b340:	4413      	add	r3, r2
 800b342:	009b      	lsls	r3, r3, #2
 800b344:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b348:	687a      	ldr	r2, [r7, #4]
 800b34a:	4413      	add	r3, r2
 800b34c:	3304      	adds	r3, #4
 800b34e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	69da      	ldr	r2, [r3, #28]
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	0159      	lsls	r1, r3, #5
 800b358:	69bb      	ldr	r3, [r7, #24]
 800b35a:	440b      	add	r3, r1
 800b35c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b360:	691b      	ldr	r3, [r3, #16]
 800b362:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b366:	1ad2      	subs	r2, r2, r3
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d114      	bne.n	800b39c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	699b      	ldr	r3, [r3, #24]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d109      	bne.n	800b38e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6818      	ldr	r0, [r3, #0]
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b384:	461a      	mov	r2, r3
 800b386:	2101      	movs	r1, #1
 800b388:	f009 fd8e 	bl	8014ea8 <USB_EP0_OutStart>
 800b38c:	e006      	b.n	800b39c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	691a      	ldr	r2, [r3, #16]
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	6a1b      	ldr	r3, [r3, #32]
 800b396:	441a      	add	r2, r3
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	b2db      	uxtb	r3, r3
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f00b fffa 	bl	801739c <HAL_PCD_DataOutStageCallback>
 800b3a8:	e046      	b.n	800b438 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	4a26      	ldr	r2, [pc, #152]	; (800b448 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	d124      	bne.n	800b3fc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d00a      	beq.n	800b3d2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	015a      	lsls	r2, r3, #5
 800b3c0:	69bb      	ldr	r3, [r7, #24]
 800b3c2:	4413      	add	r3, r2
 800b3c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3c8:	461a      	mov	r2, r3
 800b3ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b3ce:	6093      	str	r3, [r2, #8]
 800b3d0:	e032      	b.n	800b438 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	f003 0320 	and.w	r3, r3, #32
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d008      	beq.n	800b3ee <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	015a      	lsls	r2, r3, #5
 800b3e0:	69bb      	ldr	r3, [r7, #24]
 800b3e2:	4413      	add	r3, r2
 800b3e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3e8:	461a      	mov	r2, r3
 800b3ea:	2320      	movs	r3, #32
 800b3ec:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	b2db      	uxtb	r3, r3
 800b3f2:	4619      	mov	r1, r3
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f00b ffd1 	bl	801739c <HAL_PCD_DataOutStageCallback>
 800b3fa:	e01d      	b.n	800b438 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d114      	bne.n	800b42c <PCD_EP_OutXfrComplete_int+0x1b0>
 800b402:	6879      	ldr	r1, [r7, #4]
 800b404:	683a      	ldr	r2, [r7, #0]
 800b406:	4613      	mov	r3, r2
 800b408:	00db      	lsls	r3, r3, #3
 800b40a:	4413      	add	r3, r2
 800b40c:	009b      	lsls	r3, r3, #2
 800b40e:	440b      	add	r3, r1
 800b410:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d108      	bne.n	800b42c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6818      	ldr	r0, [r3, #0]
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b424:	461a      	mov	r2, r3
 800b426:	2100      	movs	r1, #0
 800b428:	f009 fd3e 	bl	8014ea8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	b2db      	uxtb	r3, r3
 800b430:	4619      	mov	r1, r3
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f00b ffb2 	bl	801739c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800b438:	2300      	movs	r3, #0
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3720      	adds	r7, #32
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}
 800b442:	bf00      	nop
 800b444:	4f54300a 	.word	0x4f54300a
 800b448:	4f54310a 	.word	0x4f54310a

0800b44c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b086      	sub	sp, #24
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	333c      	adds	r3, #60	; 0x3c
 800b464:	3304      	adds	r3, #4
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	015a      	lsls	r2, r3, #5
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	4413      	add	r3, r2
 800b472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b476:	689b      	ldr	r3, [r3, #8]
 800b478:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	4a15      	ldr	r2, [pc, #84]	; (800b4d4 <PCD_EP_OutSetupPacket_int+0x88>)
 800b47e:	4293      	cmp	r3, r2
 800b480:	d90e      	bls.n	800b4a0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d009      	beq.n	800b4a0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	015a      	lsls	r2, r3, #5
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	4413      	add	r3, r2
 800b494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b498:	461a      	mov	r2, r3
 800b49a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b49e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f00b ff69 	bl	8017378 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	4a0a      	ldr	r2, [pc, #40]	; (800b4d4 <PCD_EP_OutSetupPacket_int+0x88>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d90c      	bls.n	800b4c8 <PCD_EP_OutSetupPacket_int+0x7c>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	691b      	ldr	r3, [r3, #16]
 800b4b2:	2b01      	cmp	r3, #1
 800b4b4:	d108      	bne.n	800b4c8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6818      	ldr	r0, [r3, #0]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	2101      	movs	r1, #1
 800b4c4:	f009 fcf0 	bl	8014ea8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800b4c8:	2300      	movs	r3, #0
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	3718      	adds	r7, #24
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}
 800b4d2:	bf00      	nop
 800b4d4:	4f54300a 	.word	0x4f54300a

0800b4d8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b085      	sub	sp, #20
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
 800b4e0:	460b      	mov	r3, r1
 800b4e2:	70fb      	strb	r3, [r7, #3]
 800b4e4:	4613      	mov	r3, r2
 800b4e6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800b4f0:	78fb      	ldrb	r3, [r7, #3]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d107      	bne.n	800b506 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800b4f6:	883b      	ldrh	r3, [r7, #0]
 800b4f8:	0419      	lsls	r1, r3, #16
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	68ba      	ldr	r2, [r7, #8]
 800b500:	430a      	orrs	r2, r1
 800b502:	629a      	str	r2, [r3, #40]	; 0x28
 800b504:	e028      	b.n	800b558 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b50c:	0c1b      	lsrs	r3, r3, #16
 800b50e:	68ba      	ldr	r2, [r7, #8]
 800b510:	4413      	add	r3, r2
 800b512:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b514:	2300      	movs	r3, #0
 800b516:	73fb      	strb	r3, [r7, #15]
 800b518:	e00d      	b.n	800b536 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681a      	ldr	r2, [r3, #0]
 800b51e:	7bfb      	ldrb	r3, [r7, #15]
 800b520:	3340      	adds	r3, #64	; 0x40
 800b522:	009b      	lsls	r3, r3, #2
 800b524:	4413      	add	r3, r2
 800b526:	685b      	ldr	r3, [r3, #4]
 800b528:	0c1b      	lsrs	r3, r3, #16
 800b52a:	68ba      	ldr	r2, [r7, #8]
 800b52c:	4413      	add	r3, r2
 800b52e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b530:	7bfb      	ldrb	r3, [r7, #15]
 800b532:	3301      	adds	r3, #1
 800b534:	73fb      	strb	r3, [r7, #15]
 800b536:	7bfa      	ldrb	r2, [r7, #15]
 800b538:	78fb      	ldrb	r3, [r7, #3]
 800b53a:	3b01      	subs	r3, #1
 800b53c:	429a      	cmp	r2, r3
 800b53e:	d3ec      	bcc.n	800b51a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800b540:	883b      	ldrh	r3, [r7, #0]
 800b542:	0418      	lsls	r0, r3, #16
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	6819      	ldr	r1, [r3, #0]
 800b548:	78fb      	ldrb	r3, [r7, #3]
 800b54a:	3b01      	subs	r3, #1
 800b54c:	68ba      	ldr	r2, [r7, #8]
 800b54e:	4302      	orrs	r2, r0
 800b550:	3340      	adds	r3, #64	; 0x40
 800b552:	009b      	lsls	r3, r3, #2
 800b554:	440b      	add	r3, r1
 800b556:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800b558:	2300      	movs	r3, #0
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3714      	adds	r7, #20
 800b55e:	46bd      	mov	sp, r7
 800b560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b564:	4770      	bx	lr

0800b566 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800b566:	b480      	push	{r7}
 800b568:	b083      	sub	sp, #12
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	6078      	str	r0, [r7, #4]
 800b56e:	460b      	mov	r3, r1
 800b570:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	887a      	ldrh	r2, [r7, #2]
 800b578:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800b57a:	2300      	movs	r3, #0
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	370c      	adds	r7, #12
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr

0800b588 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b588:	b480      	push	{r7}
 800b58a:	b085      	sub	sp, #20
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2201      	movs	r2, #1
 800b59a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	699b      	ldr	r3, [r3, #24]
 800b5aa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b5b6:	4b05      	ldr	r3, [pc, #20]	; (800b5cc <HAL_PCDEx_ActivateLPM+0x44>)
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	68fa      	ldr	r2, [r7, #12]
 800b5bc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800b5be:	2300      	movs	r3, #0
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3714      	adds	r7, #20
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr
 800b5cc:	10000003 	.word	0x10000003

0800b5d0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b083      	sub	sp, #12
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	460b      	mov	r3, r1
 800b5da:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800b5dc:	bf00      	nop
 800b5de:	370c      	adds	r7, #12
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e6:	4770      	bx	lr

0800b5e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b084      	sub	sp, #16
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800b5f0:	4b19      	ldr	r3, [pc, #100]	; (800b658 <HAL_PWREx_ConfigSupply+0x70>)
 800b5f2:	68db      	ldr	r3, [r3, #12]
 800b5f4:	f003 0304 	and.w	r3, r3, #4
 800b5f8:	2b04      	cmp	r3, #4
 800b5fa:	d00a      	beq.n	800b612 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b5fc:	4b16      	ldr	r3, [pc, #88]	; (800b658 <HAL_PWREx_ConfigSupply+0x70>)
 800b5fe:	68db      	ldr	r3, [r3, #12]
 800b600:	f003 0307 	and.w	r3, r3, #7
 800b604:	687a      	ldr	r2, [r7, #4]
 800b606:	429a      	cmp	r2, r3
 800b608:	d001      	beq.n	800b60e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b60a:	2301      	movs	r3, #1
 800b60c:	e01f      	b.n	800b64e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b60e:	2300      	movs	r3, #0
 800b610:	e01d      	b.n	800b64e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b612:	4b11      	ldr	r3, [pc, #68]	; (800b658 <HAL_PWREx_ConfigSupply+0x70>)
 800b614:	68db      	ldr	r3, [r3, #12]
 800b616:	f023 0207 	bic.w	r2, r3, #7
 800b61a:	490f      	ldr	r1, [pc, #60]	; (800b658 <HAL_PWREx_ConfigSupply+0x70>)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	4313      	orrs	r3, r2
 800b620:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b622:	f7f9 f8b7 	bl	8004794 <HAL_GetTick>
 800b626:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b628:	e009      	b.n	800b63e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b62a:	f7f9 f8b3 	bl	8004794 <HAL_GetTick>
 800b62e:	4602      	mov	r2, r0
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	1ad3      	subs	r3, r2, r3
 800b634:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b638:	d901      	bls.n	800b63e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b63a:	2301      	movs	r3, #1
 800b63c:	e007      	b.n	800b64e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b63e:	4b06      	ldr	r3, [pc, #24]	; (800b658 <HAL_PWREx_ConfigSupply+0x70>)
 800b640:	685b      	ldr	r3, [r3, #4]
 800b642:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b64a:	d1ee      	bne.n	800b62a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800b64c:	2300      	movs	r3, #0
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3710      	adds	r7, #16
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}
 800b656:	bf00      	nop
 800b658:	58024800 	.word	0x58024800

0800b65c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800b65c:	b480      	push	{r7}
 800b65e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800b660:	4b05      	ldr	r3, [pc, #20]	; (800b678 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800b662:	68db      	ldr	r3, [r3, #12]
 800b664:	4a04      	ldr	r2, [pc, #16]	; (800b678 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800b666:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b66a:	60d3      	str	r3, [r2, #12]
}
 800b66c:	bf00      	nop
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr
 800b676:	bf00      	nop
 800b678:	58024800 	.word	0x58024800

0800b67c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b08c      	sub	sp, #48	; 0x30
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d102      	bne.n	800b690 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b68a:	2301      	movs	r3, #1
 800b68c:	f000 bc1d 	b.w	800beca <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f003 0301 	and.w	r3, r3, #1
 800b698:	2b00      	cmp	r3, #0
 800b69a:	f000 8087 	beq.w	800b7ac <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b69e:	4b99      	ldr	r3, [pc, #612]	; (800b904 <HAL_RCC_OscConfig+0x288>)
 800b6a0:	691b      	ldr	r3, [r3, #16]
 800b6a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b6a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b6a8:	4b96      	ldr	r3, [pc, #600]	; (800b904 <HAL_RCC_OscConfig+0x288>)
 800b6aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6ac:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6b0:	2b10      	cmp	r3, #16
 800b6b2:	d007      	beq.n	800b6c4 <HAL_RCC_OscConfig+0x48>
 800b6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6b6:	2b18      	cmp	r3, #24
 800b6b8:	d110      	bne.n	800b6dc <HAL_RCC_OscConfig+0x60>
 800b6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6bc:	f003 0303 	and.w	r3, r3, #3
 800b6c0:	2b02      	cmp	r3, #2
 800b6c2:	d10b      	bne.n	800b6dc <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b6c4:	4b8f      	ldr	r3, [pc, #572]	; (800b904 <HAL_RCC_OscConfig+0x288>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d06c      	beq.n	800b7aa <HAL_RCC_OscConfig+0x12e>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	685b      	ldr	r3, [r3, #4]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d168      	bne.n	800b7aa <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800b6d8:	2301      	movs	r3, #1
 800b6da:	e3f6      	b.n	800beca <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	685b      	ldr	r3, [r3, #4]
 800b6e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6e4:	d106      	bne.n	800b6f4 <HAL_RCC_OscConfig+0x78>
 800b6e6:	4b87      	ldr	r3, [pc, #540]	; (800b904 <HAL_RCC_OscConfig+0x288>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	4a86      	ldr	r2, [pc, #536]	; (800b904 <HAL_RCC_OscConfig+0x288>)
 800b6ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b6f0:	6013      	str	r3, [r2, #0]
 800b6f2:	e02e      	b.n	800b752 <HAL_RCC_OscConfig+0xd6>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	685b      	ldr	r3, [r3, #4]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d10c      	bne.n	800b716 <HAL_RCC_OscConfig+0x9a>
 800b6fc:	4b81      	ldr	r3, [pc, #516]	; (800b904 <HAL_RCC_OscConfig+0x288>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	4a80      	ldr	r2, [pc, #512]	; (800b904 <HAL_RCC_OscConfig+0x288>)
 800b702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b706:	6013      	str	r3, [r2, #0]
 800b708:	4b7e      	ldr	r3, [pc, #504]	; (800b904 <HAL_RCC_OscConfig+0x288>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4a7d      	ldr	r2, [pc, #500]	; (800b904 <HAL_RCC_OscConfig+0x288>)
 800b70e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b712:	6013      	str	r3, [r2, #0]
 800b714:	e01d      	b.n	800b752 <HAL_RCC_OscConfig+0xd6>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	685b      	ldr	r3, [r3, #4]
 800b71a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b71e:	d10c      	bne.n	800b73a <HAL_RCC_OscConfig+0xbe>
 800b720:	4b78      	ldr	r3, [pc, #480]	; (800b904 <HAL_RCC_OscConfig+0x288>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	4a77      	ldr	r2, [pc, #476]	; (800b904 <HAL_RCC_OscConfig+0x288>)
 800b726:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b72a:	6013      	str	r3, [r2, #0]
 800b72c:	4b75      	ldr	r3, [pc, #468]	; (800b904 <HAL_RCC_OscConfig+0x288>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	4a74      	ldr	r2, [pc, #464]	; (800b904 <HAL_RCC_OscConfig+0x288>)
 800b732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b736:	6013      	str	r3, [r2, #0]
 800b738:	e00b      	b.n	800b752 <HAL_RCC_OscConfig+0xd6>
 800b73a:	4b72      	ldr	r3, [pc, #456]	; (800b904 <HAL_RCC_OscConfig+0x288>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	4a71      	ldr	r2, [pc, #452]	; (800b904 <HAL_RCC_OscConfig+0x288>)
 800b740:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b744:	6013      	str	r3, [r2, #0]
 800b746:	4b6f      	ldr	r3, [pc, #444]	; (800b904 <HAL_RCC_OscConfig+0x288>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	4a6e      	ldr	r2, [pc, #440]	; (800b904 <HAL_RCC_OscConfig+0x288>)
 800b74c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b750:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	685b      	ldr	r3, [r3, #4]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d013      	beq.n	800b782 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b75a:	f7f9 f81b 	bl	8004794 <HAL_GetTick>
 800b75e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b760:	e008      	b.n	800b774 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b762:	f7f9 f817 	bl	8004794 <HAL_GetTick>
 800b766:	4602      	mov	r2, r0
 800b768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b76a:	1ad3      	subs	r3, r2, r3
 800b76c:	2b64      	cmp	r3, #100	; 0x64
 800b76e:	d901      	bls.n	800b774 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800b770:	2303      	movs	r3, #3
 800b772:	e3aa      	b.n	800beca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b774:	4b63      	ldr	r3, [pc, #396]	; (800b904 <HAL_RCC_OscConfig+0x288>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d0f0      	beq.n	800b762 <HAL_RCC_OscConfig+0xe6>
 800b780:	e014      	b.n	800b7ac <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b782:	f7f9 f807 	bl	8004794 <HAL_GetTick>
 800b786:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b788:	e008      	b.n	800b79c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b78a:	f7f9 f803 	bl	8004794 <HAL_GetTick>
 800b78e:	4602      	mov	r2, r0
 800b790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b792:	1ad3      	subs	r3, r2, r3
 800b794:	2b64      	cmp	r3, #100	; 0x64
 800b796:	d901      	bls.n	800b79c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800b798:	2303      	movs	r3, #3
 800b79a:	e396      	b.n	800beca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b79c:	4b59      	ldr	r3, [pc, #356]	; (800b904 <HAL_RCC_OscConfig+0x288>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d1f0      	bne.n	800b78a <HAL_RCC_OscConfig+0x10e>
 800b7a8:	e000      	b.n	800b7ac <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b7aa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	f003 0302 	and.w	r3, r3, #2
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	f000 80cb 	beq.w	800b950 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b7ba:	4b52      	ldr	r3, [pc, #328]	; (800b904 <HAL_RCC_OscConfig+0x288>)
 800b7bc:	691b      	ldr	r3, [r3, #16]
 800b7be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b7c2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b7c4:	4b4f      	ldr	r3, [pc, #316]	; (800b904 <HAL_RCC_OscConfig+0x288>)
 800b7c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7c8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b7ca:	6a3b      	ldr	r3, [r7, #32]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d007      	beq.n	800b7e0 <HAL_RCC_OscConfig+0x164>
 800b7d0:	6a3b      	ldr	r3, [r7, #32]
 800b7d2:	2b18      	cmp	r3, #24
 800b7d4:	d156      	bne.n	800b884 <HAL_RCC_OscConfig+0x208>
 800b7d6:	69fb      	ldr	r3, [r7, #28]
 800b7d8:	f003 0303 	and.w	r3, r3, #3
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d151      	bne.n	800b884 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b7e0:	4b48      	ldr	r3, [pc, #288]	; (800b904 <HAL_RCC_OscConfig+0x288>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f003 0304 	and.w	r3, r3, #4
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d005      	beq.n	800b7f8 <HAL_RCC_OscConfig+0x17c>
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	68db      	ldr	r3, [r3, #12]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d101      	bne.n	800b7f8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	e368      	b.n	800beca <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b7f8:	4b42      	ldr	r3, [pc, #264]	; (800b904 <HAL_RCC_OscConfig+0x288>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f023 0219 	bic.w	r2, r3, #25
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	68db      	ldr	r3, [r3, #12]
 800b804:	493f      	ldr	r1, [pc, #252]	; (800b904 <HAL_RCC_OscConfig+0x288>)
 800b806:	4313      	orrs	r3, r2
 800b808:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b80a:	f7f8 ffc3 	bl	8004794 <HAL_GetTick>
 800b80e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b810:	e008      	b.n	800b824 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b812:	f7f8 ffbf 	bl	8004794 <HAL_GetTick>
 800b816:	4602      	mov	r2, r0
 800b818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b81a:	1ad3      	subs	r3, r2, r3
 800b81c:	2b02      	cmp	r3, #2
 800b81e:	d901      	bls.n	800b824 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800b820:	2303      	movs	r3, #3
 800b822:	e352      	b.n	800beca <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b824:	4b37      	ldr	r3, [pc, #220]	; (800b904 <HAL_RCC_OscConfig+0x288>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f003 0304 	and.w	r3, r3, #4
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d0f0      	beq.n	800b812 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b830:	f7f8 ffe0 	bl	80047f4 <HAL_GetREVID>
 800b834:	4603      	mov	r3, r0
 800b836:	f241 0203 	movw	r2, #4099	; 0x1003
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d817      	bhi.n	800b86e <HAL_RCC_OscConfig+0x1f2>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	691b      	ldr	r3, [r3, #16]
 800b842:	2b40      	cmp	r3, #64	; 0x40
 800b844:	d108      	bne.n	800b858 <HAL_RCC_OscConfig+0x1dc>
 800b846:	4b2f      	ldr	r3, [pc, #188]	; (800b904 <HAL_RCC_OscConfig+0x288>)
 800b848:	685b      	ldr	r3, [r3, #4]
 800b84a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b84e:	4a2d      	ldr	r2, [pc, #180]	; (800b904 <HAL_RCC_OscConfig+0x288>)
 800b850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b854:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b856:	e07b      	b.n	800b950 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b858:	4b2a      	ldr	r3, [pc, #168]	; (800b904 <HAL_RCC_OscConfig+0x288>)
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	691b      	ldr	r3, [r3, #16]
 800b864:	031b      	lsls	r3, r3, #12
 800b866:	4927      	ldr	r1, [pc, #156]	; (800b904 <HAL_RCC_OscConfig+0x288>)
 800b868:	4313      	orrs	r3, r2
 800b86a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b86c:	e070      	b.n	800b950 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b86e:	4b25      	ldr	r3, [pc, #148]	; (800b904 <HAL_RCC_OscConfig+0x288>)
 800b870:	685b      	ldr	r3, [r3, #4]
 800b872:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	691b      	ldr	r3, [r3, #16]
 800b87a:	061b      	lsls	r3, r3, #24
 800b87c:	4921      	ldr	r1, [pc, #132]	; (800b904 <HAL_RCC_OscConfig+0x288>)
 800b87e:	4313      	orrs	r3, r2
 800b880:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b882:	e065      	b.n	800b950 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	68db      	ldr	r3, [r3, #12]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d048      	beq.n	800b91e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b88c:	4b1d      	ldr	r3, [pc, #116]	; (800b904 <HAL_RCC_OscConfig+0x288>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f023 0219 	bic.w	r2, r3, #25
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	68db      	ldr	r3, [r3, #12]
 800b898:	491a      	ldr	r1, [pc, #104]	; (800b904 <HAL_RCC_OscConfig+0x288>)
 800b89a:	4313      	orrs	r3, r2
 800b89c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b89e:	f7f8 ff79 	bl	8004794 <HAL_GetTick>
 800b8a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b8a4:	e008      	b.n	800b8b8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b8a6:	f7f8 ff75 	bl	8004794 <HAL_GetTick>
 800b8aa:	4602      	mov	r2, r0
 800b8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ae:	1ad3      	subs	r3, r2, r3
 800b8b0:	2b02      	cmp	r3, #2
 800b8b2:	d901      	bls.n	800b8b8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800b8b4:	2303      	movs	r3, #3
 800b8b6:	e308      	b.n	800beca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b8b8:	4b12      	ldr	r3, [pc, #72]	; (800b904 <HAL_RCC_OscConfig+0x288>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f003 0304 	and.w	r3, r3, #4
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d0f0      	beq.n	800b8a6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b8c4:	f7f8 ff96 	bl	80047f4 <HAL_GetREVID>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	f241 0203 	movw	r2, #4099	; 0x1003
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	d81a      	bhi.n	800b908 <HAL_RCC_OscConfig+0x28c>
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	691b      	ldr	r3, [r3, #16]
 800b8d6:	2b40      	cmp	r3, #64	; 0x40
 800b8d8:	d108      	bne.n	800b8ec <HAL_RCC_OscConfig+0x270>
 800b8da:	4b0a      	ldr	r3, [pc, #40]	; (800b904 <HAL_RCC_OscConfig+0x288>)
 800b8dc:	685b      	ldr	r3, [r3, #4]
 800b8de:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b8e2:	4a08      	ldr	r2, [pc, #32]	; (800b904 <HAL_RCC_OscConfig+0x288>)
 800b8e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b8e8:	6053      	str	r3, [r2, #4]
 800b8ea:	e031      	b.n	800b950 <HAL_RCC_OscConfig+0x2d4>
 800b8ec:	4b05      	ldr	r3, [pc, #20]	; (800b904 <HAL_RCC_OscConfig+0x288>)
 800b8ee:	685b      	ldr	r3, [r3, #4]
 800b8f0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	691b      	ldr	r3, [r3, #16]
 800b8f8:	031b      	lsls	r3, r3, #12
 800b8fa:	4902      	ldr	r1, [pc, #8]	; (800b904 <HAL_RCC_OscConfig+0x288>)
 800b8fc:	4313      	orrs	r3, r2
 800b8fe:	604b      	str	r3, [r1, #4]
 800b900:	e026      	b.n	800b950 <HAL_RCC_OscConfig+0x2d4>
 800b902:	bf00      	nop
 800b904:	58024400 	.word	0x58024400
 800b908:	4b9a      	ldr	r3, [pc, #616]	; (800bb74 <HAL_RCC_OscConfig+0x4f8>)
 800b90a:	685b      	ldr	r3, [r3, #4]
 800b90c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	691b      	ldr	r3, [r3, #16]
 800b914:	061b      	lsls	r3, r3, #24
 800b916:	4997      	ldr	r1, [pc, #604]	; (800bb74 <HAL_RCC_OscConfig+0x4f8>)
 800b918:	4313      	orrs	r3, r2
 800b91a:	604b      	str	r3, [r1, #4]
 800b91c:	e018      	b.n	800b950 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b91e:	4b95      	ldr	r3, [pc, #596]	; (800bb74 <HAL_RCC_OscConfig+0x4f8>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	4a94      	ldr	r2, [pc, #592]	; (800bb74 <HAL_RCC_OscConfig+0x4f8>)
 800b924:	f023 0301 	bic.w	r3, r3, #1
 800b928:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b92a:	f7f8 ff33 	bl	8004794 <HAL_GetTick>
 800b92e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b930:	e008      	b.n	800b944 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b932:	f7f8 ff2f 	bl	8004794 <HAL_GetTick>
 800b936:	4602      	mov	r2, r0
 800b938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b93a:	1ad3      	subs	r3, r2, r3
 800b93c:	2b02      	cmp	r3, #2
 800b93e:	d901      	bls.n	800b944 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800b940:	2303      	movs	r3, #3
 800b942:	e2c2      	b.n	800beca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b944:	4b8b      	ldr	r3, [pc, #556]	; (800bb74 <HAL_RCC_OscConfig+0x4f8>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f003 0304 	and.w	r3, r3, #4
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d1f0      	bne.n	800b932 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	f003 0310 	and.w	r3, r3, #16
 800b958:	2b00      	cmp	r3, #0
 800b95a:	f000 80a9 	beq.w	800bab0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b95e:	4b85      	ldr	r3, [pc, #532]	; (800bb74 <HAL_RCC_OscConfig+0x4f8>)
 800b960:	691b      	ldr	r3, [r3, #16]
 800b962:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b966:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b968:	4b82      	ldr	r3, [pc, #520]	; (800bb74 <HAL_RCC_OscConfig+0x4f8>)
 800b96a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b96c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b96e:	69bb      	ldr	r3, [r7, #24]
 800b970:	2b08      	cmp	r3, #8
 800b972:	d007      	beq.n	800b984 <HAL_RCC_OscConfig+0x308>
 800b974:	69bb      	ldr	r3, [r7, #24]
 800b976:	2b18      	cmp	r3, #24
 800b978:	d13a      	bne.n	800b9f0 <HAL_RCC_OscConfig+0x374>
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	f003 0303 	and.w	r3, r3, #3
 800b980:	2b01      	cmp	r3, #1
 800b982:	d135      	bne.n	800b9f0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b984:	4b7b      	ldr	r3, [pc, #492]	; (800bb74 <HAL_RCC_OscConfig+0x4f8>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d005      	beq.n	800b99c <HAL_RCC_OscConfig+0x320>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	69db      	ldr	r3, [r3, #28]
 800b994:	2b80      	cmp	r3, #128	; 0x80
 800b996:	d001      	beq.n	800b99c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800b998:	2301      	movs	r3, #1
 800b99a:	e296      	b.n	800beca <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b99c:	f7f8 ff2a 	bl	80047f4 <HAL_GetREVID>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	f241 0203 	movw	r2, #4099	; 0x1003
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d817      	bhi.n	800b9da <HAL_RCC_OscConfig+0x35e>
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6a1b      	ldr	r3, [r3, #32]
 800b9ae:	2b20      	cmp	r3, #32
 800b9b0:	d108      	bne.n	800b9c4 <HAL_RCC_OscConfig+0x348>
 800b9b2:	4b70      	ldr	r3, [pc, #448]	; (800bb74 <HAL_RCC_OscConfig+0x4f8>)
 800b9b4:	685b      	ldr	r3, [r3, #4]
 800b9b6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b9ba:	4a6e      	ldr	r2, [pc, #440]	; (800bb74 <HAL_RCC_OscConfig+0x4f8>)
 800b9bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b9c0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b9c2:	e075      	b.n	800bab0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b9c4:	4b6b      	ldr	r3, [pc, #428]	; (800bb74 <HAL_RCC_OscConfig+0x4f8>)
 800b9c6:	685b      	ldr	r3, [r3, #4]
 800b9c8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6a1b      	ldr	r3, [r3, #32]
 800b9d0:	069b      	lsls	r3, r3, #26
 800b9d2:	4968      	ldr	r1, [pc, #416]	; (800bb74 <HAL_RCC_OscConfig+0x4f8>)
 800b9d4:	4313      	orrs	r3, r2
 800b9d6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b9d8:	e06a      	b.n	800bab0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b9da:	4b66      	ldr	r3, [pc, #408]	; (800bb74 <HAL_RCC_OscConfig+0x4f8>)
 800b9dc:	68db      	ldr	r3, [r3, #12]
 800b9de:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6a1b      	ldr	r3, [r3, #32]
 800b9e6:	061b      	lsls	r3, r3, #24
 800b9e8:	4962      	ldr	r1, [pc, #392]	; (800bb74 <HAL_RCC_OscConfig+0x4f8>)
 800b9ea:	4313      	orrs	r3, r2
 800b9ec:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b9ee:	e05f      	b.n	800bab0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	69db      	ldr	r3, [r3, #28]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d042      	beq.n	800ba7e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b9f8:	4b5e      	ldr	r3, [pc, #376]	; (800bb74 <HAL_RCC_OscConfig+0x4f8>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	4a5d      	ldr	r2, [pc, #372]	; (800bb74 <HAL_RCC_OscConfig+0x4f8>)
 800b9fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba04:	f7f8 fec6 	bl	8004794 <HAL_GetTick>
 800ba08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ba0a:	e008      	b.n	800ba1e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800ba0c:	f7f8 fec2 	bl	8004794 <HAL_GetTick>
 800ba10:	4602      	mov	r2, r0
 800ba12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba14:	1ad3      	subs	r3, r2, r3
 800ba16:	2b02      	cmp	r3, #2
 800ba18:	d901      	bls.n	800ba1e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800ba1a:	2303      	movs	r3, #3
 800ba1c:	e255      	b.n	800beca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ba1e:	4b55      	ldr	r3, [pc, #340]	; (800bb74 <HAL_RCC_OscConfig+0x4f8>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d0f0      	beq.n	800ba0c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ba2a:	f7f8 fee3 	bl	80047f4 <HAL_GetREVID>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	f241 0203 	movw	r2, #4099	; 0x1003
 800ba34:	4293      	cmp	r3, r2
 800ba36:	d817      	bhi.n	800ba68 <HAL_RCC_OscConfig+0x3ec>
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6a1b      	ldr	r3, [r3, #32]
 800ba3c:	2b20      	cmp	r3, #32
 800ba3e:	d108      	bne.n	800ba52 <HAL_RCC_OscConfig+0x3d6>
 800ba40:	4b4c      	ldr	r3, [pc, #304]	; (800bb74 <HAL_RCC_OscConfig+0x4f8>)
 800ba42:	685b      	ldr	r3, [r3, #4]
 800ba44:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800ba48:	4a4a      	ldr	r2, [pc, #296]	; (800bb74 <HAL_RCC_OscConfig+0x4f8>)
 800ba4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ba4e:	6053      	str	r3, [r2, #4]
 800ba50:	e02e      	b.n	800bab0 <HAL_RCC_OscConfig+0x434>
 800ba52:	4b48      	ldr	r3, [pc, #288]	; (800bb74 <HAL_RCC_OscConfig+0x4f8>)
 800ba54:	685b      	ldr	r3, [r3, #4]
 800ba56:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6a1b      	ldr	r3, [r3, #32]
 800ba5e:	069b      	lsls	r3, r3, #26
 800ba60:	4944      	ldr	r1, [pc, #272]	; (800bb74 <HAL_RCC_OscConfig+0x4f8>)
 800ba62:	4313      	orrs	r3, r2
 800ba64:	604b      	str	r3, [r1, #4]
 800ba66:	e023      	b.n	800bab0 <HAL_RCC_OscConfig+0x434>
 800ba68:	4b42      	ldr	r3, [pc, #264]	; (800bb74 <HAL_RCC_OscConfig+0x4f8>)
 800ba6a:	68db      	ldr	r3, [r3, #12]
 800ba6c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6a1b      	ldr	r3, [r3, #32]
 800ba74:	061b      	lsls	r3, r3, #24
 800ba76:	493f      	ldr	r1, [pc, #252]	; (800bb74 <HAL_RCC_OscConfig+0x4f8>)
 800ba78:	4313      	orrs	r3, r2
 800ba7a:	60cb      	str	r3, [r1, #12]
 800ba7c:	e018      	b.n	800bab0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800ba7e:	4b3d      	ldr	r3, [pc, #244]	; (800bb74 <HAL_RCC_OscConfig+0x4f8>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	4a3c      	ldr	r2, [pc, #240]	; (800bb74 <HAL_RCC_OscConfig+0x4f8>)
 800ba84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba8a:	f7f8 fe83 	bl	8004794 <HAL_GetTick>
 800ba8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ba90:	e008      	b.n	800baa4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800ba92:	f7f8 fe7f 	bl	8004794 <HAL_GetTick>
 800ba96:	4602      	mov	r2, r0
 800ba98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba9a:	1ad3      	subs	r3, r2, r3
 800ba9c:	2b02      	cmp	r3, #2
 800ba9e:	d901      	bls.n	800baa4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800baa0:	2303      	movs	r3, #3
 800baa2:	e212      	b.n	800beca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800baa4:	4b33      	ldr	r3, [pc, #204]	; (800bb74 <HAL_RCC_OscConfig+0x4f8>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800baac:	2b00      	cmp	r3, #0
 800baae:	d1f0      	bne.n	800ba92 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	f003 0308 	and.w	r3, r3, #8
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d036      	beq.n	800bb2a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	695b      	ldr	r3, [r3, #20]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d019      	beq.n	800baf8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bac4:	4b2b      	ldr	r3, [pc, #172]	; (800bb74 <HAL_RCC_OscConfig+0x4f8>)
 800bac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bac8:	4a2a      	ldr	r2, [pc, #168]	; (800bb74 <HAL_RCC_OscConfig+0x4f8>)
 800baca:	f043 0301 	orr.w	r3, r3, #1
 800bace:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bad0:	f7f8 fe60 	bl	8004794 <HAL_GetTick>
 800bad4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800bad6:	e008      	b.n	800baea <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bad8:	f7f8 fe5c 	bl	8004794 <HAL_GetTick>
 800badc:	4602      	mov	r2, r0
 800bade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae0:	1ad3      	subs	r3, r2, r3
 800bae2:	2b02      	cmp	r3, #2
 800bae4:	d901      	bls.n	800baea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800bae6:	2303      	movs	r3, #3
 800bae8:	e1ef      	b.n	800beca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800baea:	4b22      	ldr	r3, [pc, #136]	; (800bb74 <HAL_RCC_OscConfig+0x4f8>)
 800baec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800baee:	f003 0302 	and.w	r3, r3, #2
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d0f0      	beq.n	800bad8 <HAL_RCC_OscConfig+0x45c>
 800baf6:	e018      	b.n	800bb2a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800baf8:	4b1e      	ldr	r3, [pc, #120]	; (800bb74 <HAL_RCC_OscConfig+0x4f8>)
 800bafa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bafc:	4a1d      	ldr	r2, [pc, #116]	; (800bb74 <HAL_RCC_OscConfig+0x4f8>)
 800bafe:	f023 0301 	bic.w	r3, r3, #1
 800bb02:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb04:	f7f8 fe46 	bl	8004794 <HAL_GetTick>
 800bb08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800bb0a:	e008      	b.n	800bb1e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bb0c:	f7f8 fe42 	bl	8004794 <HAL_GetTick>
 800bb10:	4602      	mov	r2, r0
 800bb12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb14:	1ad3      	subs	r3, r2, r3
 800bb16:	2b02      	cmp	r3, #2
 800bb18:	d901      	bls.n	800bb1e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800bb1a:	2303      	movs	r3, #3
 800bb1c:	e1d5      	b.n	800beca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800bb1e:	4b15      	ldr	r3, [pc, #84]	; (800bb74 <HAL_RCC_OscConfig+0x4f8>)
 800bb20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb22:	f003 0302 	and.w	r3, r3, #2
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d1f0      	bne.n	800bb0c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	f003 0320 	and.w	r3, r3, #32
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d039      	beq.n	800bbaa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	699b      	ldr	r3, [r3, #24]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d01c      	beq.n	800bb78 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800bb3e:	4b0d      	ldr	r3, [pc, #52]	; (800bb74 <HAL_RCC_OscConfig+0x4f8>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	4a0c      	ldr	r2, [pc, #48]	; (800bb74 <HAL_RCC_OscConfig+0x4f8>)
 800bb44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bb48:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800bb4a:	f7f8 fe23 	bl	8004794 <HAL_GetTick>
 800bb4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800bb50:	e008      	b.n	800bb64 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800bb52:	f7f8 fe1f 	bl	8004794 <HAL_GetTick>
 800bb56:	4602      	mov	r2, r0
 800bb58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb5a:	1ad3      	subs	r3, r2, r3
 800bb5c:	2b02      	cmp	r3, #2
 800bb5e:	d901      	bls.n	800bb64 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800bb60:	2303      	movs	r3, #3
 800bb62:	e1b2      	b.n	800beca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800bb64:	4b03      	ldr	r3, [pc, #12]	; (800bb74 <HAL_RCC_OscConfig+0x4f8>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d0f0      	beq.n	800bb52 <HAL_RCC_OscConfig+0x4d6>
 800bb70:	e01b      	b.n	800bbaa <HAL_RCC_OscConfig+0x52e>
 800bb72:	bf00      	nop
 800bb74:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800bb78:	4b9b      	ldr	r3, [pc, #620]	; (800bde8 <HAL_RCC_OscConfig+0x76c>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	4a9a      	ldr	r2, [pc, #616]	; (800bde8 <HAL_RCC_OscConfig+0x76c>)
 800bb7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bb82:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800bb84:	f7f8 fe06 	bl	8004794 <HAL_GetTick>
 800bb88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800bb8a:	e008      	b.n	800bb9e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800bb8c:	f7f8 fe02 	bl	8004794 <HAL_GetTick>
 800bb90:	4602      	mov	r2, r0
 800bb92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb94:	1ad3      	subs	r3, r2, r3
 800bb96:	2b02      	cmp	r3, #2
 800bb98:	d901      	bls.n	800bb9e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800bb9a:	2303      	movs	r3, #3
 800bb9c:	e195      	b.n	800beca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800bb9e:	4b92      	ldr	r3, [pc, #584]	; (800bde8 <HAL_RCC_OscConfig+0x76c>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d1f0      	bne.n	800bb8c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	f003 0304 	and.w	r3, r3, #4
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	f000 8081 	beq.w	800bcba <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800bbb8:	4b8c      	ldr	r3, [pc, #560]	; (800bdec <HAL_RCC_OscConfig+0x770>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	4a8b      	ldr	r2, [pc, #556]	; (800bdec <HAL_RCC_OscConfig+0x770>)
 800bbbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bbc2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bbc4:	f7f8 fde6 	bl	8004794 <HAL_GetTick>
 800bbc8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bbca:	e008      	b.n	800bbde <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800bbcc:	f7f8 fde2 	bl	8004794 <HAL_GetTick>
 800bbd0:	4602      	mov	r2, r0
 800bbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd4:	1ad3      	subs	r3, r2, r3
 800bbd6:	2b64      	cmp	r3, #100	; 0x64
 800bbd8:	d901      	bls.n	800bbde <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800bbda:	2303      	movs	r3, #3
 800bbdc:	e175      	b.n	800beca <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bbde:	4b83      	ldr	r3, [pc, #524]	; (800bdec <HAL_RCC_OscConfig+0x770>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d0f0      	beq.n	800bbcc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	689b      	ldr	r3, [r3, #8]
 800bbee:	2b01      	cmp	r3, #1
 800bbf0:	d106      	bne.n	800bc00 <HAL_RCC_OscConfig+0x584>
 800bbf2:	4b7d      	ldr	r3, [pc, #500]	; (800bde8 <HAL_RCC_OscConfig+0x76c>)
 800bbf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbf6:	4a7c      	ldr	r2, [pc, #496]	; (800bde8 <HAL_RCC_OscConfig+0x76c>)
 800bbf8:	f043 0301 	orr.w	r3, r3, #1
 800bbfc:	6713      	str	r3, [r2, #112]	; 0x70
 800bbfe:	e02d      	b.n	800bc5c <HAL_RCC_OscConfig+0x5e0>
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	689b      	ldr	r3, [r3, #8]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d10c      	bne.n	800bc22 <HAL_RCC_OscConfig+0x5a6>
 800bc08:	4b77      	ldr	r3, [pc, #476]	; (800bde8 <HAL_RCC_OscConfig+0x76c>)
 800bc0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc0c:	4a76      	ldr	r2, [pc, #472]	; (800bde8 <HAL_RCC_OscConfig+0x76c>)
 800bc0e:	f023 0301 	bic.w	r3, r3, #1
 800bc12:	6713      	str	r3, [r2, #112]	; 0x70
 800bc14:	4b74      	ldr	r3, [pc, #464]	; (800bde8 <HAL_RCC_OscConfig+0x76c>)
 800bc16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc18:	4a73      	ldr	r2, [pc, #460]	; (800bde8 <HAL_RCC_OscConfig+0x76c>)
 800bc1a:	f023 0304 	bic.w	r3, r3, #4
 800bc1e:	6713      	str	r3, [r2, #112]	; 0x70
 800bc20:	e01c      	b.n	800bc5c <HAL_RCC_OscConfig+0x5e0>
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	689b      	ldr	r3, [r3, #8]
 800bc26:	2b05      	cmp	r3, #5
 800bc28:	d10c      	bne.n	800bc44 <HAL_RCC_OscConfig+0x5c8>
 800bc2a:	4b6f      	ldr	r3, [pc, #444]	; (800bde8 <HAL_RCC_OscConfig+0x76c>)
 800bc2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc2e:	4a6e      	ldr	r2, [pc, #440]	; (800bde8 <HAL_RCC_OscConfig+0x76c>)
 800bc30:	f043 0304 	orr.w	r3, r3, #4
 800bc34:	6713      	str	r3, [r2, #112]	; 0x70
 800bc36:	4b6c      	ldr	r3, [pc, #432]	; (800bde8 <HAL_RCC_OscConfig+0x76c>)
 800bc38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc3a:	4a6b      	ldr	r2, [pc, #428]	; (800bde8 <HAL_RCC_OscConfig+0x76c>)
 800bc3c:	f043 0301 	orr.w	r3, r3, #1
 800bc40:	6713      	str	r3, [r2, #112]	; 0x70
 800bc42:	e00b      	b.n	800bc5c <HAL_RCC_OscConfig+0x5e0>
 800bc44:	4b68      	ldr	r3, [pc, #416]	; (800bde8 <HAL_RCC_OscConfig+0x76c>)
 800bc46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc48:	4a67      	ldr	r2, [pc, #412]	; (800bde8 <HAL_RCC_OscConfig+0x76c>)
 800bc4a:	f023 0301 	bic.w	r3, r3, #1
 800bc4e:	6713      	str	r3, [r2, #112]	; 0x70
 800bc50:	4b65      	ldr	r3, [pc, #404]	; (800bde8 <HAL_RCC_OscConfig+0x76c>)
 800bc52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc54:	4a64      	ldr	r2, [pc, #400]	; (800bde8 <HAL_RCC_OscConfig+0x76c>)
 800bc56:	f023 0304 	bic.w	r3, r3, #4
 800bc5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	689b      	ldr	r3, [r3, #8]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d015      	beq.n	800bc90 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc64:	f7f8 fd96 	bl	8004794 <HAL_GetTick>
 800bc68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bc6a:	e00a      	b.n	800bc82 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bc6c:	f7f8 fd92 	bl	8004794 <HAL_GetTick>
 800bc70:	4602      	mov	r2, r0
 800bc72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc74:	1ad3      	subs	r3, r2, r3
 800bc76:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc7a:	4293      	cmp	r3, r2
 800bc7c:	d901      	bls.n	800bc82 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800bc7e:	2303      	movs	r3, #3
 800bc80:	e123      	b.n	800beca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bc82:	4b59      	ldr	r3, [pc, #356]	; (800bde8 <HAL_RCC_OscConfig+0x76c>)
 800bc84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc86:	f003 0302 	and.w	r3, r3, #2
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d0ee      	beq.n	800bc6c <HAL_RCC_OscConfig+0x5f0>
 800bc8e:	e014      	b.n	800bcba <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc90:	f7f8 fd80 	bl	8004794 <HAL_GetTick>
 800bc94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bc96:	e00a      	b.n	800bcae <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bc98:	f7f8 fd7c 	bl	8004794 <HAL_GetTick>
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca0:	1ad3      	subs	r3, r2, r3
 800bca2:	f241 3288 	movw	r2, #5000	; 0x1388
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d901      	bls.n	800bcae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800bcaa:	2303      	movs	r3, #3
 800bcac:	e10d      	b.n	800beca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bcae:	4b4e      	ldr	r3, [pc, #312]	; (800bde8 <HAL_RCC_OscConfig+0x76c>)
 800bcb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcb2:	f003 0302 	and.w	r3, r3, #2
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d1ee      	bne.n	800bc98 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	f000 8102 	beq.w	800bec8 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800bcc4:	4b48      	ldr	r3, [pc, #288]	; (800bde8 <HAL_RCC_OscConfig+0x76c>)
 800bcc6:	691b      	ldr	r3, [r3, #16]
 800bcc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bccc:	2b18      	cmp	r3, #24
 800bcce:	f000 80bd 	beq.w	800be4c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd6:	2b02      	cmp	r3, #2
 800bcd8:	f040 809e 	bne.w	800be18 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bcdc:	4b42      	ldr	r3, [pc, #264]	; (800bde8 <HAL_RCC_OscConfig+0x76c>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	4a41      	ldr	r2, [pc, #260]	; (800bde8 <HAL_RCC_OscConfig+0x76c>)
 800bce2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bce6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bce8:	f7f8 fd54 	bl	8004794 <HAL_GetTick>
 800bcec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bcee:	e008      	b.n	800bd02 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bcf0:	f7f8 fd50 	bl	8004794 <HAL_GetTick>
 800bcf4:	4602      	mov	r2, r0
 800bcf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf8:	1ad3      	subs	r3, r2, r3
 800bcfa:	2b02      	cmp	r3, #2
 800bcfc:	d901      	bls.n	800bd02 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800bcfe:	2303      	movs	r3, #3
 800bd00:	e0e3      	b.n	800beca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bd02:	4b39      	ldr	r3, [pc, #228]	; (800bde8 <HAL_RCC_OscConfig+0x76c>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d1f0      	bne.n	800bcf0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bd0e:	4b36      	ldr	r3, [pc, #216]	; (800bde8 <HAL_RCC_OscConfig+0x76c>)
 800bd10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bd12:	4b37      	ldr	r3, [pc, #220]	; (800bdf0 <HAL_RCC_OscConfig+0x774>)
 800bd14:	4013      	ands	r3, r2
 800bd16:	687a      	ldr	r2, [r7, #4]
 800bd18:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800bd1a:	687a      	ldr	r2, [r7, #4]
 800bd1c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800bd1e:	0112      	lsls	r2, r2, #4
 800bd20:	430a      	orrs	r2, r1
 800bd22:	4931      	ldr	r1, [pc, #196]	; (800bde8 <HAL_RCC_OscConfig+0x76c>)
 800bd24:	4313      	orrs	r3, r2
 800bd26:	628b      	str	r3, [r1, #40]	; 0x28
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd2c:	3b01      	subs	r3, #1
 800bd2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd36:	3b01      	subs	r3, #1
 800bd38:	025b      	lsls	r3, r3, #9
 800bd3a:	b29b      	uxth	r3, r3
 800bd3c:	431a      	orrs	r2, r3
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd42:	3b01      	subs	r3, #1
 800bd44:	041b      	lsls	r3, r3, #16
 800bd46:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bd4a:	431a      	orrs	r2, r3
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd50:	3b01      	subs	r3, #1
 800bd52:	061b      	lsls	r3, r3, #24
 800bd54:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bd58:	4923      	ldr	r1, [pc, #140]	; (800bde8 <HAL_RCC_OscConfig+0x76c>)
 800bd5a:	4313      	orrs	r3, r2
 800bd5c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800bd5e:	4b22      	ldr	r3, [pc, #136]	; (800bde8 <HAL_RCC_OscConfig+0x76c>)
 800bd60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd62:	4a21      	ldr	r2, [pc, #132]	; (800bde8 <HAL_RCC_OscConfig+0x76c>)
 800bd64:	f023 0301 	bic.w	r3, r3, #1
 800bd68:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800bd6a:	4b1f      	ldr	r3, [pc, #124]	; (800bde8 <HAL_RCC_OscConfig+0x76c>)
 800bd6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd6e:	4b21      	ldr	r3, [pc, #132]	; (800bdf4 <HAL_RCC_OscConfig+0x778>)
 800bd70:	4013      	ands	r3, r2
 800bd72:	687a      	ldr	r2, [r7, #4]
 800bd74:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800bd76:	00d2      	lsls	r2, r2, #3
 800bd78:	491b      	ldr	r1, [pc, #108]	; (800bde8 <HAL_RCC_OscConfig+0x76c>)
 800bd7a:	4313      	orrs	r3, r2
 800bd7c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800bd7e:	4b1a      	ldr	r3, [pc, #104]	; (800bde8 <HAL_RCC_OscConfig+0x76c>)
 800bd80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd82:	f023 020c 	bic.w	r2, r3, #12
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd8a:	4917      	ldr	r1, [pc, #92]	; (800bde8 <HAL_RCC_OscConfig+0x76c>)
 800bd8c:	4313      	orrs	r3, r2
 800bd8e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800bd90:	4b15      	ldr	r3, [pc, #84]	; (800bde8 <HAL_RCC_OscConfig+0x76c>)
 800bd92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd94:	f023 0202 	bic.w	r2, r3, #2
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd9c:	4912      	ldr	r1, [pc, #72]	; (800bde8 <HAL_RCC_OscConfig+0x76c>)
 800bd9e:	4313      	orrs	r3, r2
 800bda0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bda2:	4b11      	ldr	r3, [pc, #68]	; (800bde8 <HAL_RCC_OscConfig+0x76c>)
 800bda4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bda6:	4a10      	ldr	r2, [pc, #64]	; (800bde8 <HAL_RCC_OscConfig+0x76c>)
 800bda8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bdac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bdae:	4b0e      	ldr	r3, [pc, #56]	; (800bde8 <HAL_RCC_OscConfig+0x76c>)
 800bdb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdb2:	4a0d      	ldr	r2, [pc, #52]	; (800bde8 <HAL_RCC_OscConfig+0x76c>)
 800bdb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bdb8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800bdba:	4b0b      	ldr	r3, [pc, #44]	; (800bde8 <HAL_RCC_OscConfig+0x76c>)
 800bdbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdbe:	4a0a      	ldr	r2, [pc, #40]	; (800bde8 <HAL_RCC_OscConfig+0x76c>)
 800bdc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bdc4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800bdc6:	4b08      	ldr	r3, [pc, #32]	; (800bde8 <HAL_RCC_OscConfig+0x76c>)
 800bdc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdca:	4a07      	ldr	r2, [pc, #28]	; (800bde8 <HAL_RCC_OscConfig+0x76c>)
 800bdcc:	f043 0301 	orr.w	r3, r3, #1
 800bdd0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bdd2:	4b05      	ldr	r3, [pc, #20]	; (800bde8 <HAL_RCC_OscConfig+0x76c>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	4a04      	ldr	r2, [pc, #16]	; (800bde8 <HAL_RCC_OscConfig+0x76c>)
 800bdd8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bddc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bdde:	f7f8 fcd9 	bl	8004794 <HAL_GetTick>
 800bde2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bde4:	e011      	b.n	800be0a <HAL_RCC_OscConfig+0x78e>
 800bde6:	bf00      	nop
 800bde8:	58024400 	.word	0x58024400
 800bdec:	58024800 	.word	0x58024800
 800bdf0:	fffffc0c 	.word	0xfffffc0c
 800bdf4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bdf8:	f7f8 fccc 	bl	8004794 <HAL_GetTick>
 800bdfc:	4602      	mov	r2, r0
 800bdfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be00:	1ad3      	subs	r3, r2, r3
 800be02:	2b02      	cmp	r3, #2
 800be04:	d901      	bls.n	800be0a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800be06:	2303      	movs	r3, #3
 800be08:	e05f      	b.n	800beca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800be0a:	4b32      	ldr	r3, [pc, #200]	; (800bed4 <HAL_RCC_OscConfig+0x858>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be12:	2b00      	cmp	r3, #0
 800be14:	d0f0      	beq.n	800bdf8 <HAL_RCC_OscConfig+0x77c>
 800be16:	e057      	b.n	800bec8 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800be18:	4b2e      	ldr	r3, [pc, #184]	; (800bed4 <HAL_RCC_OscConfig+0x858>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	4a2d      	ldr	r2, [pc, #180]	; (800bed4 <HAL_RCC_OscConfig+0x858>)
 800be1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800be22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be24:	f7f8 fcb6 	bl	8004794 <HAL_GetTick>
 800be28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800be2a:	e008      	b.n	800be3e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800be2c:	f7f8 fcb2 	bl	8004794 <HAL_GetTick>
 800be30:	4602      	mov	r2, r0
 800be32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be34:	1ad3      	subs	r3, r2, r3
 800be36:	2b02      	cmp	r3, #2
 800be38:	d901      	bls.n	800be3e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800be3a:	2303      	movs	r3, #3
 800be3c:	e045      	b.n	800beca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800be3e:	4b25      	ldr	r3, [pc, #148]	; (800bed4 <HAL_RCC_OscConfig+0x858>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be46:	2b00      	cmp	r3, #0
 800be48:	d1f0      	bne.n	800be2c <HAL_RCC_OscConfig+0x7b0>
 800be4a:	e03d      	b.n	800bec8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800be4c:	4b21      	ldr	r3, [pc, #132]	; (800bed4 <HAL_RCC_OscConfig+0x858>)
 800be4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be50:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800be52:	4b20      	ldr	r3, [pc, #128]	; (800bed4 <HAL_RCC_OscConfig+0x858>)
 800be54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be56:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be5c:	2b01      	cmp	r3, #1
 800be5e:	d031      	beq.n	800bec4 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800be60:	693b      	ldr	r3, [r7, #16]
 800be62:	f003 0203 	and.w	r2, r3, #3
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800be6a:	429a      	cmp	r2, r3
 800be6c:	d12a      	bne.n	800bec4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	091b      	lsrs	r3, r3, #4
 800be72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800be7a:	429a      	cmp	r2, r3
 800be7c:	d122      	bne.n	800bec4 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be88:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800be8a:	429a      	cmp	r2, r3
 800be8c:	d11a      	bne.n	800bec4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	0a5b      	lsrs	r3, r3, #9
 800be92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be9a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800be9c:	429a      	cmp	r2, r3
 800be9e:	d111      	bne.n	800bec4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	0c1b      	lsrs	r3, r3, #16
 800bea4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beac:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800beae:	429a      	cmp	r2, r3
 800beb0:	d108      	bne.n	800bec4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	0e1b      	lsrs	r3, r3, #24
 800beb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bebe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d001      	beq.n	800bec8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800bec4:	2301      	movs	r3, #1
 800bec6:	e000      	b.n	800beca <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800bec8:	2300      	movs	r3, #0
}
 800beca:	4618      	mov	r0, r3
 800becc:	3730      	adds	r7, #48	; 0x30
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}
 800bed2:	bf00      	nop
 800bed4:	58024400 	.word	0x58024400

0800bed8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b086      	sub	sp, #24
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
 800bee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d101      	bne.n	800beec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bee8:	2301      	movs	r3, #1
 800beea:	e19c      	b.n	800c226 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800beec:	4b8a      	ldr	r3, [pc, #552]	; (800c118 <HAL_RCC_ClockConfig+0x240>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f003 030f 	and.w	r3, r3, #15
 800bef4:	683a      	ldr	r2, [r7, #0]
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d910      	bls.n	800bf1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800befa:	4b87      	ldr	r3, [pc, #540]	; (800c118 <HAL_RCC_ClockConfig+0x240>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f023 020f 	bic.w	r2, r3, #15
 800bf02:	4985      	ldr	r1, [pc, #532]	; (800c118 <HAL_RCC_ClockConfig+0x240>)
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	4313      	orrs	r3, r2
 800bf08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bf0a:	4b83      	ldr	r3, [pc, #524]	; (800c118 <HAL_RCC_ClockConfig+0x240>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f003 030f 	and.w	r3, r3, #15
 800bf12:	683a      	ldr	r2, [r7, #0]
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d001      	beq.n	800bf1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800bf18:	2301      	movs	r3, #1
 800bf1a:	e184      	b.n	800c226 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f003 0304 	and.w	r3, r3, #4
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d010      	beq.n	800bf4a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	691a      	ldr	r2, [r3, #16]
 800bf2c:	4b7b      	ldr	r3, [pc, #492]	; (800c11c <HAL_RCC_ClockConfig+0x244>)
 800bf2e:	699b      	ldr	r3, [r3, #24]
 800bf30:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bf34:	429a      	cmp	r2, r3
 800bf36:	d908      	bls.n	800bf4a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800bf38:	4b78      	ldr	r3, [pc, #480]	; (800c11c <HAL_RCC_ClockConfig+0x244>)
 800bf3a:	699b      	ldr	r3, [r3, #24]
 800bf3c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	691b      	ldr	r3, [r3, #16]
 800bf44:	4975      	ldr	r1, [pc, #468]	; (800c11c <HAL_RCC_ClockConfig+0x244>)
 800bf46:	4313      	orrs	r3, r2
 800bf48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f003 0308 	and.w	r3, r3, #8
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d010      	beq.n	800bf78 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	695a      	ldr	r2, [r3, #20]
 800bf5a:	4b70      	ldr	r3, [pc, #448]	; (800c11c <HAL_RCC_ClockConfig+0x244>)
 800bf5c:	69db      	ldr	r3, [r3, #28]
 800bf5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bf62:	429a      	cmp	r2, r3
 800bf64:	d908      	bls.n	800bf78 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bf66:	4b6d      	ldr	r3, [pc, #436]	; (800c11c <HAL_RCC_ClockConfig+0x244>)
 800bf68:	69db      	ldr	r3, [r3, #28]
 800bf6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	695b      	ldr	r3, [r3, #20]
 800bf72:	496a      	ldr	r1, [pc, #424]	; (800c11c <HAL_RCC_ClockConfig+0x244>)
 800bf74:	4313      	orrs	r3, r2
 800bf76:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f003 0310 	and.w	r3, r3, #16
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d010      	beq.n	800bfa6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	699a      	ldr	r2, [r3, #24]
 800bf88:	4b64      	ldr	r3, [pc, #400]	; (800c11c <HAL_RCC_ClockConfig+0x244>)
 800bf8a:	69db      	ldr	r3, [r3, #28]
 800bf8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bf90:	429a      	cmp	r2, r3
 800bf92:	d908      	bls.n	800bfa6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bf94:	4b61      	ldr	r3, [pc, #388]	; (800c11c <HAL_RCC_ClockConfig+0x244>)
 800bf96:	69db      	ldr	r3, [r3, #28]
 800bf98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	699b      	ldr	r3, [r3, #24]
 800bfa0:	495e      	ldr	r1, [pc, #376]	; (800c11c <HAL_RCC_ClockConfig+0x244>)
 800bfa2:	4313      	orrs	r3, r2
 800bfa4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	f003 0320 	and.w	r3, r3, #32
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d010      	beq.n	800bfd4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	69da      	ldr	r2, [r3, #28]
 800bfb6:	4b59      	ldr	r3, [pc, #356]	; (800c11c <HAL_RCC_ClockConfig+0x244>)
 800bfb8:	6a1b      	ldr	r3, [r3, #32]
 800bfba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	d908      	bls.n	800bfd4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800bfc2:	4b56      	ldr	r3, [pc, #344]	; (800c11c <HAL_RCC_ClockConfig+0x244>)
 800bfc4:	6a1b      	ldr	r3, [r3, #32]
 800bfc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	69db      	ldr	r3, [r3, #28]
 800bfce:	4953      	ldr	r1, [pc, #332]	; (800c11c <HAL_RCC_ClockConfig+0x244>)
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f003 0302 	and.w	r3, r3, #2
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d010      	beq.n	800c002 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	68da      	ldr	r2, [r3, #12]
 800bfe4:	4b4d      	ldr	r3, [pc, #308]	; (800c11c <HAL_RCC_ClockConfig+0x244>)
 800bfe6:	699b      	ldr	r3, [r3, #24]
 800bfe8:	f003 030f 	and.w	r3, r3, #15
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d908      	bls.n	800c002 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bff0:	4b4a      	ldr	r3, [pc, #296]	; (800c11c <HAL_RCC_ClockConfig+0x244>)
 800bff2:	699b      	ldr	r3, [r3, #24]
 800bff4:	f023 020f 	bic.w	r2, r3, #15
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	68db      	ldr	r3, [r3, #12]
 800bffc:	4947      	ldr	r1, [pc, #284]	; (800c11c <HAL_RCC_ClockConfig+0x244>)
 800bffe:	4313      	orrs	r3, r2
 800c000:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f003 0301 	and.w	r3, r3, #1
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d055      	beq.n	800c0ba <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800c00e:	4b43      	ldr	r3, [pc, #268]	; (800c11c <HAL_RCC_ClockConfig+0x244>)
 800c010:	699b      	ldr	r3, [r3, #24]
 800c012:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	689b      	ldr	r3, [r3, #8]
 800c01a:	4940      	ldr	r1, [pc, #256]	; (800c11c <HAL_RCC_ClockConfig+0x244>)
 800c01c:	4313      	orrs	r3, r2
 800c01e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	685b      	ldr	r3, [r3, #4]
 800c024:	2b02      	cmp	r3, #2
 800c026:	d107      	bne.n	800c038 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c028:	4b3c      	ldr	r3, [pc, #240]	; (800c11c <HAL_RCC_ClockConfig+0x244>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c030:	2b00      	cmp	r3, #0
 800c032:	d121      	bne.n	800c078 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800c034:	2301      	movs	r3, #1
 800c036:	e0f6      	b.n	800c226 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	685b      	ldr	r3, [r3, #4]
 800c03c:	2b03      	cmp	r3, #3
 800c03e:	d107      	bne.n	800c050 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c040:	4b36      	ldr	r3, [pc, #216]	; (800c11c <HAL_RCC_ClockConfig+0x244>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d115      	bne.n	800c078 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800c04c:	2301      	movs	r3, #1
 800c04e:	e0ea      	b.n	800c226 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	685b      	ldr	r3, [r3, #4]
 800c054:	2b01      	cmp	r3, #1
 800c056:	d107      	bne.n	800c068 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c058:	4b30      	ldr	r3, [pc, #192]	; (800c11c <HAL_RCC_ClockConfig+0x244>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c060:	2b00      	cmp	r3, #0
 800c062:	d109      	bne.n	800c078 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800c064:	2301      	movs	r3, #1
 800c066:	e0de      	b.n	800c226 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c068:	4b2c      	ldr	r3, [pc, #176]	; (800c11c <HAL_RCC_ClockConfig+0x244>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f003 0304 	and.w	r3, r3, #4
 800c070:	2b00      	cmp	r3, #0
 800c072:	d101      	bne.n	800c078 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800c074:	2301      	movs	r3, #1
 800c076:	e0d6      	b.n	800c226 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c078:	4b28      	ldr	r3, [pc, #160]	; (800c11c <HAL_RCC_ClockConfig+0x244>)
 800c07a:	691b      	ldr	r3, [r3, #16]
 800c07c:	f023 0207 	bic.w	r2, r3, #7
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	685b      	ldr	r3, [r3, #4]
 800c084:	4925      	ldr	r1, [pc, #148]	; (800c11c <HAL_RCC_ClockConfig+0x244>)
 800c086:	4313      	orrs	r3, r2
 800c088:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c08a:	f7f8 fb83 	bl	8004794 <HAL_GetTick>
 800c08e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c090:	e00a      	b.n	800c0a8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c092:	f7f8 fb7f 	bl	8004794 <HAL_GetTick>
 800c096:	4602      	mov	r2, r0
 800c098:	697b      	ldr	r3, [r7, #20]
 800c09a:	1ad3      	subs	r3, r2, r3
 800c09c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0a0:	4293      	cmp	r3, r2
 800c0a2:	d901      	bls.n	800c0a8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800c0a4:	2303      	movs	r3, #3
 800c0a6:	e0be      	b.n	800c226 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c0a8:	4b1c      	ldr	r3, [pc, #112]	; (800c11c <HAL_RCC_ClockConfig+0x244>)
 800c0aa:	691b      	ldr	r3, [r3, #16]
 800c0ac:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	685b      	ldr	r3, [r3, #4]
 800c0b4:	00db      	lsls	r3, r3, #3
 800c0b6:	429a      	cmp	r2, r3
 800c0b8:	d1eb      	bne.n	800c092 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	f003 0302 	and.w	r3, r3, #2
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d010      	beq.n	800c0e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	68da      	ldr	r2, [r3, #12]
 800c0ca:	4b14      	ldr	r3, [pc, #80]	; (800c11c <HAL_RCC_ClockConfig+0x244>)
 800c0cc:	699b      	ldr	r3, [r3, #24]
 800c0ce:	f003 030f 	and.w	r3, r3, #15
 800c0d2:	429a      	cmp	r2, r3
 800c0d4:	d208      	bcs.n	800c0e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c0d6:	4b11      	ldr	r3, [pc, #68]	; (800c11c <HAL_RCC_ClockConfig+0x244>)
 800c0d8:	699b      	ldr	r3, [r3, #24]
 800c0da:	f023 020f 	bic.w	r2, r3, #15
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	68db      	ldr	r3, [r3, #12]
 800c0e2:	490e      	ldr	r1, [pc, #56]	; (800c11c <HAL_RCC_ClockConfig+0x244>)
 800c0e4:	4313      	orrs	r3, r2
 800c0e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c0e8:	4b0b      	ldr	r3, [pc, #44]	; (800c118 <HAL_RCC_ClockConfig+0x240>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	f003 030f 	and.w	r3, r3, #15
 800c0f0:	683a      	ldr	r2, [r7, #0]
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	d214      	bcs.n	800c120 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c0f6:	4b08      	ldr	r3, [pc, #32]	; (800c118 <HAL_RCC_ClockConfig+0x240>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	f023 020f 	bic.w	r2, r3, #15
 800c0fe:	4906      	ldr	r1, [pc, #24]	; (800c118 <HAL_RCC_ClockConfig+0x240>)
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	4313      	orrs	r3, r2
 800c104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c106:	4b04      	ldr	r3, [pc, #16]	; (800c118 <HAL_RCC_ClockConfig+0x240>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	f003 030f 	and.w	r3, r3, #15
 800c10e:	683a      	ldr	r2, [r7, #0]
 800c110:	429a      	cmp	r2, r3
 800c112:	d005      	beq.n	800c120 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800c114:	2301      	movs	r3, #1
 800c116:	e086      	b.n	800c226 <HAL_RCC_ClockConfig+0x34e>
 800c118:	52002000 	.word	0x52002000
 800c11c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f003 0304 	and.w	r3, r3, #4
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d010      	beq.n	800c14e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	691a      	ldr	r2, [r3, #16]
 800c130:	4b3f      	ldr	r3, [pc, #252]	; (800c230 <HAL_RCC_ClockConfig+0x358>)
 800c132:	699b      	ldr	r3, [r3, #24]
 800c134:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c138:	429a      	cmp	r2, r3
 800c13a:	d208      	bcs.n	800c14e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c13c:	4b3c      	ldr	r3, [pc, #240]	; (800c230 <HAL_RCC_ClockConfig+0x358>)
 800c13e:	699b      	ldr	r3, [r3, #24]
 800c140:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	691b      	ldr	r3, [r3, #16]
 800c148:	4939      	ldr	r1, [pc, #228]	; (800c230 <HAL_RCC_ClockConfig+0x358>)
 800c14a:	4313      	orrs	r3, r2
 800c14c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	f003 0308 	and.w	r3, r3, #8
 800c156:	2b00      	cmp	r3, #0
 800c158:	d010      	beq.n	800c17c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	695a      	ldr	r2, [r3, #20]
 800c15e:	4b34      	ldr	r3, [pc, #208]	; (800c230 <HAL_RCC_ClockConfig+0x358>)
 800c160:	69db      	ldr	r3, [r3, #28]
 800c162:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c166:	429a      	cmp	r2, r3
 800c168:	d208      	bcs.n	800c17c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c16a:	4b31      	ldr	r3, [pc, #196]	; (800c230 <HAL_RCC_ClockConfig+0x358>)
 800c16c:	69db      	ldr	r3, [r3, #28]
 800c16e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	695b      	ldr	r3, [r3, #20]
 800c176:	492e      	ldr	r1, [pc, #184]	; (800c230 <HAL_RCC_ClockConfig+0x358>)
 800c178:	4313      	orrs	r3, r2
 800c17a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	f003 0310 	and.w	r3, r3, #16
 800c184:	2b00      	cmp	r3, #0
 800c186:	d010      	beq.n	800c1aa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	699a      	ldr	r2, [r3, #24]
 800c18c:	4b28      	ldr	r3, [pc, #160]	; (800c230 <HAL_RCC_ClockConfig+0x358>)
 800c18e:	69db      	ldr	r3, [r3, #28]
 800c190:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c194:	429a      	cmp	r2, r3
 800c196:	d208      	bcs.n	800c1aa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c198:	4b25      	ldr	r3, [pc, #148]	; (800c230 <HAL_RCC_ClockConfig+0x358>)
 800c19a:	69db      	ldr	r3, [r3, #28]
 800c19c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	699b      	ldr	r3, [r3, #24]
 800c1a4:	4922      	ldr	r1, [pc, #136]	; (800c230 <HAL_RCC_ClockConfig+0x358>)
 800c1a6:	4313      	orrs	r3, r2
 800c1a8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	f003 0320 	and.w	r3, r3, #32
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d010      	beq.n	800c1d8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	69da      	ldr	r2, [r3, #28]
 800c1ba:	4b1d      	ldr	r3, [pc, #116]	; (800c230 <HAL_RCC_ClockConfig+0x358>)
 800c1bc:	6a1b      	ldr	r3, [r3, #32]
 800c1be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c1c2:	429a      	cmp	r2, r3
 800c1c4:	d208      	bcs.n	800c1d8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800c1c6:	4b1a      	ldr	r3, [pc, #104]	; (800c230 <HAL_RCC_ClockConfig+0x358>)
 800c1c8:	6a1b      	ldr	r3, [r3, #32]
 800c1ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	69db      	ldr	r3, [r3, #28]
 800c1d2:	4917      	ldr	r1, [pc, #92]	; (800c230 <HAL_RCC_ClockConfig+0x358>)
 800c1d4:	4313      	orrs	r3, r2
 800c1d6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c1d8:	f000 f834 	bl	800c244 <HAL_RCC_GetSysClockFreq>
 800c1dc:	4602      	mov	r2, r0
 800c1de:	4b14      	ldr	r3, [pc, #80]	; (800c230 <HAL_RCC_ClockConfig+0x358>)
 800c1e0:	699b      	ldr	r3, [r3, #24]
 800c1e2:	0a1b      	lsrs	r3, r3, #8
 800c1e4:	f003 030f 	and.w	r3, r3, #15
 800c1e8:	4912      	ldr	r1, [pc, #72]	; (800c234 <HAL_RCC_ClockConfig+0x35c>)
 800c1ea:	5ccb      	ldrb	r3, [r1, r3]
 800c1ec:	f003 031f 	and.w	r3, r3, #31
 800c1f0:	fa22 f303 	lsr.w	r3, r2, r3
 800c1f4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c1f6:	4b0e      	ldr	r3, [pc, #56]	; (800c230 <HAL_RCC_ClockConfig+0x358>)
 800c1f8:	699b      	ldr	r3, [r3, #24]
 800c1fa:	f003 030f 	and.w	r3, r3, #15
 800c1fe:	4a0d      	ldr	r2, [pc, #52]	; (800c234 <HAL_RCC_ClockConfig+0x35c>)
 800c200:	5cd3      	ldrb	r3, [r2, r3]
 800c202:	f003 031f 	and.w	r3, r3, #31
 800c206:	693a      	ldr	r2, [r7, #16]
 800c208:	fa22 f303 	lsr.w	r3, r2, r3
 800c20c:	4a0a      	ldr	r2, [pc, #40]	; (800c238 <HAL_RCC_ClockConfig+0x360>)
 800c20e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c210:	4a0a      	ldr	r2, [pc, #40]	; (800c23c <HAL_RCC_ClockConfig+0x364>)
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800c216:	4b0a      	ldr	r3, [pc, #40]	; (800c240 <HAL_RCC_ClockConfig+0x368>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	4618      	mov	r0, r3
 800c21c:	f7f8 fa70 	bl	8004700 <HAL_InitTick>
 800c220:	4603      	mov	r3, r0
 800c222:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800c224:	7bfb      	ldrb	r3, [r7, #15]
}
 800c226:	4618      	mov	r0, r3
 800c228:	3718      	adds	r7, #24
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}
 800c22e:	bf00      	nop
 800c230:	58024400 	.word	0x58024400
 800c234:	0801ac8c 	.word	0x0801ac8c
 800c238:	20000018 	.word	0x20000018
 800c23c:	20000014 	.word	0x20000014
 800c240:	2000001c 	.word	0x2000001c

0800c244 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c244:	b480      	push	{r7}
 800c246:	b089      	sub	sp, #36	; 0x24
 800c248:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c24a:	4bb3      	ldr	r3, [pc, #716]	; (800c518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c24c:	691b      	ldr	r3, [r3, #16]
 800c24e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c252:	2b18      	cmp	r3, #24
 800c254:	f200 8155 	bhi.w	800c502 <HAL_RCC_GetSysClockFreq+0x2be>
 800c258:	a201      	add	r2, pc, #4	; (adr r2, 800c260 <HAL_RCC_GetSysClockFreq+0x1c>)
 800c25a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c25e:	bf00      	nop
 800c260:	0800c2c5 	.word	0x0800c2c5
 800c264:	0800c503 	.word	0x0800c503
 800c268:	0800c503 	.word	0x0800c503
 800c26c:	0800c503 	.word	0x0800c503
 800c270:	0800c503 	.word	0x0800c503
 800c274:	0800c503 	.word	0x0800c503
 800c278:	0800c503 	.word	0x0800c503
 800c27c:	0800c503 	.word	0x0800c503
 800c280:	0800c2eb 	.word	0x0800c2eb
 800c284:	0800c503 	.word	0x0800c503
 800c288:	0800c503 	.word	0x0800c503
 800c28c:	0800c503 	.word	0x0800c503
 800c290:	0800c503 	.word	0x0800c503
 800c294:	0800c503 	.word	0x0800c503
 800c298:	0800c503 	.word	0x0800c503
 800c29c:	0800c503 	.word	0x0800c503
 800c2a0:	0800c2f1 	.word	0x0800c2f1
 800c2a4:	0800c503 	.word	0x0800c503
 800c2a8:	0800c503 	.word	0x0800c503
 800c2ac:	0800c503 	.word	0x0800c503
 800c2b0:	0800c503 	.word	0x0800c503
 800c2b4:	0800c503 	.word	0x0800c503
 800c2b8:	0800c503 	.word	0x0800c503
 800c2bc:	0800c503 	.word	0x0800c503
 800c2c0:	0800c2f7 	.word	0x0800c2f7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c2c4:	4b94      	ldr	r3, [pc, #592]	; (800c518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f003 0320 	and.w	r3, r3, #32
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d009      	beq.n	800c2e4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c2d0:	4b91      	ldr	r3, [pc, #580]	; (800c518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	08db      	lsrs	r3, r3, #3
 800c2d6:	f003 0303 	and.w	r3, r3, #3
 800c2da:	4a90      	ldr	r2, [pc, #576]	; (800c51c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c2dc:	fa22 f303 	lsr.w	r3, r2, r3
 800c2e0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800c2e2:	e111      	b.n	800c508 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c2e4:	4b8d      	ldr	r3, [pc, #564]	; (800c51c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c2e6:	61bb      	str	r3, [r7, #24]
    break;
 800c2e8:	e10e      	b.n	800c508 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800c2ea:	4b8d      	ldr	r3, [pc, #564]	; (800c520 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c2ec:	61bb      	str	r3, [r7, #24]
    break;
 800c2ee:	e10b      	b.n	800c508 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800c2f0:	4b8c      	ldr	r3, [pc, #560]	; (800c524 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800c2f2:	61bb      	str	r3, [r7, #24]
    break;
 800c2f4:	e108      	b.n	800c508 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c2f6:	4b88      	ldr	r3, [pc, #544]	; (800c518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c2f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2fa:	f003 0303 	and.w	r3, r3, #3
 800c2fe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800c300:	4b85      	ldr	r3, [pc, #532]	; (800c518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c304:	091b      	lsrs	r3, r3, #4
 800c306:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c30a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c30c:	4b82      	ldr	r3, [pc, #520]	; (800c518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c30e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c310:	f003 0301 	and.w	r3, r3, #1
 800c314:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800c316:	4b80      	ldr	r3, [pc, #512]	; (800c518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c31a:	08db      	lsrs	r3, r3, #3
 800c31c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c320:	68fa      	ldr	r2, [r7, #12]
 800c322:	fb02 f303 	mul.w	r3, r2, r3
 800c326:	ee07 3a90 	vmov	s15, r3
 800c32a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c32e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	2b00      	cmp	r3, #0
 800c336:	f000 80e1 	beq.w	800c4fc <HAL_RCC_GetSysClockFreq+0x2b8>
 800c33a:	697b      	ldr	r3, [r7, #20]
 800c33c:	2b02      	cmp	r3, #2
 800c33e:	f000 8083 	beq.w	800c448 <HAL_RCC_GetSysClockFreq+0x204>
 800c342:	697b      	ldr	r3, [r7, #20]
 800c344:	2b02      	cmp	r3, #2
 800c346:	f200 80a1 	bhi.w	800c48c <HAL_RCC_GetSysClockFreq+0x248>
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d003      	beq.n	800c358 <HAL_RCC_GetSysClockFreq+0x114>
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	2b01      	cmp	r3, #1
 800c354:	d056      	beq.n	800c404 <HAL_RCC_GetSysClockFreq+0x1c0>
 800c356:	e099      	b.n	800c48c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c358:	4b6f      	ldr	r3, [pc, #444]	; (800c518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	f003 0320 	and.w	r3, r3, #32
 800c360:	2b00      	cmp	r3, #0
 800c362:	d02d      	beq.n	800c3c0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c364:	4b6c      	ldr	r3, [pc, #432]	; (800c518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	08db      	lsrs	r3, r3, #3
 800c36a:	f003 0303 	and.w	r3, r3, #3
 800c36e:	4a6b      	ldr	r2, [pc, #428]	; (800c51c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c370:	fa22 f303 	lsr.w	r3, r2, r3
 800c374:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	ee07 3a90 	vmov	s15, r3
 800c37c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	ee07 3a90 	vmov	s15, r3
 800c386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c38a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c38e:	4b62      	ldr	r3, [pc, #392]	; (800c518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c396:	ee07 3a90 	vmov	s15, r3
 800c39a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c39e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c3a2:	eddf 5a61 	vldr	s11, [pc, #388]	; 800c528 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c3a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c3b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800c3be:	e087      	b.n	800c4d0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	ee07 3a90 	vmov	s15, r3
 800c3c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3ca:	eddf 6a58 	vldr	s13, [pc, #352]	; 800c52c <HAL_RCC_GetSysClockFreq+0x2e8>
 800c3ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3d2:	4b51      	ldr	r3, [pc, #324]	; (800c518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c3d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3da:	ee07 3a90 	vmov	s15, r3
 800c3de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3e2:	ed97 6a02 	vldr	s12, [r7, #8]
 800c3e6:	eddf 5a50 	vldr	s11, [pc, #320]	; 800c528 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c3ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c3f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c402:	e065      	b.n	800c4d0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	ee07 3a90 	vmov	s15, r3
 800c40a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c40e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800c530 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c416:	4b40      	ldr	r3, [pc, #256]	; (800c518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c41a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c41e:	ee07 3a90 	vmov	s15, r3
 800c422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c426:	ed97 6a02 	vldr	s12, [r7, #8]
 800c42a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800c528 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c42e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c43a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c43e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c442:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c446:	e043      	b.n	800c4d0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c448:	693b      	ldr	r3, [r7, #16]
 800c44a:	ee07 3a90 	vmov	s15, r3
 800c44e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c452:	eddf 6a38 	vldr	s13, [pc, #224]	; 800c534 <HAL_RCC_GetSysClockFreq+0x2f0>
 800c456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c45a:	4b2f      	ldr	r3, [pc, #188]	; (800c518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c45c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c45e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c462:	ee07 3a90 	vmov	s15, r3
 800c466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c46a:	ed97 6a02 	vldr	s12, [r7, #8]
 800c46e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800c528 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c47a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c47e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c482:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c486:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c48a:	e021      	b.n	800c4d0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c48c:	693b      	ldr	r3, [r7, #16]
 800c48e:	ee07 3a90 	vmov	s15, r3
 800c492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c496:	eddf 6a26 	vldr	s13, [pc, #152]	; 800c530 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c49a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c49e:	4b1e      	ldr	r3, [pc, #120]	; (800c518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c4a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4a6:	ee07 3a90 	vmov	s15, r3
 800c4aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4ae:	ed97 6a02 	vldr	s12, [r7, #8]
 800c4b2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800c528 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c4b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c4c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c4ce:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800c4d0:	4b11      	ldr	r3, [pc, #68]	; (800c518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c4d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4d4:	0a5b      	lsrs	r3, r3, #9
 800c4d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4da:	3301      	adds	r3, #1
 800c4dc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	ee07 3a90 	vmov	s15, r3
 800c4e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c4e8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4f4:	ee17 3a90 	vmov	r3, s15
 800c4f8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800c4fa:	e005      	b.n	800c508 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	61bb      	str	r3, [r7, #24]
    break;
 800c500:	e002      	b.n	800c508 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800c502:	4b07      	ldr	r3, [pc, #28]	; (800c520 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c504:	61bb      	str	r3, [r7, #24]
    break;
 800c506:	bf00      	nop
  }

  return sysclockfreq;
 800c508:	69bb      	ldr	r3, [r7, #24]
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	3724      	adds	r7, #36	; 0x24
 800c50e:	46bd      	mov	sp, r7
 800c510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c514:	4770      	bx	lr
 800c516:	bf00      	nop
 800c518:	58024400 	.word	0x58024400
 800c51c:	03d09000 	.word	0x03d09000
 800c520:	003d0900 	.word	0x003d0900
 800c524:	01312d00 	.word	0x01312d00
 800c528:	46000000 	.word	0x46000000
 800c52c:	4c742400 	.word	0x4c742400
 800c530:	4a742400 	.word	0x4a742400
 800c534:	4b989680 	.word	0x4b989680

0800c538 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b082      	sub	sp, #8
 800c53c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c53e:	f7ff fe81 	bl	800c244 <HAL_RCC_GetSysClockFreq>
 800c542:	4602      	mov	r2, r0
 800c544:	4b10      	ldr	r3, [pc, #64]	; (800c588 <HAL_RCC_GetHCLKFreq+0x50>)
 800c546:	699b      	ldr	r3, [r3, #24]
 800c548:	0a1b      	lsrs	r3, r3, #8
 800c54a:	f003 030f 	and.w	r3, r3, #15
 800c54e:	490f      	ldr	r1, [pc, #60]	; (800c58c <HAL_RCC_GetHCLKFreq+0x54>)
 800c550:	5ccb      	ldrb	r3, [r1, r3]
 800c552:	f003 031f 	and.w	r3, r3, #31
 800c556:	fa22 f303 	lsr.w	r3, r2, r3
 800c55a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c55c:	4b0a      	ldr	r3, [pc, #40]	; (800c588 <HAL_RCC_GetHCLKFreq+0x50>)
 800c55e:	699b      	ldr	r3, [r3, #24]
 800c560:	f003 030f 	and.w	r3, r3, #15
 800c564:	4a09      	ldr	r2, [pc, #36]	; (800c58c <HAL_RCC_GetHCLKFreq+0x54>)
 800c566:	5cd3      	ldrb	r3, [r2, r3]
 800c568:	f003 031f 	and.w	r3, r3, #31
 800c56c:	687a      	ldr	r2, [r7, #4]
 800c56e:	fa22 f303 	lsr.w	r3, r2, r3
 800c572:	4a07      	ldr	r2, [pc, #28]	; (800c590 <HAL_RCC_GetHCLKFreq+0x58>)
 800c574:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c576:	4a07      	ldr	r2, [pc, #28]	; (800c594 <HAL_RCC_GetHCLKFreq+0x5c>)
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c57c:	4b04      	ldr	r3, [pc, #16]	; (800c590 <HAL_RCC_GetHCLKFreq+0x58>)
 800c57e:	681b      	ldr	r3, [r3, #0]
}
 800c580:	4618      	mov	r0, r3
 800c582:	3708      	adds	r7, #8
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}
 800c588:	58024400 	.word	0x58024400
 800c58c:	0801ac8c 	.word	0x0801ac8c
 800c590:	20000018 	.word	0x20000018
 800c594:	20000014 	.word	0x20000014

0800c598 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c59c:	f7ff ffcc 	bl	800c538 <HAL_RCC_GetHCLKFreq>
 800c5a0:	4602      	mov	r2, r0
 800c5a2:	4b06      	ldr	r3, [pc, #24]	; (800c5bc <HAL_RCC_GetPCLK1Freq+0x24>)
 800c5a4:	69db      	ldr	r3, [r3, #28]
 800c5a6:	091b      	lsrs	r3, r3, #4
 800c5a8:	f003 0307 	and.w	r3, r3, #7
 800c5ac:	4904      	ldr	r1, [pc, #16]	; (800c5c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c5ae:	5ccb      	ldrb	r3, [r1, r3]
 800c5b0:	f003 031f 	and.w	r3, r3, #31
 800c5b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	bd80      	pop	{r7, pc}
 800c5bc:	58024400 	.word	0x58024400
 800c5c0:	0801ac8c 	.word	0x0801ac8c

0800c5c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800c5c8:	f7ff ffb6 	bl	800c538 <HAL_RCC_GetHCLKFreq>
 800c5cc:	4602      	mov	r2, r0
 800c5ce:	4b06      	ldr	r3, [pc, #24]	; (800c5e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c5d0:	69db      	ldr	r3, [r3, #28]
 800c5d2:	0a1b      	lsrs	r3, r3, #8
 800c5d4:	f003 0307 	and.w	r3, r3, #7
 800c5d8:	4904      	ldr	r1, [pc, #16]	; (800c5ec <HAL_RCC_GetPCLK2Freq+0x28>)
 800c5da:	5ccb      	ldrb	r3, [r1, r3]
 800c5dc:	f003 031f 	and.w	r3, r3, #31
 800c5e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	bd80      	pop	{r7, pc}
 800c5e8:	58024400 	.word	0x58024400
 800c5ec:	0801ac8c 	.word	0x0801ac8c

0800c5f0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b086      	sub	sp, #24
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d03f      	beq.n	800c68c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c610:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c614:	d02a      	beq.n	800c66c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800c616:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c61a:	d824      	bhi.n	800c666 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c61c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c620:	d018      	beq.n	800c654 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c622:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c626:	d81e      	bhi.n	800c666 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d003      	beq.n	800c634 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800c62c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c630:	d007      	beq.n	800c642 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800c632:	e018      	b.n	800c666 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c634:	4ba3      	ldr	r3, [pc, #652]	; (800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c638:	4aa2      	ldr	r2, [pc, #648]	; (800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c63a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c63e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c640:	e015      	b.n	800c66e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	3304      	adds	r3, #4
 800c646:	2102      	movs	r1, #2
 800c648:	4618      	mov	r0, r3
 800c64a:	f001 fff9 	bl	800e640 <RCCEx_PLL2_Config>
 800c64e:	4603      	mov	r3, r0
 800c650:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c652:	e00c      	b.n	800c66e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	3324      	adds	r3, #36	; 0x24
 800c658:	2102      	movs	r1, #2
 800c65a:	4618      	mov	r0, r3
 800c65c:	f002 f8a2 	bl	800e7a4 <RCCEx_PLL3_Config>
 800c660:	4603      	mov	r3, r0
 800c662:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c664:	e003      	b.n	800c66e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c666:	2301      	movs	r3, #1
 800c668:	75fb      	strb	r3, [r7, #23]
      break;
 800c66a:	e000      	b.n	800c66e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800c66c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c66e:	7dfb      	ldrb	r3, [r7, #23]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d109      	bne.n	800c688 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c674:	4b93      	ldr	r3, [pc, #588]	; (800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c678:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c680:	4990      	ldr	r1, [pc, #576]	; (800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c682:	4313      	orrs	r3, r2
 800c684:	650b      	str	r3, [r1, #80]	; 0x50
 800c686:	e001      	b.n	800c68c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c688:	7dfb      	ldrb	r3, [r7, #23]
 800c68a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c694:	2b00      	cmp	r3, #0
 800c696:	d03d      	beq.n	800c714 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c69c:	2b04      	cmp	r3, #4
 800c69e:	d826      	bhi.n	800c6ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800c6a0:	a201      	add	r2, pc, #4	; (adr r2, 800c6a8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800c6a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6a6:	bf00      	nop
 800c6a8:	0800c6bd 	.word	0x0800c6bd
 800c6ac:	0800c6cb 	.word	0x0800c6cb
 800c6b0:	0800c6dd 	.word	0x0800c6dd
 800c6b4:	0800c6f5 	.word	0x0800c6f5
 800c6b8:	0800c6f5 	.word	0x0800c6f5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c6bc:	4b81      	ldr	r3, [pc, #516]	; (800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6c0:	4a80      	ldr	r2, [pc, #512]	; (800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c6c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c6c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c6c8:	e015      	b.n	800c6f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	3304      	adds	r3, #4
 800c6ce:	2100      	movs	r1, #0
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f001 ffb5 	bl	800e640 <RCCEx_PLL2_Config>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c6da:	e00c      	b.n	800c6f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	3324      	adds	r3, #36	; 0x24
 800c6e0:	2100      	movs	r1, #0
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f002 f85e 	bl	800e7a4 <RCCEx_PLL3_Config>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c6ec:	e003      	b.n	800c6f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	75fb      	strb	r3, [r7, #23]
      break;
 800c6f2:	e000      	b.n	800c6f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800c6f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c6f6:	7dfb      	ldrb	r3, [r7, #23]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d109      	bne.n	800c710 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c6fc:	4b71      	ldr	r3, [pc, #452]	; (800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c6fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c700:	f023 0207 	bic.w	r2, r3, #7
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c708:	496e      	ldr	r1, [pc, #440]	; (800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c70a:	4313      	orrs	r3, r2
 800c70c:	650b      	str	r3, [r1, #80]	; 0x50
 800c70e:	e001      	b.n	800c714 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c710:	7dfb      	ldrb	r3, [r7, #23]
 800c712:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d042      	beq.n	800c7a6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c724:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c728:	d02b      	beq.n	800c782 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800c72a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c72e:	d825      	bhi.n	800c77c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800c730:	2bc0      	cmp	r3, #192	; 0xc0
 800c732:	d028      	beq.n	800c786 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800c734:	2bc0      	cmp	r3, #192	; 0xc0
 800c736:	d821      	bhi.n	800c77c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800c738:	2b80      	cmp	r3, #128	; 0x80
 800c73a:	d016      	beq.n	800c76a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800c73c:	2b80      	cmp	r3, #128	; 0x80
 800c73e:	d81d      	bhi.n	800c77c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800c740:	2b00      	cmp	r3, #0
 800c742:	d002      	beq.n	800c74a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800c744:	2b40      	cmp	r3, #64	; 0x40
 800c746:	d007      	beq.n	800c758 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800c748:	e018      	b.n	800c77c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c74a:	4b5e      	ldr	r3, [pc, #376]	; (800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c74c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c74e:	4a5d      	ldr	r2, [pc, #372]	; (800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c754:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800c756:	e017      	b.n	800c788 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	3304      	adds	r3, #4
 800c75c:	2100      	movs	r1, #0
 800c75e:	4618      	mov	r0, r3
 800c760:	f001 ff6e 	bl	800e640 <RCCEx_PLL2_Config>
 800c764:	4603      	mov	r3, r0
 800c766:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800c768:	e00e      	b.n	800c788 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	3324      	adds	r3, #36	; 0x24
 800c76e:	2100      	movs	r1, #0
 800c770:	4618      	mov	r0, r3
 800c772:	f002 f817 	bl	800e7a4 <RCCEx_PLL3_Config>
 800c776:	4603      	mov	r3, r0
 800c778:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800c77a:	e005      	b.n	800c788 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c77c:	2301      	movs	r3, #1
 800c77e:	75fb      	strb	r3, [r7, #23]
      break;
 800c780:	e002      	b.n	800c788 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800c782:	bf00      	nop
 800c784:	e000      	b.n	800c788 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800c786:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c788:	7dfb      	ldrb	r3, [r7, #23]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d109      	bne.n	800c7a2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800c78e:	4b4d      	ldr	r3, [pc, #308]	; (800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c792:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c79a:	494a      	ldr	r1, [pc, #296]	; (800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c79c:	4313      	orrs	r3, r2
 800c79e:	650b      	str	r3, [r1, #80]	; 0x50
 800c7a0:	e001      	b.n	800c7a6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7a2:	7dfb      	ldrb	r3, [r7, #23]
 800c7a4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d049      	beq.n	800c846 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c7b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c7bc:	d030      	beq.n	800c820 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800c7be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c7c2:	d82a      	bhi.n	800c81a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800c7c4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c7c8:	d02c      	beq.n	800c824 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800c7ca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c7ce:	d824      	bhi.n	800c81a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800c7d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c7d4:	d018      	beq.n	800c808 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800c7d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c7da:	d81e      	bhi.n	800c81a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d003      	beq.n	800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800c7e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c7e4:	d007      	beq.n	800c7f6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800c7e6:	e018      	b.n	800c81a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c7e8:	4b36      	ldr	r3, [pc, #216]	; (800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c7ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7ec:	4a35      	ldr	r2, [pc, #212]	; (800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c7ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c7f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c7f4:	e017      	b.n	800c826 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	3304      	adds	r3, #4
 800c7fa:	2100      	movs	r1, #0
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f001 ff1f 	bl	800e640 <RCCEx_PLL2_Config>
 800c802:	4603      	mov	r3, r0
 800c804:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800c806:	e00e      	b.n	800c826 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	3324      	adds	r3, #36	; 0x24
 800c80c:	2100      	movs	r1, #0
 800c80e:	4618      	mov	r0, r3
 800c810:	f001 ffc8 	bl	800e7a4 <RCCEx_PLL3_Config>
 800c814:	4603      	mov	r3, r0
 800c816:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c818:	e005      	b.n	800c826 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800c81a:	2301      	movs	r3, #1
 800c81c:	75fb      	strb	r3, [r7, #23]
      break;
 800c81e:	e002      	b.n	800c826 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800c820:	bf00      	nop
 800c822:	e000      	b.n	800c826 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800c824:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c826:	7dfb      	ldrb	r3, [r7, #23]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d10a      	bne.n	800c842 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800c82c:	4b25      	ldr	r3, [pc, #148]	; (800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c82e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c830:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c83a:	4922      	ldr	r1, [pc, #136]	; (800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c83c:	4313      	orrs	r3, r2
 800c83e:	658b      	str	r3, [r1, #88]	; 0x58
 800c840:	e001      	b.n	800c846 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c842:	7dfb      	ldrb	r3, [r7, #23]
 800c844:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d04b      	beq.n	800c8ea <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c858:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c85c:	d030      	beq.n	800c8c0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800c85e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c862:	d82a      	bhi.n	800c8ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800c864:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c868:	d02e      	beq.n	800c8c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800c86a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c86e:	d824      	bhi.n	800c8ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800c870:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c874:	d018      	beq.n	800c8a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800c876:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c87a:	d81e      	bhi.n	800c8ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d003      	beq.n	800c888 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800c880:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c884:	d007      	beq.n	800c896 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800c886:	e018      	b.n	800c8ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c888:	4b0e      	ldr	r3, [pc, #56]	; (800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c88a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c88c:	4a0d      	ldr	r2, [pc, #52]	; (800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c88e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c892:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c894:	e019      	b.n	800c8ca <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	3304      	adds	r3, #4
 800c89a:	2100      	movs	r1, #0
 800c89c:	4618      	mov	r0, r3
 800c89e:	f001 fecf 	bl	800e640 <RCCEx_PLL2_Config>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800c8a6:	e010      	b.n	800c8ca <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	3324      	adds	r3, #36	; 0x24
 800c8ac:	2100      	movs	r1, #0
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	f001 ff78 	bl	800e7a4 <RCCEx_PLL3_Config>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c8b8:	e007      	b.n	800c8ca <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	75fb      	strb	r3, [r7, #23]
      break;
 800c8be:	e004      	b.n	800c8ca <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800c8c0:	bf00      	nop
 800c8c2:	e002      	b.n	800c8ca <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800c8c4:	58024400 	.word	0x58024400
      break;
 800c8c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c8ca:	7dfb      	ldrb	r3, [r7, #23]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d10a      	bne.n	800c8e6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800c8d0:	4b99      	ldr	r3, [pc, #612]	; (800cb38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c8d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8d4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c8de:	4996      	ldr	r1, [pc, #600]	; (800cb38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c8e0:	4313      	orrs	r3, r2
 800c8e2:	658b      	str	r3, [r1, #88]	; 0x58
 800c8e4:	e001      	b.n	800c8ea <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8e6:	7dfb      	ldrb	r3, [r7, #23]
 800c8e8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d032      	beq.n	800c95c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c8fa:	2b30      	cmp	r3, #48	; 0x30
 800c8fc:	d01c      	beq.n	800c938 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800c8fe:	2b30      	cmp	r3, #48	; 0x30
 800c900:	d817      	bhi.n	800c932 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800c902:	2b20      	cmp	r3, #32
 800c904:	d00c      	beq.n	800c920 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800c906:	2b20      	cmp	r3, #32
 800c908:	d813      	bhi.n	800c932 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d016      	beq.n	800c93c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800c90e:	2b10      	cmp	r3, #16
 800c910:	d10f      	bne.n	800c932 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c912:	4b89      	ldr	r3, [pc, #548]	; (800cb38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c916:	4a88      	ldr	r2, [pc, #544]	; (800cb38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c91c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800c91e:	e00e      	b.n	800c93e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	3304      	adds	r3, #4
 800c924:	2102      	movs	r1, #2
 800c926:	4618      	mov	r0, r3
 800c928:	f001 fe8a 	bl	800e640 <RCCEx_PLL2_Config>
 800c92c:	4603      	mov	r3, r0
 800c92e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800c930:	e005      	b.n	800c93e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800c932:	2301      	movs	r3, #1
 800c934:	75fb      	strb	r3, [r7, #23]
      break;
 800c936:	e002      	b.n	800c93e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800c938:	bf00      	nop
 800c93a:	e000      	b.n	800c93e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800c93c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c93e:	7dfb      	ldrb	r3, [r7, #23]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d109      	bne.n	800c958 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800c944:	4b7c      	ldr	r3, [pc, #496]	; (800cb38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c948:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c950:	4979      	ldr	r1, [pc, #484]	; (800cb38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c952:	4313      	orrs	r3, r2
 800c954:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c956:	e001      	b.n	800c95c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c958:	7dfb      	ldrb	r3, [r7, #23]
 800c95a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c964:	2b00      	cmp	r3, #0
 800c966:	d047      	beq.n	800c9f8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c96c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c970:	d030      	beq.n	800c9d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800c972:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c976:	d82a      	bhi.n	800c9ce <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800c978:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c97c:	d02c      	beq.n	800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800c97e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c982:	d824      	bhi.n	800c9ce <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800c984:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c988:	d018      	beq.n	800c9bc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800c98a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c98e:	d81e      	bhi.n	800c9ce <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800c990:	2b00      	cmp	r3, #0
 800c992:	d003      	beq.n	800c99c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800c994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c998:	d007      	beq.n	800c9aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800c99a:	e018      	b.n	800c9ce <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c99c:	4b66      	ldr	r3, [pc, #408]	; (800cb38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c99e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9a0:	4a65      	ldr	r2, [pc, #404]	; (800cb38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c9a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c9a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c9a8:	e017      	b.n	800c9da <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	3304      	adds	r3, #4
 800c9ae:	2100      	movs	r1, #0
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f001 fe45 	bl	800e640 <RCCEx_PLL2_Config>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c9ba:	e00e      	b.n	800c9da <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	3324      	adds	r3, #36	; 0x24
 800c9c0:	2100      	movs	r1, #0
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f001 feee 	bl	800e7a4 <RCCEx_PLL3_Config>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c9cc:	e005      	b.n	800c9da <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	75fb      	strb	r3, [r7, #23]
      break;
 800c9d2:	e002      	b.n	800c9da <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800c9d4:	bf00      	nop
 800c9d6:	e000      	b.n	800c9da <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800c9d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c9da:	7dfb      	ldrb	r3, [r7, #23]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d109      	bne.n	800c9f4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800c9e0:	4b55      	ldr	r3, [pc, #340]	; (800cb38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c9e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9e4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c9ec:	4952      	ldr	r1, [pc, #328]	; (800cb38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c9ee:	4313      	orrs	r3, r2
 800c9f0:	650b      	str	r3, [r1, #80]	; 0x50
 800c9f2:	e001      	b.n	800c9f8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9f4:	7dfb      	ldrb	r3, [r7, #23]
 800c9f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d049      	beq.n	800ca98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ca08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ca0c:	d02e      	beq.n	800ca6c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800ca0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ca12:	d828      	bhi.n	800ca66 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800ca14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ca18:	d02a      	beq.n	800ca70 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800ca1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ca1e:	d822      	bhi.n	800ca66 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800ca20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ca24:	d026      	beq.n	800ca74 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800ca26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ca2a:	d81c      	bhi.n	800ca66 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800ca2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca30:	d010      	beq.n	800ca54 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800ca32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca36:	d816      	bhi.n	800ca66 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d01d      	beq.n	800ca78 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800ca3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca40:	d111      	bne.n	800ca66 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	3304      	adds	r3, #4
 800ca46:	2101      	movs	r1, #1
 800ca48:	4618      	mov	r0, r3
 800ca4a:	f001 fdf9 	bl	800e640 <RCCEx_PLL2_Config>
 800ca4e:	4603      	mov	r3, r0
 800ca50:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800ca52:	e012      	b.n	800ca7a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	3324      	adds	r3, #36	; 0x24
 800ca58:	2101      	movs	r1, #1
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f001 fea2 	bl	800e7a4 <RCCEx_PLL3_Config>
 800ca60:	4603      	mov	r3, r0
 800ca62:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800ca64:	e009      	b.n	800ca7a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ca66:	2301      	movs	r3, #1
 800ca68:	75fb      	strb	r3, [r7, #23]
      break;
 800ca6a:	e006      	b.n	800ca7a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800ca6c:	bf00      	nop
 800ca6e:	e004      	b.n	800ca7a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800ca70:	bf00      	nop
 800ca72:	e002      	b.n	800ca7a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800ca74:	bf00      	nop
 800ca76:	e000      	b.n	800ca7a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800ca78:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ca7a:	7dfb      	ldrb	r3, [r7, #23]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d109      	bne.n	800ca94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ca80:	4b2d      	ldr	r3, [pc, #180]	; (800cb38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ca82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca84:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ca8c:	492a      	ldr	r1, [pc, #168]	; (800cb38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ca8e:	4313      	orrs	r3, r2
 800ca90:	650b      	str	r3, [r1, #80]	; 0x50
 800ca92:	e001      	b.n	800ca98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca94:	7dfb      	ldrb	r3, [r7, #23]
 800ca96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d04d      	beq.n	800cb40 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800caaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800caae:	d02e      	beq.n	800cb0e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800cab0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cab4:	d828      	bhi.n	800cb08 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800cab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800caba:	d02a      	beq.n	800cb12 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800cabc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cac0:	d822      	bhi.n	800cb08 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800cac2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cac6:	d026      	beq.n	800cb16 <HAL_RCCEx_PeriphCLKConfig+0x526>
 800cac8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cacc:	d81c      	bhi.n	800cb08 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800cace:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cad2:	d010      	beq.n	800caf6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800cad4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cad8:	d816      	bhi.n	800cb08 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d01d      	beq.n	800cb1a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800cade:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cae2:	d111      	bne.n	800cb08 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	3304      	adds	r3, #4
 800cae8:	2101      	movs	r1, #1
 800caea:	4618      	mov	r0, r3
 800caec:	f001 fda8 	bl	800e640 <RCCEx_PLL2_Config>
 800caf0:	4603      	mov	r3, r0
 800caf2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800caf4:	e012      	b.n	800cb1c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	3324      	adds	r3, #36	; 0x24
 800cafa:	2101      	movs	r1, #1
 800cafc:	4618      	mov	r0, r3
 800cafe:	f001 fe51 	bl	800e7a4 <RCCEx_PLL3_Config>
 800cb02:	4603      	mov	r3, r0
 800cb04:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800cb06:	e009      	b.n	800cb1c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800cb08:	2301      	movs	r3, #1
 800cb0a:	75fb      	strb	r3, [r7, #23]
      break;
 800cb0c:	e006      	b.n	800cb1c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800cb0e:	bf00      	nop
 800cb10:	e004      	b.n	800cb1c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800cb12:	bf00      	nop
 800cb14:	e002      	b.n	800cb1c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800cb16:	bf00      	nop
 800cb18:	e000      	b.n	800cb1c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800cb1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cb1c:	7dfb      	ldrb	r3, [r7, #23]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d10c      	bne.n	800cb3c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800cb22:	4b05      	ldr	r3, [pc, #20]	; (800cb38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cb24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb26:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800cb30:	4901      	ldr	r1, [pc, #4]	; (800cb38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cb32:	4313      	orrs	r3, r2
 800cb34:	658b      	str	r3, [r1, #88]	; 0x58
 800cb36:	e003      	b.n	800cb40 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800cb38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb3c:	7dfb      	ldrb	r3, [r7, #23]
 800cb3e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d02f      	beq.n	800cbac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb54:	d00e      	beq.n	800cb74 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800cb56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb5a:	d814      	bhi.n	800cb86 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d015      	beq.n	800cb8c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800cb60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb64:	d10f      	bne.n	800cb86 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cb66:	4baf      	ldr	r3, [pc, #700]	; (800ce24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cb68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb6a:	4aae      	ldr	r2, [pc, #696]	; (800ce24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cb6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cb70:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800cb72:	e00c      	b.n	800cb8e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	3304      	adds	r3, #4
 800cb78:	2101      	movs	r1, #1
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f001 fd60 	bl	800e640 <RCCEx_PLL2_Config>
 800cb80:	4603      	mov	r3, r0
 800cb82:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800cb84:	e003      	b.n	800cb8e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cb86:	2301      	movs	r3, #1
 800cb88:	75fb      	strb	r3, [r7, #23]
      break;
 800cb8a:	e000      	b.n	800cb8e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800cb8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cb8e:	7dfb      	ldrb	r3, [r7, #23]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d109      	bne.n	800cba8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800cb94:	4ba3      	ldr	r3, [pc, #652]	; (800ce24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cb96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb98:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cba0:	49a0      	ldr	r1, [pc, #640]	; (800ce24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cba2:	4313      	orrs	r3, r2
 800cba4:	650b      	str	r3, [r1, #80]	; 0x50
 800cba6:	e001      	b.n	800cbac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cba8:	7dfb      	ldrb	r3, [r7, #23]
 800cbaa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d032      	beq.n	800cc1e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbbc:	2b03      	cmp	r3, #3
 800cbbe:	d81b      	bhi.n	800cbf8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800cbc0:	a201      	add	r2, pc, #4	; (adr r2, 800cbc8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800cbc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbc6:	bf00      	nop
 800cbc8:	0800cbff 	.word	0x0800cbff
 800cbcc:	0800cbd9 	.word	0x0800cbd9
 800cbd0:	0800cbe7 	.word	0x0800cbe7
 800cbd4:	0800cbff 	.word	0x0800cbff
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cbd8:	4b92      	ldr	r3, [pc, #584]	; (800ce24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cbda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbdc:	4a91      	ldr	r2, [pc, #580]	; (800ce24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cbde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cbe2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800cbe4:	e00c      	b.n	800cc00 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	3304      	adds	r3, #4
 800cbea:	2102      	movs	r1, #2
 800cbec:	4618      	mov	r0, r3
 800cbee:	f001 fd27 	bl	800e640 <RCCEx_PLL2_Config>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800cbf6:	e003      	b.n	800cc00 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	75fb      	strb	r3, [r7, #23]
      break;
 800cbfc:	e000      	b.n	800cc00 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800cbfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cc00:	7dfb      	ldrb	r3, [r7, #23]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d109      	bne.n	800cc1a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800cc06:	4b87      	ldr	r3, [pc, #540]	; (800ce24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cc08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc0a:	f023 0203 	bic.w	r2, r3, #3
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc12:	4984      	ldr	r1, [pc, #528]	; (800ce24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cc14:	4313      	orrs	r3, r2
 800cc16:	64cb      	str	r3, [r1, #76]	; 0x4c
 800cc18:	e001      	b.n	800cc1e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc1a:	7dfb      	ldrb	r3, [r7, #23]
 800cc1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	f000 8086 	beq.w	800cd38 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cc2c:	4b7e      	ldr	r3, [pc, #504]	; (800ce28 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	4a7d      	ldr	r2, [pc, #500]	; (800ce28 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800cc32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800cc38:	f7f7 fdac 	bl	8004794 <HAL_GetTick>
 800cc3c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cc3e:	e009      	b.n	800cc54 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cc40:	f7f7 fda8 	bl	8004794 <HAL_GetTick>
 800cc44:	4602      	mov	r2, r0
 800cc46:	693b      	ldr	r3, [r7, #16]
 800cc48:	1ad3      	subs	r3, r2, r3
 800cc4a:	2b64      	cmp	r3, #100	; 0x64
 800cc4c:	d902      	bls.n	800cc54 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800cc4e:	2303      	movs	r3, #3
 800cc50:	75fb      	strb	r3, [r7, #23]
        break;
 800cc52:	e005      	b.n	800cc60 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cc54:	4b74      	ldr	r3, [pc, #464]	; (800ce28 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d0ef      	beq.n	800cc40 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800cc60:	7dfb      	ldrb	r3, [r7, #23]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d166      	bne.n	800cd34 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800cc66:	4b6f      	ldr	r3, [pc, #444]	; (800ce24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cc68:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cc70:	4053      	eors	r3, r2
 800cc72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d013      	beq.n	800cca2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cc7a:	4b6a      	ldr	r3, [pc, #424]	; (800ce24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cc7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc82:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800cc84:	4b67      	ldr	r3, [pc, #412]	; (800ce24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cc86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc88:	4a66      	ldr	r2, [pc, #408]	; (800ce24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cc8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cc8e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800cc90:	4b64      	ldr	r3, [pc, #400]	; (800ce24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cc92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc94:	4a63      	ldr	r2, [pc, #396]	; (800ce24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cc96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cc9a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800cc9c:	4a61      	ldr	r2, [pc, #388]	; (800ce24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cca8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ccac:	d115      	bne.n	800ccda <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ccae:	f7f7 fd71 	bl	8004794 <HAL_GetTick>
 800ccb2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ccb4:	e00b      	b.n	800ccce <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ccb6:	f7f7 fd6d 	bl	8004794 <HAL_GetTick>
 800ccba:	4602      	mov	r2, r0
 800ccbc:	693b      	ldr	r3, [r7, #16]
 800ccbe:	1ad3      	subs	r3, r2, r3
 800ccc0:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccc4:	4293      	cmp	r3, r2
 800ccc6:	d902      	bls.n	800ccce <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800ccc8:	2303      	movs	r3, #3
 800ccca:	75fb      	strb	r3, [r7, #23]
            break;
 800cccc:	e005      	b.n	800ccda <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ccce:	4b55      	ldr	r3, [pc, #340]	; (800ce24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ccd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccd2:	f003 0302 	and.w	r3, r3, #2
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d0ed      	beq.n	800ccb6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800ccda:	7dfb      	ldrb	r3, [r7, #23]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d126      	bne.n	800cd2e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ccea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ccee:	d10d      	bne.n	800cd0c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800ccf0:	4b4c      	ldr	r3, [pc, #304]	; (800ce24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ccf2:	691b      	ldr	r3, [r3, #16]
 800ccf4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ccfe:	0919      	lsrs	r1, r3, #4
 800cd00:	4b4a      	ldr	r3, [pc, #296]	; (800ce2c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800cd02:	400b      	ands	r3, r1
 800cd04:	4947      	ldr	r1, [pc, #284]	; (800ce24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cd06:	4313      	orrs	r3, r2
 800cd08:	610b      	str	r3, [r1, #16]
 800cd0a:	e005      	b.n	800cd18 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800cd0c:	4b45      	ldr	r3, [pc, #276]	; (800ce24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cd0e:	691b      	ldr	r3, [r3, #16]
 800cd10:	4a44      	ldr	r2, [pc, #272]	; (800ce24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cd12:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cd16:	6113      	str	r3, [r2, #16]
 800cd18:	4b42      	ldr	r3, [pc, #264]	; (800ce24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cd1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cd22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cd26:	493f      	ldr	r1, [pc, #252]	; (800ce24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cd28:	4313      	orrs	r3, r2
 800cd2a:	670b      	str	r3, [r1, #112]	; 0x70
 800cd2c:	e004      	b.n	800cd38 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800cd2e:	7dfb      	ldrb	r3, [r7, #23]
 800cd30:	75bb      	strb	r3, [r7, #22]
 800cd32:	e001      	b.n	800cd38 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd34:	7dfb      	ldrb	r3, [r7, #23]
 800cd36:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	f003 0301 	and.w	r3, r3, #1
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	f000 8085 	beq.w	800ce50 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd4a:	2b28      	cmp	r3, #40	; 0x28
 800cd4c:	d866      	bhi.n	800ce1c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800cd4e:	a201      	add	r2, pc, #4	; (adr r2, 800cd54 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800cd50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd54:	0800ce31 	.word	0x0800ce31
 800cd58:	0800ce1d 	.word	0x0800ce1d
 800cd5c:	0800ce1d 	.word	0x0800ce1d
 800cd60:	0800ce1d 	.word	0x0800ce1d
 800cd64:	0800ce1d 	.word	0x0800ce1d
 800cd68:	0800ce1d 	.word	0x0800ce1d
 800cd6c:	0800ce1d 	.word	0x0800ce1d
 800cd70:	0800ce1d 	.word	0x0800ce1d
 800cd74:	0800cdf9 	.word	0x0800cdf9
 800cd78:	0800ce1d 	.word	0x0800ce1d
 800cd7c:	0800ce1d 	.word	0x0800ce1d
 800cd80:	0800ce1d 	.word	0x0800ce1d
 800cd84:	0800ce1d 	.word	0x0800ce1d
 800cd88:	0800ce1d 	.word	0x0800ce1d
 800cd8c:	0800ce1d 	.word	0x0800ce1d
 800cd90:	0800ce1d 	.word	0x0800ce1d
 800cd94:	0800ce0b 	.word	0x0800ce0b
 800cd98:	0800ce1d 	.word	0x0800ce1d
 800cd9c:	0800ce1d 	.word	0x0800ce1d
 800cda0:	0800ce1d 	.word	0x0800ce1d
 800cda4:	0800ce1d 	.word	0x0800ce1d
 800cda8:	0800ce1d 	.word	0x0800ce1d
 800cdac:	0800ce1d 	.word	0x0800ce1d
 800cdb0:	0800ce1d 	.word	0x0800ce1d
 800cdb4:	0800ce31 	.word	0x0800ce31
 800cdb8:	0800ce1d 	.word	0x0800ce1d
 800cdbc:	0800ce1d 	.word	0x0800ce1d
 800cdc0:	0800ce1d 	.word	0x0800ce1d
 800cdc4:	0800ce1d 	.word	0x0800ce1d
 800cdc8:	0800ce1d 	.word	0x0800ce1d
 800cdcc:	0800ce1d 	.word	0x0800ce1d
 800cdd0:	0800ce1d 	.word	0x0800ce1d
 800cdd4:	0800ce31 	.word	0x0800ce31
 800cdd8:	0800ce1d 	.word	0x0800ce1d
 800cddc:	0800ce1d 	.word	0x0800ce1d
 800cde0:	0800ce1d 	.word	0x0800ce1d
 800cde4:	0800ce1d 	.word	0x0800ce1d
 800cde8:	0800ce1d 	.word	0x0800ce1d
 800cdec:	0800ce1d 	.word	0x0800ce1d
 800cdf0:	0800ce1d 	.word	0x0800ce1d
 800cdf4:	0800ce31 	.word	0x0800ce31
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	3304      	adds	r3, #4
 800cdfc:	2101      	movs	r1, #1
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f001 fc1e 	bl	800e640 <RCCEx_PLL2_Config>
 800ce04:	4603      	mov	r3, r0
 800ce06:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800ce08:	e013      	b.n	800ce32 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	3324      	adds	r3, #36	; 0x24
 800ce0e:	2101      	movs	r1, #1
 800ce10:	4618      	mov	r0, r3
 800ce12:	f001 fcc7 	bl	800e7a4 <RCCEx_PLL3_Config>
 800ce16:	4603      	mov	r3, r0
 800ce18:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800ce1a:	e00a      	b.n	800ce32 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ce1c:	2301      	movs	r3, #1
 800ce1e:	75fb      	strb	r3, [r7, #23]
      break;
 800ce20:	e007      	b.n	800ce32 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800ce22:	bf00      	nop
 800ce24:	58024400 	.word	0x58024400
 800ce28:	58024800 	.word	0x58024800
 800ce2c:	00ffffcf 	.word	0x00ffffcf
      break;
 800ce30:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ce32:	7dfb      	ldrb	r3, [r7, #23]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d109      	bne.n	800ce4c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ce38:	4b96      	ldr	r3, [pc, #600]	; (800d094 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800ce3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce3c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce44:	4993      	ldr	r1, [pc, #588]	; (800d094 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800ce46:	4313      	orrs	r3, r2
 800ce48:	654b      	str	r3, [r1, #84]	; 0x54
 800ce4a:	e001      	b.n	800ce50 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce4c:	7dfb      	ldrb	r3, [r7, #23]
 800ce4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	f003 0302 	and.w	r3, r3, #2
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d038      	beq.n	800cece <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce60:	2b05      	cmp	r3, #5
 800ce62:	d821      	bhi.n	800cea8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800ce64:	a201      	add	r2, pc, #4	; (adr r2, 800ce6c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800ce66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce6a:	bf00      	nop
 800ce6c:	0800ceaf 	.word	0x0800ceaf
 800ce70:	0800ce85 	.word	0x0800ce85
 800ce74:	0800ce97 	.word	0x0800ce97
 800ce78:	0800ceaf 	.word	0x0800ceaf
 800ce7c:	0800ceaf 	.word	0x0800ceaf
 800ce80:	0800ceaf 	.word	0x0800ceaf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	3304      	adds	r3, #4
 800ce88:	2101      	movs	r1, #1
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	f001 fbd8 	bl	800e640 <RCCEx_PLL2_Config>
 800ce90:	4603      	mov	r3, r0
 800ce92:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800ce94:	e00c      	b.n	800ceb0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	3324      	adds	r3, #36	; 0x24
 800ce9a:	2101      	movs	r1, #1
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f001 fc81 	bl	800e7a4 <RCCEx_PLL3_Config>
 800cea2:	4603      	mov	r3, r0
 800cea4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800cea6:	e003      	b.n	800ceb0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cea8:	2301      	movs	r3, #1
 800ceaa:	75fb      	strb	r3, [r7, #23]
      break;
 800ceac:	e000      	b.n	800ceb0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800ceae:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ceb0:	7dfb      	ldrb	r3, [r7, #23]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d109      	bne.n	800ceca <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ceb6:	4b77      	ldr	r3, [pc, #476]	; (800d094 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800ceb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ceba:	f023 0207 	bic.w	r2, r3, #7
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cec2:	4974      	ldr	r1, [pc, #464]	; (800d094 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800cec4:	4313      	orrs	r3, r2
 800cec6:	654b      	str	r3, [r1, #84]	; 0x54
 800cec8:	e001      	b.n	800cece <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ceca:	7dfb      	ldrb	r3, [r7, #23]
 800cecc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	f003 0304 	and.w	r3, r3, #4
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d03a      	beq.n	800cf50 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cee0:	2b05      	cmp	r3, #5
 800cee2:	d821      	bhi.n	800cf28 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800cee4:	a201      	add	r2, pc, #4	; (adr r2, 800ceec <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800cee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceea:	bf00      	nop
 800ceec:	0800cf2f 	.word	0x0800cf2f
 800cef0:	0800cf05 	.word	0x0800cf05
 800cef4:	0800cf17 	.word	0x0800cf17
 800cef8:	0800cf2f 	.word	0x0800cf2f
 800cefc:	0800cf2f 	.word	0x0800cf2f
 800cf00:	0800cf2f 	.word	0x0800cf2f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	3304      	adds	r3, #4
 800cf08:	2101      	movs	r1, #1
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f001 fb98 	bl	800e640 <RCCEx_PLL2_Config>
 800cf10:	4603      	mov	r3, r0
 800cf12:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800cf14:	e00c      	b.n	800cf30 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	3324      	adds	r3, #36	; 0x24
 800cf1a:	2101      	movs	r1, #1
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f001 fc41 	bl	800e7a4 <RCCEx_PLL3_Config>
 800cf22:	4603      	mov	r3, r0
 800cf24:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800cf26:	e003      	b.n	800cf30 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cf28:	2301      	movs	r3, #1
 800cf2a:	75fb      	strb	r3, [r7, #23]
      break;
 800cf2c:	e000      	b.n	800cf30 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800cf2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cf30:	7dfb      	ldrb	r3, [r7, #23]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d10a      	bne.n	800cf4c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cf36:	4b57      	ldr	r3, [pc, #348]	; (800d094 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800cf38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf3a:	f023 0207 	bic.w	r2, r3, #7
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf44:	4953      	ldr	r1, [pc, #332]	; (800d094 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800cf46:	4313      	orrs	r3, r2
 800cf48:	658b      	str	r3, [r1, #88]	; 0x58
 800cf4a:	e001      	b.n	800cf50 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf4c:	7dfb      	ldrb	r3, [r7, #23]
 800cf4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	f003 0320 	and.w	r3, r3, #32
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d04b      	beq.n	800cff4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cf66:	d02e      	beq.n	800cfc6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800cf68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cf6c:	d828      	bhi.n	800cfc0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800cf6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf72:	d02a      	beq.n	800cfca <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800cf74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf78:	d822      	bhi.n	800cfc0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800cf7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cf7e:	d026      	beq.n	800cfce <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800cf80:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cf84:	d81c      	bhi.n	800cfc0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800cf86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf8a:	d010      	beq.n	800cfae <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800cf8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf90:	d816      	bhi.n	800cfc0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d01d      	beq.n	800cfd2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800cf96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cf9a:	d111      	bne.n	800cfc0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	3304      	adds	r3, #4
 800cfa0:	2100      	movs	r1, #0
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f001 fb4c 	bl	800e640 <RCCEx_PLL2_Config>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800cfac:	e012      	b.n	800cfd4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	3324      	adds	r3, #36	; 0x24
 800cfb2:	2102      	movs	r1, #2
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f001 fbf5 	bl	800e7a4 <RCCEx_PLL3_Config>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800cfbe:	e009      	b.n	800cfd4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	75fb      	strb	r3, [r7, #23]
      break;
 800cfc4:	e006      	b.n	800cfd4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800cfc6:	bf00      	nop
 800cfc8:	e004      	b.n	800cfd4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800cfca:	bf00      	nop
 800cfcc:	e002      	b.n	800cfd4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800cfce:	bf00      	nop
 800cfd0:	e000      	b.n	800cfd4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800cfd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cfd4:	7dfb      	ldrb	r3, [r7, #23]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d10a      	bne.n	800cff0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cfda:	4b2e      	ldr	r3, [pc, #184]	; (800d094 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800cfdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfde:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cfe8:	492a      	ldr	r1, [pc, #168]	; (800d094 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800cfea:	4313      	orrs	r3, r2
 800cfec:	654b      	str	r3, [r1, #84]	; 0x54
 800cfee:	e001      	b.n	800cff4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cff0:	7dfb      	ldrb	r3, [r7, #23]
 800cff2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d04d      	beq.n	800d09c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d006:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d00a:	d02e      	beq.n	800d06a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800d00c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d010:	d828      	bhi.n	800d064 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800d012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d016:	d02a      	beq.n	800d06e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800d018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d01c:	d822      	bhi.n	800d064 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800d01e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d022:	d026      	beq.n	800d072 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800d024:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d028:	d81c      	bhi.n	800d064 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800d02a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d02e:	d010      	beq.n	800d052 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800d030:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d034:	d816      	bhi.n	800d064 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800d036:	2b00      	cmp	r3, #0
 800d038:	d01d      	beq.n	800d076 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800d03a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d03e:	d111      	bne.n	800d064 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	3304      	adds	r3, #4
 800d044:	2100      	movs	r1, #0
 800d046:	4618      	mov	r0, r3
 800d048:	f001 fafa 	bl	800e640 <RCCEx_PLL2_Config>
 800d04c:	4603      	mov	r3, r0
 800d04e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800d050:	e012      	b.n	800d078 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	3324      	adds	r3, #36	; 0x24
 800d056:	2102      	movs	r1, #2
 800d058:	4618      	mov	r0, r3
 800d05a:	f001 fba3 	bl	800e7a4 <RCCEx_PLL3_Config>
 800d05e:	4603      	mov	r3, r0
 800d060:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800d062:	e009      	b.n	800d078 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d064:	2301      	movs	r3, #1
 800d066:	75fb      	strb	r3, [r7, #23]
      break;
 800d068:	e006      	b.n	800d078 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800d06a:	bf00      	nop
 800d06c:	e004      	b.n	800d078 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800d06e:	bf00      	nop
 800d070:	e002      	b.n	800d078 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800d072:	bf00      	nop
 800d074:	e000      	b.n	800d078 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800d076:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d078:	7dfb      	ldrb	r3, [r7, #23]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d10c      	bne.n	800d098 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d07e:	4b05      	ldr	r3, [pc, #20]	; (800d094 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800d080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d082:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d08c:	4901      	ldr	r1, [pc, #4]	; (800d094 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800d08e:	4313      	orrs	r3, r2
 800d090:	658b      	str	r3, [r1, #88]	; 0x58
 800d092:	e003      	b.n	800d09c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800d094:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d098:	7dfb      	ldrb	r3, [r7, #23]
 800d09a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d04b      	beq.n	800d140 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d0ae:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800d0b2:	d02e      	beq.n	800d112 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800d0b4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800d0b8:	d828      	bhi.n	800d10c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800d0ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d0be:	d02a      	beq.n	800d116 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800d0c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d0c4:	d822      	bhi.n	800d10c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800d0c6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800d0ca:	d026      	beq.n	800d11a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800d0cc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800d0d0:	d81c      	bhi.n	800d10c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800d0d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d0d6:	d010      	beq.n	800d0fa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800d0d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d0dc:	d816      	bhi.n	800d10c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d01d      	beq.n	800d11e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800d0e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d0e6:	d111      	bne.n	800d10c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	3304      	adds	r3, #4
 800d0ec:	2100      	movs	r1, #0
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f001 faa6 	bl	800e640 <RCCEx_PLL2_Config>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800d0f8:	e012      	b.n	800d120 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	3324      	adds	r3, #36	; 0x24
 800d0fe:	2102      	movs	r1, #2
 800d100:	4618      	mov	r0, r3
 800d102:	f001 fb4f 	bl	800e7a4 <RCCEx_PLL3_Config>
 800d106:	4603      	mov	r3, r0
 800d108:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800d10a:	e009      	b.n	800d120 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d10c:	2301      	movs	r3, #1
 800d10e:	75fb      	strb	r3, [r7, #23]
      break;
 800d110:	e006      	b.n	800d120 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800d112:	bf00      	nop
 800d114:	e004      	b.n	800d120 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800d116:	bf00      	nop
 800d118:	e002      	b.n	800d120 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800d11a:	bf00      	nop
 800d11c:	e000      	b.n	800d120 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800d11e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d120:	7dfb      	ldrb	r3, [r7, #23]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d10a      	bne.n	800d13c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800d126:	4b9d      	ldr	r3, [pc, #628]	; (800d39c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d12a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d134:	4999      	ldr	r1, [pc, #612]	; (800d39c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d136:	4313      	orrs	r3, r2
 800d138:	658b      	str	r3, [r1, #88]	; 0x58
 800d13a:	e001      	b.n	800d140 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d13c:	7dfb      	ldrb	r3, [r7, #23]
 800d13e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	f003 0308 	and.w	r3, r3, #8
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d01a      	beq.n	800d182 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d156:	d10a      	bne.n	800d16e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	3324      	adds	r3, #36	; 0x24
 800d15c:	2102      	movs	r1, #2
 800d15e:	4618      	mov	r0, r3
 800d160:	f001 fb20 	bl	800e7a4 <RCCEx_PLL3_Config>
 800d164:	4603      	mov	r3, r0
 800d166:	2b00      	cmp	r3, #0
 800d168:	d001      	beq.n	800d16e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800d16a:	2301      	movs	r3, #1
 800d16c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800d16e:	4b8b      	ldr	r3, [pc, #556]	; (800d39c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d172:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d17c:	4987      	ldr	r1, [pc, #540]	; (800d39c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d17e:	4313      	orrs	r3, r2
 800d180:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	f003 0310 	and.w	r3, r3, #16
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d01a      	beq.n	800d1c4 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d198:	d10a      	bne.n	800d1b0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	3324      	adds	r3, #36	; 0x24
 800d19e:	2102      	movs	r1, #2
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f001 faff 	bl	800e7a4 <RCCEx_PLL3_Config>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d001      	beq.n	800d1b0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800d1ac:	2301      	movs	r3, #1
 800d1ae:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d1b0:	4b7a      	ldr	r3, [pc, #488]	; (800d39c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d1b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d1be:	4977      	ldr	r1, [pc, #476]	; (800d39c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d1c0:	4313      	orrs	r3, r2
 800d1c2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d034      	beq.n	800d23a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d1d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d1da:	d01d      	beq.n	800d218 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800d1dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d1e0:	d817      	bhi.n	800d212 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d003      	beq.n	800d1ee <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800d1e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d1ea:	d009      	beq.n	800d200 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800d1ec:	e011      	b.n	800d212 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	3304      	adds	r3, #4
 800d1f2:	2100      	movs	r1, #0
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f001 fa23 	bl	800e640 <RCCEx_PLL2_Config>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800d1fe:	e00c      	b.n	800d21a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	3324      	adds	r3, #36	; 0x24
 800d204:	2102      	movs	r1, #2
 800d206:	4618      	mov	r0, r3
 800d208:	f001 facc 	bl	800e7a4 <RCCEx_PLL3_Config>
 800d20c:	4603      	mov	r3, r0
 800d20e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800d210:	e003      	b.n	800d21a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d212:	2301      	movs	r3, #1
 800d214:	75fb      	strb	r3, [r7, #23]
      break;
 800d216:	e000      	b.n	800d21a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800d218:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d21a:	7dfb      	ldrb	r3, [r7, #23]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d10a      	bne.n	800d236 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d220:	4b5e      	ldr	r3, [pc, #376]	; (800d39c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d224:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d22e:	495b      	ldr	r1, [pc, #364]	; (800d39c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d230:	4313      	orrs	r3, r2
 800d232:	658b      	str	r3, [r1, #88]	; 0x58
 800d234:	e001      	b.n	800d23a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d236:	7dfb      	ldrb	r3, [r7, #23]
 800d238:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d242:	2b00      	cmp	r3, #0
 800d244:	d033      	beq.n	800d2ae <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d24c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d250:	d01c      	beq.n	800d28c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800d252:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d256:	d816      	bhi.n	800d286 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800d258:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d25c:	d003      	beq.n	800d266 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800d25e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d262:	d007      	beq.n	800d274 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800d264:	e00f      	b.n	800d286 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d266:	4b4d      	ldr	r3, [pc, #308]	; (800d39c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d26a:	4a4c      	ldr	r2, [pc, #304]	; (800d39c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d26c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d270:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800d272:	e00c      	b.n	800d28e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	3324      	adds	r3, #36	; 0x24
 800d278:	2101      	movs	r1, #1
 800d27a:	4618      	mov	r0, r3
 800d27c:	f001 fa92 	bl	800e7a4 <RCCEx_PLL3_Config>
 800d280:	4603      	mov	r3, r0
 800d282:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800d284:	e003      	b.n	800d28e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d286:	2301      	movs	r3, #1
 800d288:	75fb      	strb	r3, [r7, #23]
      break;
 800d28a:	e000      	b.n	800d28e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800d28c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d28e:	7dfb      	ldrb	r3, [r7, #23]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d10a      	bne.n	800d2aa <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d294:	4b41      	ldr	r3, [pc, #260]	; (800d39c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d298:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2a2:	493e      	ldr	r1, [pc, #248]	; (800d39c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d2a4:	4313      	orrs	r3, r2
 800d2a6:	654b      	str	r3, [r1, #84]	; 0x54
 800d2a8:	e001      	b.n	800d2ae <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d2aa:	7dfb      	ldrb	r3, [r7, #23]
 800d2ac:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d029      	beq.n	800d30e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d003      	beq.n	800d2ca <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800d2c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2c6:	d007      	beq.n	800d2d8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800d2c8:	e00f      	b.n	800d2ea <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d2ca:	4b34      	ldr	r3, [pc, #208]	; (800d39c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d2cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ce:	4a33      	ldr	r2, [pc, #204]	; (800d39c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d2d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d2d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800d2d6:	e00b      	b.n	800d2f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	3304      	adds	r3, #4
 800d2dc:	2102      	movs	r1, #2
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f001 f9ae 	bl	800e640 <RCCEx_PLL2_Config>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800d2e8:	e002      	b.n	800d2f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	75fb      	strb	r3, [r7, #23]
      break;
 800d2ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d2f0:	7dfb      	ldrb	r3, [r7, #23]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d109      	bne.n	800d30a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d2f6:	4b29      	ldr	r3, [pc, #164]	; (800d39c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d2f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d2fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d302:	4926      	ldr	r1, [pc, #152]	; (800d39c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d304:	4313      	orrs	r3, r2
 800d306:	64cb      	str	r3, [r1, #76]	; 0x4c
 800d308:	e001      	b.n	800d30e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d30a:	7dfb      	ldrb	r3, [r7, #23]
 800d30c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d316:	2b00      	cmp	r3, #0
 800d318:	d00a      	beq.n	800d330 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	3324      	adds	r3, #36	; 0x24
 800d31e:	2102      	movs	r1, #2
 800d320:	4618      	mov	r0, r3
 800d322:	f001 fa3f 	bl	800e7a4 <RCCEx_PLL3_Config>
 800d326:	4603      	mov	r3, r0
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d001      	beq.n	800d330 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800d32c:	2301      	movs	r3, #1
 800d32e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d033      	beq.n	800d3a4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d340:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d344:	d017      	beq.n	800d376 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800d346:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d34a:	d811      	bhi.n	800d370 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800d34c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d350:	d013      	beq.n	800d37a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800d352:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d356:	d80b      	bhi.n	800d370 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d010      	beq.n	800d37e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800d35c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d360:	d106      	bne.n	800d370 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d362:	4b0e      	ldr	r3, [pc, #56]	; (800d39c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d366:	4a0d      	ldr	r2, [pc, #52]	; (800d39c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d36c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800d36e:	e007      	b.n	800d380 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d370:	2301      	movs	r3, #1
 800d372:	75fb      	strb	r3, [r7, #23]
      break;
 800d374:	e004      	b.n	800d380 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800d376:	bf00      	nop
 800d378:	e002      	b.n	800d380 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800d37a:	bf00      	nop
 800d37c:	e000      	b.n	800d380 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800d37e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d380:	7dfb      	ldrb	r3, [r7, #23]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d10c      	bne.n	800d3a0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d386:	4b05      	ldr	r3, [pc, #20]	; (800d39c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d38a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d392:	4902      	ldr	r1, [pc, #8]	; (800d39c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d394:	4313      	orrs	r3, r2
 800d396:	654b      	str	r3, [r1, #84]	; 0x54
 800d398:	e004      	b.n	800d3a4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800d39a:	bf00      	nop
 800d39c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d3a0:	7dfb      	ldrb	r3, [r7, #23]
 800d3a2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d008      	beq.n	800d3c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d3b0:	4b31      	ldr	r3, [pc, #196]	; (800d478 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d3b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3bc:	492e      	ldr	r1, [pc, #184]	; (800d478 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d3be:	4313      	orrs	r3, r2
 800d3c0:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d009      	beq.n	800d3e2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800d3ce:	4b2a      	ldr	r3, [pc, #168]	; (800d478 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d3d0:	691b      	ldr	r3, [r3, #16]
 800d3d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d3dc:	4926      	ldr	r1, [pc, #152]	; (800d478 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d3de:	4313      	orrs	r3, r2
 800d3e0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d008      	beq.n	800d400 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d3ee:	4b22      	ldr	r3, [pc, #136]	; (800d478 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d3f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3f2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d3fa:	491f      	ldr	r1, [pc, #124]	; (800d478 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d3fc:	4313      	orrs	r3, r2
 800d3fe:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d00d      	beq.n	800d428 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d40c:	4b1a      	ldr	r3, [pc, #104]	; (800d478 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d40e:	691b      	ldr	r3, [r3, #16]
 800d410:	4a19      	ldr	r2, [pc, #100]	; (800d478 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d412:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d416:	6113      	str	r3, [r2, #16]
 800d418:	4b17      	ldr	r3, [pc, #92]	; (800d478 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d41a:	691a      	ldr	r2, [r3, #16]
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d422:	4915      	ldr	r1, [pc, #84]	; (800d478 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d424:	4313      	orrs	r3, r2
 800d426:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	da08      	bge.n	800d442 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800d430:	4b11      	ldr	r3, [pc, #68]	; (800d478 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d434:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d43c:	490e      	ldr	r1, [pc, #56]	; (800d478 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d43e:	4313      	orrs	r3, r2
 800d440:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d009      	beq.n	800d462 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d44e:	4b0a      	ldr	r3, [pc, #40]	; (800d478 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d452:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d45c:	4906      	ldr	r1, [pc, #24]	; (800d478 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d45e:	4313      	orrs	r3, r2
 800d460:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800d462:	7dbb      	ldrb	r3, [r7, #22]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d101      	bne.n	800d46c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800d468:	2300      	movs	r3, #0
 800d46a:	e000      	b.n	800d46e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800d46c:	2301      	movs	r3, #1
}
 800d46e:	4618      	mov	r0, r3
 800d470:	3718      	adds	r7, #24
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}
 800d476:	bf00      	nop
 800d478:	58024400 	.word	0x58024400

0800d47c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b090      	sub	sp, #64	; 0x40
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d48a:	f040 8095 	bne.w	800d5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800d48e:	4b97      	ldr	r3, [pc, #604]	; (800d6ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800d490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d492:	f003 0307 	and.w	r3, r3, #7
 800d496:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800d498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d49a:	2b04      	cmp	r3, #4
 800d49c:	f200 8088 	bhi.w	800d5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800d4a0:	a201      	add	r2, pc, #4	; (adr r2, 800d4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800d4a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4a6:	bf00      	nop
 800d4a8:	0800d4bd 	.word	0x0800d4bd
 800d4ac:	0800d4e5 	.word	0x0800d4e5
 800d4b0:	0800d50d 	.word	0x0800d50d
 800d4b4:	0800d5a9 	.word	0x0800d5a9
 800d4b8:	0800d535 	.word	0x0800d535
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d4bc:	4b8b      	ldr	r3, [pc, #556]	; (800d6ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d4c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d4c8:	d108      	bne.n	800d4dc <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d4ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	f000 ff64 	bl	800e39c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800d4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d4d8:	f000 bc94 	b.w	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800d4dc:	2300      	movs	r3, #0
 800d4de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d4e0:	f000 bc90 	b.w	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d4e4:	4b81      	ldr	r3, [pc, #516]	; (800d6ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d4ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d4f0:	d108      	bne.n	800d504 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d4f2:	f107 0318 	add.w	r3, r7, #24
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f000 fca8 	bl	800de4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d4fc:	69bb      	ldr	r3, [r7, #24]
 800d4fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d500:	f000 bc80 	b.w	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800d504:	2300      	movs	r3, #0
 800d506:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d508:	f000 bc7c 	b.w	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d50c:	4b77      	ldr	r3, [pc, #476]	; (800d6ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d514:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d518:	d108      	bne.n	800d52c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d51a:	f107 030c 	add.w	r3, r7, #12
 800d51e:	4618      	mov	r0, r3
 800d520:	f000 fde8 	bl	800e0f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d528:	f000 bc6c 	b.w	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800d52c:	2300      	movs	r3, #0
 800d52e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d530:	f000 bc68 	b.w	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800d534:	4b6d      	ldr	r3, [pc, #436]	; (800d6ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800d536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d538:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d53c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d53e:	4b6b      	ldr	r3, [pc, #428]	; (800d6ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	f003 0304 	and.w	r3, r3, #4
 800d546:	2b04      	cmp	r3, #4
 800d548:	d10c      	bne.n	800d564 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800d54a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d109      	bne.n	800d564 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d550:	4b66      	ldr	r3, [pc, #408]	; (800d6ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	08db      	lsrs	r3, r3, #3
 800d556:	f003 0303 	and.w	r3, r3, #3
 800d55a:	4a65      	ldr	r2, [pc, #404]	; (800d6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800d55c:	fa22 f303 	lsr.w	r3, r2, r3
 800d560:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d562:	e01f      	b.n	800d5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d564:	4b61      	ldr	r3, [pc, #388]	; (800d6ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d56c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d570:	d106      	bne.n	800d580 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800d572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d574:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d578:	d102      	bne.n	800d580 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800d57a:	4b5e      	ldr	r3, [pc, #376]	; (800d6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d57c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d57e:	e011      	b.n	800d5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d580:	4b5a      	ldr	r3, [pc, #360]	; (800d6ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d588:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d58c:	d106      	bne.n	800d59c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800d58e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d590:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d594:	d102      	bne.n	800d59c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800d596:	4b58      	ldr	r3, [pc, #352]	; (800d6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800d598:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d59a:	e003      	b.n	800d5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800d59c:	2300      	movs	r3, #0
 800d59e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800d5a0:	f000 bc30 	b.w	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800d5a4:	f000 bc2e 	b.w	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800d5a8:	4b54      	ldr	r3, [pc, #336]	; (800d6fc <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800d5aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d5ac:	f000 bc2a 	b.w	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d5b4:	f000 bc26 	b.w	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d5be:	f040 809f 	bne.w	800d700 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800d5c2:	4b4a      	ldr	r3, [pc, #296]	; (800d6ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800d5c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5c6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800d5ca:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800d5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d5d2:	d04d      	beq.n	800d670 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800d5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d5da:	f200 8084 	bhi.w	800d6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800d5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5e0:	2bc0      	cmp	r3, #192	; 0xc0
 800d5e2:	d07d      	beq.n	800d6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800d5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5e6:	2bc0      	cmp	r3, #192	; 0xc0
 800d5e8:	d87d      	bhi.n	800d6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800d5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ec:	2b80      	cmp	r3, #128	; 0x80
 800d5ee:	d02d      	beq.n	800d64c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800d5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5f2:	2b80      	cmp	r3, #128	; 0x80
 800d5f4:	d877      	bhi.n	800d6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800d5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d003      	beq.n	800d604 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800d5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5fe:	2b40      	cmp	r3, #64	; 0x40
 800d600:	d012      	beq.n	800d628 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800d602:	e070      	b.n	800d6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d604:	4b39      	ldr	r3, [pc, #228]	; (800d6ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d60c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d610:	d107      	bne.n	800d622 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d616:	4618      	mov	r0, r3
 800d618:	f000 fec0 	bl	800e39c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d61e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d620:	e3f0      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800d622:	2300      	movs	r3, #0
 800d624:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d626:	e3ed      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d628:	4b30      	ldr	r3, [pc, #192]	; (800d6ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d630:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d634:	d107      	bne.n	800d646 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d636:	f107 0318 	add.w	r3, r7, #24
 800d63a:	4618      	mov	r0, r3
 800d63c:	f000 fc06 	bl	800de4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d640:	69bb      	ldr	r3, [r7, #24]
 800d642:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d644:	e3de      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800d646:	2300      	movs	r3, #0
 800d648:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d64a:	e3db      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d64c:	4b27      	ldr	r3, [pc, #156]	; (800d6ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d654:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d658:	d107      	bne.n	800d66a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d65a:	f107 030c 	add.w	r3, r7, #12
 800d65e:	4618      	mov	r0, r3
 800d660:	f000 fd48 	bl	800e0f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d668:	e3cc      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800d66a:	2300      	movs	r3, #0
 800d66c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d66e:	e3c9      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800d670:	4b1e      	ldr	r3, [pc, #120]	; (800d6ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800d672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d674:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d678:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d67a:	4b1c      	ldr	r3, [pc, #112]	; (800d6ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	f003 0304 	and.w	r3, r3, #4
 800d682:	2b04      	cmp	r3, #4
 800d684:	d10c      	bne.n	800d6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800d686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d109      	bne.n	800d6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d68c:	4b17      	ldr	r3, [pc, #92]	; (800d6ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	08db      	lsrs	r3, r3, #3
 800d692:	f003 0303 	and.w	r3, r3, #3
 800d696:	4a16      	ldr	r2, [pc, #88]	; (800d6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800d698:	fa22 f303 	lsr.w	r3, r2, r3
 800d69c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d69e:	e01e      	b.n	800d6de <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d6a0:	4b12      	ldr	r3, [pc, #72]	; (800d6ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d6ac:	d106      	bne.n	800d6bc <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800d6ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d6b4:	d102      	bne.n	800d6bc <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800d6b6:	4b0f      	ldr	r3, [pc, #60]	; (800d6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d6b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d6ba:	e010      	b.n	800d6de <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d6bc:	4b0b      	ldr	r3, [pc, #44]	; (800d6ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d6c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d6c8:	d106      	bne.n	800d6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800d6ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d6d0:	d102      	bne.n	800d6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800d6d2:	4b09      	ldr	r3, [pc, #36]	; (800d6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800d6d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d6d6:	e002      	b.n	800d6de <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800d6d8:	2300      	movs	r3, #0
 800d6da:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800d6dc:	e392      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800d6de:	e391      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800d6e0:	4b06      	ldr	r3, [pc, #24]	; (800d6fc <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800d6e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d6e4:	e38e      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d6ea:	e38b      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800d6ec:	58024400 	.word	0x58024400
 800d6f0:	03d09000 	.word	0x03d09000
 800d6f4:	003d0900 	.word	0x003d0900
 800d6f8:	01312d00 	.word	0x01312d00
 800d6fc:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d706:	f040 809c 	bne.w	800d842 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800d70a:	4b9d      	ldr	r3, [pc, #628]	; (800d980 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800d70c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d70e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800d712:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800d714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d716:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d71a:	d054      	beq.n	800d7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 800d71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d71e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d722:	f200 808b 	bhi.w	800d83c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800d726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d728:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800d72c:	f000 8083 	beq.w	800d836 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800d730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d732:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800d736:	f200 8081 	bhi.w	800d83c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800d73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d73c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d740:	d02f      	beq.n	800d7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800d742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d744:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d748:	d878      	bhi.n	800d83c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800d74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d004      	beq.n	800d75a <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800d750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d752:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d756:	d012      	beq.n	800d77e <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800d758:	e070      	b.n	800d83c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d75a:	4b89      	ldr	r3, [pc, #548]	; (800d980 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d762:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d766:	d107      	bne.n	800d778 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d76c:	4618      	mov	r0, r3
 800d76e:	f000 fe15 	bl	800e39c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d774:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d776:	e345      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800d778:	2300      	movs	r3, #0
 800d77a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d77c:	e342      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d77e:	4b80      	ldr	r3, [pc, #512]	; (800d980 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d786:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d78a:	d107      	bne.n	800d79c <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d78c:	f107 0318 	add.w	r3, r7, #24
 800d790:	4618      	mov	r0, r3
 800d792:	f000 fb5b 	bl	800de4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d796:	69bb      	ldr	r3, [r7, #24]
 800d798:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d79a:	e333      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800d79c:	2300      	movs	r3, #0
 800d79e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d7a0:	e330      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d7a2:	4b77      	ldr	r3, [pc, #476]	; (800d980 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d7aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d7ae:	d107      	bne.n	800d7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d7b0:	f107 030c 	add.w	r3, r7, #12
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f000 fc9d 	bl	800e0f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d7be:	e321      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d7c4:	e31e      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800d7c6:	4b6e      	ldr	r3, [pc, #440]	; (800d980 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800d7c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d7ce:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d7d0:	4b6b      	ldr	r3, [pc, #428]	; (800d980 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	f003 0304 	and.w	r3, r3, #4
 800d7d8:	2b04      	cmp	r3, #4
 800d7da:	d10c      	bne.n	800d7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800d7dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d109      	bne.n	800d7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d7e2:	4b67      	ldr	r3, [pc, #412]	; (800d980 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	08db      	lsrs	r3, r3, #3
 800d7e8:	f003 0303 	and.w	r3, r3, #3
 800d7ec:	4a65      	ldr	r2, [pc, #404]	; (800d984 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800d7ee:	fa22 f303 	lsr.w	r3, r2, r3
 800d7f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d7f4:	e01e      	b.n	800d834 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d7f6:	4b62      	ldr	r3, [pc, #392]	; (800d980 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d802:	d106      	bne.n	800d812 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800d804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d806:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d80a:	d102      	bne.n	800d812 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800d80c:	4b5e      	ldr	r3, [pc, #376]	; (800d988 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800d80e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d810:	e010      	b.n	800d834 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d812:	4b5b      	ldr	r3, [pc, #364]	; (800d980 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d81a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d81e:	d106      	bne.n	800d82e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800d820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d822:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d826:	d102      	bne.n	800d82e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800d828:	4b58      	ldr	r3, [pc, #352]	; (800d98c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800d82a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d82c:	e002      	b.n	800d834 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800d82e:	2300      	movs	r3, #0
 800d830:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800d832:	e2e7      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800d834:	e2e6      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800d836:	4b56      	ldr	r3, [pc, #344]	; (800d990 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800d838:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d83a:	e2e3      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800d83c:	2300      	movs	r3, #0
 800d83e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d840:	e2e0      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d848:	f040 80a7 	bne.w	800d99a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800d84c:	4b4c      	ldr	r3, [pc, #304]	; (800d980 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800d84e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d850:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800d854:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800d856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d858:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d85c:	d055      	beq.n	800d90a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800d85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d860:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d864:	f200 8096 	bhi.w	800d994 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800d868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d86a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800d86e:	f000 8084 	beq.w	800d97a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800d872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d874:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800d878:	f200 808c 	bhi.w	800d994 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800d87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d87e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d882:	d030      	beq.n	800d8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800d884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d886:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d88a:	f200 8083 	bhi.w	800d994 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800d88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d890:	2b00      	cmp	r3, #0
 800d892:	d004      	beq.n	800d89e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800d894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d896:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d89a:	d012      	beq.n	800d8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800d89c:	e07a      	b.n	800d994 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d89e:	4b38      	ldr	r3, [pc, #224]	; (800d980 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d8a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d8aa:	d107      	bne.n	800d8bc <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d8ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	f000 fd73 	bl	800e39c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8b8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d8ba:	e2a3      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800d8bc:	2300      	movs	r3, #0
 800d8be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d8c0:	e2a0      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d8c2:	4b2f      	ldr	r3, [pc, #188]	; (800d980 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d8ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d8ce:	d107      	bne.n	800d8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d8d0:	f107 0318 	add.w	r3, r7, #24
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f000 fab9 	bl	800de4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d8da:	69bb      	ldr	r3, [r7, #24]
 800d8dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800d8de:	e291      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d8e4:	e28e      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d8e6:	4b26      	ldr	r3, [pc, #152]	; (800d980 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d8ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d8f2:	d107      	bne.n	800d904 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d8f4:	f107 030c 	add.w	r3, r7, #12
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f000 fbfb 	bl	800e0f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d902:	e27f      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800d904:	2300      	movs	r3, #0
 800d906:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d908:	e27c      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800d90a:	4b1d      	ldr	r3, [pc, #116]	; (800d980 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800d90c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d90e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d912:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d914:	4b1a      	ldr	r3, [pc, #104]	; (800d980 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	f003 0304 	and.w	r3, r3, #4
 800d91c:	2b04      	cmp	r3, #4
 800d91e:	d10c      	bne.n	800d93a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800d920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d922:	2b00      	cmp	r3, #0
 800d924:	d109      	bne.n	800d93a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d926:	4b16      	ldr	r3, [pc, #88]	; (800d980 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	08db      	lsrs	r3, r3, #3
 800d92c:	f003 0303 	and.w	r3, r3, #3
 800d930:	4a14      	ldr	r2, [pc, #80]	; (800d984 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800d932:	fa22 f303 	lsr.w	r3, r2, r3
 800d936:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d938:	e01e      	b.n	800d978 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d93a:	4b11      	ldr	r3, [pc, #68]	; (800d980 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d946:	d106      	bne.n	800d956 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800d948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d94a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d94e:	d102      	bne.n	800d956 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800d950:	4b0d      	ldr	r3, [pc, #52]	; (800d988 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800d952:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d954:	e010      	b.n	800d978 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d956:	4b0a      	ldr	r3, [pc, #40]	; (800d980 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d95e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d962:	d106      	bne.n	800d972 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800d964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d966:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d96a:	d102      	bne.n	800d972 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800d96c:	4b07      	ldr	r3, [pc, #28]	; (800d98c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800d96e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d970:	e002      	b.n	800d978 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800d972:	2300      	movs	r3, #0
 800d974:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800d976:	e245      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800d978:	e244      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800d97a:	4b05      	ldr	r3, [pc, #20]	; (800d990 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800d97c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d97e:	e241      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800d980:	58024400 	.word	0x58024400
 800d984:	03d09000 	.word	0x03d09000
 800d988:	003d0900 	.word	0x003d0900
 800d98c:	01312d00 	.word	0x01312d00
 800d990:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 800d994:	2300      	movs	r3, #0
 800d996:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d998:	e234      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d9a0:	f040 809c 	bne.w	800dadc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800d9a4:	4b9b      	ldr	r3, [pc, #620]	; (800dc14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800d9a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9a8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800d9ac:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800d9ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d9b4:	d054      	beq.n	800da60 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800d9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d9bc:	f200 808b 	bhi.w	800dad6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800d9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d9c6:	f000 8083 	beq.w	800dad0 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800d9ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d9d0:	f200 8081 	bhi.w	800dad6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800d9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d9da:	d02f      	beq.n	800da3c <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800d9dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d9e2:	d878      	bhi.n	800dad6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800d9e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d004      	beq.n	800d9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800d9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d9f0:	d012      	beq.n	800da18 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800d9f2:	e070      	b.n	800dad6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d9f4:	4b87      	ldr	r3, [pc, #540]	; (800dc14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d9fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800da00:	d107      	bne.n	800da12 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800da02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800da06:	4618      	mov	r0, r3
 800da08:	f000 fcc8 	bl	800e39c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800da0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da0e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800da10:	e1f8      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800da12:	2300      	movs	r3, #0
 800da14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800da16:	e1f5      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800da18:	4b7e      	ldr	r3, [pc, #504]	; (800dc14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800da20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800da24:	d107      	bne.n	800da36 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800da26:	f107 0318 	add.w	r3, r7, #24
 800da2a:	4618      	mov	r0, r3
 800da2c:	f000 fa0e 	bl	800de4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800da30:	69bb      	ldr	r3, [r7, #24]
 800da32:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800da34:	e1e6      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800da36:	2300      	movs	r3, #0
 800da38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800da3a:	e1e3      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800da3c:	4b75      	ldr	r3, [pc, #468]	; (800dc14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800da44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800da48:	d107      	bne.n	800da5a <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800da4a:	f107 030c 	add.w	r3, r7, #12
 800da4e:	4618      	mov	r0, r3
 800da50:	f000 fb50 	bl	800e0f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800da58:	e1d4      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800da5a:	2300      	movs	r3, #0
 800da5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800da5e:	e1d1      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800da60:	4b6c      	ldr	r3, [pc, #432]	; (800dc14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800da62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800da68:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800da6a:	4b6a      	ldr	r3, [pc, #424]	; (800dc14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	f003 0304 	and.w	r3, r3, #4
 800da72:	2b04      	cmp	r3, #4
 800da74:	d10c      	bne.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800da76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d109      	bne.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800da7c:	4b65      	ldr	r3, [pc, #404]	; (800dc14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	08db      	lsrs	r3, r3, #3
 800da82:	f003 0303 	and.w	r3, r3, #3
 800da86:	4a64      	ldr	r2, [pc, #400]	; (800dc18 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800da88:	fa22 f303 	lsr.w	r3, r2, r3
 800da8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da8e:	e01e      	b.n	800dace <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800da90:	4b60      	ldr	r3, [pc, #384]	; (800dc14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da9c:	d106      	bne.n	800daac <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800da9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daa0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800daa4:	d102      	bne.n	800daac <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800daa6:	4b5d      	ldr	r3, [pc, #372]	; (800dc1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800daa8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800daaa:	e010      	b.n	800dace <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800daac:	4b59      	ldr	r3, [pc, #356]	; (800dc14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dab4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dab8:	d106      	bne.n	800dac8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800daba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dabc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dac0:	d102      	bne.n	800dac8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800dac2:	4b57      	ldr	r3, [pc, #348]	; (800dc20 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800dac4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dac6:	e002      	b.n	800dace <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800dac8:	2300      	movs	r3, #0
 800daca:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800dacc:	e19a      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800dace:	e199      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800dad0:	4b54      	ldr	r3, [pc, #336]	; (800dc24 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800dad2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800dad4:	e196      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800dad6:	2300      	movs	r3, #0
 800dad8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800dada:	e193      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800dae2:	d173      	bne.n	800dbcc <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800dae4:	4b4b      	ldr	r3, [pc, #300]	; (800dc14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800dae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dae8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800daec:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800daee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800daf4:	d02f      	beq.n	800db56 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800daf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dafc:	d863      	bhi.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800dafe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db00:	2b00      	cmp	r3, #0
 800db02:	d004      	beq.n	800db0e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800db04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db0a:	d012      	beq.n	800db32 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800db0c:	e05b      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800db0e:	4b41      	ldr	r3, [pc, #260]	; (800dc14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800db16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800db1a:	d107      	bne.n	800db2c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800db1c:	f107 0318 	add.w	r3, r7, #24
 800db20:	4618      	mov	r0, r3
 800db22:	f000 f993 	bl	800de4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800db26:	69bb      	ldr	r3, [r7, #24]
 800db28:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800db2a:	e16b      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800db2c:	2300      	movs	r3, #0
 800db2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800db30:	e168      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800db32:	4b38      	ldr	r3, [pc, #224]	; (800dc14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800db3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800db3e:	d107      	bne.n	800db50 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800db40:	f107 030c 	add.w	r3, r7, #12
 800db44:	4618      	mov	r0, r3
 800db46:	f000 fad5 	bl	800e0f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800db4e:	e159      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800db50:	2300      	movs	r3, #0
 800db52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800db54:	e156      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800db56:	4b2f      	ldr	r3, [pc, #188]	; (800dc14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800db58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800db5e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800db60:	4b2c      	ldr	r3, [pc, #176]	; (800dc14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	f003 0304 	and.w	r3, r3, #4
 800db68:	2b04      	cmp	r3, #4
 800db6a:	d10c      	bne.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 800db6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d109      	bne.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800db72:	4b28      	ldr	r3, [pc, #160]	; (800dc14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	08db      	lsrs	r3, r3, #3
 800db78:	f003 0303 	and.w	r3, r3, #3
 800db7c:	4a26      	ldr	r2, [pc, #152]	; (800dc18 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800db7e:	fa22 f303 	lsr.w	r3, r2, r3
 800db82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800db84:	e01e      	b.n	800dbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800db86:	4b23      	ldr	r3, [pc, #140]	; (800dc14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db92:	d106      	bne.n	800dba2 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800db94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800db9a:	d102      	bne.n	800dba2 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800db9c:	4b1f      	ldr	r3, [pc, #124]	; (800dc1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800db9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dba0:	e010      	b.n	800dbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800dba2:	4b1c      	ldr	r3, [pc, #112]	; (800dc14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dbaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dbae:	d106      	bne.n	800dbbe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800dbb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dbb6:	d102      	bne.n	800dbbe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800dbb8:	4b19      	ldr	r3, [pc, #100]	; (800dc20 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800dbba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dbbc:	e002      	b.n	800dbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800dbc2:	e11f      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800dbc4:	e11e      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800dbca:	e11b      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dbd2:	d13e      	bne.n	800dc52 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800dbd4:	4b0f      	ldr	r3, [pc, #60]	; (800dc14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800dbd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dbdc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800dbde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d004      	beq.n	800dbee <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800dbe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dbea:	d01d      	beq.n	800dc28 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800dbec:	e02e      	b.n	800dc4c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800dbee:	4b09      	ldr	r3, [pc, #36]	; (800dc14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dbf6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dbfa:	d107      	bne.n	800dc0c <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dbfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dc00:	4618      	mov	r0, r3
 800dc02:	f000 fbcb 	bl	800e39c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800dc06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc08:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800dc0a:	e0fb      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800dc10:	e0f8      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800dc12:	bf00      	nop
 800dc14:	58024400 	.word	0x58024400
 800dc18:	03d09000 	.word	0x03d09000
 800dc1c:	003d0900 	.word	0x003d0900
 800dc20:	01312d00 	.word	0x01312d00
 800dc24:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dc28:	4b79      	ldr	r3, [pc, #484]	; (800de10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dc30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dc34:	d107      	bne.n	800dc46 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dc36:	f107 0318 	add.w	r3, r7, #24
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f000 f906 	bl	800de4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800dc40:	6a3b      	ldr	r3, [r7, #32]
 800dc42:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800dc44:	e0de      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800dc46:	2300      	movs	r3, #0
 800dc48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800dc4a:	e0db      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800dc50:	e0d8      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dc58:	f040 8085 	bne.w	800dd66 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800dc5c:	4b6c      	ldr	r3, [pc, #432]	; (800de10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dc5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc60:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800dc64:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800dc66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dc6c:	d06b      	beq.n	800dd46 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800dc6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dc74:	d874      	bhi.n	800dd60 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800dc76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc7c:	d056      	beq.n	800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800dc7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc84:	d86c      	bhi.n	800dd60 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800dc86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc88:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800dc8c:	d03b      	beq.n	800dd06 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800dc8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc90:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800dc94:	d864      	bhi.n	800dd60 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800dc96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dc9c:	d021      	beq.n	800dce2 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800dc9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dca0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dca4:	d85c      	bhi.n	800dd60 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800dca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d004      	beq.n	800dcb6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800dcac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dcb2:	d004      	beq.n	800dcbe <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800dcb4:	e054      	b.n	800dd60 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800dcb6:	f000 f8b3 	bl	800de20 <HAL_RCCEx_GetD3PCLK1Freq>
 800dcba:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800dcbc:	e0a2      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dcbe:	4b54      	ldr	r3, [pc, #336]	; (800de10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dcc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dcca:	d107      	bne.n	800dcdc <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dccc:	f107 0318 	add.w	r3, r7, #24
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f000 f8bb 	bl	800de4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800dcd6:	69fb      	ldr	r3, [r7, #28]
 800dcd8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800dcda:	e093      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800dcdc:	2300      	movs	r3, #0
 800dcde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800dce0:	e090      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800dce2:	4b4b      	ldr	r3, [pc, #300]	; (800de10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dcea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dcee:	d107      	bne.n	800dd00 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dcf0:	f107 030c 	add.w	r3, r7, #12
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f000 f9fd 	bl	800e0f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800dcfa:	693b      	ldr	r3, [r7, #16]
 800dcfc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800dcfe:	e081      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800dd00:	2300      	movs	r3, #0
 800dd02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800dd04:	e07e      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800dd06:	4b42      	ldr	r3, [pc, #264]	; (800de10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	f003 0304 	and.w	r3, r3, #4
 800dd0e:	2b04      	cmp	r3, #4
 800dd10:	d109      	bne.n	800dd26 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800dd12:	4b3f      	ldr	r3, [pc, #252]	; (800de10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	08db      	lsrs	r3, r3, #3
 800dd18:	f003 0303 	and.w	r3, r3, #3
 800dd1c:	4a3d      	ldr	r2, [pc, #244]	; (800de14 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800dd1e:	fa22 f303 	lsr.w	r3, r2, r3
 800dd22:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800dd24:	e06e      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800dd26:	2300      	movs	r3, #0
 800dd28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800dd2a:	e06b      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800dd2c:	4b38      	ldr	r3, [pc, #224]	; (800de10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd38:	d102      	bne.n	800dd40 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800dd3a:	4b37      	ldr	r3, [pc, #220]	; (800de18 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800dd3c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800dd3e:	e061      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800dd40:	2300      	movs	r3, #0
 800dd42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800dd44:	e05e      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800dd46:	4b32      	ldr	r3, [pc, #200]	; (800de10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dd4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dd52:	d102      	bne.n	800dd5a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 800dd54:	4b31      	ldr	r3, [pc, #196]	; (800de1c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800dd56:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800dd58:	e054      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800dd5e:	e051      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800dd60:	2300      	movs	r3, #0
 800dd62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800dd64:	e04e      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dd6c:	d148      	bne.n	800de00 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800dd6e:	4b28      	ldr	r3, [pc, #160]	; (800de10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dd70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800dd76:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800dd78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dd7e:	d02a      	beq.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800dd80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dd86:	d838      	bhi.n	800ddfa <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 800dd88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d004      	beq.n	800dd98 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800dd8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dd94:	d00d      	beq.n	800ddb2 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800dd96:	e030      	b.n	800ddfa <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800dd98:	4b1d      	ldr	r3, [pc, #116]	; (800de10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dda0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dda4:	d102      	bne.n	800ddac <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 800dda6:	4b1d      	ldr	r3, [pc, #116]	; (800de1c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800dda8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ddaa:	e02b      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ddac:	2300      	movs	r3, #0
 800ddae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ddb0:	e028      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ddb2:	4b17      	ldr	r3, [pc, #92]	; (800de10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ddba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ddbe:	d107      	bne.n	800ddd0 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ddc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	f000 fae9 	bl	800e39c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ddca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddcc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ddce:	e019      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ddd4:	e016      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ddd6:	4b0e      	ldr	r3, [pc, #56]	; (800de10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ddde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dde2:	d107      	bne.n	800ddf4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dde4:	f107 0318 	add.w	r3, r7, #24
 800dde8:	4618      	mov	r0, r3
 800ddea:	f000 f82f 	bl	800de4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ddee:	69fb      	ldr	r3, [r7, #28]
 800ddf0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ddf2:	e007      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ddf8:	e004      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ddfe:	e001      	b.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 800de00:	2300      	movs	r3, #0
 800de02:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800de04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800de06:	4618      	mov	r0, r3
 800de08:	3740      	adds	r7, #64	; 0x40
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bd80      	pop	{r7, pc}
 800de0e:	bf00      	nop
 800de10:	58024400 	.word	0x58024400
 800de14:	03d09000 	.word	0x03d09000
 800de18:	003d0900 	.word	0x003d0900
 800de1c:	01312d00 	.word	0x01312d00

0800de20 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800de24:	f7fe fb88 	bl	800c538 <HAL_RCC_GetHCLKFreq>
 800de28:	4602      	mov	r2, r0
 800de2a:	4b06      	ldr	r3, [pc, #24]	; (800de44 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800de2c:	6a1b      	ldr	r3, [r3, #32]
 800de2e:	091b      	lsrs	r3, r3, #4
 800de30:	f003 0307 	and.w	r3, r3, #7
 800de34:	4904      	ldr	r1, [pc, #16]	; (800de48 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800de36:	5ccb      	ldrb	r3, [r1, r3]
 800de38:	f003 031f 	and.w	r3, r3, #31
 800de3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800de40:	4618      	mov	r0, r3
 800de42:	bd80      	pop	{r7, pc}
 800de44:	58024400 	.word	0x58024400
 800de48:	0801ac8c 	.word	0x0801ac8c

0800de4c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800de4c:	b480      	push	{r7}
 800de4e:	b089      	sub	sp, #36	; 0x24
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800de54:	4ba1      	ldr	r3, [pc, #644]	; (800e0dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800de56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de58:	f003 0303 	and.w	r3, r3, #3
 800de5c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800de5e:	4b9f      	ldr	r3, [pc, #636]	; (800e0dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800de60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de62:	0b1b      	lsrs	r3, r3, #12
 800de64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800de68:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800de6a:	4b9c      	ldr	r3, [pc, #624]	; (800e0dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800de6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de6e:	091b      	lsrs	r3, r3, #4
 800de70:	f003 0301 	and.w	r3, r3, #1
 800de74:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800de76:	4b99      	ldr	r3, [pc, #612]	; (800e0dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800de78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de7a:	08db      	lsrs	r3, r3, #3
 800de7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800de80:	693a      	ldr	r2, [r7, #16]
 800de82:	fb02 f303 	mul.w	r3, r2, r3
 800de86:	ee07 3a90 	vmov	s15, r3
 800de8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800de92:	697b      	ldr	r3, [r7, #20]
 800de94:	2b00      	cmp	r3, #0
 800de96:	f000 8111 	beq.w	800e0bc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800de9a:	69bb      	ldr	r3, [r7, #24]
 800de9c:	2b02      	cmp	r3, #2
 800de9e:	f000 8083 	beq.w	800dfa8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800dea2:	69bb      	ldr	r3, [r7, #24]
 800dea4:	2b02      	cmp	r3, #2
 800dea6:	f200 80a1 	bhi.w	800dfec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800deaa:	69bb      	ldr	r3, [r7, #24]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d003      	beq.n	800deb8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800deb0:	69bb      	ldr	r3, [r7, #24]
 800deb2:	2b01      	cmp	r3, #1
 800deb4:	d056      	beq.n	800df64 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800deb6:	e099      	b.n	800dfec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800deb8:	4b88      	ldr	r3, [pc, #544]	; (800e0dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	f003 0320 	and.w	r3, r3, #32
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d02d      	beq.n	800df20 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800dec4:	4b85      	ldr	r3, [pc, #532]	; (800e0dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	08db      	lsrs	r3, r3, #3
 800deca:	f003 0303 	and.w	r3, r3, #3
 800dece:	4a84      	ldr	r2, [pc, #528]	; (800e0e0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ded0:	fa22 f303 	lsr.w	r3, r2, r3
 800ded4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	ee07 3a90 	vmov	s15, r3
 800dedc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	ee07 3a90 	vmov	s15, r3
 800dee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800deea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800deee:	4b7b      	ldr	r3, [pc, #492]	; (800e0dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800def0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800def2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800def6:	ee07 3a90 	vmov	s15, r3
 800defa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800defe:	ed97 6a03 	vldr	s12, [r7, #12]
 800df02:	eddf 5a78 	vldr	s11, [pc, #480]	; 800e0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800df06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800df12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df1a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800df1e:	e087      	b.n	800e030 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800df20:	697b      	ldr	r3, [r7, #20]
 800df22:	ee07 3a90 	vmov	s15, r3
 800df26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df2a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800e0e8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800df2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df32:	4b6a      	ldr	r3, [pc, #424]	; (800e0dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800df34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df3a:	ee07 3a90 	vmov	s15, r3
 800df3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df42:	ed97 6a03 	vldr	s12, [r7, #12]
 800df46:	eddf 5a67 	vldr	s11, [pc, #412]	; 800e0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800df4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800df56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800df62:	e065      	b.n	800e030 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800df64:	697b      	ldr	r3, [r7, #20]
 800df66:	ee07 3a90 	vmov	s15, r3
 800df6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df6e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800e0ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800df72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df76:	4b59      	ldr	r3, [pc, #356]	; (800e0dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800df78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df7e:	ee07 3a90 	vmov	s15, r3
 800df82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df86:	ed97 6a03 	vldr	s12, [r7, #12]
 800df8a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800e0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800df8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800df9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfa2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800dfa6:	e043      	b.n	800e030 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800dfa8:	697b      	ldr	r3, [r7, #20]
 800dfaa:	ee07 3a90 	vmov	s15, r3
 800dfae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dfb2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800e0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800dfb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dfba:	4b48      	ldr	r3, [pc, #288]	; (800e0dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dfbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dfc2:	ee07 3a90 	vmov	s15, r3
 800dfc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dfca:	ed97 6a03 	vldr	s12, [r7, #12]
 800dfce:	eddf 5a45 	vldr	s11, [pc, #276]	; 800e0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800dfd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dfd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dfda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dfde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dfe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfe6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800dfea:	e021      	b.n	800e030 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800dfec:	697b      	ldr	r3, [r7, #20]
 800dfee:	ee07 3a90 	vmov	s15, r3
 800dff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dff6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800e0ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800dffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dffe:	4b37      	ldr	r3, [pc, #220]	; (800e0dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e006:	ee07 3a90 	vmov	s15, r3
 800e00a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e00e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e012:	eddf 5a34 	vldr	s11, [pc, #208]	; 800e0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e01a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e01e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e02a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e02e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800e030:	4b2a      	ldr	r3, [pc, #168]	; (800e0dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e034:	0a5b      	lsrs	r3, r3, #9
 800e036:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e03a:	ee07 3a90 	vmov	s15, r3
 800e03e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e042:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e046:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e04a:	edd7 6a07 	vldr	s13, [r7, #28]
 800e04e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e052:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e056:	ee17 2a90 	vmov	r2, s15
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800e05e:	4b1f      	ldr	r3, [pc, #124]	; (800e0dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e062:	0c1b      	lsrs	r3, r3, #16
 800e064:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e068:	ee07 3a90 	vmov	s15, r3
 800e06c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e070:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e074:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e078:	edd7 6a07 	vldr	s13, [r7, #28]
 800e07c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e080:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e084:	ee17 2a90 	vmov	r2, s15
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800e08c:	4b13      	ldr	r3, [pc, #76]	; (800e0dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e08e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e090:	0e1b      	lsrs	r3, r3, #24
 800e092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e096:	ee07 3a90 	vmov	s15, r3
 800e09a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e09e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e0a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e0a6:	edd7 6a07 	vldr	s13, [r7, #28]
 800e0aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e0ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e0b2:	ee17 2a90 	vmov	r2, s15
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800e0ba:	e008      	b.n	800e0ce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	2200      	movs	r2, #0
 800e0c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	609a      	str	r2, [r3, #8]
}
 800e0ce:	bf00      	nop
 800e0d0:	3724      	adds	r7, #36	; 0x24
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d8:	4770      	bx	lr
 800e0da:	bf00      	nop
 800e0dc:	58024400 	.word	0x58024400
 800e0e0:	03d09000 	.word	0x03d09000
 800e0e4:	46000000 	.word	0x46000000
 800e0e8:	4c742400 	.word	0x4c742400
 800e0ec:	4a742400 	.word	0x4a742400
 800e0f0:	4b989680 	.word	0x4b989680

0800e0f4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800e0f4:	b480      	push	{r7}
 800e0f6:	b089      	sub	sp, #36	; 0x24
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e0fc:	4ba1      	ldr	r3, [pc, #644]	; (800e384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e0fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e100:	f003 0303 	and.w	r3, r3, #3
 800e104:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800e106:	4b9f      	ldr	r3, [pc, #636]	; (800e384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e10a:	0d1b      	lsrs	r3, r3, #20
 800e10c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e110:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800e112:	4b9c      	ldr	r3, [pc, #624]	; (800e384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e116:	0a1b      	lsrs	r3, r3, #8
 800e118:	f003 0301 	and.w	r3, r3, #1
 800e11c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800e11e:	4b99      	ldr	r3, [pc, #612]	; (800e384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e122:	08db      	lsrs	r3, r3, #3
 800e124:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e128:	693a      	ldr	r2, [r7, #16]
 800e12a:	fb02 f303 	mul.w	r3, r2, r3
 800e12e:	ee07 3a90 	vmov	s15, r3
 800e132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e136:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	f000 8111 	beq.w	800e364 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800e142:	69bb      	ldr	r3, [r7, #24]
 800e144:	2b02      	cmp	r3, #2
 800e146:	f000 8083 	beq.w	800e250 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800e14a:	69bb      	ldr	r3, [r7, #24]
 800e14c:	2b02      	cmp	r3, #2
 800e14e:	f200 80a1 	bhi.w	800e294 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800e152:	69bb      	ldr	r3, [r7, #24]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d003      	beq.n	800e160 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800e158:	69bb      	ldr	r3, [r7, #24]
 800e15a:	2b01      	cmp	r3, #1
 800e15c:	d056      	beq.n	800e20c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800e15e:	e099      	b.n	800e294 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e160:	4b88      	ldr	r3, [pc, #544]	; (800e384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	f003 0320 	and.w	r3, r3, #32
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d02d      	beq.n	800e1c8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e16c:	4b85      	ldr	r3, [pc, #532]	; (800e384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	08db      	lsrs	r3, r3, #3
 800e172:	f003 0303 	and.w	r3, r3, #3
 800e176:	4a84      	ldr	r2, [pc, #528]	; (800e388 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800e178:	fa22 f303 	lsr.w	r3, r2, r3
 800e17c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800e17e:	68bb      	ldr	r3, [r7, #8]
 800e180:	ee07 3a90 	vmov	s15, r3
 800e184:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e188:	697b      	ldr	r3, [r7, #20]
 800e18a:	ee07 3a90 	vmov	s15, r3
 800e18e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e196:	4b7b      	ldr	r3, [pc, #492]	; (800e384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e19a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e19e:	ee07 3a90 	vmov	s15, r3
 800e1a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e1a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800e1aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800e38c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e1ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e1b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e1b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e1ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e1be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e1c2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800e1c6:	e087      	b.n	800e2d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	ee07 3a90 	vmov	s15, r3
 800e1ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e1d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800e390 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800e1d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e1da:	4b6a      	ldr	r3, [pc, #424]	; (800e384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e1dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e1e2:	ee07 3a90 	vmov	s15, r3
 800e1e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e1ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800e1ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800e38c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e1f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e1f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e1fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e1fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e202:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e206:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e20a:	e065      	b.n	800e2d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800e20c:	697b      	ldr	r3, [r7, #20]
 800e20e:	ee07 3a90 	vmov	s15, r3
 800e212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e216:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800e394 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e21a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e21e:	4b59      	ldr	r3, [pc, #356]	; (800e384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e226:	ee07 3a90 	vmov	s15, r3
 800e22a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e22e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e232:	eddf 5a56 	vldr	s11, [pc, #344]	; 800e38c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e23a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e23e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e24a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e24e:	e043      	b.n	800e2d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800e250:	697b      	ldr	r3, [r7, #20]
 800e252:	ee07 3a90 	vmov	s15, r3
 800e256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e25a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800e398 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800e25e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e262:	4b48      	ldr	r3, [pc, #288]	; (800e384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e26a:	ee07 3a90 	vmov	s15, r3
 800e26e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e272:	ed97 6a03 	vldr	s12, [r7, #12]
 800e276:	eddf 5a45 	vldr	s11, [pc, #276]	; 800e38c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e27a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e27e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e28a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e28e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e292:	e021      	b.n	800e2d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800e294:	697b      	ldr	r3, [r7, #20]
 800e296:	ee07 3a90 	vmov	s15, r3
 800e29a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e29e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800e394 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e2a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e2a6:	4b37      	ldr	r3, [pc, #220]	; (800e384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e2a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2ae:	ee07 3a90 	vmov	s15, r3
 800e2b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e2b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800e2ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800e38c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e2be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e2c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e2c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e2ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e2ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e2d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e2d6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800e2d8:	4b2a      	ldr	r3, [pc, #168]	; (800e384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e2da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2dc:	0a5b      	lsrs	r3, r3, #9
 800e2de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e2e2:	ee07 3a90 	vmov	s15, r3
 800e2e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e2ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e2ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e2f2:	edd7 6a07 	vldr	s13, [r7, #28]
 800e2f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e2fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e2fe:	ee17 2a90 	vmov	r2, s15
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800e306:	4b1f      	ldr	r3, [pc, #124]	; (800e384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e30a:	0c1b      	lsrs	r3, r3, #16
 800e30c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e310:	ee07 3a90 	vmov	s15, r3
 800e314:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e318:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e31c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e320:	edd7 6a07 	vldr	s13, [r7, #28]
 800e324:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e328:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e32c:	ee17 2a90 	vmov	r2, s15
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800e334:	4b13      	ldr	r3, [pc, #76]	; (800e384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e338:	0e1b      	lsrs	r3, r3, #24
 800e33a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e33e:	ee07 3a90 	vmov	s15, r3
 800e342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e346:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e34a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e34e:	edd7 6a07 	vldr	s13, [r7, #28]
 800e352:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e356:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e35a:	ee17 2a90 	vmov	r2, s15
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800e362:	e008      	b.n	800e376 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	2200      	movs	r2, #0
 800e368:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	2200      	movs	r2, #0
 800e36e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	2200      	movs	r2, #0
 800e374:	609a      	str	r2, [r3, #8]
}
 800e376:	bf00      	nop
 800e378:	3724      	adds	r7, #36	; 0x24
 800e37a:	46bd      	mov	sp, r7
 800e37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e380:	4770      	bx	lr
 800e382:	bf00      	nop
 800e384:	58024400 	.word	0x58024400
 800e388:	03d09000 	.word	0x03d09000
 800e38c:	46000000 	.word	0x46000000
 800e390:	4c742400 	.word	0x4c742400
 800e394:	4a742400 	.word	0x4a742400
 800e398:	4b989680 	.word	0x4b989680

0800e39c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800e39c:	b480      	push	{r7}
 800e39e:	b089      	sub	sp, #36	; 0x24
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e3a4:	4ba0      	ldr	r3, [pc, #640]	; (800e628 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e3a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3a8:	f003 0303 	and.w	r3, r3, #3
 800e3ac:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800e3ae:	4b9e      	ldr	r3, [pc, #632]	; (800e628 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e3b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3b2:	091b      	lsrs	r3, r3, #4
 800e3b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e3b8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800e3ba:	4b9b      	ldr	r3, [pc, #620]	; (800e628 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e3bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3be:	f003 0301 	and.w	r3, r3, #1
 800e3c2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800e3c4:	4b98      	ldr	r3, [pc, #608]	; (800e628 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e3c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3c8:	08db      	lsrs	r3, r3, #3
 800e3ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e3ce:	693a      	ldr	r2, [r7, #16]
 800e3d0:	fb02 f303 	mul.w	r3, r2, r3
 800e3d4:	ee07 3a90 	vmov	s15, r3
 800e3d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e3dc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800e3e0:	697b      	ldr	r3, [r7, #20]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	f000 8111 	beq.w	800e60a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800e3e8:	69bb      	ldr	r3, [r7, #24]
 800e3ea:	2b02      	cmp	r3, #2
 800e3ec:	f000 8083 	beq.w	800e4f6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800e3f0:	69bb      	ldr	r3, [r7, #24]
 800e3f2:	2b02      	cmp	r3, #2
 800e3f4:	f200 80a1 	bhi.w	800e53a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800e3f8:	69bb      	ldr	r3, [r7, #24]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d003      	beq.n	800e406 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800e3fe:	69bb      	ldr	r3, [r7, #24]
 800e400:	2b01      	cmp	r3, #1
 800e402:	d056      	beq.n	800e4b2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800e404:	e099      	b.n	800e53a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e406:	4b88      	ldr	r3, [pc, #544]	; (800e628 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	f003 0320 	and.w	r3, r3, #32
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d02d      	beq.n	800e46e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e412:	4b85      	ldr	r3, [pc, #532]	; (800e628 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	08db      	lsrs	r3, r3, #3
 800e418:	f003 0303 	and.w	r3, r3, #3
 800e41c:	4a83      	ldr	r2, [pc, #524]	; (800e62c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800e41e:	fa22 f303 	lsr.w	r3, r2, r3
 800e422:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e424:	68bb      	ldr	r3, [r7, #8]
 800e426:	ee07 3a90 	vmov	s15, r3
 800e42a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e42e:	697b      	ldr	r3, [r7, #20]
 800e430:	ee07 3a90 	vmov	s15, r3
 800e434:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e438:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e43c:	4b7a      	ldr	r3, [pc, #488]	; (800e628 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e43e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e444:	ee07 3a90 	vmov	s15, r3
 800e448:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e44c:	ed97 6a03 	vldr	s12, [r7, #12]
 800e450:	eddf 5a77 	vldr	s11, [pc, #476]	; 800e630 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e454:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e458:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e45c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e460:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e464:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e468:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800e46c:	e087      	b.n	800e57e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e46e:	697b      	ldr	r3, [r7, #20]
 800e470:	ee07 3a90 	vmov	s15, r3
 800e474:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e478:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800e634 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800e47c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e480:	4b69      	ldr	r3, [pc, #420]	; (800e628 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e488:	ee07 3a90 	vmov	s15, r3
 800e48c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e490:	ed97 6a03 	vldr	s12, [r7, #12]
 800e494:	eddf 5a66 	vldr	s11, [pc, #408]	; 800e630 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e498:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e49c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e4a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e4a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e4a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e4ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e4b0:	e065      	b.n	800e57e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e4b2:	697b      	ldr	r3, [r7, #20]
 800e4b4:	ee07 3a90 	vmov	s15, r3
 800e4b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e4bc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800e638 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800e4c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e4c4:	4b58      	ldr	r3, [pc, #352]	; (800e628 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e4c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e4cc:	ee07 3a90 	vmov	s15, r3
 800e4d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e4d4:	ed97 6a03 	vldr	s12, [r7, #12]
 800e4d8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800e630 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e4dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e4e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e4e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e4e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e4ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e4f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e4f4:	e043      	b.n	800e57e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e4f6:	697b      	ldr	r3, [r7, #20]
 800e4f8:	ee07 3a90 	vmov	s15, r3
 800e4fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e500:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800e63c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800e504:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e508:	4b47      	ldr	r3, [pc, #284]	; (800e628 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e50a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e50c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e510:	ee07 3a90 	vmov	s15, r3
 800e514:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e518:	ed97 6a03 	vldr	s12, [r7, #12]
 800e51c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800e630 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e520:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e524:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e528:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e52c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e530:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e534:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e538:	e021      	b.n	800e57e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e53a:	697b      	ldr	r3, [r7, #20]
 800e53c:	ee07 3a90 	vmov	s15, r3
 800e540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e544:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800e634 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800e548:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e54c:	4b36      	ldr	r3, [pc, #216]	; (800e628 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e54e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e554:	ee07 3a90 	vmov	s15, r3
 800e558:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e55c:	ed97 6a03 	vldr	s12, [r7, #12]
 800e560:	eddf 5a33 	vldr	s11, [pc, #204]	; 800e630 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e564:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e568:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e56c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e570:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e574:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e578:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e57c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800e57e:	4b2a      	ldr	r3, [pc, #168]	; (800e628 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e582:	0a5b      	lsrs	r3, r3, #9
 800e584:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e588:	ee07 3a90 	vmov	s15, r3
 800e58c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e590:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e594:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e598:	edd7 6a07 	vldr	s13, [r7, #28]
 800e59c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e5a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e5a4:	ee17 2a90 	vmov	r2, s15
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800e5ac:	4b1e      	ldr	r3, [pc, #120]	; (800e628 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e5ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5b0:	0c1b      	lsrs	r3, r3, #16
 800e5b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e5b6:	ee07 3a90 	vmov	s15, r3
 800e5ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e5c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e5c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800e5ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e5ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e5d2:	ee17 2a90 	vmov	r2, s15
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800e5da:	4b13      	ldr	r3, [pc, #76]	; (800e628 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e5dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5de:	0e1b      	lsrs	r3, r3, #24
 800e5e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e5e4:	ee07 3a90 	vmov	s15, r3
 800e5e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e5f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e5f4:	edd7 6a07 	vldr	s13, [r7, #28]
 800e5f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e5fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e600:	ee17 2a90 	vmov	r2, s15
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800e608:	e008      	b.n	800e61c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	2200      	movs	r2, #0
 800e60e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	2200      	movs	r2, #0
 800e614:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	2200      	movs	r2, #0
 800e61a:	609a      	str	r2, [r3, #8]
}
 800e61c:	bf00      	nop
 800e61e:	3724      	adds	r7, #36	; 0x24
 800e620:	46bd      	mov	sp, r7
 800e622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e626:	4770      	bx	lr
 800e628:	58024400 	.word	0x58024400
 800e62c:	03d09000 	.word	0x03d09000
 800e630:	46000000 	.word	0x46000000
 800e634:	4c742400 	.word	0x4c742400
 800e638:	4a742400 	.word	0x4a742400
 800e63c:	4b989680 	.word	0x4b989680

0800e640 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b084      	sub	sp, #16
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
 800e648:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e64a:	2300      	movs	r3, #0
 800e64c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e64e:	4b53      	ldr	r3, [pc, #332]	; (800e79c <RCCEx_PLL2_Config+0x15c>)
 800e650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e652:	f003 0303 	and.w	r3, r3, #3
 800e656:	2b03      	cmp	r3, #3
 800e658:	d101      	bne.n	800e65e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800e65a:	2301      	movs	r3, #1
 800e65c:	e099      	b.n	800e792 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800e65e:	4b4f      	ldr	r3, [pc, #316]	; (800e79c <RCCEx_PLL2_Config+0x15c>)
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	4a4e      	ldr	r2, [pc, #312]	; (800e79c <RCCEx_PLL2_Config+0x15c>)
 800e664:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e668:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e66a:	f7f6 f893 	bl	8004794 <HAL_GetTick>
 800e66e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e670:	e008      	b.n	800e684 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800e672:	f7f6 f88f 	bl	8004794 <HAL_GetTick>
 800e676:	4602      	mov	r2, r0
 800e678:	68bb      	ldr	r3, [r7, #8]
 800e67a:	1ad3      	subs	r3, r2, r3
 800e67c:	2b02      	cmp	r3, #2
 800e67e:	d901      	bls.n	800e684 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e680:	2303      	movs	r3, #3
 800e682:	e086      	b.n	800e792 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e684:	4b45      	ldr	r3, [pc, #276]	; (800e79c <RCCEx_PLL2_Config+0x15c>)
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d1f0      	bne.n	800e672 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800e690:	4b42      	ldr	r3, [pc, #264]	; (800e79c <RCCEx_PLL2_Config+0x15c>)
 800e692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e694:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	031b      	lsls	r3, r3, #12
 800e69e:	493f      	ldr	r1, [pc, #252]	; (800e79c <RCCEx_PLL2_Config+0x15c>)
 800e6a0:	4313      	orrs	r3, r2
 800e6a2:	628b      	str	r3, [r1, #40]	; 0x28
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	685b      	ldr	r3, [r3, #4]
 800e6a8:	3b01      	subs	r3, #1
 800e6aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	689b      	ldr	r3, [r3, #8]
 800e6b2:	3b01      	subs	r3, #1
 800e6b4:	025b      	lsls	r3, r3, #9
 800e6b6:	b29b      	uxth	r3, r3
 800e6b8:	431a      	orrs	r2, r3
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	68db      	ldr	r3, [r3, #12]
 800e6be:	3b01      	subs	r3, #1
 800e6c0:	041b      	lsls	r3, r3, #16
 800e6c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800e6c6:	431a      	orrs	r2, r3
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	691b      	ldr	r3, [r3, #16]
 800e6cc:	3b01      	subs	r3, #1
 800e6ce:	061b      	lsls	r3, r3, #24
 800e6d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800e6d4:	4931      	ldr	r1, [pc, #196]	; (800e79c <RCCEx_PLL2_Config+0x15c>)
 800e6d6:	4313      	orrs	r3, r2
 800e6d8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800e6da:	4b30      	ldr	r3, [pc, #192]	; (800e79c <RCCEx_PLL2_Config+0x15c>)
 800e6dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	695b      	ldr	r3, [r3, #20]
 800e6e6:	492d      	ldr	r1, [pc, #180]	; (800e79c <RCCEx_PLL2_Config+0x15c>)
 800e6e8:	4313      	orrs	r3, r2
 800e6ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800e6ec:	4b2b      	ldr	r3, [pc, #172]	; (800e79c <RCCEx_PLL2_Config+0x15c>)
 800e6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6f0:	f023 0220 	bic.w	r2, r3, #32
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	699b      	ldr	r3, [r3, #24]
 800e6f8:	4928      	ldr	r1, [pc, #160]	; (800e79c <RCCEx_PLL2_Config+0x15c>)
 800e6fa:	4313      	orrs	r3, r2
 800e6fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800e6fe:	4b27      	ldr	r3, [pc, #156]	; (800e79c <RCCEx_PLL2_Config+0x15c>)
 800e700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e702:	4a26      	ldr	r2, [pc, #152]	; (800e79c <RCCEx_PLL2_Config+0x15c>)
 800e704:	f023 0310 	bic.w	r3, r3, #16
 800e708:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800e70a:	4b24      	ldr	r3, [pc, #144]	; (800e79c <RCCEx_PLL2_Config+0x15c>)
 800e70c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e70e:	4b24      	ldr	r3, [pc, #144]	; (800e7a0 <RCCEx_PLL2_Config+0x160>)
 800e710:	4013      	ands	r3, r2
 800e712:	687a      	ldr	r2, [r7, #4]
 800e714:	69d2      	ldr	r2, [r2, #28]
 800e716:	00d2      	lsls	r2, r2, #3
 800e718:	4920      	ldr	r1, [pc, #128]	; (800e79c <RCCEx_PLL2_Config+0x15c>)
 800e71a:	4313      	orrs	r3, r2
 800e71c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800e71e:	4b1f      	ldr	r3, [pc, #124]	; (800e79c <RCCEx_PLL2_Config+0x15c>)
 800e720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e722:	4a1e      	ldr	r2, [pc, #120]	; (800e79c <RCCEx_PLL2_Config+0x15c>)
 800e724:	f043 0310 	orr.w	r3, r3, #16
 800e728:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d106      	bne.n	800e73e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800e730:	4b1a      	ldr	r3, [pc, #104]	; (800e79c <RCCEx_PLL2_Config+0x15c>)
 800e732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e734:	4a19      	ldr	r2, [pc, #100]	; (800e79c <RCCEx_PLL2_Config+0x15c>)
 800e736:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e73a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e73c:	e00f      	b.n	800e75e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	2b01      	cmp	r3, #1
 800e742:	d106      	bne.n	800e752 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800e744:	4b15      	ldr	r3, [pc, #84]	; (800e79c <RCCEx_PLL2_Config+0x15c>)
 800e746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e748:	4a14      	ldr	r2, [pc, #80]	; (800e79c <RCCEx_PLL2_Config+0x15c>)
 800e74a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e74e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e750:	e005      	b.n	800e75e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800e752:	4b12      	ldr	r3, [pc, #72]	; (800e79c <RCCEx_PLL2_Config+0x15c>)
 800e754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e756:	4a11      	ldr	r2, [pc, #68]	; (800e79c <RCCEx_PLL2_Config+0x15c>)
 800e758:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e75c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800e75e:	4b0f      	ldr	r3, [pc, #60]	; (800e79c <RCCEx_PLL2_Config+0x15c>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	4a0e      	ldr	r2, [pc, #56]	; (800e79c <RCCEx_PLL2_Config+0x15c>)
 800e764:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e768:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e76a:	f7f6 f813 	bl	8004794 <HAL_GetTick>
 800e76e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e770:	e008      	b.n	800e784 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800e772:	f7f6 f80f 	bl	8004794 <HAL_GetTick>
 800e776:	4602      	mov	r2, r0
 800e778:	68bb      	ldr	r3, [r7, #8]
 800e77a:	1ad3      	subs	r3, r2, r3
 800e77c:	2b02      	cmp	r3, #2
 800e77e:	d901      	bls.n	800e784 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e780:	2303      	movs	r3, #3
 800e782:	e006      	b.n	800e792 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e784:	4b05      	ldr	r3, [pc, #20]	; (800e79c <RCCEx_PLL2_Config+0x15c>)
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d0f0      	beq.n	800e772 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800e790:	7bfb      	ldrb	r3, [r7, #15]
}
 800e792:	4618      	mov	r0, r3
 800e794:	3710      	adds	r7, #16
 800e796:	46bd      	mov	sp, r7
 800e798:	bd80      	pop	{r7, pc}
 800e79a:	bf00      	nop
 800e79c:	58024400 	.word	0x58024400
 800e7a0:	ffff0007 	.word	0xffff0007

0800e7a4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b084      	sub	sp, #16
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
 800e7ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e7b2:	4b53      	ldr	r3, [pc, #332]	; (800e900 <RCCEx_PLL3_Config+0x15c>)
 800e7b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7b6:	f003 0303 	and.w	r3, r3, #3
 800e7ba:	2b03      	cmp	r3, #3
 800e7bc:	d101      	bne.n	800e7c2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800e7be:	2301      	movs	r3, #1
 800e7c0:	e099      	b.n	800e8f6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800e7c2:	4b4f      	ldr	r3, [pc, #316]	; (800e900 <RCCEx_PLL3_Config+0x15c>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	4a4e      	ldr	r2, [pc, #312]	; (800e900 <RCCEx_PLL3_Config+0x15c>)
 800e7c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e7cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e7ce:	f7f5 ffe1 	bl	8004794 <HAL_GetTick>
 800e7d2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e7d4:	e008      	b.n	800e7e8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800e7d6:	f7f5 ffdd 	bl	8004794 <HAL_GetTick>
 800e7da:	4602      	mov	r2, r0
 800e7dc:	68bb      	ldr	r3, [r7, #8]
 800e7de:	1ad3      	subs	r3, r2, r3
 800e7e0:	2b02      	cmp	r3, #2
 800e7e2:	d901      	bls.n	800e7e8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e7e4:	2303      	movs	r3, #3
 800e7e6:	e086      	b.n	800e8f6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e7e8:	4b45      	ldr	r3, [pc, #276]	; (800e900 <RCCEx_PLL3_Config+0x15c>)
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d1f0      	bne.n	800e7d6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800e7f4:	4b42      	ldr	r3, [pc, #264]	; (800e900 <RCCEx_PLL3_Config+0x15c>)
 800e7f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7f8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	051b      	lsls	r3, r3, #20
 800e802:	493f      	ldr	r1, [pc, #252]	; (800e900 <RCCEx_PLL3_Config+0x15c>)
 800e804:	4313      	orrs	r3, r2
 800e806:	628b      	str	r3, [r1, #40]	; 0x28
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	685b      	ldr	r3, [r3, #4]
 800e80c:	3b01      	subs	r3, #1
 800e80e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	689b      	ldr	r3, [r3, #8]
 800e816:	3b01      	subs	r3, #1
 800e818:	025b      	lsls	r3, r3, #9
 800e81a:	b29b      	uxth	r3, r3
 800e81c:	431a      	orrs	r2, r3
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	68db      	ldr	r3, [r3, #12]
 800e822:	3b01      	subs	r3, #1
 800e824:	041b      	lsls	r3, r3, #16
 800e826:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800e82a:	431a      	orrs	r2, r3
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	691b      	ldr	r3, [r3, #16]
 800e830:	3b01      	subs	r3, #1
 800e832:	061b      	lsls	r3, r3, #24
 800e834:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800e838:	4931      	ldr	r1, [pc, #196]	; (800e900 <RCCEx_PLL3_Config+0x15c>)
 800e83a:	4313      	orrs	r3, r2
 800e83c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800e83e:	4b30      	ldr	r3, [pc, #192]	; (800e900 <RCCEx_PLL3_Config+0x15c>)
 800e840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e842:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	695b      	ldr	r3, [r3, #20]
 800e84a:	492d      	ldr	r1, [pc, #180]	; (800e900 <RCCEx_PLL3_Config+0x15c>)
 800e84c:	4313      	orrs	r3, r2
 800e84e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800e850:	4b2b      	ldr	r3, [pc, #172]	; (800e900 <RCCEx_PLL3_Config+0x15c>)
 800e852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e854:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	699b      	ldr	r3, [r3, #24]
 800e85c:	4928      	ldr	r1, [pc, #160]	; (800e900 <RCCEx_PLL3_Config+0x15c>)
 800e85e:	4313      	orrs	r3, r2
 800e860:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800e862:	4b27      	ldr	r3, [pc, #156]	; (800e900 <RCCEx_PLL3_Config+0x15c>)
 800e864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e866:	4a26      	ldr	r2, [pc, #152]	; (800e900 <RCCEx_PLL3_Config+0x15c>)
 800e868:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e86c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e86e:	4b24      	ldr	r3, [pc, #144]	; (800e900 <RCCEx_PLL3_Config+0x15c>)
 800e870:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e872:	4b24      	ldr	r3, [pc, #144]	; (800e904 <RCCEx_PLL3_Config+0x160>)
 800e874:	4013      	ands	r3, r2
 800e876:	687a      	ldr	r2, [r7, #4]
 800e878:	69d2      	ldr	r2, [r2, #28]
 800e87a:	00d2      	lsls	r2, r2, #3
 800e87c:	4920      	ldr	r1, [pc, #128]	; (800e900 <RCCEx_PLL3_Config+0x15c>)
 800e87e:	4313      	orrs	r3, r2
 800e880:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800e882:	4b1f      	ldr	r3, [pc, #124]	; (800e900 <RCCEx_PLL3_Config+0x15c>)
 800e884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e886:	4a1e      	ldr	r2, [pc, #120]	; (800e900 <RCCEx_PLL3_Config+0x15c>)
 800e888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e88c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800e88e:	683b      	ldr	r3, [r7, #0]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d106      	bne.n	800e8a2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800e894:	4b1a      	ldr	r3, [pc, #104]	; (800e900 <RCCEx_PLL3_Config+0x15c>)
 800e896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e898:	4a19      	ldr	r2, [pc, #100]	; (800e900 <RCCEx_PLL3_Config+0x15c>)
 800e89a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800e89e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e8a0:	e00f      	b.n	800e8c2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	2b01      	cmp	r3, #1
 800e8a6:	d106      	bne.n	800e8b6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800e8a8:	4b15      	ldr	r3, [pc, #84]	; (800e900 <RCCEx_PLL3_Config+0x15c>)
 800e8aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8ac:	4a14      	ldr	r2, [pc, #80]	; (800e900 <RCCEx_PLL3_Config+0x15c>)
 800e8ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e8b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e8b4:	e005      	b.n	800e8c2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800e8b6:	4b12      	ldr	r3, [pc, #72]	; (800e900 <RCCEx_PLL3_Config+0x15c>)
 800e8b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8ba:	4a11      	ldr	r2, [pc, #68]	; (800e900 <RCCEx_PLL3_Config+0x15c>)
 800e8bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e8c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800e8c2:	4b0f      	ldr	r3, [pc, #60]	; (800e900 <RCCEx_PLL3_Config+0x15c>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	4a0e      	ldr	r2, [pc, #56]	; (800e900 <RCCEx_PLL3_Config+0x15c>)
 800e8c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e8cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e8ce:	f7f5 ff61 	bl	8004794 <HAL_GetTick>
 800e8d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e8d4:	e008      	b.n	800e8e8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800e8d6:	f7f5 ff5d 	bl	8004794 <HAL_GetTick>
 800e8da:	4602      	mov	r2, r0
 800e8dc:	68bb      	ldr	r3, [r7, #8]
 800e8de:	1ad3      	subs	r3, r2, r3
 800e8e0:	2b02      	cmp	r3, #2
 800e8e2:	d901      	bls.n	800e8e8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e8e4:	2303      	movs	r3, #3
 800e8e6:	e006      	b.n	800e8f6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e8e8:	4b05      	ldr	r3, [pc, #20]	; (800e900 <RCCEx_PLL3_Config+0x15c>)
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d0f0      	beq.n	800e8d6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800e8f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	3710      	adds	r7, #16
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	bd80      	pop	{r7, pc}
 800e8fe:	bf00      	nop
 800e900:	58024400 	.word	0x58024400
 800e904:	ffff0007 	.word	0xffff0007

0800e908 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b084      	sub	sp, #16
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800e910:	2301      	movs	r3, #1
 800e912:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d067      	beq.n	800e9ea <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800e920:	b2db      	uxtb	r3, r3
 800e922:	2b00      	cmp	r3, #0
 800e924:	d106      	bne.n	800e934 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2200      	movs	r2, #0
 800e92a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800e92e:	6878      	ldr	r0, [r7, #4]
 800e930:	f7f5 f9ee 	bl	8003d10 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2202      	movs	r2, #2
 800e938:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	22ca      	movs	r2, #202	; 0xca
 800e942:	625a      	str	r2, [r3, #36]	; 0x24
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	2253      	movs	r2, #83	; 0x53
 800e94a:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800e94c:	6878      	ldr	r0, [r7, #4]
 800e94e:	f000 f99f 	bl	800ec90 <RTC_EnterInitMode>
 800e952:	4603      	mov	r3, r0
 800e954:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800e956:	7bfb      	ldrb	r3, [r7, #15]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d13b      	bne.n	800e9d4 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	6899      	ldr	r1, [r3, #8]
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	681a      	ldr	r2, [r3, #0]
 800e966:	4b23      	ldr	r3, [pc, #140]	; (800e9f4 <HAL_RTC_Init+0xec>)
 800e968:	400b      	ands	r3, r1
 800e96a:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	6899      	ldr	r1, [r3, #8]
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	685a      	ldr	r2, [r3, #4]
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	691b      	ldr	r3, [r3, #16]
 800e97a:	431a      	orrs	r2, r3
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	699b      	ldr	r3, [r3, #24]
 800e980:	431a      	orrs	r2, r3
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	430a      	orrs	r2, r1
 800e988:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	689b      	ldr	r3, [r3, #8]
 800e98e:	0419      	lsls	r1, r3, #16
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	68da      	ldr	r2, [r3, #12]
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	430a      	orrs	r2, r1
 800e99a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800e99c:	6878      	ldr	r0, [r7, #4]
 800e99e:	f000 f9ab 	bl	800ecf8 <RTC_ExitInitMode>
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800e9a6:	7bfb      	ldrb	r3, [r7, #15]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d113      	bne.n	800e9d4 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	f022 0203 	bic.w	r2, r2, #3
 800e9ba:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	69da      	ldr	r2, [r3, #28]
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	695b      	ldr	r3, [r3, #20]
 800e9ca:	431a      	orrs	r2, r3
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	430a      	orrs	r2, r1
 800e9d2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	22ff      	movs	r2, #255	; 0xff
 800e9da:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800e9dc:	7bfb      	ldrb	r3, [r7, #15]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d103      	bne.n	800e9ea <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	2201      	movs	r2, #1
 800e9e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800e9ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	3710      	adds	r7, #16
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	bd80      	pop	{r7, pc}
 800e9f4:	ff8fffbf 	.word	0xff8fffbf

0800e9f8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800e9f8:	b590      	push	{r4, r7, lr}
 800e9fa:	b087      	sub	sp, #28
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	60f8      	str	r0, [r7, #12]
 800ea00:	60b9      	str	r1, [r7, #8]
 800ea02:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ea0a:	2b01      	cmp	r3, #1
 800ea0c:	d101      	bne.n	800ea12 <HAL_RTC_SetTime+0x1a>
 800ea0e:	2302      	movs	r3, #2
 800ea10:	e089      	b.n	800eb26 <HAL_RTC_SetTime+0x12e>
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	2201      	movs	r2, #1
 800ea16:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	2202      	movs	r2, #2
 800ea1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	22ca      	movs	r2, #202	; 0xca
 800ea28:	625a      	str	r2, [r3, #36]	; 0x24
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	2253      	movs	r2, #83	; 0x53
 800ea30:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ea32:	68f8      	ldr	r0, [r7, #12]
 800ea34:	f000 f92c 	bl	800ec90 <RTC_EnterInitMode>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800ea3c:	7cfb      	ldrb	r3, [r7, #19]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d161      	bne.n	800eb06 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d126      	bne.n	800ea96 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	689b      	ldr	r3, [r3, #8]
 800ea4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d102      	bne.n	800ea5c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800ea56:	68bb      	ldr	r3, [r7, #8]
 800ea58:	2200      	movs	r2, #0
 800ea5a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ea5c:	68bb      	ldr	r3, [r7, #8]
 800ea5e:	781b      	ldrb	r3, [r3, #0]
 800ea60:	4618      	mov	r0, r3
 800ea62:	f000 f987 	bl	800ed74 <RTC_ByteToBcd2>
 800ea66:	4603      	mov	r3, r0
 800ea68:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ea6a:	68bb      	ldr	r3, [r7, #8]
 800ea6c:	785b      	ldrb	r3, [r3, #1]
 800ea6e:	4618      	mov	r0, r3
 800ea70:	f000 f980 	bl	800ed74 <RTC_ByteToBcd2>
 800ea74:	4603      	mov	r3, r0
 800ea76:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ea78:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800ea7a:	68bb      	ldr	r3, [r7, #8]
 800ea7c:	789b      	ldrb	r3, [r3, #2]
 800ea7e:	4618      	mov	r0, r3
 800ea80:	f000 f978 	bl	800ed74 <RTC_ByteToBcd2>
 800ea84:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ea86:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800ea8a:	68bb      	ldr	r3, [r7, #8]
 800ea8c:	78db      	ldrb	r3, [r3, #3]
 800ea8e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ea90:	4313      	orrs	r3, r2
 800ea92:	617b      	str	r3, [r7, #20]
 800ea94:	e018      	b.n	800eac8 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	689b      	ldr	r3, [r3, #8]
 800ea9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d102      	bne.n	800eaaa <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800eaa4:	68bb      	ldr	r3, [r7, #8]
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800eaaa:	68bb      	ldr	r3, [r7, #8]
 800eaac:	781b      	ldrb	r3, [r3, #0]
 800eaae:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	785b      	ldrb	r3, [r3, #1]
 800eab4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800eab6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800eab8:	68ba      	ldr	r2, [r7, #8]
 800eaba:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800eabc:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800eabe:	68bb      	ldr	r3, [r7, #8]
 800eac0:	78db      	ldrb	r3, [r3, #3]
 800eac2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800eac4:	4313      	orrs	r3, r2
 800eac6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	681a      	ldr	r2, [r3, #0]
 800eacc:	6979      	ldr	r1, [r7, #20]
 800eace:	4b18      	ldr	r3, [pc, #96]	; (800eb30 <HAL_RTC_SetTime+0x138>)
 800ead0:	400b      	ands	r3, r1
 800ead2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	689a      	ldr	r2, [r3, #8]
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800eae2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	6899      	ldr	r1, [r3, #8]
 800eaea:	68bb      	ldr	r3, [r7, #8]
 800eaec:	68da      	ldr	r2, [r3, #12]
 800eaee:	68bb      	ldr	r3, [r7, #8]
 800eaf0:	691b      	ldr	r3, [r3, #16]
 800eaf2:	431a      	orrs	r2, r3
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	430a      	orrs	r2, r1
 800eafa:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800eafc:	68f8      	ldr	r0, [r7, #12]
 800eafe:	f000 f8fb 	bl	800ecf8 <RTC_ExitInitMode>
 800eb02:	4603      	mov	r3, r0
 800eb04:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	22ff      	movs	r2, #255	; 0xff
 800eb0c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800eb0e:	7cfb      	ldrb	r3, [r7, #19]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d103      	bne.n	800eb1c <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	2201      	movs	r2, #1
 800eb18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	2200      	movs	r2, #0
 800eb20:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800eb24:	7cfb      	ldrb	r3, [r7, #19]
}
 800eb26:	4618      	mov	r0, r3
 800eb28:	371c      	adds	r7, #28
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	bd90      	pop	{r4, r7, pc}
 800eb2e:	bf00      	nop
 800eb30:	007f7f7f 	.word	0x007f7f7f

0800eb34 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800eb34:	b590      	push	{r4, r7, lr}
 800eb36:	b087      	sub	sp, #28
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	60f8      	str	r0, [r7, #12]
 800eb3c:	60b9      	str	r1, [r7, #8]
 800eb3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	f893 3020 	ldrb.w	r3, [r3, #32]
 800eb46:	2b01      	cmp	r3, #1
 800eb48:	d101      	bne.n	800eb4e <HAL_RTC_SetDate+0x1a>
 800eb4a:	2302      	movs	r3, #2
 800eb4c:	e073      	b.n	800ec36 <HAL_RTC_SetDate+0x102>
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	2201      	movs	r2, #1
 800eb52:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	2202      	movs	r2, #2
 800eb5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d10e      	bne.n	800eb82 <HAL_RTC_SetDate+0x4e>
 800eb64:	68bb      	ldr	r3, [r7, #8]
 800eb66:	785b      	ldrb	r3, [r3, #1]
 800eb68:	f003 0310 	and.w	r3, r3, #16
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d008      	beq.n	800eb82 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800eb70:	68bb      	ldr	r3, [r7, #8]
 800eb72:	785b      	ldrb	r3, [r3, #1]
 800eb74:	f023 0310 	bic.w	r3, r3, #16
 800eb78:	b2db      	uxtb	r3, r3
 800eb7a:	330a      	adds	r3, #10
 800eb7c:	b2da      	uxtb	r2, r3
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d11c      	bne.n	800ebc2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800eb88:	68bb      	ldr	r3, [r7, #8]
 800eb8a:	78db      	ldrb	r3, [r3, #3]
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	f000 f8f1 	bl	800ed74 <RTC_ByteToBcd2>
 800eb92:	4603      	mov	r3, r0
 800eb94:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800eb96:	68bb      	ldr	r3, [r7, #8]
 800eb98:	785b      	ldrb	r3, [r3, #1]
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	f000 f8ea 	bl	800ed74 <RTC_ByteToBcd2>
 800eba0:	4603      	mov	r3, r0
 800eba2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800eba4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800eba6:	68bb      	ldr	r3, [r7, #8]
 800eba8:	789b      	ldrb	r3, [r3, #2]
 800ebaa:	4618      	mov	r0, r3
 800ebac:	f000 f8e2 	bl	800ed74 <RTC_ByteToBcd2>
 800ebb0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ebb2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800ebb6:	68bb      	ldr	r3, [r7, #8]
 800ebb8:	781b      	ldrb	r3, [r3, #0]
 800ebba:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800ebbc:	4313      	orrs	r3, r2
 800ebbe:	617b      	str	r3, [r7, #20]
 800ebc0:	e00e      	b.n	800ebe0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ebc2:	68bb      	ldr	r3, [r7, #8]
 800ebc4:	78db      	ldrb	r3, [r3, #3]
 800ebc6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800ebc8:	68bb      	ldr	r3, [r7, #8]
 800ebca:	785b      	ldrb	r3, [r3, #1]
 800ebcc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ebce:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800ebd0:	68ba      	ldr	r2, [r7, #8]
 800ebd2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800ebd4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800ebd6:	68bb      	ldr	r3, [r7, #8]
 800ebd8:	781b      	ldrb	r3, [r3, #0]
 800ebda:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ebdc:	4313      	orrs	r3, r2
 800ebde:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	22ca      	movs	r2, #202	; 0xca
 800ebe6:	625a      	str	r2, [r3, #36]	; 0x24
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	2253      	movs	r2, #83	; 0x53
 800ebee:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ebf0:	68f8      	ldr	r0, [r7, #12]
 800ebf2:	f000 f84d 	bl	800ec90 <RTC_EnterInitMode>
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800ebfa:	7cfb      	ldrb	r3, [r7, #19]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d10a      	bne.n	800ec16 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	681a      	ldr	r2, [r3, #0]
 800ec04:	6979      	ldr	r1, [r7, #20]
 800ec06:	4b0e      	ldr	r3, [pc, #56]	; (800ec40 <HAL_RTC_SetDate+0x10c>)
 800ec08:	400b      	ands	r3, r1
 800ec0a:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ec0c:	68f8      	ldr	r0, [r7, #12]
 800ec0e:	f000 f873 	bl	800ecf8 <RTC_ExitInitMode>
 800ec12:	4603      	mov	r3, r0
 800ec14:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	22ff      	movs	r2, #255	; 0xff
 800ec1c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800ec1e:	7cfb      	ldrb	r3, [r7, #19]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d103      	bne.n	800ec2c <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	2201      	movs	r2, #1
 800ec28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	2200      	movs	r2, #0
 800ec30:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800ec34:	7cfb      	ldrb	r3, [r7, #19]


}
 800ec36:	4618      	mov	r0, r3
 800ec38:	371c      	adds	r7, #28
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd90      	pop	{r4, r7, pc}
 800ec3e:	bf00      	nop
 800ec40:	00ffff3f 	.word	0x00ffff3f

0800ec44 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b084      	sub	sp, #16
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	68da      	ldr	r2, [r3, #12]
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800ec5a:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800ec5c:	f7f5 fd9a 	bl	8004794 <HAL_GetTick>
 800ec60:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ec62:	e009      	b.n	800ec78 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ec64:	f7f5 fd96 	bl	8004794 <HAL_GetTick>
 800ec68:	4602      	mov	r2, r0
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	1ad3      	subs	r3, r2, r3
 800ec6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ec72:	d901      	bls.n	800ec78 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800ec74:	2303      	movs	r3, #3
 800ec76:	e007      	b.n	800ec88 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	68db      	ldr	r3, [r3, #12]
 800ec7e:	f003 0320 	and.w	r3, r3, #32
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d0ee      	beq.n	800ec64 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800ec86:	2300      	movs	r3, #0
}
 800ec88:	4618      	mov	r0, r3
 800ec8a:	3710      	adds	r7, #16
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	bd80      	pop	{r7, pc}

0800ec90 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b084      	sub	sp, #16
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ec98:	2300      	movs	r3, #0
 800ec9a:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	68db      	ldr	r3, [r3, #12]
 800eca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d120      	bne.n	800ecec <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	f04f 32ff 	mov.w	r2, #4294967295
 800ecb2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800ecb4:	f7f5 fd6e 	bl	8004794 <HAL_GetTick>
 800ecb8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ecba:	e00d      	b.n	800ecd8 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800ecbc:	f7f5 fd6a 	bl	8004794 <HAL_GetTick>
 800ecc0:	4602      	mov	r2, r0
 800ecc2:	68bb      	ldr	r3, [r7, #8]
 800ecc4:	1ad3      	subs	r3, r2, r3
 800ecc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ecca:	d905      	bls.n	800ecd8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800eccc:	2303      	movs	r3, #3
 800ecce:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2203      	movs	r2, #3
 800ecd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	68db      	ldr	r3, [r3, #12]
 800ecde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d102      	bne.n	800ecec <RTC_EnterInitMode+0x5c>
 800ece6:	7bfb      	ldrb	r3, [r7, #15]
 800ece8:	2b03      	cmp	r3, #3
 800ecea:	d1e7      	bne.n	800ecbc <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800ecec:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecee:	4618      	mov	r0, r3
 800ecf0:	3710      	adds	r7, #16
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	bd80      	pop	{r7, pc}
	...

0800ecf8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b084      	sub	sp, #16
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ed00:	2300      	movs	r3, #0
 800ed02:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800ed04:	4b1a      	ldr	r3, [pc, #104]	; (800ed70 <RTC_ExitInitMode+0x78>)
 800ed06:	68db      	ldr	r3, [r3, #12]
 800ed08:	4a19      	ldr	r2, [pc, #100]	; (800ed70 <RTC_ExitInitMode+0x78>)
 800ed0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ed0e:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800ed10:	4b17      	ldr	r3, [pc, #92]	; (800ed70 <RTC_ExitInitMode+0x78>)
 800ed12:	689b      	ldr	r3, [r3, #8]
 800ed14:	f003 0320 	and.w	r3, r3, #32
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d10c      	bne.n	800ed36 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ed1c:	6878      	ldr	r0, [r7, #4]
 800ed1e:	f7ff ff91 	bl	800ec44 <HAL_RTC_WaitForSynchro>
 800ed22:	4603      	mov	r3, r0
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d01e      	beq.n	800ed66 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2203      	movs	r2, #3
 800ed2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800ed30:	2303      	movs	r3, #3
 800ed32:	73fb      	strb	r3, [r7, #15]
 800ed34:	e017      	b.n	800ed66 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ed36:	4b0e      	ldr	r3, [pc, #56]	; (800ed70 <RTC_ExitInitMode+0x78>)
 800ed38:	689b      	ldr	r3, [r3, #8]
 800ed3a:	4a0d      	ldr	r2, [pc, #52]	; (800ed70 <RTC_ExitInitMode+0x78>)
 800ed3c:	f023 0320 	bic.w	r3, r3, #32
 800ed40:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ed42:	6878      	ldr	r0, [r7, #4]
 800ed44:	f7ff ff7e 	bl	800ec44 <HAL_RTC_WaitForSynchro>
 800ed48:	4603      	mov	r3, r0
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d005      	beq.n	800ed5a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	2203      	movs	r2, #3
 800ed52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800ed56:	2303      	movs	r3, #3
 800ed58:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ed5a:	4b05      	ldr	r3, [pc, #20]	; (800ed70 <RTC_ExitInitMode+0x78>)
 800ed5c:	689b      	ldr	r3, [r3, #8]
 800ed5e:	4a04      	ldr	r2, [pc, #16]	; (800ed70 <RTC_ExitInitMode+0x78>)
 800ed60:	f043 0320 	orr.w	r3, r3, #32
 800ed64:	6093      	str	r3, [r2, #8]
  }

  return status;
 800ed66:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed68:	4618      	mov	r0, r3
 800ed6a:	3710      	adds	r7, #16
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	bd80      	pop	{r7, pc}
 800ed70:	58004000 	.word	0x58004000

0800ed74 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800ed74:	b480      	push	{r7}
 800ed76:	b085      	sub	sp, #20
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800ed7e:	2300      	movs	r3, #0
 800ed80:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800ed82:	79fb      	ldrb	r3, [r7, #7]
 800ed84:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800ed86:	e005      	b.n	800ed94 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	3301      	adds	r3, #1
 800ed8c:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800ed8e:	7afb      	ldrb	r3, [r7, #11]
 800ed90:	3b0a      	subs	r3, #10
 800ed92:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800ed94:	7afb      	ldrb	r3, [r7, #11]
 800ed96:	2b09      	cmp	r3, #9
 800ed98:	d8f6      	bhi.n	800ed88 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	b2db      	uxtb	r3, r3
 800ed9e:	011b      	lsls	r3, r3, #4
 800eda0:	b2da      	uxtb	r2, r3
 800eda2:	7afb      	ldrb	r3, [r7, #11]
 800eda4:	4313      	orrs	r3, r2
 800eda6:	b2db      	uxtb	r3, r3
}
 800eda8:	4618      	mov	r0, r3
 800edaa:	3714      	adds	r7, #20
 800edac:	46bd      	mov	sp, r7
 800edae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb2:	4770      	bx	lr

0800edb4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800edb4:	b580      	push	{r7, lr}
 800edb6:	b084      	sub	sp, #16
 800edb8:	af00      	add	r7, sp, #0
 800edba:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d101      	bne.n	800edc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800edc2:	2301      	movs	r3, #1
 800edc4:	e0f1      	b.n	800efaa <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	2200      	movs	r2, #0
 800edca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	4a78      	ldr	r2, [pc, #480]	; (800efb4 <HAL_SPI_Init+0x200>)
 800edd2:	4293      	cmp	r3, r2
 800edd4:	d00f      	beq.n	800edf6 <HAL_SPI_Init+0x42>
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	4a77      	ldr	r2, [pc, #476]	; (800efb8 <HAL_SPI_Init+0x204>)
 800eddc:	4293      	cmp	r3, r2
 800edde:	d00a      	beq.n	800edf6 <HAL_SPI_Init+0x42>
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	4a75      	ldr	r2, [pc, #468]	; (800efbc <HAL_SPI_Init+0x208>)
 800ede6:	4293      	cmp	r3, r2
 800ede8:	d005      	beq.n	800edf6 <HAL_SPI_Init+0x42>
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	68db      	ldr	r3, [r3, #12]
 800edee:	2b0f      	cmp	r3, #15
 800edf0:	d901      	bls.n	800edf6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800edf2:	2301      	movs	r3, #1
 800edf4:	e0d9      	b.n	800efaa <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	f000 fb90 	bl	800f51c <SPI_GetPacketSize>
 800edfc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	4a6c      	ldr	r2, [pc, #432]	; (800efb4 <HAL_SPI_Init+0x200>)
 800ee04:	4293      	cmp	r3, r2
 800ee06:	d00c      	beq.n	800ee22 <HAL_SPI_Init+0x6e>
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	4a6a      	ldr	r2, [pc, #424]	; (800efb8 <HAL_SPI_Init+0x204>)
 800ee0e:	4293      	cmp	r3, r2
 800ee10:	d007      	beq.n	800ee22 <HAL_SPI_Init+0x6e>
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	4a69      	ldr	r2, [pc, #420]	; (800efbc <HAL_SPI_Init+0x208>)
 800ee18:	4293      	cmp	r3, r2
 800ee1a:	d002      	beq.n	800ee22 <HAL_SPI_Init+0x6e>
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	2b08      	cmp	r3, #8
 800ee20:	d811      	bhi.n	800ee46 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ee26:	4a63      	ldr	r2, [pc, #396]	; (800efb4 <HAL_SPI_Init+0x200>)
 800ee28:	4293      	cmp	r3, r2
 800ee2a:	d009      	beq.n	800ee40 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	4a61      	ldr	r2, [pc, #388]	; (800efb8 <HAL_SPI_Init+0x204>)
 800ee32:	4293      	cmp	r3, r2
 800ee34:	d004      	beq.n	800ee40 <HAL_SPI_Init+0x8c>
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	4a60      	ldr	r2, [pc, #384]	; (800efbc <HAL_SPI_Init+0x208>)
 800ee3c:	4293      	cmp	r3, r2
 800ee3e:	d104      	bne.n	800ee4a <HAL_SPI_Init+0x96>
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	2b10      	cmp	r3, #16
 800ee44:	d901      	bls.n	800ee4a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ee46:	2301      	movs	r3, #1
 800ee48:	e0af      	b.n	800efaa <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ee50:	b2db      	uxtb	r3, r3
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d106      	bne.n	800ee64 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	2200      	movs	r2, #0
 800ee5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ee5e:	6878      	ldr	r0, [r7, #4]
 800ee60:	f7f4 ff86 	bl	8003d70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	2202      	movs	r2, #2
 800ee68:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	681a      	ldr	r2, [r3, #0]
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	f022 0201 	bic.w	r2, r2, #1
 800ee7a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	689b      	ldr	r3, [r3, #8]
 800ee82:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800ee86:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	699b      	ldr	r3, [r3, #24]
 800ee8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ee90:	d119      	bne.n	800eec6 <HAL_SPI_Init+0x112>
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	685b      	ldr	r3, [r3, #4]
 800ee96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ee9a:	d103      	bne.n	800eea4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d008      	beq.n	800eeb6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d10c      	bne.n	800eec6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800eeb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eeb4:	d107      	bne.n	800eec6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	681a      	ldr	r2, [r3, #0]
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800eec4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	69da      	ldr	r2, [r3, #28]
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eece:	431a      	orrs	r2, r3
 800eed0:	68bb      	ldr	r3, [r7, #8]
 800eed2:	431a      	orrs	r2, r3
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eed8:	ea42 0103 	orr.w	r1, r2, r3
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	68da      	ldr	r2, [r3, #12]
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	430a      	orrs	r2, r1
 800eee6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eef0:	431a      	orrs	r2, r3
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eef6:	431a      	orrs	r2, r3
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	699b      	ldr	r3, [r3, #24]
 800eefc:	431a      	orrs	r2, r3
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	691b      	ldr	r3, [r3, #16]
 800ef02:	431a      	orrs	r2, r3
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	695b      	ldr	r3, [r3, #20]
 800ef08:	431a      	orrs	r2, r3
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	6a1b      	ldr	r3, [r3, #32]
 800ef0e:	431a      	orrs	r2, r3
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	685b      	ldr	r3, [r3, #4]
 800ef14:	431a      	orrs	r2, r3
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ef1a:	431a      	orrs	r2, r3
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	689b      	ldr	r3, [r3, #8]
 800ef20:	431a      	orrs	r2, r3
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ef26:	ea42 0103 	orr.w	r1, r2, r3
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	430a      	orrs	r2, r1
 800ef34:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	685b      	ldr	r3, [r3, #4]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d113      	bne.n	800ef66 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	689b      	ldr	r3, [r3, #8]
 800ef44:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ef50:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	689b      	ldr	r3, [r3, #8]
 800ef58:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ef64:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	f022 0201 	bic.w	r2, r2, #1
 800ef74:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	685b      	ldr	r3, [r3, #4]
 800ef7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d00a      	beq.n	800ef98 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	68db      	ldr	r3, [r3, #12]
 800ef88:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	430a      	orrs	r2, r1
 800ef96:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	2201      	movs	r2, #1
 800efa4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800efa8:	2300      	movs	r3, #0
}
 800efaa:	4618      	mov	r0, r3
 800efac:	3710      	adds	r7, #16
 800efae:	46bd      	mov	sp, r7
 800efb0:	bd80      	pop	{r7, pc}
 800efb2:	bf00      	nop
 800efb4:	40013000 	.word	0x40013000
 800efb8:	40003800 	.word	0x40003800
 800efbc:	40003c00 	.word	0x40003c00

0800efc0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b08a      	sub	sp, #40	; 0x28
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	691b      	ldr	r3, [r3, #16]
 800efce:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	695b      	ldr	r3, [r3, #20]
 800efd6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800efd8:	6a3a      	ldr	r2, [r7, #32]
 800efda:	69fb      	ldr	r3, [r7, #28]
 800efdc:	4013      	ands	r3, r2
 800efde:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	689b      	ldr	r3, [r3, #8]
 800efe6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800efe8:	2300      	movs	r3, #0
 800efea:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800eff2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	3330      	adds	r3, #48	; 0x30
 800effa:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800effc:	69bb      	ldr	r3, [r7, #24]
 800effe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f002:	2b00      	cmp	r3, #0
 800f004:	d113      	bne.n	800f02e <HAL_SPI_IRQHandler+0x6e>
 800f006:	69bb      	ldr	r3, [r7, #24]
 800f008:	f003 0320 	and.w	r3, r3, #32
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d10e      	bne.n	800f02e <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800f010:	69bb      	ldr	r3, [r7, #24]
 800f012:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800f016:	2b00      	cmp	r3, #0
 800f018:	d009      	beq.n	800f02e <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f01e:	6878      	ldr	r0, [r7, #4]
 800f020:	4798      	blx	r3
    hspi->RxISR(hspi);
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f026:	6878      	ldr	r0, [r7, #4]
 800f028:	4798      	blx	r3
    handled = 1UL;
 800f02a:	2301      	movs	r3, #1
 800f02c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800f02e:	69bb      	ldr	r3, [r7, #24]
 800f030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f034:	2b00      	cmp	r3, #0
 800f036:	d10f      	bne.n	800f058 <HAL_SPI_IRQHandler+0x98>
 800f038:	69bb      	ldr	r3, [r7, #24]
 800f03a:	f003 0301 	and.w	r3, r3, #1
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d00a      	beq.n	800f058 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800f042:	69bb      	ldr	r3, [r7, #24]
 800f044:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d105      	bne.n	800f058 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f050:	6878      	ldr	r0, [r7, #4]
 800f052:	4798      	blx	r3
    handled = 1UL;
 800f054:	2301      	movs	r3, #1
 800f056:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800f058:	69bb      	ldr	r3, [r7, #24]
 800f05a:	f003 0320 	and.w	r3, r3, #32
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d10f      	bne.n	800f082 <HAL_SPI_IRQHandler+0xc2>
 800f062:	69bb      	ldr	r3, [r7, #24]
 800f064:	f003 0302 	and.w	r3, r3, #2
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d00a      	beq.n	800f082 <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800f06c:	69bb      	ldr	r3, [r7, #24]
 800f06e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800f072:	2b00      	cmp	r3, #0
 800f074:	d105      	bne.n	800f082 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f07a:	6878      	ldr	r0, [r7, #4]
 800f07c:	4798      	blx	r3
    handled = 1UL;
 800f07e:	2301      	movs	r3, #1
 800f080:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800f082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f084:	2b00      	cmp	r3, #0
 800f086:	f040 815a 	bne.w	800f33e <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800f08a:	69bb      	ldr	r3, [r7, #24]
 800f08c:	f003 0308 	and.w	r3, r3, #8
 800f090:	2b00      	cmp	r3, #0
 800f092:	f000 808b 	beq.w	800f1ac <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	699a      	ldr	r2, [r3, #24]
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	f042 0208 	orr.w	r2, r2, #8
 800f0a4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	699a      	ldr	r2, [r3, #24]
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	f042 0210 	orr.w	r2, r2, #16
 800f0b4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	699a      	ldr	r2, [r3, #24]
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f0c4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	691a      	ldr	r2, [r3, #16]
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	f022 0208 	bic.w	r2, r2, #8
 800f0d4:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	689b      	ldr	r3, [r3, #8]
 800f0dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d13d      	bne.n	800f160 <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800f0e4:	e036      	b.n	800f154 <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	68db      	ldr	r3, [r3, #12]
 800f0ea:	2b0f      	cmp	r3, #15
 800f0ec:	d90b      	bls.n	800f106 <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	681a      	ldr	r2, [r3, #0]
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0f6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f0f8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0fe:	1d1a      	adds	r2, r3, #4
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	665a      	str	r2, [r3, #100]	; 0x64
 800f104:	e01d      	b.n	800f142 <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	68db      	ldr	r3, [r3, #12]
 800f10a:	2b07      	cmp	r3, #7
 800f10c:	d90b      	bls.n	800f126 <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f112:	68fa      	ldr	r2, [r7, #12]
 800f114:	8812      	ldrh	r2, [r2, #0]
 800f116:	b292      	uxth	r2, r2
 800f118:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f11e:	1c9a      	adds	r2, r3, #2
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	665a      	str	r2, [r3, #100]	; 0x64
 800f124:	e00d      	b.n	800f142 <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f132:	7812      	ldrb	r2, [r2, #0]
 800f134:	b2d2      	uxtb	r2, r2
 800f136:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f13c:	1c5a      	adds	r2, r3, #1
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f148:	b29b      	uxth	r3, r3
 800f14a:	3b01      	subs	r3, #1
 800f14c:	b29a      	uxth	r2, r3
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f15a:	b29b      	uxth	r3, r3
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d1c2      	bne.n	800f0e6 <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	f000 f93b 	bl	800f3dc <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	2201      	movs	r2, #1
 800f16a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f174:	2b00      	cmp	r3, #0
 800f176:	d003      	beq.n	800f180 <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800f178:	6878      	ldr	r0, [r7, #4]
 800f17a:	f000 f90b 	bl	800f394 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800f17e:	e0e3      	b.n	800f348 <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800f180:	7cfb      	ldrb	r3, [r7, #19]
 800f182:	2b05      	cmp	r3, #5
 800f184:	d103      	bne.n	800f18e <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800f186:	6878      	ldr	r0, [r7, #4]
 800f188:	f000 f8fa 	bl	800f380 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800f18c:	e0d9      	b.n	800f342 <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800f18e:	7cfb      	ldrb	r3, [r7, #19]
 800f190:	2b04      	cmp	r3, #4
 800f192:	d103      	bne.n	800f19c <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 800f194:	6878      	ldr	r0, [r7, #4]
 800f196:	f000 f8e9 	bl	800f36c <HAL_SPI_RxCpltCallback>
    return;
 800f19a:	e0d2      	b.n	800f342 <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800f19c:	7cfb      	ldrb	r3, [r7, #19]
 800f19e:	2b03      	cmp	r3, #3
 800f1a0:	f040 80cf 	bne.w	800f342 <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 800f1a4:	6878      	ldr	r0, [r7, #4]
 800f1a6:	f000 f8d7 	bl	800f358 <HAL_SPI_TxCpltCallback>
    return;
 800f1aa:	e0ca      	b.n	800f342 <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800f1ac:	69fb      	ldr	r3, [r7, #28]
 800f1ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d00d      	beq.n	800f1d2 <HAL_SPI_IRQHandler+0x212>
 800f1b6:	6a3b      	ldr	r3, [r7, #32]
 800f1b8:	f003 0308 	and.w	r3, r3, #8
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d008      	beq.n	800f1d2 <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	699a      	ldr	r2, [r3, #24]
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f1ce:	619a      	str	r2, [r3, #24]

    return;
 800f1d0:	e0ba      	b.n	800f348 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800f1d2:	69bb      	ldr	r3, [r7, #24]
 800f1d4:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	f000 80b5 	beq.w	800f348 <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800f1de:	69bb      	ldr	r3, [r7, #24]
 800f1e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d00f      	beq.n	800f208 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1ee:	f043 0204 	orr.w	r2, r3, #4
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	699a      	ldr	r2, [r3, #24]
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f206:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800f208:	69bb      	ldr	r3, [r7, #24]
 800f20a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d00f      	beq.n	800f232 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f218:	f043 0201 	orr.w	r2, r3, #1
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	699a      	ldr	r2, [r3, #24]
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f230:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800f232:	69bb      	ldr	r3, [r7, #24]
 800f234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d00f      	beq.n	800f25c <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f242:	f043 0208 	orr.w	r2, r3, #8
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	699a      	ldr	r2, [r3, #24]
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f25a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800f25c:	69bb      	ldr	r3, [r7, #24]
 800f25e:	f003 0320 	and.w	r3, r3, #32
 800f262:	2b00      	cmp	r3, #0
 800f264:	d00f      	beq.n	800f286 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f26c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	699a      	ldr	r2, [r3, #24]
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	f042 0220 	orr.w	r2, r2, #32
 800f284:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d05a      	beq.n	800f346 <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	681a      	ldr	r2, [r3, #0]
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	f022 0201 	bic.w	r2, r2, #1
 800f29e:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	6919      	ldr	r1, [r3, #16]
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	681a      	ldr	r2, [r3, #0]
 800f2aa:	4b29      	ldr	r3, [pc, #164]	; (800f350 <HAL_SPI_IRQHandler+0x390>)
 800f2ac:	400b      	ands	r3, r1
 800f2ae:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800f2b0:	697b      	ldr	r3, [r7, #20]
 800f2b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800f2b6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800f2ba:	d138      	bne.n	800f32e <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	689a      	ldr	r2, [r3, #8]
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f2ca:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d013      	beq.n	800f2fc <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f2d8:	4a1e      	ldr	r2, [pc, #120]	; (800f354 <HAL_SPI_IRQHandler+0x394>)
 800f2da:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	f7f7 ff6b 	bl	80071bc <HAL_DMA_Abort_IT>
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d007      	beq.n	800f2fc <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f300:	2b00      	cmp	r3, #0
 800f302:	d020      	beq.n	800f346 <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f308:	4a12      	ldr	r2, [pc, #72]	; (800f354 <HAL_SPI_IRQHandler+0x394>)
 800f30a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f310:	4618      	mov	r0, r3
 800f312:	f7f7 ff53 	bl	80071bc <HAL_DMA_Abort_IT>
 800f316:	4603      	mov	r3, r0
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d014      	beq.n	800f346 <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f322:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800f32c:	e00b      	b.n	800f346 <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	2201      	movs	r2, #1
 800f332:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800f336:	6878      	ldr	r0, [r7, #4]
 800f338:	f000 f82c 	bl	800f394 <HAL_SPI_ErrorCallback>
    return;
 800f33c:	e003      	b.n	800f346 <HAL_SPI_IRQHandler+0x386>
    return;
 800f33e:	bf00      	nop
 800f340:	e002      	b.n	800f348 <HAL_SPI_IRQHandler+0x388>
    return;
 800f342:	bf00      	nop
 800f344:	e000      	b.n	800f348 <HAL_SPI_IRQHandler+0x388>
    return;
 800f346:	bf00      	nop
  }
}
 800f348:	3728      	adds	r7, #40	; 0x28
 800f34a:	46bd      	mov	sp, r7
 800f34c:	bd80      	pop	{r7, pc}
 800f34e:	bf00      	nop
 800f350:	fffffc94 	.word	0xfffffc94
 800f354:	0800f3a9 	.word	0x0800f3a9

0800f358 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f358:	b480      	push	{r7}
 800f35a:	b083      	sub	sp, #12
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800f360:	bf00      	nop
 800f362:	370c      	adds	r7, #12
 800f364:	46bd      	mov	sp, r7
 800f366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36a:	4770      	bx	lr

0800f36c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f36c:	b480      	push	{r7}
 800f36e:	b083      	sub	sp, #12
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800f374:	bf00      	nop
 800f376:	370c      	adds	r7, #12
 800f378:	46bd      	mov	sp, r7
 800f37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37e:	4770      	bx	lr

0800f380 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f380:	b480      	push	{r7}
 800f382:	b083      	sub	sp, #12
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800f388:	bf00      	nop
 800f38a:	370c      	adds	r7, #12
 800f38c:	46bd      	mov	sp, r7
 800f38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f392:	4770      	bx	lr

0800f394 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800f394:	b480      	push	{r7}
 800f396:	b083      	sub	sp, #12
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800f39c:	bf00      	nop
 800f39e:	370c      	adds	r7, #12
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a6:	4770      	bx	lr

0800f3a8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b084      	sub	sp, #16
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3b4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	2200      	movs	r2, #0
 800f3ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	2200      	movs	r2, #0
 800f3c2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	2201      	movs	r2, #1
 800f3ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800f3ce:	68f8      	ldr	r0, [r7, #12]
 800f3d0:	f7ff ffe0 	bl	800f394 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f3d4:	bf00      	nop
 800f3d6:	3710      	adds	r7, #16
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	bd80      	pop	{r7, pc}

0800f3dc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f3dc:	b480      	push	{r7}
 800f3de:	b085      	sub	sp, #20
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	695b      	ldr	r3, [r3, #20]
 800f3ea:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	699a      	ldr	r2, [r3, #24]
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	f042 0208 	orr.w	r2, r2, #8
 800f3fa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	699a      	ldr	r2, [r3, #24]
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	f042 0210 	orr.w	r2, r2, #16
 800f40a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	681a      	ldr	r2, [r3, #0]
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	f022 0201 	bic.w	r2, r2, #1
 800f41a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	6919      	ldr	r1, [r3, #16]
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	681a      	ldr	r2, [r3, #0]
 800f426:	4b3c      	ldr	r3, [pc, #240]	; (800f518 <SPI_CloseTransfer+0x13c>)
 800f428:	400b      	ands	r3, r1
 800f42a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	689a      	ldr	r2, [r3, #8]
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f43a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f442:	b2db      	uxtb	r3, r3
 800f444:	2b04      	cmp	r3, #4
 800f446:	d014      	beq.n	800f472 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	f003 0320 	and.w	r3, r3, #32
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d00f      	beq.n	800f472 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f458:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	699a      	ldr	r2, [r3, #24]
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	f042 0220 	orr.w	r2, r2, #32
 800f470:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f478:	b2db      	uxtb	r3, r3
 800f47a:	2b03      	cmp	r3, #3
 800f47c:	d014      	beq.n	800f4a8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f484:	2b00      	cmp	r3, #0
 800f486:	d00f      	beq.n	800f4a8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f48e:	f043 0204 	orr.w	r2, r3, #4
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	699a      	ldr	r2, [r3, #24]
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f4a6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d00f      	beq.n	800f4d2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f4b8:	f043 0201 	orr.w	r2, r3, #1
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	699a      	ldr	r2, [r3, #24]
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f4d0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d00f      	beq.n	800f4fc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f4e2:	f043 0208 	orr.w	r2, r3, #8
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	699a      	ldr	r2, [r3, #24]
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f4fa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	2200      	movs	r2, #0
 800f500:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	2200      	movs	r2, #0
 800f508:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800f50c:	bf00      	nop
 800f50e:	3714      	adds	r7, #20
 800f510:	46bd      	mov	sp, r7
 800f512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f516:	4770      	bx	lr
 800f518:	fffffc90 	.word	0xfffffc90

0800f51c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800f51c:	b480      	push	{r7}
 800f51e:	b085      	sub	sp, #20
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f528:	095b      	lsrs	r3, r3, #5
 800f52a:	3301      	adds	r3, #1
 800f52c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	68db      	ldr	r3, [r3, #12]
 800f532:	3301      	adds	r3, #1
 800f534:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f536:	68bb      	ldr	r3, [r7, #8]
 800f538:	3307      	adds	r3, #7
 800f53a:	08db      	lsrs	r3, r3, #3
 800f53c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f53e:	68bb      	ldr	r3, [r7, #8]
 800f540:	68fa      	ldr	r2, [r7, #12]
 800f542:	fb02 f303 	mul.w	r3, r2, r3
}
 800f546:	4618      	mov	r0, r3
 800f548:	3714      	adds	r7, #20
 800f54a:	46bd      	mov	sp, r7
 800f54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f550:	4770      	bx	lr

0800f552 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f552:	b580      	push	{r7, lr}
 800f554:	b082      	sub	sp, #8
 800f556:	af00      	add	r7, sp, #0
 800f558:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d101      	bne.n	800f564 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f560:	2301      	movs	r3, #1
 800f562:	e049      	b.n	800f5f8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f56a:	b2db      	uxtb	r3, r3
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d106      	bne.n	800f57e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2200      	movs	r2, #0
 800f574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f578:	6878      	ldr	r0, [r7, #4]
 800f57a:	f7f4 fcc9 	bl	8003f10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	2202      	movs	r2, #2
 800f582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	681a      	ldr	r2, [r3, #0]
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	3304      	adds	r3, #4
 800f58e:	4619      	mov	r1, r3
 800f590:	4610      	mov	r0, r2
 800f592:	f000 febd 	bl	8010310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	2201      	movs	r2, #1
 800f59a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	2201      	movs	r2, #1
 800f5a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	2201      	movs	r2, #1
 800f5aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	2201      	movs	r2, #1
 800f5b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	2201      	movs	r2, #1
 800f5ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	2201      	movs	r2, #1
 800f5c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	2201      	movs	r2, #1
 800f5ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	2201      	movs	r2, #1
 800f5d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	2201      	movs	r2, #1
 800f5da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	2201      	movs	r2, #1
 800f5e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	2201      	movs	r2, #1
 800f5ea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	2201      	movs	r2, #1
 800f5f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f5f6:	2300      	movs	r3, #0
}
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	3708      	adds	r7, #8
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	bd80      	pop	{r7, pc}

0800f600 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800f600:	b480      	push	{r7}
 800f602:	b085      	sub	sp, #20
 800f604:	af00      	add	r7, sp, #0
 800f606:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f60e:	b2db      	uxtb	r3, r3
 800f610:	2b01      	cmp	r3, #1
 800f612:	d001      	beq.n	800f618 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800f614:	2301      	movs	r3, #1
 800f616:	e04c      	b.n	800f6b2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	2202      	movs	r2, #2
 800f61c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	4a26      	ldr	r2, [pc, #152]	; (800f6c0 <HAL_TIM_Base_Start+0xc0>)
 800f626:	4293      	cmp	r3, r2
 800f628:	d022      	beq.n	800f670 <HAL_TIM_Base_Start+0x70>
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f632:	d01d      	beq.n	800f670 <HAL_TIM_Base_Start+0x70>
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	4a22      	ldr	r2, [pc, #136]	; (800f6c4 <HAL_TIM_Base_Start+0xc4>)
 800f63a:	4293      	cmp	r3, r2
 800f63c:	d018      	beq.n	800f670 <HAL_TIM_Base_Start+0x70>
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	4a21      	ldr	r2, [pc, #132]	; (800f6c8 <HAL_TIM_Base_Start+0xc8>)
 800f644:	4293      	cmp	r3, r2
 800f646:	d013      	beq.n	800f670 <HAL_TIM_Base_Start+0x70>
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	4a1f      	ldr	r2, [pc, #124]	; (800f6cc <HAL_TIM_Base_Start+0xcc>)
 800f64e:	4293      	cmp	r3, r2
 800f650:	d00e      	beq.n	800f670 <HAL_TIM_Base_Start+0x70>
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	4a1e      	ldr	r2, [pc, #120]	; (800f6d0 <HAL_TIM_Base_Start+0xd0>)
 800f658:	4293      	cmp	r3, r2
 800f65a:	d009      	beq.n	800f670 <HAL_TIM_Base_Start+0x70>
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	4a1c      	ldr	r2, [pc, #112]	; (800f6d4 <HAL_TIM_Base_Start+0xd4>)
 800f662:	4293      	cmp	r3, r2
 800f664:	d004      	beq.n	800f670 <HAL_TIM_Base_Start+0x70>
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	4a1b      	ldr	r2, [pc, #108]	; (800f6d8 <HAL_TIM_Base_Start+0xd8>)
 800f66c:	4293      	cmp	r3, r2
 800f66e:	d115      	bne.n	800f69c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	689a      	ldr	r2, [r3, #8]
 800f676:	4b19      	ldr	r3, [pc, #100]	; (800f6dc <HAL_TIM_Base_Start+0xdc>)
 800f678:	4013      	ands	r3, r2
 800f67a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	2b06      	cmp	r3, #6
 800f680:	d015      	beq.n	800f6ae <HAL_TIM_Base_Start+0xae>
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f688:	d011      	beq.n	800f6ae <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	681a      	ldr	r2, [r3, #0]
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	f042 0201 	orr.w	r2, r2, #1
 800f698:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f69a:	e008      	b.n	800f6ae <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	681a      	ldr	r2, [r3, #0]
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	f042 0201 	orr.w	r2, r2, #1
 800f6aa:	601a      	str	r2, [r3, #0]
 800f6ac:	e000      	b.n	800f6b0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f6ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f6b0:	2300      	movs	r3, #0
}
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	3714      	adds	r7, #20
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6bc:	4770      	bx	lr
 800f6be:	bf00      	nop
 800f6c0:	40010000 	.word	0x40010000
 800f6c4:	40000400 	.word	0x40000400
 800f6c8:	40000800 	.word	0x40000800
 800f6cc:	40000c00 	.word	0x40000c00
 800f6d0:	40010400 	.word	0x40010400
 800f6d4:	40001800 	.word	0x40001800
 800f6d8:	40014000 	.word	0x40014000
 800f6dc:	00010007 	.word	0x00010007

0800f6e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f6e0:	b480      	push	{r7}
 800f6e2:	b085      	sub	sp, #20
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f6ee:	b2db      	uxtb	r3, r3
 800f6f0:	2b01      	cmp	r3, #1
 800f6f2:	d001      	beq.n	800f6f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f6f4:	2301      	movs	r3, #1
 800f6f6:	e054      	b.n	800f7a2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	2202      	movs	r2, #2
 800f6fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	68da      	ldr	r2, [r3, #12]
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	f042 0201 	orr.w	r2, r2, #1
 800f70e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	4a26      	ldr	r2, [pc, #152]	; (800f7b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800f716:	4293      	cmp	r3, r2
 800f718:	d022      	beq.n	800f760 <HAL_TIM_Base_Start_IT+0x80>
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f722:	d01d      	beq.n	800f760 <HAL_TIM_Base_Start_IT+0x80>
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	4a22      	ldr	r2, [pc, #136]	; (800f7b4 <HAL_TIM_Base_Start_IT+0xd4>)
 800f72a:	4293      	cmp	r3, r2
 800f72c:	d018      	beq.n	800f760 <HAL_TIM_Base_Start_IT+0x80>
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	4a21      	ldr	r2, [pc, #132]	; (800f7b8 <HAL_TIM_Base_Start_IT+0xd8>)
 800f734:	4293      	cmp	r3, r2
 800f736:	d013      	beq.n	800f760 <HAL_TIM_Base_Start_IT+0x80>
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	4a1f      	ldr	r2, [pc, #124]	; (800f7bc <HAL_TIM_Base_Start_IT+0xdc>)
 800f73e:	4293      	cmp	r3, r2
 800f740:	d00e      	beq.n	800f760 <HAL_TIM_Base_Start_IT+0x80>
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	4a1e      	ldr	r2, [pc, #120]	; (800f7c0 <HAL_TIM_Base_Start_IT+0xe0>)
 800f748:	4293      	cmp	r3, r2
 800f74a:	d009      	beq.n	800f760 <HAL_TIM_Base_Start_IT+0x80>
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	4a1c      	ldr	r2, [pc, #112]	; (800f7c4 <HAL_TIM_Base_Start_IT+0xe4>)
 800f752:	4293      	cmp	r3, r2
 800f754:	d004      	beq.n	800f760 <HAL_TIM_Base_Start_IT+0x80>
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	4a1b      	ldr	r2, [pc, #108]	; (800f7c8 <HAL_TIM_Base_Start_IT+0xe8>)
 800f75c:	4293      	cmp	r3, r2
 800f75e:	d115      	bne.n	800f78c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	689a      	ldr	r2, [r3, #8]
 800f766:	4b19      	ldr	r3, [pc, #100]	; (800f7cc <HAL_TIM_Base_Start_IT+0xec>)
 800f768:	4013      	ands	r3, r2
 800f76a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	2b06      	cmp	r3, #6
 800f770:	d015      	beq.n	800f79e <HAL_TIM_Base_Start_IT+0xbe>
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f778:	d011      	beq.n	800f79e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	681a      	ldr	r2, [r3, #0]
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	f042 0201 	orr.w	r2, r2, #1
 800f788:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f78a:	e008      	b.n	800f79e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	681a      	ldr	r2, [r3, #0]
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	f042 0201 	orr.w	r2, r2, #1
 800f79a:	601a      	str	r2, [r3, #0]
 800f79c:	e000      	b.n	800f7a0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f79e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f7a0:	2300      	movs	r3, #0
}
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	3714      	adds	r7, #20
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ac:	4770      	bx	lr
 800f7ae:	bf00      	nop
 800f7b0:	40010000 	.word	0x40010000
 800f7b4:	40000400 	.word	0x40000400
 800f7b8:	40000800 	.word	0x40000800
 800f7bc:	40000c00 	.word	0x40000c00
 800f7c0:	40010400 	.word	0x40010400
 800f7c4:	40001800 	.word	0x40001800
 800f7c8:	40014000 	.word	0x40014000
 800f7cc:	00010007 	.word	0x00010007

0800f7d0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b082      	sub	sp, #8
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d101      	bne.n	800f7e2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800f7de:	2301      	movs	r3, #1
 800f7e0:	e049      	b.n	800f876 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f7e8:	b2db      	uxtb	r3, r3
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d106      	bne.n	800f7fc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800f7f6:	6878      	ldr	r0, [r7, #4]
 800f7f8:	f000 f841 	bl	800f87e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	2202      	movs	r2, #2
 800f800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	681a      	ldr	r2, [r3, #0]
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	3304      	adds	r3, #4
 800f80c:	4619      	mov	r1, r3
 800f80e:	4610      	mov	r0, r2
 800f810:	f000 fd7e 	bl	8010310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	2201      	movs	r2, #1
 800f818:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	2201      	movs	r2, #1
 800f820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	2201      	movs	r2, #1
 800f828:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	2201      	movs	r2, #1
 800f830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	2201      	movs	r2, #1
 800f838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	2201      	movs	r2, #1
 800f840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	2201      	movs	r2, #1
 800f848:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	2201      	movs	r2, #1
 800f850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	2201      	movs	r2, #1
 800f858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	2201      	movs	r2, #1
 800f860:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	2201      	movs	r2, #1
 800f868:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	2201      	movs	r2, #1
 800f870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f874:	2300      	movs	r3, #0
}
 800f876:	4618      	mov	r0, r3
 800f878:	3708      	adds	r7, #8
 800f87a:	46bd      	mov	sp, r7
 800f87c:	bd80      	pop	{r7, pc}

0800f87e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800f87e:	b480      	push	{r7}
 800f880:	b083      	sub	sp, #12
 800f882:	af00      	add	r7, sp, #0
 800f884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800f886:	bf00      	nop
 800f888:	370c      	adds	r7, #12
 800f88a:	46bd      	mov	sp, r7
 800f88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f890:	4770      	bx	lr
	...

0800f894 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b084      	sub	sp, #16
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
 800f89c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f89e:	2300      	movs	r3, #0
 800f8a0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d109      	bne.n	800f8bc <HAL_TIM_OC_Start_IT+0x28>
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f8ae:	b2db      	uxtb	r3, r3
 800f8b0:	2b01      	cmp	r3, #1
 800f8b2:	bf14      	ite	ne
 800f8b4:	2301      	movne	r3, #1
 800f8b6:	2300      	moveq	r3, #0
 800f8b8:	b2db      	uxtb	r3, r3
 800f8ba:	e03c      	b.n	800f936 <HAL_TIM_OC_Start_IT+0xa2>
 800f8bc:	683b      	ldr	r3, [r7, #0]
 800f8be:	2b04      	cmp	r3, #4
 800f8c0:	d109      	bne.n	800f8d6 <HAL_TIM_OC_Start_IT+0x42>
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f8c8:	b2db      	uxtb	r3, r3
 800f8ca:	2b01      	cmp	r3, #1
 800f8cc:	bf14      	ite	ne
 800f8ce:	2301      	movne	r3, #1
 800f8d0:	2300      	moveq	r3, #0
 800f8d2:	b2db      	uxtb	r3, r3
 800f8d4:	e02f      	b.n	800f936 <HAL_TIM_OC_Start_IT+0xa2>
 800f8d6:	683b      	ldr	r3, [r7, #0]
 800f8d8:	2b08      	cmp	r3, #8
 800f8da:	d109      	bne.n	800f8f0 <HAL_TIM_OC_Start_IT+0x5c>
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f8e2:	b2db      	uxtb	r3, r3
 800f8e4:	2b01      	cmp	r3, #1
 800f8e6:	bf14      	ite	ne
 800f8e8:	2301      	movne	r3, #1
 800f8ea:	2300      	moveq	r3, #0
 800f8ec:	b2db      	uxtb	r3, r3
 800f8ee:	e022      	b.n	800f936 <HAL_TIM_OC_Start_IT+0xa2>
 800f8f0:	683b      	ldr	r3, [r7, #0]
 800f8f2:	2b0c      	cmp	r3, #12
 800f8f4:	d109      	bne.n	800f90a <HAL_TIM_OC_Start_IT+0x76>
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f8fc:	b2db      	uxtb	r3, r3
 800f8fe:	2b01      	cmp	r3, #1
 800f900:	bf14      	ite	ne
 800f902:	2301      	movne	r3, #1
 800f904:	2300      	moveq	r3, #0
 800f906:	b2db      	uxtb	r3, r3
 800f908:	e015      	b.n	800f936 <HAL_TIM_OC_Start_IT+0xa2>
 800f90a:	683b      	ldr	r3, [r7, #0]
 800f90c:	2b10      	cmp	r3, #16
 800f90e:	d109      	bne.n	800f924 <HAL_TIM_OC_Start_IT+0x90>
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f916:	b2db      	uxtb	r3, r3
 800f918:	2b01      	cmp	r3, #1
 800f91a:	bf14      	ite	ne
 800f91c:	2301      	movne	r3, #1
 800f91e:	2300      	moveq	r3, #0
 800f920:	b2db      	uxtb	r3, r3
 800f922:	e008      	b.n	800f936 <HAL_TIM_OC_Start_IT+0xa2>
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f92a:	b2db      	uxtb	r3, r3
 800f92c:	2b01      	cmp	r3, #1
 800f92e:	bf14      	ite	ne
 800f930:	2301      	movne	r3, #1
 800f932:	2300      	moveq	r3, #0
 800f934:	b2db      	uxtb	r3, r3
 800f936:	2b00      	cmp	r3, #0
 800f938:	d001      	beq.n	800f93e <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800f93a:	2301      	movs	r3, #1
 800f93c:	e0ec      	b.n	800fb18 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f93e:	683b      	ldr	r3, [r7, #0]
 800f940:	2b00      	cmp	r3, #0
 800f942:	d104      	bne.n	800f94e <HAL_TIM_OC_Start_IT+0xba>
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	2202      	movs	r2, #2
 800f948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f94c:	e023      	b.n	800f996 <HAL_TIM_OC_Start_IT+0x102>
 800f94e:	683b      	ldr	r3, [r7, #0]
 800f950:	2b04      	cmp	r3, #4
 800f952:	d104      	bne.n	800f95e <HAL_TIM_OC_Start_IT+0xca>
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	2202      	movs	r2, #2
 800f958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f95c:	e01b      	b.n	800f996 <HAL_TIM_OC_Start_IT+0x102>
 800f95e:	683b      	ldr	r3, [r7, #0]
 800f960:	2b08      	cmp	r3, #8
 800f962:	d104      	bne.n	800f96e <HAL_TIM_OC_Start_IT+0xda>
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	2202      	movs	r2, #2
 800f968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f96c:	e013      	b.n	800f996 <HAL_TIM_OC_Start_IT+0x102>
 800f96e:	683b      	ldr	r3, [r7, #0]
 800f970:	2b0c      	cmp	r3, #12
 800f972:	d104      	bne.n	800f97e <HAL_TIM_OC_Start_IT+0xea>
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	2202      	movs	r2, #2
 800f978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f97c:	e00b      	b.n	800f996 <HAL_TIM_OC_Start_IT+0x102>
 800f97e:	683b      	ldr	r3, [r7, #0]
 800f980:	2b10      	cmp	r3, #16
 800f982:	d104      	bne.n	800f98e <HAL_TIM_OC_Start_IT+0xfa>
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	2202      	movs	r2, #2
 800f988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f98c:	e003      	b.n	800f996 <HAL_TIM_OC_Start_IT+0x102>
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	2202      	movs	r2, #2
 800f992:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800f996:	683b      	ldr	r3, [r7, #0]
 800f998:	2b0c      	cmp	r3, #12
 800f99a:	d841      	bhi.n	800fa20 <HAL_TIM_OC_Start_IT+0x18c>
 800f99c:	a201      	add	r2, pc, #4	; (adr r2, 800f9a4 <HAL_TIM_OC_Start_IT+0x110>)
 800f99e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9a2:	bf00      	nop
 800f9a4:	0800f9d9 	.word	0x0800f9d9
 800f9a8:	0800fa21 	.word	0x0800fa21
 800f9ac:	0800fa21 	.word	0x0800fa21
 800f9b0:	0800fa21 	.word	0x0800fa21
 800f9b4:	0800f9eb 	.word	0x0800f9eb
 800f9b8:	0800fa21 	.word	0x0800fa21
 800f9bc:	0800fa21 	.word	0x0800fa21
 800f9c0:	0800fa21 	.word	0x0800fa21
 800f9c4:	0800f9fd 	.word	0x0800f9fd
 800f9c8:	0800fa21 	.word	0x0800fa21
 800f9cc:	0800fa21 	.word	0x0800fa21
 800f9d0:	0800fa21 	.word	0x0800fa21
 800f9d4:	0800fa0f 	.word	0x0800fa0f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	68da      	ldr	r2, [r3, #12]
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	f042 0202 	orr.w	r2, r2, #2
 800f9e6:	60da      	str	r2, [r3, #12]
      break;
 800f9e8:	e01d      	b.n	800fa26 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	68da      	ldr	r2, [r3, #12]
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	f042 0204 	orr.w	r2, r2, #4
 800f9f8:	60da      	str	r2, [r3, #12]
      break;
 800f9fa:	e014      	b.n	800fa26 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	68da      	ldr	r2, [r3, #12]
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	f042 0208 	orr.w	r2, r2, #8
 800fa0a:	60da      	str	r2, [r3, #12]
      break;
 800fa0c:	e00b      	b.n	800fa26 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	68da      	ldr	r2, [r3, #12]
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	f042 0210 	orr.w	r2, r2, #16
 800fa1c:	60da      	str	r2, [r3, #12]
      break;
 800fa1e:	e002      	b.n	800fa26 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800fa20:	2301      	movs	r3, #1
 800fa22:	73fb      	strb	r3, [r7, #15]
      break;
 800fa24:	bf00      	nop
  }

  if (status == HAL_OK)
 800fa26:	7bfb      	ldrb	r3, [r7, #15]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d174      	bne.n	800fb16 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	2201      	movs	r2, #1
 800fa32:	6839      	ldr	r1, [r7, #0]
 800fa34:	4618      	mov	r0, r3
 800fa36:	f001 f879 	bl	8010b2c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	4a38      	ldr	r2, [pc, #224]	; (800fb20 <HAL_TIM_OC_Start_IT+0x28c>)
 800fa40:	4293      	cmp	r3, r2
 800fa42:	d013      	beq.n	800fa6c <HAL_TIM_OC_Start_IT+0x1d8>
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	4a36      	ldr	r2, [pc, #216]	; (800fb24 <HAL_TIM_OC_Start_IT+0x290>)
 800fa4a:	4293      	cmp	r3, r2
 800fa4c:	d00e      	beq.n	800fa6c <HAL_TIM_OC_Start_IT+0x1d8>
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	4a35      	ldr	r2, [pc, #212]	; (800fb28 <HAL_TIM_OC_Start_IT+0x294>)
 800fa54:	4293      	cmp	r3, r2
 800fa56:	d009      	beq.n	800fa6c <HAL_TIM_OC_Start_IT+0x1d8>
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	4a33      	ldr	r2, [pc, #204]	; (800fb2c <HAL_TIM_OC_Start_IT+0x298>)
 800fa5e:	4293      	cmp	r3, r2
 800fa60:	d004      	beq.n	800fa6c <HAL_TIM_OC_Start_IT+0x1d8>
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	4a32      	ldr	r2, [pc, #200]	; (800fb30 <HAL_TIM_OC_Start_IT+0x29c>)
 800fa68:	4293      	cmp	r3, r2
 800fa6a:	d101      	bne.n	800fa70 <HAL_TIM_OC_Start_IT+0x1dc>
 800fa6c:	2301      	movs	r3, #1
 800fa6e:	e000      	b.n	800fa72 <HAL_TIM_OC_Start_IT+0x1de>
 800fa70:	2300      	movs	r3, #0
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d007      	beq.n	800fa86 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fa84:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	4a25      	ldr	r2, [pc, #148]	; (800fb20 <HAL_TIM_OC_Start_IT+0x28c>)
 800fa8c:	4293      	cmp	r3, r2
 800fa8e:	d022      	beq.n	800fad6 <HAL_TIM_OC_Start_IT+0x242>
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fa98:	d01d      	beq.n	800fad6 <HAL_TIM_OC_Start_IT+0x242>
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	4a25      	ldr	r2, [pc, #148]	; (800fb34 <HAL_TIM_OC_Start_IT+0x2a0>)
 800faa0:	4293      	cmp	r3, r2
 800faa2:	d018      	beq.n	800fad6 <HAL_TIM_OC_Start_IT+0x242>
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	4a23      	ldr	r2, [pc, #140]	; (800fb38 <HAL_TIM_OC_Start_IT+0x2a4>)
 800faaa:	4293      	cmp	r3, r2
 800faac:	d013      	beq.n	800fad6 <HAL_TIM_OC_Start_IT+0x242>
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	4a22      	ldr	r2, [pc, #136]	; (800fb3c <HAL_TIM_OC_Start_IT+0x2a8>)
 800fab4:	4293      	cmp	r3, r2
 800fab6:	d00e      	beq.n	800fad6 <HAL_TIM_OC_Start_IT+0x242>
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	4a19      	ldr	r2, [pc, #100]	; (800fb24 <HAL_TIM_OC_Start_IT+0x290>)
 800fabe:	4293      	cmp	r3, r2
 800fac0:	d009      	beq.n	800fad6 <HAL_TIM_OC_Start_IT+0x242>
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	4a1e      	ldr	r2, [pc, #120]	; (800fb40 <HAL_TIM_OC_Start_IT+0x2ac>)
 800fac8:	4293      	cmp	r3, r2
 800faca:	d004      	beq.n	800fad6 <HAL_TIM_OC_Start_IT+0x242>
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	4a15      	ldr	r2, [pc, #84]	; (800fb28 <HAL_TIM_OC_Start_IT+0x294>)
 800fad2:	4293      	cmp	r3, r2
 800fad4:	d115      	bne.n	800fb02 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	689a      	ldr	r2, [r3, #8]
 800fadc:	4b19      	ldr	r3, [pc, #100]	; (800fb44 <HAL_TIM_OC_Start_IT+0x2b0>)
 800fade:	4013      	ands	r3, r2
 800fae0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fae2:	68bb      	ldr	r3, [r7, #8]
 800fae4:	2b06      	cmp	r3, #6
 800fae6:	d015      	beq.n	800fb14 <HAL_TIM_OC_Start_IT+0x280>
 800fae8:	68bb      	ldr	r3, [r7, #8]
 800faea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800faee:	d011      	beq.n	800fb14 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	681a      	ldr	r2, [r3, #0]
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	f042 0201 	orr.w	r2, r2, #1
 800fafe:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fb00:	e008      	b.n	800fb14 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	681a      	ldr	r2, [r3, #0]
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	f042 0201 	orr.w	r2, r2, #1
 800fb10:	601a      	str	r2, [r3, #0]
 800fb12:	e000      	b.n	800fb16 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fb14:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800fb16:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb18:	4618      	mov	r0, r3
 800fb1a:	3710      	adds	r7, #16
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd80      	pop	{r7, pc}
 800fb20:	40010000 	.word	0x40010000
 800fb24:	40010400 	.word	0x40010400
 800fb28:	40014000 	.word	0x40014000
 800fb2c:	40014400 	.word	0x40014400
 800fb30:	40014800 	.word	0x40014800
 800fb34:	40000400 	.word	0x40000400
 800fb38:	40000800 	.word	0x40000800
 800fb3c:	40000c00 	.word	0x40000c00
 800fb40:	40001800 	.word	0x40001800
 800fb44:	00010007 	.word	0x00010007

0800fb48 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b086      	sub	sp, #24
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
 800fb50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d101      	bne.n	800fb5c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800fb58:	2301      	movs	r3, #1
 800fb5a:	e08f      	b.n	800fc7c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fb62:	b2db      	uxtb	r3, r3
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d106      	bne.n	800fb76 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2200      	movs	r2, #0
 800fb6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800fb70:	6878      	ldr	r0, [r7, #4]
 800fb72:	f7f4 fa67 	bl	8004044 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	2202      	movs	r2, #2
 800fb7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	6899      	ldr	r1, [r3, #8]
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	681a      	ldr	r2, [r3, #0]
 800fb88:	4b3e      	ldr	r3, [pc, #248]	; (800fc84 <HAL_TIM_Encoder_Init+0x13c>)
 800fb8a:	400b      	ands	r3, r1
 800fb8c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	681a      	ldr	r2, [r3, #0]
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	3304      	adds	r3, #4
 800fb96:	4619      	mov	r1, r3
 800fb98:	4610      	mov	r0, r2
 800fb9a:	f000 fbb9 	bl	8010310 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	689b      	ldr	r3, [r3, #8]
 800fba4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	699b      	ldr	r3, [r3, #24]
 800fbac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	6a1b      	ldr	r3, [r3, #32]
 800fbb4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800fbb6:	683b      	ldr	r3, [r7, #0]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	697a      	ldr	r2, [r7, #20]
 800fbbc:	4313      	orrs	r3, r2
 800fbbe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800fbc0:	693a      	ldr	r2, [r7, #16]
 800fbc2:	4b31      	ldr	r3, [pc, #196]	; (800fc88 <HAL_TIM_Encoder_Init+0x140>)
 800fbc4:	4013      	ands	r3, r2
 800fbc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800fbc8:	683b      	ldr	r3, [r7, #0]
 800fbca:	689a      	ldr	r2, [r3, #8]
 800fbcc:	683b      	ldr	r3, [r7, #0]
 800fbce:	699b      	ldr	r3, [r3, #24]
 800fbd0:	021b      	lsls	r3, r3, #8
 800fbd2:	4313      	orrs	r3, r2
 800fbd4:	693a      	ldr	r2, [r7, #16]
 800fbd6:	4313      	orrs	r3, r2
 800fbd8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800fbda:	693a      	ldr	r2, [r7, #16]
 800fbdc:	4b2b      	ldr	r3, [pc, #172]	; (800fc8c <HAL_TIM_Encoder_Init+0x144>)
 800fbde:	4013      	ands	r3, r2
 800fbe0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800fbe2:	693a      	ldr	r2, [r7, #16]
 800fbe4:	4b2a      	ldr	r3, [pc, #168]	; (800fc90 <HAL_TIM_Encoder_Init+0x148>)
 800fbe6:	4013      	ands	r3, r2
 800fbe8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800fbea:	683b      	ldr	r3, [r7, #0]
 800fbec:	68da      	ldr	r2, [r3, #12]
 800fbee:	683b      	ldr	r3, [r7, #0]
 800fbf0:	69db      	ldr	r3, [r3, #28]
 800fbf2:	021b      	lsls	r3, r3, #8
 800fbf4:	4313      	orrs	r3, r2
 800fbf6:	693a      	ldr	r2, [r7, #16]
 800fbf8:	4313      	orrs	r3, r2
 800fbfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800fbfc:	683b      	ldr	r3, [r7, #0]
 800fbfe:	691b      	ldr	r3, [r3, #16]
 800fc00:	011a      	lsls	r2, r3, #4
 800fc02:	683b      	ldr	r3, [r7, #0]
 800fc04:	6a1b      	ldr	r3, [r3, #32]
 800fc06:	031b      	lsls	r3, r3, #12
 800fc08:	4313      	orrs	r3, r2
 800fc0a:	693a      	ldr	r2, [r7, #16]
 800fc0c:	4313      	orrs	r3, r2
 800fc0e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800fc16:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800fc1e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800fc20:	683b      	ldr	r3, [r7, #0]
 800fc22:	685a      	ldr	r2, [r3, #4]
 800fc24:	683b      	ldr	r3, [r7, #0]
 800fc26:	695b      	ldr	r3, [r3, #20]
 800fc28:	011b      	lsls	r3, r3, #4
 800fc2a:	4313      	orrs	r3, r2
 800fc2c:	68fa      	ldr	r2, [r7, #12]
 800fc2e:	4313      	orrs	r3, r2
 800fc30:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	697a      	ldr	r2, [r7, #20]
 800fc38:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	693a      	ldr	r2, [r7, #16]
 800fc40:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	68fa      	ldr	r2, [r7, #12]
 800fc48:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	2201      	movs	r2, #1
 800fc4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	2201      	movs	r2, #1
 800fc56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	2201      	movs	r2, #1
 800fc5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	2201      	movs	r2, #1
 800fc66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	2201      	movs	r2, #1
 800fc6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	2201      	movs	r2, #1
 800fc76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fc7a:	2300      	movs	r3, #0
}
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	3718      	adds	r7, #24
 800fc80:	46bd      	mov	sp, r7
 800fc82:	bd80      	pop	{r7, pc}
 800fc84:	fffebff8 	.word	0xfffebff8
 800fc88:	fffffcfc 	.word	0xfffffcfc
 800fc8c:	fffff3f3 	.word	0xfffff3f3
 800fc90:	ffff0f0f 	.word	0xffff0f0f

0800fc94 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b084      	sub	sp, #16
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
 800fc9c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fca4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800fcac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fcb4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fcbc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800fcbe:	683b      	ldr	r3, [r7, #0]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d110      	bne.n	800fce6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800fcc4:	7bfb      	ldrb	r3, [r7, #15]
 800fcc6:	2b01      	cmp	r3, #1
 800fcc8:	d102      	bne.n	800fcd0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800fcca:	7b7b      	ldrb	r3, [r7, #13]
 800fccc:	2b01      	cmp	r3, #1
 800fcce:	d001      	beq.n	800fcd4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800fcd0:	2301      	movs	r3, #1
 800fcd2:	e069      	b.n	800fda8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	2202      	movs	r2, #2
 800fcd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	2202      	movs	r2, #2
 800fce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fce4:	e031      	b.n	800fd4a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800fce6:	683b      	ldr	r3, [r7, #0]
 800fce8:	2b04      	cmp	r3, #4
 800fcea:	d110      	bne.n	800fd0e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800fcec:	7bbb      	ldrb	r3, [r7, #14]
 800fcee:	2b01      	cmp	r3, #1
 800fcf0:	d102      	bne.n	800fcf8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800fcf2:	7b3b      	ldrb	r3, [r7, #12]
 800fcf4:	2b01      	cmp	r3, #1
 800fcf6:	d001      	beq.n	800fcfc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800fcf8:	2301      	movs	r3, #1
 800fcfa:	e055      	b.n	800fda8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	2202      	movs	r2, #2
 800fd00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	2202      	movs	r2, #2
 800fd08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fd0c:	e01d      	b.n	800fd4a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800fd0e:	7bfb      	ldrb	r3, [r7, #15]
 800fd10:	2b01      	cmp	r3, #1
 800fd12:	d108      	bne.n	800fd26 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800fd14:	7bbb      	ldrb	r3, [r7, #14]
 800fd16:	2b01      	cmp	r3, #1
 800fd18:	d105      	bne.n	800fd26 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800fd1a:	7b7b      	ldrb	r3, [r7, #13]
 800fd1c:	2b01      	cmp	r3, #1
 800fd1e:	d102      	bne.n	800fd26 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800fd20:	7b3b      	ldrb	r3, [r7, #12]
 800fd22:	2b01      	cmp	r3, #1
 800fd24:	d001      	beq.n	800fd2a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800fd26:	2301      	movs	r3, #1
 800fd28:	e03e      	b.n	800fda8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	2202      	movs	r2, #2
 800fd2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	2202      	movs	r2, #2
 800fd36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	2202      	movs	r2, #2
 800fd3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	2202      	movs	r2, #2
 800fd46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800fd4a:	683b      	ldr	r3, [r7, #0]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d003      	beq.n	800fd58 <HAL_TIM_Encoder_Start+0xc4>
 800fd50:	683b      	ldr	r3, [r7, #0]
 800fd52:	2b04      	cmp	r3, #4
 800fd54:	d008      	beq.n	800fd68 <HAL_TIM_Encoder_Start+0xd4>
 800fd56:	e00f      	b.n	800fd78 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	2201      	movs	r2, #1
 800fd5e:	2100      	movs	r1, #0
 800fd60:	4618      	mov	r0, r3
 800fd62:	f000 fee3 	bl	8010b2c <TIM_CCxChannelCmd>
      break;
 800fd66:	e016      	b.n	800fd96 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	2201      	movs	r2, #1
 800fd6e:	2104      	movs	r1, #4
 800fd70:	4618      	mov	r0, r3
 800fd72:	f000 fedb 	bl	8010b2c <TIM_CCxChannelCmd>
      break;
 800fd76:	e00e      	b.n	800fd96 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	2201      	movs	r2, #1
 800fd7e:	2100      	movs	r1, #0
 800fd80:	4618      	mov	r0, r3
 800fd82:	f000 fed3 	bl	8010b2c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	2201      	movs	r2, #1
 800fd8c:	2104      	movs	r1, #4
 800fd8e:	4618      	mov	r0, r3
 800fd90:	f000 fecc 	bl	8010b2c <TIM_CCxChannelCmd>
      break;
 800fd94:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	681a      	ldr	r2, [r3, #0]
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	f042 0201 	orr.w	r2, r2, #1
 800fda4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800fda6:	2300      	movs	r3, #0
}
 800fda8:	4618      	mov	r0, r3
 800fdaa:	3710      	adds	r7, #16
 800fdac:	46bd      	mov	sp, r7
 800fdae:	bd80      	pop	{r7, pc}

0800fdb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b082      	sub	sp, #8
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	691b      	ldr	r3, [r3, #16]
 800fdbe:	f003 0302 	and.w	r3, r3, #2
 800fdc2:	2b02      	cmp	r3, #2
 800fdc4:	d122      	bne.n	800fe0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	68db      	ldr	r3, [r3, #12]
 800fdcc:	f003 0302 	and.w	r3, r3, #2
 800fdd0:	2b02      	cmp	r3, #2
 800fdd2:	d11b      	bne.n	800fe0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	f06f 0202 	mvn.w	r2, #2
 800fddc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	2201      	movs	r2, #1
 800fde2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	699b      	ldr	r3, [r3, #24]
 800fdea:	f003 0303 	and.w	r3, r3, #3
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d003      	beq.n	800fdfa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fdf2:	6878      	ldr	r0, [r7, #4]
 800fdf4:	f000 fa6e 	bl	80102d4 <HAL_TIM_IC_CaptureCallback>
 800fdf8:	e005      	b.n	800fe06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fdfa:	6878      	ldr	r0, [r7, #4]
 800fdfc:	f7f1 fee2 	bl	8001bc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fe00:	6878      	ldr	r0, [r7, #4]
 800fe02:	f000 fa71 	bl	80102e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	2200      	movs	r2, #0
 800fe0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	691b      	ldr	r3, [r3, #16]
 800fe12:	f003 0304 	and.w	r3, r3, #4
 800fe16:	2b04      	cmp	r3, #4
 800fe18:	d122      	bne.n	800fe60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	68db      	ldr	r3, [r3, #12]
 800fe20:	f003 0304 	and.w	r3, r3, #4
 800fe24:	2b04      	cmp	r3, #4
 800fe26:	d11b      	bne.n	800fe60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	f06f 0204 	mvn.w	r2, #4
 800fe30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	2202      	movs	r2, #2
 800fe36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	699b      	ldr	r3, [r3, #24]
 800fe3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d003      	beq.n	800fe4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fe46:	6878      	ldr	r0, [r7, #4]
 800fe48:	f000 fa44 	bl	80102d4 <HAL_TIM_IC_CaptureCallback>
 800fe4c:	e005      	b.n	800fe5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fe4e:	6878      	ldr	r0, [r7, #4]
 800fe50:	f7f1 feb8 	bl	8001bc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fe54:	6878      	ldr	r0, [r7, #4]
 800fe56:	f000 fa47 	bl	80102e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	691b      	ldr	r3, [r3, #16]
 800fe66:	f003 0308 	and.w	r3, r3, #8
 800fe6a:	2b08      	cmp	r3, #8
 800fe6c:	d122      	bne.n	800feb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	68db      	ldr	r3, [r3, #12]
 800fe74:	f003 0308 	and.w	r3, r3, #8
 800fe78:	2b08      	cmp	r3, #8
 800fe7a:	d11b      	bne.n	800feb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	f06f 0208 	mvn.w	r2, #8
 800fe84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	2204      	movs	r2, #4
 800fe8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	69db      	ldr	r3, [r3, #28]
 800fe92:	f003 0303 	and.w	r3, r3, #3
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d003      	beq.n	800fea2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fe9a:	6878      	ldr	r0, [r7, #4]
 800fe9c:	f000 fa1a 	bl	80102d4 <HAL_TIM_IC_CaptureCallback>
 800fea0:	e005      	b.n	800feae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fea2:	6878      	ldr	r0, [r7, #4]
 800fea4:	f7f1 fe8e 	bl	8001bc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fea8:	6878      	ldr	r0, [r7, #4]
 800feaa:	f000 fa1d 	bl	80102e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	2200      	movs	r2, #0
 800feb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	691b      	ldr	r3, [r3, #16]
 800feba:	f003 0310 	and.w	r3, r3, #16
 800febe:	2b10      	cmp	r3, #16
 800fec0:	d122      	bne.n	800ff08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	68db      	ldr	r3, [r3, #12]
 800fec8:	f003 0310 	and.w	r3, r3, #16
 800fecc:	2b10      	cmp	r3, #16
 800fece:	d11b      	bne.n	800ff08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	f06f 0210 	mvn.w	r2, #16
 800fed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	2208      	movs	r2, #8
 800fede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	69db      	ldr	r3, [r3, #28]
 800fee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800feea:	2b00      	cmp	r3, #0
 800feec:	d003      	beq.n	800fef6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800feee:	6878      	ldr	r0, [r7, #4]
 800fef0:	f000 f9f0 	bl	80102d4 <HAL_TIM_IC_CaptureCallback>
 800fef4:	e005      	b.n	800ff02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fef6:	6878      	ldr	r0, [r7, #4]
 800fef8:	f7f1 fe64 	bl	8001bc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fefc:	6878      	ldr	r0, [r7, #4]
 800fefe:	f000 f9f3 	bl	80102e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	2200      	movs	r2, #0
 800ff06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	691b      	ldr	r3, [r3, #16]
 800ff0e:	f003 0301 	and.w	r3, r3, #1
 800ff12:	2b01      	cmp	r3, #1
 800ff14:	d10e      	bne.n	800ff34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	68db      	ldr	r3, [r3, #12]
 800ff1c:	f003 0301 	and.w	r3, r3, #1
 800ff20:	2b01      	cmp	r3, #1
 800ff22:	d107      	bne.n	800ff34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	f06f 0201 	mvn.w	r2, #1
 800ff2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ff2e:	6878      	ldr	r0, [r7, #4]
 800ff30:	f7f1 fdd0 	bl	8001ad4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	691b      	ldr	r3, [r3, #16]
 800ff3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff3e:	2b80      	cmp	r3, #128	; 0x80
 800ff40:	d10e      	bne.n	800ff60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	68db      	ldr	r3, [r3, #12]
 800ff48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff4c:	2b80      	cmp	r3, #128	; 0x80
 800ff4e:	d107      	bne.n	800ff60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ff58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ff5a:	6878      	ldr	r0, [r7, #4]
 800ff5c:	f000 fea4 	bl	8010ca8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	691b      	ldr	r3, [r3, #16]
 800ff66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ff6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ff6e:	d10e      	bne.n	800ff8e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	68db      	ldr	r3, [r3, #12]
 800ff76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff7a:	2b80      	cmp	r3, #128	; 0x80
 800ff7c:	d107      	bne.n	800ff8e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ff86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ff88:	6878      	ldr	r0, [r7, #4]
 800ff8a:	f000 fe97 	bl	8010cbc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	691b      	ldr	r3, [r3, #16]
 800ff94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff98:	2b40      	cmp	r3, #64	; 0x40
 800ff9a:	d10e      	bne.n	800ffba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	68db      	ldr	r3, [r3, #12]
 800ffa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ffa6:	2b40      	cmp	r3, #64	; 0x40
 800ffa8:	d107      	bne.n	800ffba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ffb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ffb4:	6878      	ldr	r0, [r7, #4]
 800ffb6:	f000 f9a1 	bl	80102fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	691b      	ldr	r3, [r3, #16]
 800ffc0:	f003 0320 	and.w	r3, r3, #32
 800ffc4:	2b20      	cmp	r3, #32
 800ffc6:	d10e      	bne.n	800ffe6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	68db      	ldr	r3, [r3, #12]
 800ffce:	f003 0320 	and.w	r3, r3, #32
 800ffd2:	2b20      	cmp	r3, #32
 800ffd4:	d107      	bne.n	800ffe6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	f06f 0220 	mvn.w	r2, #32
 800ffde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ffe0:	6878      	ldr	r0, [r7, #4]
 800ffe2:	f000 fe57 	bl	8010c94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ffe6:	bf00      	nop
 800ffe8:	3708      	adds	r7, #8
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd80      	pop	{r7, pc}
	...

0800fff0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800fff0:	b580      	push	{r7, lr}
 800fff2:	b086      	sub	sp, #24
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	60f8      	str	r0, [r7, #12]
 800fff8:	60b9      	str	r1, [r7, #8]
 800fffa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fffc:	2300      	movs	r3, #0
 800fffe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010006:	2b01      	cmp	r3, #1
 8010008:	d101      	bne.n	801000e <HAL_TIM_OC_ConfigChannel+0x1e>
 801000a:	2302      	movs	r3, #2
 801000c:	e066      	b.n	80100dc <HAL_TIM_OC_ConfigChannel+0xec>
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	2201      	movs	r2, #1
 8010012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	2b14      	cmp	r3, #20
 801001a:	d857      	bhi.n	80100cc <HAL_TIM_OC_ConfigChannel+0xdc>
 801001c:	a201      	add	r2, pc, #4	; (adr r2, 8010024 <HAL_TIM_OC_ConfigChannel+0x34>)
 801001e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010022:	bf00      	nop
 8010024:	08010079 	.word	0x08010079
 8010028:	080100cd 	.word	0x080100cd
 801002c:	080100cd 	.word	0x080100cd
 8010030:	080100cd 	.word	0x080100cd
 8010034:	08010087 	.word	0x08010087
 8010038:	080100cd 	.word	0x080100cd
 801003c:	080100cd 	.word	0x080100cd
 8010040:	080100cd 	.word	0x080100cd
 8010044:	08010095 	.word	0x08010095
 8010048:	080100cd 	.word	0x080100cd
 801004c:	080100cd 	.word	0x080100cd
 8010050:	080100cd 	.word	0x080100cd
 8010054:	080100a3 	.word	0x080100a3
 8010058:	080100cd 	.word	0x080100cd
 801005c:	080100cd 	.word	0x080100cd
 8010060:	080100cd 	.word	0x080100cd
 8010064:	080100b1 	.word	0x080100b1
 8010068:	080100cd 	.word	0x080100cd
 801006c:	080100cd 	.word	0x080100cd
 8010070:	080100cd 	.word	0x080100cd
 8010074:	080100bf 	.word	0x080100bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	68b9      	ldr	r1, [r7, #8]
 801007e:	4618      	mov	r0, r3
 8010080:	f000 f9e0 	bl	8010444 <TIM_OC1_SetConfig>
      break;
 8010084:	e025      	b.n	80100d2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	68b9      	ldr	r1, [r7, #8]
 801008c:	4618      	mov	r0, r3
 801008e:	f000 fa69 	bl	8010564 <TIM_OC2_SetConfig>
      break;
 8010092:	e01e      	b.n	80100d2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	68b9      	ldr	r1, [r7, #8]
 801009a:	4618      	mov	r0, r3
 801009c:	f000 faec 	bl	8010678 <TIM_OC3_SetConfig>
      break;
 80100a0:	e017      	b.n	80100d2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	68b9      	ldr	r1, [r7, #8]
 80100a8:	4618      	mov	r0, r3
 80100aa:	f000 fb6d 	bl	8010788 <TIM_OC4_SetConfig>
      break;
 80100ae:	e010      	b.n	80100d2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	68b9      	ldr	r1, [r7, #8]
 80100b6:	4618      	mov	r0, r3
 80100b8:	f000 fbd0 	bl	801085c <TIM_OC5_SetConfig>
      break;
 80100bc:	e009      	b.n	80100d2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	68b9      	ldr	r1, [r7, #8]
 80100c4:	4618      	mov	r0, r3
 80100c6:	f000 fc2d 	bl	8010924 <TIM_OC6_SetConfig>
      break;
 80100ca:	e002      	b.n	80100d2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80100cc:	2301      	movs	r3, #1
 80100ce:	75fb      	strb	r3, [r7, #23]
      break;
 80100d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	2200      	movs	r2, #0
 80100d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80100da:	7dfb      	ldrb	r3, [r7, #23]
}
 80100dc:	4618      	mov	r0, r3
 80100de:	3718      	adds	r7, #24
 80100e0:	46bd      	mov	sp, r7
 80100e2:	bd80      	pop	{r7, pc}

080100e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b084      	sub	sp, #16
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	6078      	str	r0, [r7, #4]
 80100ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80100ee:	2300      	movs	r3, #0
 80100f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80100f8:	2b01      	cmp	r3, #1
 80100fa:	d101      	bne.n	8010100 <HAL_TIM_ConfigClockSource+0x1c>
 80100fc:	2302      	movs	r3, #2
 80100fe:	e0dc      	b.n	80102ba <HAL_TIM_ConfigClockSource+0x1d6>
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	2201      	movs	r2, #1
 8010104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	2202      	movs	r2, #2
 801010c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	689b      	ldr	r3, [r3, #8]
 8010116:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010118:	68ba      	ldr	r2, [r7, #8]
 801011a:	4b6a      	ldr	r3, [pc, #424]	; (80102c4 <HAL_TIM_ConfigClockSource+0x1e0>)
 801011c:	4013      	ands	r3, r2
 801011e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010120:	68bb      	ldr	r3, [r7, #8]
 8010122:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010126:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	68ba      	ldr	r2, [r7, #8]
 801012e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010130:	683b      	ldr	r3, [r7, #0]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	4a64      	ldr	r2, [pc, #400]	; (80102c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8010136:	4293      	cmp	r3, r2
 8010138:	f000 80a9 	beq.w	801028e <HAL_TIM_ConfigClockSource+0x1aa>
 801013c:	4a62      	ldr	r2, [pc, #392]	; (80102c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 801013e:	4293      	cmp	r3, r2
 8010140:	f200 80ae 	bhi.w	80102a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8010144:	4a61      	ldr	r2, [pc, #388]	; (80102cc <HAL_TIM_ConfigClockSource+0x1e8>)
 8010146:	4293      	cmp	r3, r2
 8010148:	f000 80a1 	beq.w	801028e <HAL_TIM_ConfigClockSource+0x1aa>
 801014c:	4a5f      	ldr	r2, [pc, #380]	; (80102cc <HAL_TIM_ConfigClockSource+0x1e8>)
 801014e:	4293      	cmp	r3, r2
 8010150:	f200 80a6 	bhi.w	80102a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8010154:	4a5e      	ldr	r2, [pc, #376]	; (80102d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8010156:	4293      	cmp	r3, r2
 8010158:	f000 8099 	beq.w	801028e <HAL_TIM_ConfigClockSource+0x1aa>
 801015c:	4a5c      	ldr	r2, [pc, #368]	; (80102d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 801015e:	4293      	cmp	r3, r2
 8010160:	f200 809e 	bhi.w	80102a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8010164:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010168:	f000 8091 	beq.w	801028e <HAL_TIM_ConfigClockSource+0x1aa>
 801016c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010170:	f200 8096 	bhi.w	80102a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8010174:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010178:	f000 8089 	beq.w	801028e <HAL_TIM_ConfigClockSource+0x1aa>
 801017c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010180:	f200 808e 	bhi.w	80102a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8010184:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010188:	d03e      	beq.n	8010208 <HAL_TIM_ConfigClockSource+0x124>
 801018a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801018e:	f200 8087 	bhi.w	80102a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8010192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010196:	f000 8086 	beq.w	80102a6 <HAL_TIM_ConfigClockSource+0x1c2>
 801019a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801019e:	d87f      	bhi.n	80102a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80101a0:	2b70      	cmp	r3, #112	; 0x70
 80101a2:	d01a      	beq.n	80101da <HAL_TIM_ConfigClockSource+0xf6>
 80101a4:	2b70      	cmp	r3, #112	; 0x70
 80101a6:	d87b      	bhi.n	80102a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80101a8:	2b60      	cmp	r3, #96	; 0x60
 80101aa:	d050      	beq.n	801024e <HAL_TIM_ConfigClockSource+0x16a>
 80101ac:	2b60      	cmp	r3, #96	; 0x60
 80101ae:	d877      	bhi.n	80102a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80101b0:	2b50      	cmp	r3, #80	; 0x50
 80101b2:	d03c      	beq.n	801022e <HAL_TIM_ConfigClockSource+0x14a>
 80101b4:	2b50      	cmp	r3, #80	; 0x50
 80101b6:	d873      	bhi.n	80102a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80101b8:	2b40      	cmp	r3, #64	; 0x40
 80101ba:	d058      	beq.n	801026e <HAL_TIM_ConfigClockSource+0x18a>
 80101bc:	2b40      	cmp	r3, #64	; 0x40
 80101be:	d86f      	bhi.n	80102a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80101c0:	2b30      	cmp	r3, #48	; 0x30
 80101c2:	d064      	beq.n	801028e <HAL_TIM_ConfigClockSource+0x1aa>
 80101c4:	2b30      	cmp	r3, #48	; 0x30
 80101c6:	d86b      	bhi.n	80102a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80101c8:	2b20      	cmp	r3, #32
 80101ca:	d060      	beq.n	801028e <HAL_TIM_ConfigClockSource+0x1aa>
 80101cc:	2b20      	cmp	r3, #32
 80101ce:	d867      	bhi.n	80102a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d05c      	beq.n	801028e <HAL_TIM_ConfigClockSource+0x1aa>
 80101d4:	2b10      	cmp	r3, #16
 80101d6:	d05a      	beq.n	801028e <HAL_TIM_ConfigClockSource+0x1aa>
 80101d8:	e062      	b.n	80102a0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	6818      	ldr	r0, [r3, #0]
 80101de:	683b      	ldr	r3, [r7, #0]
 80101e0:	6899      	ldr	r1, [r3, #8]
 80101e2:	683b      	ldr	r3, [r7, #0]
 80101e4:	685a      	ldr	r2, [r3, #4]
 80101e6:	683b      	ldr	r3, [r7, #0]
 80101e8:	68db      	ldr	r3, [r3, #12]
 80101ea:	f000 fc7f 	bl	8010aec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	689b      	ldr	r3, [r3, #8]
 80101f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80101f6:	68bb      	ldr	r3, [r7, #8]
 80101f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80101fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	68ba      	ldr	r2, [r7, #8]
 8010204:	609a      	str	r2, [r3, #8]
      break;
 8010206:	e04f      	b.n	80102a8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	6818      	ldr	r0, [r3, #0]
 801020c:	683b      	ldr	r3, [r7, #0]
 801020e:	6899      	ldr	r1, [r3, #8]
 8010210:	683b      	ldr	r3, [r7, #0]
 8010212:	685a      	ldr	r2, [r3, #4]
 8010214:	683b      	ldr	r3, [r7, #0]
 8010216:	68db      	ldr	r3, [r3, #12]
 8010218:	f000 fc68 	bl	8010aec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	689a      	ldr	r2, [r3, #8]
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801022a:	609a      	str	r2, [r3, #8]
      break;
 801022c:	e03c      	b.n	80102a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	6818      	ldr	r0, [r3, #0]
 8010232:	683b      	ldr	r3, [r7, #0]
 8010234:	6859      	ldr	r1, [r3, #4]
 8010236:	683b      	ldr	r3, [r7, #0]
 8010238:	68db      	ldr	r3, [r3, #12]
 801023a:	461a      	mov	r2, r3
 801023c:	f000 fbd8 	bl	80109f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	2150      	movs	r1, #80	; 0x50
 8010246:	4618      	mov	r0, r3
 8010248:	f000 fc32 	bl	8010ab0 <TIM_ITRx_SetConfig>
      break;
 801024c:	e02c      	b.n	80102a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	6818      	ldr	r0, [r3, #0]
 8010252:	683b      	ldr	r3, [r7, #0]
 8010254:	6859      	ldr	r1, [r3, #4]
 8010256:	683b      	ldr	r3, [r7, #0]
 8010258:	68db      	ldr	r3, [r3, #12]
 801025a:	461a      	mov	r2, r3
 801025c:	f000 fbf7 	bl	8010a4e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	2160      	movs	r1, #96	; 0x60
 8010266:	4618      	mov	r0, r3
 8010268:	f000 fc22 	bl	8010ab0 <TIM_ITRx_SetConfig>
      break;
 801026c:	e01c      	b.n	80102a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	6818      	ldr	r0, [r3, #0]
 8010272:	683b      	ldr	r3, [r7, #0]
 8010274:	6859      	ldr	r1, [r3, #4]
 8010276:	683b      	ldr	r3, [r7, #0]
 8010278:	68db      	ldr	r3, [r3, #12]
 801027a:	461a      	mov	r2, r3
 801027c:	f000 fbb8 	bl	80109f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	2140      	movs	r1, #64	; 0x40
 8010286:	4618      	mov	r0, r3
 8010288:	f000 fc12 	bl	8010ab0 <TIM_ITRx_SetConfig>
      break;
 801028c:	e00c      	b.n	80102a8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	681a      	ldr	r2, [r3, #0]
 8010292:	683b      	ldr	r3, [r7, #0]
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	4619      	mov	r1, r3
 8010298:	4610      	mov	r0, r2
 801029a:	f000 fc09 	bl	8010ab0 <TIM_ITRx_SetConfig>
      break;
 801029e:	e003      	b.n	80102a8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80102a0:	2301      	movs	r3, #1
 80102a2:	73fb      	strb	r3, [r7, #15]
      break;
 80102a4:	e000      	b.n	80102a8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80102a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	2201      	movs	r2, #1
 80102ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	2200      	movs	r2, #0
 80102b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80102b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80102ba:	4618      	mov	r0, r3
 80102bc:	3710      	adds	r7, #16
 80102be:	46bd      	mov	sp, r7
 80102c0:	bd80      	pop	{r7, pc}
 80102c2:	bf00      	nop
 80102c4:	ffceff88 	.word	0xffceff88
 80102c8:	00100040 	.word	0x00100040
 80102cc:	00100030 	.word	0x00100030
 80102d0:	00100020 	.word	0x00100020

080102d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80102d4:	b480      	push	{r7}
 80102d6:	b083      	sub	sp, #12
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80102dc:	bf00      	nop
 80102de:	370c      	adds	r7, #12
 80102e0:	46bd      	mov	sp, r7
 80102e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e6:	4770      	bx	lr

080102e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80102e8:	b480      	push	{r7}
 80102ea:	b083      	sub	sp, #12
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80102f0:	bf00      	nop
 80102f2:	370c      	adds	r7, #12
 80102f4:	46bd      	mov	sp, r7
 80102f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102fa:	4770      	bx	lr

080102fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80102fc:	b480      	push	{r7}
 80102fe:	b083      	sub	sp, #12
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010304:	bf00      	nop
 8010306:	370c      	adds	r7, #12
 8010308:	46bd      	mov	sp, r7
 801030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030e:	4770      	bx	lr

08010310 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010310:	b480      	push	{r7}
 8010312:	b085      	sub	sp, #20
 8010314:	af00      	add	r7, sp, #0
 8010316:	6078      	str	r0, [r7, #4]
 8010318:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	4a40      	ldr	r2, [pc, #256]	; (8010424 <TIM_Base_SetConfig+0x114>)
 8010324:	4293      	cmp	r3, r2
 8010326:	d013      	beq.n	8010350 <TIM_Base_SetConfig+0x40>
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801032e:	d00f      	beq.n	8010350 <TIM_Base_SetConfig+0x40>
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	4a3d      	ldr	r2, [pc, #244]	; (8010428 <TIM_Base_SetConfig+0x118>)
 8010334:	4293      	cmp	r3, r2
 8010336:	d00b      	beq.n	8010350 <TIM_Base_SetConfig+0x40>
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	4a3c      	ldr	r2, [pc, #240]	; (801042c <TIM_Base_SetConfig+0x11c>)
 801033c:	4293      	cmp	r3, r2
 801033e:	d007      	beq.n	8010350 <TIM_Base_SetConfig+0x40>
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	4a3b      	ldr	r2, [pc, #236]	; (8010430 <TIM_Base_SetConfig+0x120>)
 8010344:	4293      	cmp	r3, r2
 8010346:	d003      	beq.n	8010350 <TIM_Base_SetConfig+0x40>
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	4a3a      	ldr	r2, [pc, #232]	; (8010434 <TIM_Base_SetConfig+0x124>)
 801034c:	4293      	cmp	r3, r2
 801034e:	d108      	bne.n	8010362 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010356:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010358:	683b      	ldr	r3, [r7, #0]
 801035a:	685b      	ldr	r3, [r3, #4]
 801035c:	68fa      	ldr	r2, [r7, #12]
 801035e:	4313      	orrs	r3, r2
 8010360:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	4a2f      	ldr	r2, [pc, #188]	; (8010424 <TIM_Base_SetConfig+0x114>)
 8010366:	4293      	cmp	r3, r2
 8010368:	d01f      	beq.n	80103aa <TIM_Base_SetConfig+0x9a>
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010370:	d01b      	beq.n	80103aa <TIM_Base_SetConfig+0x9a>
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	4a2c      	ldr	r2, [pc, #176]	; (8010428 <TIM_Base_SetConfig+0x118>)
 8010376:	4293      	cmp	r3, r2
 8010378:	d017      	beq.n	80103aa <TIM_Base_SetConfig+0x9a>
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	4a2b      	ldr	r2, [pc, #172]	; (801042c <TIM_Base_SetConfig+0x11c>)
 801037e:	4293      	cmp	r3, r2
 8010380:	d013      	beq.n	80103aa <TIM_Base_SetConfig+0x9a>
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	4a2a      	ldr	r2, [pc, #168]	; (8010430 <TIM_Base_SetConfig+0x120>)
 8010386:	4293      	cmp	r3, r2
 8010388:	d00f      	beq.n	80103aa <TIM_Base_SetConfig+0x9a>
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	4a29      	ldr	r2, [pc, #164]	; (8010434 <TIM_Base_SetConfig+0x124>)
 801038e:	4293      	cmp	r3, r2
 8010390:	d00b      	beq.n	80103aa <TIM_Base_SetConfig+0x9a>
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	4a28      	ldr	r2, [pc, #160]	; (8010438 <TIM_Base_SetConfig+0x128>)
 8010396:	4293      	cmp	r3, r2
 8010398:	d007      	beq.n	80103aa <TIM_Base_SetConfig+0x9a>
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	4a27      	ldr	r2, [pc, #156]	; (801043c <TIM_Base_SetConfig+0x12c>)
 801039e:	4293      	cmp	r3, r2
 80103a0:	d003      	beq.n	80103aa <TIM_Base_SetConfig+0x9a>
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	4a26      	ldr	r2, [pc, #152]	; (8010440 <TIM_Base_SetConfig+0x130>)
 80103a6:	4293      	cmp	r3, r2
 80103a8:	d108      	bne.n	80103bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80103b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80103b2:	683b      	ldr	r3, [r7, #0]
 80103b4:	68db      	ldr	r3, [r3, #12]
 80103b6:	68fa      	ldr	r2, [r7, #12]
 80103b8:	4313      	orrs	r3, r2
 80103ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80103c2:	683b      	ldr	r3, [r7, #0]
 80103c4:	695b      	ldr	r3, [r3, #20]
 80103c6:	4313      	orrs	r3, r2
 80103c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	68fa      	ldr	r2, [r7, #12]
 80103ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80103d0:	683b      	ldr	r3, [r7, #0]
 80103d2:	689a      	ldr	r2, [r3, #8]
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80103d8:	683b      	ldr	r3, [r7, #0]
 80103da:	681a      	ldr	r2, [r3, #0]
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	4a10      	ldr	r2, [pc, #64]	; (8010424 <TIM_Base_SetConfig+0x114>)
 80103e4:	4293      	cmp	r3, r2
 80103e6:	d00f      	beq.n	8010408 <TIM_Base_SetConfig+0xf8>
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	4a12      	ldr	r2, [pc, #72]	; (8010434 <TIM_Base_SetConfig+0x124>)
 80103ec:	4293      	cmp	r3, r2
 80103ee:	d00b      	beq.n	8010408 <TIM_Base_SetConfig+0xf8>
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	4a11      	ldr	r2, [pc, #68]	; (8010438 <TIM_Base_SetConfig+0x128>)
 80103f4:	4293      	cmp	r3, r2
 80103f6:	d007      	beq.n	8010408 <TIM_Base_SetConfig+0xf8>
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	4a10      	ldr	r2, [pc, #64]	; (801043c <TIM_Base_SetConfig+0x12c>)
 80103fc:	4293      	cmp	r3, r2
 80103fe:	d003      	beq.n	8010408 <TIM_Base_SetConfig+0xf8>
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	4a0f      	ldr	r2, [pc, #60]	; (8010440 <TIM_Base_SetConfig+0x130>)
 8010404:	4293      	cmp	r3, r2
 8010406:	d103      	bne.n	8010410 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010408:	683b      	ldr	r3, [r7, #0]
 801040a:	691a      	ldr	r2, [r3, #16]
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	2201      	movs	r2, #1
 8010414:	615a      	str	r2, [r3, #20]
}
 8010416:	bf00      	nop
 8010418:	3714      	adds	r7, #20
 801041a:	46bd      	mov	sp, r7
 801041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010420:	4770      	bx	lr
 8010422:	bf00      	nop
 8010424:	40010000 	.word	0x40010000
 8010428:	40000400 	.word	0x40000400
 801042c:	40000800 	.word	0x40000800
 8010430:	40000c00 	.word	0x40000c00
 8010434:	40010400 	.word	0x40010400
 8010438:	40014000 	.word	0x40014000
 801043c:	40014400 	.word	0x40014400
 8010440:	40014800 	.word	0x40014800

08010444 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010444:	b480      	push	{r7}
 8010446:	b087      	sub	sp, #28
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
 801044c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	6a1b      	ldr	r3, [r3, #32]
 8010452:	f023 0201 	bic.w	r2, r3, #1
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	6a1b      	ldr	r3, [r3, #32]
 801045e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	685b      	ldr	r3, [r3, #4]
 8010464:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	699b      	ldr	r3, [r3, #24]
 801046a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801046c:	68fa      	ldr	r2, [r7, #12]
 801046e:	4b37      	ldr	r3, [pc, #220]	; (801054c <TIM_OC1_SetConfig+0x108>)
 8010470:	4013      	ands	r3, r2
 8010472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	f023 0303 	bic.w	r3, r3, #3
 801047a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801047c:	683b      	ldr	r3, [r7, #0]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	68fa      	ldr	r2, [r7, #12]
 8010482:	4313      	orrs	r3, r2
 8010484:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010486:	697b      	ldr	r3, [r7, #20]
 8010488:	f023 0302 	bic.w	r3, r3, #2
 801048c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801048e:	683b      	ldr	r3, [r7, #0]
 8010490:	689b      	ldr	r3, [r3, #8]
 8010492:	697a      	ldr	r2, [r7, #20]
 8010494:	4313      	orrs	r3, r2
 8010496:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	4a2d      	ldr	r2, [pc, #180]	; (8010550 <TIM_OC1_SetConfig+0x10c>)
 801049c:	4293      	cmp	r3, r2
 801049e:	d00f      	beq.n	80104c0 <TIM_OC1_SetConfig+0x7c>
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	4a2c      	ldr	r2, [pc, #176]	; (8010554 <TIM_OC1_SetConfig+0x110>)
 80104a4:	4293      	cmp	r3, r2
 80104a6:	d00b      	beq.n	80104c0 <TIM_OC1_SetConfig+0x7c>
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	4a2b      	ldr	r2, [pc, #172]	; (8010558 <TIM_OC1_SetConfig+0x114>)
 80104ac:	4293      	cmp	r3, r2
 80104ae:	d007      	beq.n	80104c0 <TIM_OC1_SetConfig+0x7c>
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	4a2a      	ldr	r2, [pc, #168]	; (801055c <TIM_OC1_SetConfig+0x118>)
 80104b4:	4293      	cmp	r3, r2
 80104b6:	d003      	beq.n	80104c0 <TIM_OC1_SetConfig+0x7c>
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	4a29      	ldr	r2, [pc, #164]	; (8010560 <TIM_OC1_SetConfig+0x11c>)
 80104bc:	4293      	cmp	r3, r2
 80104be:	d10c      	bne.n	80104da <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80104c0:	697b      	ldr	r3, [r7, #20]
 80104c2:	f023 0308 	bic.w	r3, r3, #8
 80104c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80104c8:	683b      	ldr	r3, [r7, #0]
 80104ca:	68db      	ldr	r3, [r3, #12]
 80104cc:	697a      	ldr	r2, [r7, #20]
 80104ce:	4313      	orrs	r3, r2
 80104d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80104d2:	697b      	ldr	r3, [r7, #20]
 80104d4:	f023 0304 	bic.w	r3, r3, #4
 80104d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	4a1c      	ldr	r2, [pc, #112]	; (8010550 <TIM_OC1_SetConfig+0x10c>)
 80104de:	4293      	cmp	r3, r2
 80104e0:	d00f      	beq.n	8010502 <TIM_OC1_SetConfig+0xbe>
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	4a1b      	ldr	r2, [pc, #108]	; (8010554 <TIM_OC1_SetConfig+0x110>)
 80104e6:	4293      	cmp	r3, r2
 80104e8:	d00b      	beq.n	8010502 <TIM_OC1_SetConfig+0xbe>
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	4a1a      	ldr	r2, [pc, #104]	; (8010558 <TIM_OC1_SetConfig+0x114>)
 80104ee:	4293      	cmp	r3, r2
 80104f0:	d007      	beq.n	8010502 <TIM_OC1_SetConfig+0xbe>
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	4a19      	ldr	r2, [pc, #100]	; (801055c <TIM_OC1_SetConfig+0x118>)
 80104f6:	4293      	cmp	r3, r2
 80104f8:	d003      	beq.n	8010502 <TIM_OC1_SetConfig+0xbe>
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	4a18      	ldr	r2, [pc, #96]	; (8010560 <TIM_OC1_SetConfig+0x11c>)
 80104fe:	4293      	cmp	r3, r2
 8010500:	d111      	bne.n	8010526 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010502:	693b      	ldr	r3, [r7, #16]
 8010504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010508:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801050a:	693b      	ldr	r3, [r7, #16]
 801050c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010510:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010512:	683b      	ldr	r3, [r7, #0]
 8010514:	695b      	ldr	r3, [r3, #20]
 8010516:	693a      	ldr	r2, [r7, #16]
 8010518:	4313      	orrs	r3, r2
 801051a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801051c:	683b      	ldr	r3, [r7, #0]
 801051e:	699b      	ldr	r3, [r3, #24]
 8010520:	693a      	ldr	r2, [r7, #16]
 8010522:	4313      	orrs	r3, r2
 8010524:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	693a      	ldr	r2, [r7, #16]
 801052a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	68fa      	ldr	r2, [r7, #12]
 8010530:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010532:	683b      	ldr	r3, [r7, #0]
 8010534:	685a      	ldr	r2, [r3, #4]
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	697a      	ldr	r2, [r7, #20]
 801053e:	621a      	str	r2, [r3, #32]
}
 8010540:	bf00      	nop
 8010542:	371c      	adds	r7, #28
 8010544:	46bd      	mov	sp, r7
 8010546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054a:	4770      	bx	lr
 801054c:	fffeff8f 	.word	0xfffeff8f
 8010550:	40010000 	.word	0x40010000
 8010554:	40010400 	.word	0x40010400
 8010558:	40014000 	.word	0x40014000
 801055c:	40014400 	.word	0x40014400
 8010560:	40014800 	.word	0x40014800

08010564 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010564:	b480      	push	{r7}
 8010566:	b087      	sub	sp, #28
 8010568:	af00      	add	r7, sp, #0
 801056a:	6078      	str	r0, [r7, #4]
 801056c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	6a1b      	ldr	r3, [r3, #32]
 8010572:	f023 0210 	bic.w	r2, r3, #16
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	6a1b      	ldr	r3, [r3, #32]
 801057e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	685b      	ldr	r3, [r3, #4]
 8010584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	699b      	ldr	r3, [r3, #24]
 801058a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801058c:	68fa      	ldr	r2, [r7, #12]
 801058e:	4b34      	ldr	r3, [pc, #208]	; (8010660 <TIM_OC2_SetConfig+0xfc>)
 8010590:	4013      	ands	r3, r2
 8010592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801059a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801059c:	683b      	ldr	r3, [r7, #0]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	021b      	lsls	r3, r3, #8
 80105a2:	68fa      	ldr	r2, [r7, #12]
 80105a4:	4313      	orrs	r3, r2
 80105a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80105a8:	697b      	ldr	r3, [r7, #20]
 80105aa:	f023 0320 	bic.w	r3, r3, #32
 80105ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80105b0:	683b      	ldr	r3, [r7, #0]
 80105b2:	689b      	ldr	r3, [r3, #8]
 80105b4:	011b      	lsls	r3, r3, #4
 80105b6:	697a      	ldr	r2, [r7, #20]
 80105b8:	4313      	orrs	r3, r2
 80105ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	4a29      	ldr	r2, [pc, #164]	; (8010664 <TIM_OC2_SetConfig+0x100>)
 80105c0:	4293      	cmp	r3, r2
 80105c2:	d003      	beq.n	80105cc <TIM_OC2_SetConfig+0x68>
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	4a28      	ldr	r2, [pc, #160]	; (8010668 <TIM_OC2_SetConfig+0x104>)
 80105c8:	4293      	cmp	r3, r2
 80105ca:	d10d      	bne.n	80105e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80105cc:	697b      	ldr	r3, [r7, #20]
 80105ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80105d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80105d4:	683b      	ldr	r3, [r7, #0]
 80105d6:	68db      	ldr	r3, [r3, #12]
 80105d8:	011b      	lsls	r3, r3, #4
 80105da:	697a      	ldr	r2, [r7, #20]
 80105dc:	4313      	orrs	r3, r2
 80105de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80105e0:	697b      	ldr	r3, [r7, #20]
 80105e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80105e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	4a1e      	ldr	r2, [pc, #120]	; (8010664 <TIM_OC2_SetConfig+0x100>)
 80105ec:	4293      	cmp	r3, r2
 80105ee:	d00f      	beq.n	8010610 <TIM_OC2_SetConfig+0xac>
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	4a1d      	ldr	r2, [pc, #116]	; (8010668 <TIM_OC2_SetConfig+0x104>)
 80105f4:	4293      	cmp	r3, r2
 80105f6:	d00b      	beq.n	8010610 <TIM_OC2_SetConfig+0xac>
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	4a1c      	ldr	r2, [pc, #112]	; (801066c <TIM_OC2_SetConfig+0x108>)
 80105fc:	4293      	cmp	r3, r2
 80105fe:	d007      	beq.n	8010610 <TIM_OC2_SetConfig+0xac>
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	4a1b      	ldr	r2, [pc, #108]	; (8010670 <TIM_OC2_SetConfig+0x10c>)
 8010604:	4293      	cmp	r3, r2
 8010606:	d003      	beq.n	8010610 <TIM_OC2_SetConfig+0xac>
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	4a1a      	ldr	r2, [pc, #104]	; (8010674 <TIM_OC2_SetConfig+0x110>)
 801060c:	4293      	cmp	r3, r2
 801060e:	d113      	bne.n	8010638 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010610:	693b      	ldr	r3, [r7, #16]
 8010612:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010616:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010618:	693b      	ldr	r3, [r7, #16]
 801061a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801061e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010620:	683b      	ldr	r3, [r7, #0]
 8010622:	695b      	ldr	r3, [r3, #20]
 8010624:	009b      	lsls	r3, r3, #2
 8010626:	693a      	ldr	r2, [r7, #16]
 8010628:	4313      	orrs	r3, r2
 801062a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801062c:	683b      	ldr	r3, [r7, #0]
 801062e:	699b      	ldr	r3, [r3, #24]
 8010630:	009b      	lsls	r3, r3, #2
 8010632:	693a      	ldr	r2, [r7, #16]
 8010634:	4313      	orrs	r3, r2
 8010636:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	693a      	ldr	r2, [r7, #16]
 801063c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	68fa      	ldr	r2, [r7, #12]
 8010642:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010644:	683b      	ldr	r3, [r7, #0]
 8010646:	685a      	ldr	r2, [r3, #4]
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	697a      	ldr	r2, [r7, #20]
 8010650:	621a      	str	r2, [r3, #32]
}
 8010652:	bf00      	nop
 8010654:	371c      	adds	r7, #28
 8010656:	46bd      	mov	sp, r7
 8010658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801065c:	4770      	bx	lr
 801065e:	bf00      	nop
 8010660:	feff8fff 	.word	0xfeff8fff
 8010664:	40010000 	.word	0x40010000
 8010668:	40010400 	.word	0x40010400
 801066c:	40014000 	.word	0x40014000
 8010670:	40014400 	.word	0x40014400
 8010674:	40014800 	.word	0x40014800

08010678 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010678:	b480      	push	{r7}
 801067a:	b087      	sub	sp, #28
 801067c:	af00      	add	r7, sp, #0
 801067e:	6078      	str	r0, [r7, #4]
 8010680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	6a1b      	ldr	r3, [r3, #32]
 8010686:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	6a1b      	ldr	r3, [r3, #32]
 8010692:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	685b      	ldr	r3, [r3, #4]
 8010698:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	69db      	ldr	r3, [r3, #28]
 801069e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80106a0:	68fa      	ldr	r2, [r7, #12]
 80106a2:	4b33      	ldr	r3, [pc, #204]	; (8010770 <TIM_OC3_SetConfig+0xf8>)
 80106a4:	4013      	ands	r3, r2
 80106a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	f023 0303 	bic.w	r3, r3, #3
 80106ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80106b0:	683b      	ldr	r3, [r7, #0]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	68fa      	ldr	r2, [r7, #12]
 80106b6:	4313      	orrs	r3, r2
 80106b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80106ba:	697b      	ldr	r3, [r7, #20]
 80106bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80106c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80106c2:	683b      	ldr	r3, [r7, #0]
 80106c4:	689b      	ldr	r3, [r3, #8]
 80106c6:	021b      	lsls	r3, r3, #8
 80106c8:	697a      	ldr	r2, [r7, #20]
 80106ca:	4313      	orrs	r3, r2
 80106cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	4a28      	ldr	r2, [pc, #160]	; (8010774 <TIM_OC3_SetConfig+0xfc>)
 80106d2:	4293      	cmp	r3, r2
 80106d4:	d003      	beq.n	80106de <TIM_OC3_SetConfig+0x66>
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	4a27      	ldr	r2, [pc, #156]	; (8010778 <TIM_OC3_SetConfig+0x100>)
 80106da:	4293      	cmp	r3, r2
 80106dc:	d10d      	bne.n	80106fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80106de:	697b      	ldr	r3, [r7, #20]
 80106e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80106e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80106e6:	683b      	ldr	r3, [r7, #0]
 80106e8:	68db      	ldr	r3, [r3, #12]
 80106ea:	021b      	lsls	r3, r3, #8
 80106ec:	697a      	ldr	r2, [r7, #20]
 80106ee:	4313      	orrs	r3, r2
 80106f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80106f2:	697b      	ldr	r3, [r7, #20]
 80106f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80106f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	4a1d      	ldr	r2, [pc, #116]	; (8010774 <TIM_OC3_SetConfig+0xfc>)
 80106fe:	4293      	cmp	r3, r2
 8010700:	d00f      	beq.n	8010722 <TIM_OC3_SetConfig+0xaa>
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	4a1c      	ldr	r2, [pc, #112]	; (8010778 <TIM_OC3_SetConfig+0x100>)
 8010706:	4293      	cmp	r3, r2
 8010708:	d00b      	beq.n	8010722 <TIM_OC3_SetConfig+0xaa>
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	4a1b      	ldr	r2, [pc, #108]	; (801077c <TIM_OC3_SetConfig+0x104>)
 801070e:	4293      	cmp	r3, r2
 8010710:	d007      	beq.n	8010722 <TIM_OC3_SetConfig+0xaa>
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	4a1a      	ldr	r2, [pc, #104]	; (8010780 <TIM_OC3_SetConfig+0x108>)
 8010716:	4293      	cmp	r3, r2
 8010718:	d003      	beq.n	8010722 <TIM_OC3_SetConfig+0xaa>
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	4a19      	ldr	r2, [pc, #100]	; (8010784 <TIM_OC3_SetConfig+0x10c>)
 801071e:	4293      	cmp	r3, r2
 8010720:	d113      	bne.n	801074a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010722:	693b      	ldr	r3, [r7, #16]
 8010724:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010728:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801072a:	693b      	ldr	r3, [r7, #16]
 801072c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010730:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010732:	683b      	ldr	r3, [r7, #0]
 8010734:	695b      	ldr	r3, [r3, #20]
 8010736:	011b      	lsls	r3, r3, #4
 8010738:	693a      	ldr	r2, [r7, #16]
 801073a:	4313      	orrs	r3, r2
 801073c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801073e:	683b      	ldr	r3, [r7, #0]
 8010740:	699b      	ldr	r3, [r3, #24]
 8010742:	011b      	lsls	r3, r3, #4
 8010744:	693a      	ldr	r2, [r7, #16]
 8010746:	4313      	orrs	r3, r2
 8010748:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	693a      	ldr	r2, [r7, #16]
 801074e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	68fa      	ldr	r2, [r7, #12]
 8010754:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010756:	683b      	ldr	r3, [r7, #0]
 8010758:	685a      	ldr	r2, [r3, #4]
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	697a      	ldr	r2, [r7, #20]
 8010762:	621a      	str	r2, [r3, #32]
}
 8010764:	bf00      	nop
 8010766:	371c      	adds	r7, #28
 8010768:	46bd      	mov	sp, r7
 801076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801076e:	4770      	bx	lr
 8010770:	fffeff8f 	.word	0xfffeff8f
 8010774:	40010000 	.word	0x40010000
 8010778:	40010400 	.word	0x40010400
 801077c:	40014000 	.word	0x40014000
 8010780:	40014400 	.word	0x40014400
 8010784:	40014800 	.word	0x40014800

08010788 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010788:	b480      	push	{r7}
 801078a:	b087      	sub	sp, #28
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]
 8010790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	6a1b      	ldr	r3, [r3, #32]
 8010796:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	6a1b      	ldr	r3, [r3, #32]
 80107a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	685b      	ldr	r3, [r3, #4]
 80107a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	69db      	ldr	r3, [r3, #28]
 80107ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80107b0:	68fa      	ldr	r2, [r7, #12]
 80107b2:	4b24      	ldr	r3, [pc, #144]	; (8010844 <TIM_OC4_SetConfig+0xbc>)
 80107b4:	4013      	ands	r3, r2
 80107b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80107be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80107c0:	683b      	ldr	r3, [r7, #0]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	021b      	lsls	r3, r3, #8
 80107c6:	68fa      	ldr	r2, [r7, #12]
 80107c8:	4313      	orrs	r3, r2
 80107ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80107cc:	693b      	ldr	r3, [r7, #16]
 80107ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80107d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80107d4:	683b      	ldr	r3, [r7, #0]
 80107d6:	689b      	ldr	r3, [r3, #8]
 80107d8:	031b      	lsls	r3, r3, #12
 80107da:	693a      	ldr	r2, [r7, #16]
 80107dc:	4313      	orrs	r3, r2
 80107de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	4a19      	ldr	r2, [pc, #100]	; (8010848 <TIM_OC4_SetConfig+0xc0>)
 80107e4:	4293      	cmp	r3, r2
 80107e6:	d00f      	beq.n	8010808 <TIM_OC4_SetConfig+0x80>
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	4a18      	ldr	r2, [pc, #96]	; (801084c <TIM_OC4_SetConfig+0xc4>)
 80107ec:	4293      	cmp	r3, r2
 80107ee:	d00b      	beq.n	8010808 <TIM_OC4_SetConfig+0x80>
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	4a17      	ldr	r2, [pc, #92]	; (8010850 <TIM_OC4_SetConfig+0xc8>)
 80107f4:	4293      	cmp	r3, r2
 80107f6:	d007      	beq.n	8010808 <TIM_OC4_SetConfig+0x80>
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	4a16      	ldr	r2, [pc, #88]	; (8010854 <TIM_OC4_SetConfig+0xcc>)
 80107fc:	4293      	cmp	r3, r2
 80107fe:	d003      	beq.n	8010808 <TIM_OC4_SetConfig+0x80>
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	4a15      	ldr	r2, [pc, #84]	; (8010858 <TIM_OC4_SetConfig+0xd0>)
 8010804:	4293      	cmp	r3, r2
 8010806:	d109      	bne.n	801081c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010808:	697b      	ldr	r3, [r7, #20]
 801080a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801080e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010810:	683b      	ldr	r3, [r7, #0]
 8010812:	695b      	ldr	r3, [r3, #20]
 8010814:	019b      	lsls	r3, r3, #6
 8010816:	697a      	ldr	r2, [r7, #20]
 8010818:	4313      	orrs	r3, r2
 801081a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	697a      	ldr	r2, [r7, #20]
 8010820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	68fa      	ldr	r2, [r7, #12]
 8010826:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010828:	683b      	ldr	r3, [r7, #0]
 801082a:	685a      	ldr	r2, [r3, #4]
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	693a      	ldr	r2, [r7, #16]
 8010834:	621a      	str	r2, [r3, #32]
}
 8010836:	bf00      	nop
 8010838:	371c      	adds	r7, #28
 801083a:	46bd      	mov	sp, r7
 801083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010840:	4770      	bx	lr
 8010842:	bf00      	nop
 8010844:	feff8fff 	.word	0xfeff8fff
 8010848:	40010000 	.word	0x40010000
 801084c:	40010400 	.word	0x40010400
 8010850:	40014000 	.word	0x40014000
 8010854:	40014400 	.word	0x40014400
 8010858:	40014800 	.word	0x40014800

0801085c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801085c:	b480      	push	{r7}
 801085e:	b087      	sub	sp, #28
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
 8010864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	6a1b      	ldr	r3, [r3, #32]
 801086a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	6a1b      	ldr	r3, [r3, #32]
 8010876:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	685b      	ldr	r3, [r3, #4]
 801087c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010884:	68fa      	ldr	r2, [r7, #12]
 8010886:	4b21      	ldr	r3, [pc, #132]	; (801090c <TIM_OC5_SetConfig+0xb0>)
 8010888:	4013      	ands	r3, r2
 801088a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801088c:	683b      	ldr	r3, [r7, #0]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	68fa      	ldr	r2, [r7, #12]
 8010892:	4313      	orrs	r3, r2
 8010894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010896:	693b      	ldr	r3, [r7, #16]
 8010898:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801089c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801089e:	683b      	ldr	r3, [r7, #0]
 80108a0:	689b      	ldr	r3, [r3, #8]
 80108a2:	041b      	lsls	r3, r3, #16
 80108a4:	693a      	ldr	r2, [r7, #16]
 80108a6:	4313      	orrs	r3, r2
 80108a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	4a18      	ldr	r2, [pc, #96]	; (8010910 <TIM_OC5_SetConfig+0xb4>)
 80108ae:	4293      	cmp	r3, r2
 80108b0:	d00f      	beq.n	80108d2 <TIM_OC5_SetConfig+0x76>
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	4a17      	ldr	r2, [pc, #92]	; (8010914 <TIM_OC5_SetConfig+0xb8>)
 80108b6:	4293      	cmp	r3, r2
 80108b8:	d00b      	beq.n	80108d2 <TIM_OC5_SetConfig+0x76>
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	4a16      	ldr	r2, [pc, #88]	; (8010918 <TIM_OC5_SetConfig+0xbc>)
 80108be:	4293      	cmp	r3, r2
 80108c0:	d007      	beq.n	80108d2 <TIM_OC5_SetConfig+0x76>
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	4a15      	ldr	r2, [pc, #84]	; (801091c <TIM_OC5_SetConfig+0xc0>)
 80108c6:	4293      	cmp	r3, r2
 80108c8:	d003      	beq.n	80108d2 <TIM_OC5_SetConfig+0x76>
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	4a14      	ldr	r2, [pc, #80]	; (8010920 <TIM_OC5_SetConfig+0xc4>)
 80108ce:	4293      	cmp	r3, r2
 80108d0:	d109      	bne.n	80108e6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80108d2:	697b      	ldr	r3, [r7, #20]
 80108d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80108d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80108da:	683b      	ldr	r3, [r7, #0]
 80108dc:	695b      	ldr	r3, [r3, #20]
 80108de:	021b      	lsls	r3, r3, #8
 80108e0:	697a      	ldr	r2, [r7, #20]
 80108e2:	4313      	orrs	r3, r2
 80108e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	697a      	ldr	r2, [r7, #20]
 80108ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	68fa      	ldr	r2, [r7, #12]
 80108f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80108f2:	683b      	ldr	r3, [r7, #0]
 80108f4:	685a      	ldr	r2, [r3, #4]
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	693a      	ldr	r2, [r7, #16]
 80108fe:	621a      	str	r2, [r3, #32]
}
 8010900:	bf00      	nop
 8010902:	371c      	adds	r7, #28
 8010904:	46bd      	mov	sp, r7
 8010906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801090a:	4770      	bx	lr
 801090c:	fffeff8f 	.word	0xfffeff8f
 8010910:	40010000 	.word	0x40010000
 8010914:	40010400 	.word	0x40010400
 8010918:	40014000 	.word	0x40014000
 801091c:	40014400 	.word	0x40014400
 8010920:	40014800 	.word	0x40014800

08010924 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8010924:	b480      	push	{r7}
 8010926:	b087      	sub	sp, #28
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
 801092c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	6a1b      	ldr	r3, [r3, #32]
 8010932:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	6a1b      	ldr	r3, [r3, #32]
 801093e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	685b      	ldr	r3, [r3, #4]
 8010944:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801094a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801094c:	68fa      	ldr	r2, [r7, #12]
 801094e:	4b22      	ldr	r3, [pc, #136]	; (80109d8 <TIM_OC6_SetConfig+0xb4>)
 8010950:	4013      	ands	r3, r2
 8010952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010954:	683b      	ldr	r3, [r7, #0]
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	021b      	lsls	r3, r3, #8
 801095a:	68fa      	ldr	r2, [r7, #12]
 801095c:	4313      	orrs	r3, r2
 801095e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010960:	693b      	ldr	r3, [r7, #16]
 8010962:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010966:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010968:	683b      	ldr	r3, [r7, #0]
 801096a:	689b      	ldr	r3, [r3, #8]
 801096c:	051b      	lsls	r3, r3, #20
 801096e:	693a      	ldr	r2, [r7, #16]
 8010970:	4313      	orrs	r3, r2
 8010972:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	4a19      	ldr	r2, [pc, #100]	; (80109dc <TIM_OC6_SetConfig+0xb8>)
 8010978:	4293      	cmp	r3, r2
 801097a:	d00f      	beq.n	801099c <TIM_OC6_SetConfig+0x78>
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	4a18      	ldr	r2, [pc, #96]	; (80109e0 <TIM_OC6_SetConfig+0xbc>)
 8010980:	4293      	cmp	r3, r2
 8010982:	d00b      	beq.n	801099c <TIM_OC6_SetConfig+0x78>
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	4a17      	ldr	r2, [pc, #92]	; (80109e4 <TIM_OC6_SetConfig+0xc0>)
 8010988:	4293      	cmp	r3, r2
 801098a:	d007      	beq.n	801099c <TIM_OC6_SetConfig+0x78>
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	4a16      	ldr	r2, [pc, #88]	; (80109e8 <TIM_OC6_SetConfig+0xc4>)
 8010990:	4293      	cmp	r3, r2
 8010992:	d003      	beq.n	801099c <TIM_OC6_SetConfig+0x78>
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	4a15      	ldr	r2, [pc, #84]	; (80109ec <TIM_OC6_SetConfig+0xc8>)
 8010998:	4293      	cmp	r3, r2
 801099a:	d109      	bne.n	80109b0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801099c:	697b      	ldr	r3, [r7, #20]
 801099e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80109a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80109a4:	683b      	ldr	r3, [r7, #0]
 80109a6:	695b      	ldr	r3, [r3, #20]
 80109a8:	029b      	lsls	r3, r3, #10
 80109aa:	697a      	ldr	r2, [r7, #20]
 80109ac:	4313      	orrs	r3, r2
 80109ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	697a      	ldr	r2, [r7, #20]
 80109b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	68fa      	ldr	r2, [r7, #12]
 80109ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80109bc:	683b      	ldr	r3, [r7, #0]
 80109be:	685a      	ldr	r2, [r3, #4]
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	693a      	ldr	r2, [r7, #16]
 80109c8:	621a      	str	r2, [r3, #32]
}
 80109ca:	bf00      	nop
 80109cc:	371c      	adds	r7, #28
 80109ce:	46bd      	mov	sp, r7
 80109d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d4:	4770      	bx	lr
 80109d6:	bf00      	nop
 80109d8:	feff8fff 	.word	0xfeff8fff
 80109dc:	40010000 	.word	0x40010000
 80109e0:	40010400 	.word	0x40010400
 80109e4:	40014000 	.word	0x40014000
 80109e8:	40014400 	.word	0x40014400
 80109ec:	40014800 	.word	0x40014800

080109f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80109f0:	b480      	push	{r7}
 80109f2:	b087      	sub	sp, #28
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	60f8      	str	r0, [r7, #12]
 80109f8:	60b9      	str	r1, [r7, #8]
 80109fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	6a1b      	ldr	r3, [r3, #32]
 8010a00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	6a1b      	ldr	r3, [r3, #32]
 8010a06:	f023 0201 	bic.w	r2, r3, #1
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	699b      	ldr	r3, [r3, #24]
 8010a12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010a14:	693b      	ldr	r3, [r7, #16]
 8010a16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010a1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	011b      	lsls	r3, r3, #4
 8010a20:	693a      	ldr	r2, [r7, #16]
 8010a22:	4313      	orrs	r3, r2
 8010a24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010a26:	697b      	ldr	r3, [r7, #20]
 8010a28:	f023 030a 	bic.w	r3, r3, #10
 8010a2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010a2e:	697a      	ldr	r2, [r7, #20]
 8010a30:	68bb      	ldr	r3, [r7, #8]
 8010a32:	4313      	orrs	r3, r2
 8010a34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	693a      	ldr	r2, [r7, #16]
 8010a3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	697a      	ldr	r2, [r7, #20]
 8010a40:	621a      	str	r2, [r3, #32]
}
 8010a42:	bf00      	nop
 8010a44:	371c      	adds	r7, #28
 8010a46:	46bd      	mov	sp, r7
 8010a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4c:	4770      	bx	lr

08010a4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010a4e:	b480      	push	{r7}
 8010a50:	b087      	sub	sp, #28
 8010a52:	af00      	add	r7, sp, #0
 8010a54:	60f8      	str	r0, [r7, #12]
 8010a56:	60b9      	str	r1, [r7, #8]
 8010a58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	6a1b      	ldr	r3, [r3, #32]
 8010a5e:	f023 0210 	bic.w	r2, r3, #16
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	699b      	ldr	r3, [r3, #24]
 8010a6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	6a1b      	ldr	r3, [r3, #32]
 8010a70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010a72:	697b      	ldr	r3, [r7, #20]
 8010a74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010a78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	031b      	lsls	r3, r3, #12
 8010a7e:	697a      	ldr	r2, [r7, #20]
 8010a80:	4313      	orrs	r3, r2
 8010a82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010a84:	693b      	ldr	r3, [r7, #16]
 8010a86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010a8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010a8c:	68bb      	ldr	r3, [r7, #8]
 8010a8e:	011b      	lsls	r3, r3, #4
 8010a90:	693a      	ldr	r2, [r7, #16]
 8010a92:	4313      	orrs	r3, r2
 8010a94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	697a      	ldr	r2, [r7, #20]
 8010a9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	693a      	ldr	r2, [r7, #16]
 8010aa0:	621a      	str	r2, [r3, #32]
}
 8010aa2:	bf00      	nop
 8010aa4:	371c      	adds	r7, #28
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aac:	4770      	bx	lr
	...

08010ab0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010ab0:	b480      	push	{r7}
 8010ab2:	b085      	sub	sp, #20
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
 8010ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	689b      	ldr	r3, [r3, #8]
 8010abe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010ac0:	68fa      	ldr	r2, [r7, #12]
 8010ac2:	4b09      	ldr	r3, [pc, #36]	; (8010ae8 <TIM_ITRx_SetConfig+0x38>)
 8010ac4:	4013      	ands	r3, r2
 8010ac6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010ac8:	683a      	ldr	r2, [r7, #0]
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	4313      	orrs	r3, r2
 8010ace:	f043 0307 	orr.w	r3, r3, #7
 8010ad2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	68fa      	ldr	r2, [r7, #12]
 8010ad8:	609a      	str	r2, [r3, #8]
}
 8010ada:	bf00      	nop
 8010adc:	3714      	adds	r7, #20
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae4:	4770      	bx	lr
 8010ae6:	bf00      	nop
 8010ae8:	ffcfff8f 	.word	0xffcfff8f

08010aec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010aec:	b480      	push	{r7}
 8010aee:	b087      	sub	sp, #28
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	60f8      	str	r0, [r7, #12]
 8010af4:	60b9      	str	r1, [r7, #8]
 8010af6:	607a      	str	r2, [r7, #4]
 8010af8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	689b      	ldr	r3, [r3, #8]
 8010afe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010b00:	697b      	ldr	r3, [r7, #20]
 8010b02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010b06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010b08:	683b      	ldr	r3, [r7, #0]
 8010b0a:	021a      	lsls	r2, r3, #8
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	431a      	orrs	r2, r3
 8010b10:	68bb      	ldr	r3, [r7, #8]
 8010b12:	4313      	orrs	r3, r2
 8010b14:	697a      	ldr	r2, [r7, #20]
 8010b16:	4313      	orrs	r3, r2
 8010b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	697a      	ldr	r2, [r7, #20]
 8010b1e:	609a      	str	r2, [r3, #8]
}
 8010b20:	bf00      	nop
 8010b22:	371c      	adds	r7, #28
 8010b24:	46bd      	mov	sp, r7
 8010b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2a:	4770      	bx	lr

08010b2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010b2c:	b480      	push	{r7}
 8010b2e:	b087      	sub	sp, #28
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	60f8      	str	r0, [r7, #12]
 8010b34:	60b9      	str	r1, [r7, #8]
 8010b36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010b38:	68bb      	ldr	r3, [r7, #8]
 8010b3a:	f003 031f 	and.w	r3, r3, #31
 8010b3e:	2201      	movs	r2, #1
 8010b40:	fa02 f303 	lsl.w	r3, r2, r3
 8010b44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	6a1a      	ldr	r2, [r3, #32]
 8010b4a:	697b      	ldr	r3, [r7, #20]
 8010b4c:	43db      	mvns	r3, r3
 8010b4e:	401a      	ands	r2, r3
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	6a1a      	ldr	r2, [r3, #32]
 8010b58:	68bb      	ldr	r3, [r7, #8]
 8010b5a:	f003 031f 	and.w	r3, r3, #31
 8010b5e:	6879      	ldr	r1, [r7, #4]
 8010b60:	fa01 f303 	lsl.w	r3, r1, r3
 8010b64:	431a      	orrs	r2, r3
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	621a      	str	r2, [r3, #32]
}
 8010b6a:	bf00      	nop
 8010b6c:	371c      	adds	r7, #28
 8010b6e:	46bd      	mov	sp, r7
 8010b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b74:	4770      	bx	lr
	...

08010b78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010b78:	b480      	push	{r7}
 8010b7a:	b085      	sub	sp, #20
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
 8010b80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010b88:	2b01      	cmp	r3, #1
 8010b8a:	d101      	bne.n	8010b90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010b8c:	2302      	movs	r3, #2
 8010b8e:	e06d      	b.n	8010c6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	2201      	movs	r2, #1
 8010b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	2202      	movs	r2, #2
 8010b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	685b      	ldr	r3, [r3, #4]
 8010ba6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	689b      	ldr	r3, [r3, #8]
 8010bae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	4a30      	ldr	r2, [pc, #192]	; (8010c78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8010bb6:	4293      	cmp	r3, r2
 8010bb8:	d004      	beq.n	8010bc4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	4a2f      	ldr	r2, [pc, #188]	; (8010c7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010bc0:	4293      	cmp	r3, r2
 8010bc2:	d108      	bne.n	8010bd6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010bca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010bcc:	683b      	ldr	r3, [r7, #0]
 8010bce:	685b      	ldr	r3, [r3, #4]
 8010bd0:	68fa      	ldr	r2, [r7, #12]
 8010bd2:	4313      	orrs	r3, r2
 8010bd4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010bdc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010bde:	683b      	ldr	r3, [r7, #0]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	68fa      	ldr	r2, [r7, #12]
 8010be4:	4313      	orrs	r3, r2
 8010be6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	68fa      	ldr	r2, [r7, #12]
 8010bee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	4a20      	ldr	r2, [pc, #128]	; (8010c78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8010bf6:	4293      	cmp	r3, r2
 8010bf8:	d022      	beq.n	8010c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010c02:	d01d      	beq.n	8010c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	4a1d      	ldr	r2, [pc, #116]	; (8010c80 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8010c0a:	4293      	cmp	r3, r2
 8010c0c:	d018      	beq.n	8010c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	4a1c      	ldr	r2, [pc, #112]	; (8010c84 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8010c14:	4293      	cmp	r3, r2
 8010c16:	d013      	beq.n	8010c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	4a1a      	ldr	r2, [pc, #104]	; (8010c88 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8010c1e:	4293      	cmp	r3, r2
 8010c20:	d00e      	beq.n	8010c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	4a15      	ldr	r2, [pc, #84]	; (8010c7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010c28:	4293      	cmp	r3, r2
 8010c2a:	d009      	beq.n	8010c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	4a16      	ldr	r2, [pc, #88]	; (8010c8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010c32:	4293      	cmp	r3, r2
 8010c34:	d004      	beq.n	8010c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	4a15      	ldr	r2, [pc, #84]	; (8010c90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010c3c:	4293      	cmp	r3, r2
 8010c3e:	d10c      	bne.n	8010c5a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010c40:	68bb      	ldr	r3, [r7, #8]
 8010c42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010c46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010c48:	683b      	ldr	r3, [r7, #0]
 8010c4a:	689b      	ldr	r3, [r3, #8]
 8010c4c:	68ba      	ldr	r2, [r7, #8]
 8010c4e:	4313      	orrs	r3, r2
 8010c50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	68ba      	ldr	r2, [r7, #8]
 8010c58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	2201      	movs	r2, #1
 8010c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	2200      	movs	r2, #0
 8010c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010c6a:	2300      	movs	r3, #0
}
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	3714      	adds	r7, #20
 8010c70:	46bd      	mov	sp, r7
 8010c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c76:	4770      	bx	lr
 8010c78:	40010000 	.word	0x40010000
 8010c7c:	40010400 	.word	0x40010400
 8010c80:	40000400 	.word	0x40000400
 8010c84:	40000800 	.word	0x40000800
 8010c88:	40000c00 	.word	0x40000c00
 8010c8c:	40001800 	.word	0x40001800
 8010c90:	40014000 	.word	0x40014000

08010c94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010c94:	b480      	push	{r7}
 8010c96:	b083      	sub	sp, #12
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010c9c:	bf00      	nop
 8010c9e:	370c      	adds	r7, #12
 8010ca0:	46bd      	mov	sp, r7
 8010ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca6:	4770      	bx	lr

08010ca8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010ca8:	b480      	push	{r7}
 8010caa:	b083      	sub	sp, #12
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010cb0:	bf00      	nop
 8010cb2:	370c      	adds	r7, #12
 8010cb4:	46bd      	mov	sp, r7
 8010cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cba:	4770      	bx	lr

08010cbc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010cbc:	b480      	push	{r7}
 8010cbe:	b083      	sub	sp, #12
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010cc4:	bf00      	nop
 8010cc6:	370c      	adds	r7, #12
 8010cc8:	46bd      	mov	sp, r7
 8010cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cce:	4770      	bx	lr

08010cd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	b082      	sub	sp, #8
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d101      	bne.n	8010ce2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010cde:	2301      	movs	r3, #1
 8010ce0:	e042      	b.n	8010d68 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d106      	bne.n	8010cfa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	2200      	movs	r2, #0
 8010cf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010cf4:	6878      	ldr	r0, [r7, #4]
 8010cf6:	f7f3 f9ef 	bl	80040d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	2224      	movs	r2, #36	; 0x24
 8010cfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	681a      	ldr	r2, [r3, #0]
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	f022 0201 	bic.w	r2, r2, #1
 8010d10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010d12:	6878      	ldr	r0, [r7, #4]
 8010d14:	f000 fce8 	bl	80116e8 <UART_SetConfig>
 8010d18:	4603      	mov	r3, r0
 8010d1a:	2b01      	cmp	r3, #1
 8010d1c:	d101      	bne.n	8010d22 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8010d1e:	2301      	movs	r3, #1
 8010d20:	e022      	b.n	8010d68 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d002      	beq.n	8010d30 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8010d2a:	6878      	ldr	r0, [r7, #4]
 8010d2c:	f001 fa44 	bl	80121b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	685a      	ldr	r2, [r3, #4]
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010d3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	689a      	ldr	r2, [r3, #8]
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010d4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	681a      	ldr	r2, [r3, #0]
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	f042 0201 	orr.w	r2, r2, #1
 8010d5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010d60:	6878      	ldr	r0, [r7, #4]
 8010d62:	f001 facb 	bl	80122fc <UART_CheckIdleState>
 8010d66:	4603      	mov	r3, r0
}
 8010d68:	4618      	mov	r0, r3
 8010d6a:	3708      	adds	r7, #8
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	bd80      	pop	{r7, pc}

08010d70 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8010d70:	b480      	push	{r7}
 8010d72:	b091      	sub	sp, #68	; 0x44
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	60f8      	str	r0, [r7, #12]
 8010d78:	60b9      	str	r1, [r7, #8]
 8010d7a:	4613      	mov	r3, r2
 8010d7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010d84:	2b20      	cmp	r3, #32
 8010d86:	f040 808c 	bne.w	8010ea2 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8010d8a:	68bb      	ldr	r3, [r7, #8]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d002      	beq.n	8010d96 <HAL_UART_Transmit_IT+0x26>
 8010d90:	88fb      	ldrh	r3, [r7, #6]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d101      	bne.n	8010d9a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8010d96:	2301      	movs	r3, #1
 8010d98:	e084      	b.n	8010ea4 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010da0:	2b01      	cmp	r3, #1
 8010da2:	d101      	bne.n	8010da8 <HAL_UART_Transmit_IT+0x38>
 8010da4:	2302      	movs	r3, #2
 8010da6:	e07d      	b.n	8010ea4 <HAL_UART_Transmit_IT+0x134>
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	2201      	movs	r2, #1
 8010dac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	68ba      	ldr	r2, [r7, #8]
 8010db4:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	88fa      	ldrh	r2, [r7, #6]
 8010dba:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	88fa      	ldrh	r2, [r7, #6]
 8010dc2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	2200      	movs	r2, #0
 8010dca:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	2200      	movs	r2, #0
 8010dd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	2221      	movs	r2, #33	; 0x21
 8010dd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010de0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010de4:	d12e      	bne.n	8010e44 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	689b      	ldr	r3, [r3, #8]
 8010dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010dee:	d107      	bne.n	8010e00 <HAL_UART_Transmit_IT+0x90>
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	691b      	ldr	r3, [r3, #16]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d103      	bne.n	8010e00 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	4a2d      	ldr	r2, [pc, #180]	; (8010eb0 <HAL_UART_Transmit_IT+0x140>)
 8010dfc:	675a      	str	r2, [r3, #116]	; 0x74
 8010dfe:	e002      	b.n	8010e06 <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	4a2c      	ldr	r2, [pc, #176]	; (8010eb4 <HAL_UART_Transmit_IT+0x144>)
 8010e04:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	2200      	movs	r2, #0
 8010e0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	3308      	adds	r3, #8
 8010e14:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e18:	e853 3f00 	ldrex	r3, [r3]
 8010e1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8010e24:	63bb      	str	r3, [r7, #56]	; 0x38
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	3308      	adds	r3, #8
 8010e2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010e2e:	637a      	str	r2, [r7, #52]	; 0x34
 8010e30:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010e34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e36:	e841 2300 	strex	r3, r2, [r1]
 8010e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8010e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d1e5      	bne.n	8010e0e <HAL_UART_Transmit_IT+0x9e>
 8010e42:	e02c      	b.n	8010e9e <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	689b      	ldr	r3, [r3, #8]
 8010e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010e4c:	d107      	bne.n	8010e5e <HAL_UART_Transmit_IT+0xee>
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	691b      	ldr	r3, [r3, #16]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d103      	bne.n	8010e5e <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	4a17      	ldr	r2, [pc, #92]	; (8010eb8 <HAL_UART_Transmit_IT+0x148>)
 8010e5a:	675a      	str	r2, [r3, #116]	; 0x74
 8010e5c:	e002      	b.n	8010e64 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	4a16      	ldr	r2, [pc, #88]	; (8010ebc <HAL_UART_Transmit_IT+0x14c>)
 8010e62:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	2200      	movs	r2, #0
 8010e68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e72:	697b      	ldr	r3, [r7, #20]
 8010e74:	e853 3f00 	ldrex	r3, [r3]
 8010e78:	613b      	str	r3, [r7, #16]
   return(result);
 8010e7a:	693b      	ldr	r3, [r7, #16]
 8010e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	461a      	mov	r2, r3
 8010e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e8a:	623b      	str	r3, [r7, #32]
 8010e8c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e8e:	69f9      	ldr	r1, [r7, #28]
 8010e90:	6a3a      	ldr	r2, [r7, #32]
 8010e92:	e841 2300 	strex	r3, r2, [r1]
 8010e96:	61bb      	str	r3, [r7, #24]
   return(result);
 8010e98:	69bb      	ldr	r3, [r7, #24]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d1e6      	bne.n	8010e6c <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8010e9e:	2300      	movs	r3, #0
 8010ea0:	e000      	b.n	8010ea4 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8010ea2:	2302      	movs	r3, #2
  }
}
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	3744      	adds	r7, #68	; 0x44
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eae:	4770      	bx	lr
 8010eb0:	08012acb 	.word	0x08012acb
 8010eb4:	080129eb 	.word	0x080129eb
 8010eb8:	08012929 	.word	0x08012929
 8010ebc:	08012871 	.word	0x08012871

08010ec0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b08a      	sub	sp, #40	; 0x28
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	60f8      	str	r0, [r7, #12]
 8010ec8:	60b9      	str	r1, [r7, #8]
 8010eca:	4613      	mov	r3, r2
 8010ecc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010ed4:	2b20      	cmp	r3, #32
 8010ed6:	d142      	bne.n	8010f5e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8010ed8:	68bb      	ldr	r3, [r7, #8]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d002      	beq.n	8010ee4 <HAL_UART_Receive_IT+0x24>
 8010ede:	88fb      	ldrh	r3, [r7, #6]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d101      	bne.n	8010ee8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8010ee4:	2301      	movs	r3, #1
 8010ee6:	e03b      	b.n	8010f60 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010eee:	2b01      	cmp	r3, #1
 8010ef0:	d101      	bne.n	8010ef6 <HAL_UART_Receive_IT+0x36>
 8010ef2:	2302      	movs	r3, #2
 8010ef4:	e034      	b.n	8010f60 <HAL_UART_Receive_IT+0xa0>
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	2201      	movs	r2, #1
 8010efa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	2200      	movs	r2, #0
 8010f02:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	4a17      	ldr	r2, [pc, #92]	; (8010f68 <HAL_UART_Receive_IT+0xa8>)
 8010f0a:	4293      	cmp	r3, r2
 8010f0c:	d01f      	beq.n	8010f4e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	685b      	ldr	r3, [r3, #4]
 8010f14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d018      	beq.n	8010f4e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f22:	697b      	ldr	r3, [r7, #20]
 8010f24:	e853 3f00 	ldrex	r3, [r3]
 8010f28:	613b      	str	r3, [r7, #16]
   return(result);
 8010f2a:	693b      	ldr	r3, [r7, #16]
 8010f2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010f30:	627b      	str	r3, [r7, #36]	; 0x24
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	461a      	mov	r2, r3
 8010f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f3a:	623b      	str	r3, [r7, #32]
 8010f3c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f3e:	69f9      	ldr	r1, [r7, #28]
 8010f40:	6a3a      	ldr	r2, [r7, #32]
 8010f42:	e841 2300 	strex	r3, r2, [r1]
 8010f46:	61bb      	str	r3, [r7, #24]
   return(result);
 8010f48:	69bb      	ldr	r3, [r7, #24]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d1e6      	bne.n	8010f1c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8010f4e:	88fb      	ldrh	r3, [r7, #6]
 8010f50:	461a      	mov	r2, r3
 8010f52:	68b9      	ldr	r1, [r7, #8]
 8010f54:	68f8      	ldr	r0, [r7, #12]
 8010f56:	f001 fae5 	bl	8012524 <UART_Start_Receive_IT>
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	e000      	b.n	8010f60 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8010f5e:	2302      	movs	r3, #2
  }
}
 8010f60:	4618      	mov	r0, r3
 8010f62:	3728      	adds	r7, #40	; 0x28
 8010f64:	46bd      	mov	sp, r7
 8010f66:	bd80      	pop	{r7, pc}
 8010f68:	58000c00 	.word	0x58000c00

08010f6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010f6c:	b580      	push	{r7, lr}
 8010f6e:	b0ba      	sub	sp, #232	; 0xe8
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	69db      	ldr	r3, [r3, #28]
 8010f7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	689b      	ldr	r3, [r3, #8]
 8010f8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010f92:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8010f96:	f640 030f 	movw	r3, #2063	; 0x80f
 8010f9a:	4013      	ands	r3, r2
 8010f9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8010fa0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d11b      	bne.n	8010fe0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010fac:	f003 0320 	and.w	r3, r3, #32
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d015      	beq.n	8010fe0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010fb8:	f003 0320 	and.w	r3, r3, #32
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d105      	bne.n	8010fcc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010fc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d009      	beq.n	8010fe0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	f000 835a 	beq.w	801168a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010fda:	6878      	ldr	r0, [r7, #4]
 8010fdc:	4798      	blx	r3
      }
      return;
 8010fde:	e354      	b.n	801168a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010fe0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	f000 811f 	beq.w	8011228 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8010fea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010fee:	4b8b      	ldr	r3, [pc, #556]	; (801121c <HAL_UART_IRQHandler+0x2b0>)
 8010ff0:	4013      	ands	r3, r2
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d106      	bne.n	8011004 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010ff6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8010ffa:	4b89      	ldr	r3, [pc, #548]	; (8011220 <HAL_UART_IRQHandler+0x2b4>)
 8010ffc:	4013      	ands	r3, r2
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	f000 8112 	beq.w	8011228 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011008:	f003 0301 	and.w	r3, r3, #1
 801100c:	2b00      	cmp	r3, #0
 801100e:	d011      	beq.n	8011034 <HAL_UART_IRQHandler+0xc8>
 8011010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011018:	2b00      	cmp	r3, #0
 801101a:	d00b      	beq.n	8011034 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	2201      	movs	r2, #1
 8011022:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801102a:	f043 0201 	orr.w	r2, r3, #1
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011038:	f003 0302 	and.w	r3, r3, #2
 801103c:	2b00      	cmp	r3, #0
 801103e:	d011      	beq.n	8011064 <HAL_UART_IRQHandler+0xf8>
 8011040:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011044:	f003 0301 	and.w	r3, r3, #1
 8011048:	2b00      	cmp	r3, #0
 801104a:	d00b      	beq.n	8011064 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	2202      	movs	r2, #2
 8011052:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801105a:	f043 0204 	orr.w	r2, r3, #4
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011068:	f003 0304 	and.w	r3, r3, #4
 801106c:	2b00      	cmp	r3, #0
 801106e:	d011      	beq.n	8011094 <HAL_UART_IRQHandler+0x128>
 8011070:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011074:	f003 0301 	and.w	r3, r3, #1
 8011078:	2b00      	cmp	r3, #0
 801107a:	d00b      	beq.n	8011094 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	2204      	movs	r2, #4
 8011082:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801108a:	f043 0202 	orr.w	r2, r3, #2
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8011094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011098:	f003 0308 	and.w	r3, r3, #8
 801109c:	2b00      	cmp	r3, #0
 801109e:	d017      	beq.n	80110d0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80110a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80110a4:	f003 0320 	and.w	r3, r3, #32
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d105      	bne.n	80110b8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80110ac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80110b0:	4b5a      	ldr	r3, [pc, #360]	; (801121c <HAL_UART_IRQHandler+0x2b0>)
 80110b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d00b      	beq.n	80110d0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	2208      	movs	r2, #8
 80110be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80110c6:	f043 0208 	orr.w	r2, r3, #8
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80110d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80110d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d012      	beq.n	8011102 <HAL_UART_IRQHandler+0x196>
 80110dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80110e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d00c      	beq.n	8011102 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80110f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80110f8:	f043 0220 	orr.w	r2, r3, #32
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011108:	2b00      	cmp	r3, #0
 801110a:	f000 82c0 	beq.w	801168e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801110e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011112:	f003 0320 	and.w	r3, r3, #32
 8011116:	2b00      	cmp	r3, #0
 8011118:	d013      	beq.n	8011142 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801111a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801111e:	f003 0320 	and.w	r3, r3, #32
 8011122:	2b00      	cmp	r3, #0
 8011124:	d105      	bne.n	8011132 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8011126:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801112a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801112e:	2b00      	cmp	r3, #0
 8011130:	d007      	beq.n	8011142 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011136:	2b00      	cmp	r3, #0
 8011138:	d003      	beq.n	8011142 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801113e:	6878      	ldr	r0, [r7, #4]
 8011140:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011148:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	689b      	ldr	r3, [r3, #8]
 8011152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011156:	2b40      	cmp	r3, #64	; 0x40
 8011158:	d005      	beq.n	8011166 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801115a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801115e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011162:	2b00      	cmp	r3, #0
 8011164:	d04f      	beq.n	8011206 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8011166:	6878      	ldr	r0, [r7, #4]
 8011168:	f001 fb06 	bl	8012778 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	689b      	ldr	r3, [r3, #8]
 8011172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011176:	2b40      	cmp	r3, #64	; 0x40
 8011178:	d141      	bne.n	80111fe <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	3308      	adds	r3, #8
 8011180:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011184:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011188:	e853 3f00 	ldrex	r3, [r3]
 801118c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8011190:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011194:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011198:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	3308      	adds	r3, #8
 80111a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80111a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80111aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80111b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80111b6:	e841 2300 	strex	r3, r2, [r1]
 80111ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80111be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d1d9      	bne.n	801117a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d013      	beq.n	80111f6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80111d2:	4a14      	ldr	r2, [pc, #80]	; (8011224 <HAL_UART_IRQHandler+0x2b8>)
 80111d4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80111da:	4618      	mov	r0, r3
 80111dc:	f7f5 ffee 	bl	80071bc <HAL_DMA_Abort_IT>
 80111e0:	4603      	mov	r3, r0
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d017      	beq.n	8011216 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80111ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80111ec:	687a      	ldr	r2, [r7, #4]
 80111ee:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80111f0:	4610      	mov	r0, r2
 80111f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80111f4:	e00f      	b.n	8011216 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80111f6:	6878      	ldr	r0, [r7, #4]
 80111f8:	f000 fa60 	bl	80116bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80111fc:	e00b      	b.n	8011216 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80111fe:	6878      	ldr	r0, [r7, #4]
 8011200:	f000 fa5c 	bl	80116bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011204:	e007      	b.n	8011216 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8011206:	6878      	ldr	r0, [r7, #4]
 8011208:	f000 fa58 	bl	80116bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	2200      	movs	r2, #0
 8011210:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8011214:	e23b      	b.n	801168e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011216:	bf00      	nop
    return;
 8011218:	e239      	b.n	801168e <HAL_UART_IRQHandler+0x722>
 801121a:	bf00      	nop
 801121c:	10000001 	.word	0x10000001
 8011220:	04000120 	.word	0x04000120
 8011224:	08012845 	.word	0x08012845

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801122c:	2b01      	cmp	r3, #1
 801122e:	f040 81ce 	bne.w	80115ce <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8011232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011236:	f003 0310 	and.w	r3, r3, #16
 801123a:	2b00      	cmp	r3, #0
 801123c:	f000 81c7 	beq.w	80115ce <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8011240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011244:	f003 0310 	and.w	r3, r3, #16
 8011248:	2b00      	cmp	r3, #0
 801124a:	f000 81c0 	beq.w	80115ce <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	2210      	movs	r2, #16
 8011254:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	689b      	ldr	r3, [r3, #8]
 801125c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011260:	2b40      	cmp	r3, #64	; 0x40
 8011262:	f040 813b 	bne.w	80114dc <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	4a8b      	ldr	r2, [pc, #556]	; (801149c <HAL_UART_IRQHandler+0x530>)
 801126e:	4293      	cmp	r3, r2
 8011270:	d059      	beq.n	8011326 <HAL_UART_IRQHandler+0x3ba>
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	4a89      	ldr	r2, [pc, #548]	; (80114a0 <HAL_UART_IRQHandler+0x534>)
 801127a:	4293      	cmp	r3, r2
 801127c:	d053      	beq.n	8011326 <HAL_UART_IRQHandler+0x3ba>
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	4a87      	ldr	r2, [pc, #540]	; (80114a4 <HAL_UART_IRQHandler+0x538>)
 8011286:	4293      	cmp	r3, r2
 8011288:	d04d      	beq.n	8011326 <HAL_UART_IRQHandler+0x3ba>
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	4a85      	ldr	r2, [pc, #532]	; (80114a8 <HAL_UART_IRQHandler+0x53c>)
 8011292:	4293      	cmp	r3, r2
 8011294:	d047      	beq.n	8011326 <HAL_UART_IRQHandler+0x3ba>
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	4a83      	ldr	r2, [pc, #524]	; (80114ac <HAL_UART_IRQHandler+0x540>)
 801129e:	4293      	cmp	r3, r2
 80112a0:	d041      	beq.n	8011326 <HAL_UART_IRQHandler+0x3ba>
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	4a81      	ldr	r2, [pc, #516]	; (80114b0 <HAL_UART_IRQHandler+0x544>)
 80112aa:	4293      	cmp	r3, r2
 80112ac:	d03b      	beq.n	8011326 <HAL_UART_IRQHandler+0x3ba>
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	4a7f      	ldr	r2, [pc, #508]	; (80114b4 <HAL_UART_IRQHandler+0x548>)
 80112b6:	4293      	cmp	r3, r2
 80112b8:	d035      	beq.n	8011326 <HAL_UART_IRQHandler+0x3ba>
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	4a7d      	ldr	r2, [pc, #500]	; (80114b8 <HAL_UART_IRQHandler+0x54c>)
 80112c2:	4293      	cmp	r3, r2
 80112c4:	d02f      	beq.n	8011326 <HAL_UART_IRQHandler+0x3ba>
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	4a7b      	ldr	r2, [pc, #492]	; (80114bc <HAL_UART_IRQHandler+0x550>)
 80112ce:	4293      	cmp	r3, r2
 80112d0:	d029      	beq.n	8011326 <HAL_UART_IRQHandler+0x3ba>
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	4a79      	ldr	r2, [pc, #484]	; (80114c0 <HAL_UART_IRQHandler+0x554>)
 80112da:	4293      	cmp	r3, r2
 80112dc:	d023      	beq.n	8011326 <HAL_UART_IRQHandler+0x3ba>
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	4a77      	ldr	r2, [pc, #476]	; (80114c4 <HAL_UART_IRQHandler+0x558>)
 80112e6:	4293      	cmp	r3, r2
 80112e8:	d01d      	beq.n	8011326 <HAL_UART_IRQHandler+0x3ba>
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	4a75      	ldr	r2, [pc, #468]	; (80114c8 <HAL_UART_IRQHandler+0x55c>)
 80112f2:	4293      	cmp	r3, r2
 80112f4:	d017      	beq.n	8011326 <HAL_UART_IRQHandler+0x3ba>
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	4a73      	ldr	r2, [pc, #460]	; (80114cc <HAL_UART_IRQHandler+0x560>)
 80112fe:	4293      	cmp	r3, r2
 8011300:	d011      	beq.n	8011326 <HAL_UART_IRQHandler+0x3ba>
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	4a71      	ldr	r2, [pc, #452]	; (80114d0 <HAL_UART_IRQHandler+0x564>)
 801130a:	4293      	cmp	r3, r2
 801130c:	d00b      	beq.n	8011326 <HAL_UART_IRQHandler+0x3ba>
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	4a6f      	ldr	r2, [pc, #444]	; (80114d4 <HAL_UART_IRQHandler+0x568>)
 8011316:	4293      	cmp	r3, r2
 8011318:	d005      	beq.n	8011326 <HAL_UART_IRQHandler+0x3ba>
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	4a6d      	ldr	r2, [pc, #436]	; (80114d8 <HAL_UART_IRQHandler+0x56c>)
 8011322:	4293      	cmp	r3, r2
 8011324:	d105      	bne.n	8011332 <HAL_UART_IRQHandler+0x3c6>
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	685b      	ldr	r3, [r3, #4]
 801132e:	b29b      	uxth	r3, r3
 8011330:	e004      	b.n	801133c <HAL_UART_IRQHandler+0x3d0>
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	685b      	ldr	r3, [r3, #4]
 801133a:	b29b      	uxth	r3, r3
 801133c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8011340:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8011344:	2b00      	cmp	r3, #0
 8011346:	f000 81a4 	beq.w	8011692 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011350:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8011354:	429a      	cmp	r2, r3
 8011356:	f080 819c 	bcs.w	8011692 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8011360:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011368:	69db      	ldr	r3, [r3, #28]
 801136a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801136e:	f000 8086 	beq.w	801147e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801137a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801137e:	e853 3f00 	ldrex	r3, [r3]
 8011382:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8011386:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801138a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801138e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	461a      	mov	r2, r3
 8011398:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801139c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80113a0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113a4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80113a8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80113ac:	e841 2300 	strex	r3, r2, [r1]
 80113b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80113b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d1da      	bne.n	8011372 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	3308      	adds	r3, #8
 80113c2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80113c6:	e853 3f00 	ldrex	r3, [r3]
 80113ca:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80113cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80113ce:	f023 0301 	bic.w	r3, r3, #1
 80113d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	3308      	adds	r3, #8
 80113dc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80113e0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80113e4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113e6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80113e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80113ec:	e841 2300 	strex	r3, r2, [r1]
 80113f0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80113f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d1e1      	bne.n	80113bc <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	3308      	adds	r3, #8
 80113fe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011400:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011402:	e853 3f00 	ldrex	r3, [r3]
 8011406:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8011408:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801140a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801140e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	3308      	adds	r3, #8
 8011418:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801141c:	66fa      	str	r2, [r7, #108]	; 0x6c
 801141e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011420:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8011422:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011424:	e841 2300 	strex	r3, r2, [r1]
 8011428:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801142a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801142c:	2b00      	cmp	r3, #0
 801142e:	d1e3      	bne.n	80113f8 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	2220      	movs	r2, #32
 8011434:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	2200      	movs	r2, #0
 801143c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011444:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011446:	e853 3f00 	ldrex	r3, [r3]
 801144a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801144c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801144e:	f023 0310 	bic.w	r3, r3, #16
 8011452:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	461a      	mov	r2, r3
 801145c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011460:	65bb      	str	r3, [r7, #88]	; 0x58
 8011462:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011464:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011466:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011468:	e841 2300 	strex	r3, r2, [r1]
 801146c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801146e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011470:	2b00      	cmp	r3, #0
 8011472:	d1e4      	bne.n	801143e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011478:	4618      	mov	r0, r3
 801147a:	f7f5 fb81 	bl	8006b80 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801148a:	b29b      	uxth	r3, r3
 801148c:	1ad3      	subs	r3, r2, r3
 801148e:	b29b      	uxth	r3, r3
 8011490:	4619      	mov	r1, r3
 8011492:	6878      	ldr	r0, [r7, #4]
 8011494:	f000 f91c 	bl	80116d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011498:	e0fb      	b.n	8011692 <HAL_UART_IRQHandler+0x726>
 801149a:	bf00      	nop
 801149c:	40020010 	.word	0x40020010
 80114a0:	40020028 	.word	0x40020028
 80114a4:	40020040 	.word	0x40020040
 80114a8:	40020058 	.word	0x40020058
 80114ac:	40020070 	.word	0x40020070
 80114b0:	40020088 	.word	0x40020088
 80114b4:	400200a0 	.word	0x400200a0
 80114b8:	400200b8 	.word	0x400200b8
 80114bc:	40020410 	.word	0x40020410
 80114c0:	40020428 	.word	0x40020428
 80114c4:	40020440 	.word	0x40020440
 80114c8:	40020458 	.word	0x40020458
 80114cc:	40020470 	.word	0x40020470
 80114d0:	40020488 	.word	0x40020488
 80114d4:	400204a0 	.word	0x400204a0
 80114d8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80114e8:	b29b      	uxth	r3, r3
 80114ea:	1ad3      	subs	r3, r2, r3
 80114ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80114f6:	b29b      	uxth	r3, r3
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	f000 80cc 	beq.w	8011696 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 80114fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8011502:	2b00      	cmp	r3, #0
 8011504:	f000 80c7 	beq.w	8011696 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801150e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011510:	e853 3f00 	ldrex	r3, [r3]
 8011514:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011518:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801151c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	461a      	mov	r2, r3
 8011526:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801152a:	647b      	str	r3, [r7, #68]	; 0x44
 801152c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801152e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011530:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011532:	e841 2300 	strex	r3, r2, [r1]
 8011536:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801153a:	2b00      	cmp	r3, #0
 801153c:	d1e4      	bne.n	8011508 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	3308      	adds	r3, #8
 8011544:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011548:	e853 3f00 	ldrex	r3, [r3]
 801154c:	623b      	str	r3, [r7, #32]
   return(result);
 801154e:	6a3a      	ldr	r2, [r7, #32]
 8011550:	4b54      	ldr	r3, [pc, #336]	; (80116a4 <HAL_UART_IRQHandler+0x738>)
 8011552:	4013      	ands	r3, r2
 8011554:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	3308      	adds	r3, #8
 801155e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8011562:	633a      	str	r2, [r7, #48]	; 0x30
 8011564:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011566:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011568:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801156a:	e841 2300 	strex	r3, r2, [r1]
 801156e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011572:	2b00      	cmp	r3, #0
 8011574:	d1e3      	bne.n	801153e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	2220      	movs	r2, #32
 801157a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	2200      	movs	r2, #0
 8011582:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	2200      	movs	r2, #0
 8011588:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011590:	693b      	ldr	r3, [r7, #16]
 8011592:	e853 3f00 	ldrex	r3, [r3]
 8011596:	60fb      	str	r3, [r7, #12]
   return(result);
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	f023 0310 	bic.w	r3, r3, #16
 801159e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	461a      	mov	r2, r3
 80115a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80115ac:	61fb      	str	r3, [r7, #28]
 80115ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115b0:	69b9      	ldr	r1, [r7, #24]
 80115b2:	69fa      	ldr	r2, [r7, #28]
 80115b4:	e841 2300 	strex	r3, r2, [r1]
 80115b8:	617b      	str	r3, [r7, #20]
   return(result);
 80115ba:	697b      	ldr	r3, [r7, #20]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d1e4      	bne.n	801158a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80115c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80115c4:	4619      	mov	r1, r3
 80115c6:	6878      	ldr	r0, [r7, #4]
 80115c8:	f000 f882 	bl	80116d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80115cc:	e063      	b.n	8011696 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80115ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80115d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d00e      	beq.n	80115f8 <HAL_UART_IRQHandler+0x68c>
 80115da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80115de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d008      	beq.n	80115f8 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80115ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80115f0:	6878      	ldr	r0, [r7, #4]
 80115f2:	f001 ff67 	bl	80134c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80115f6:	e051      	b.n	801169c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80115f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80115fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011600:	2b00      	cmp	r3, #0
 8011602:	d014      	beq.n	801162e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8011604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801160c:	2b00      	cmp	r3, #0
 801160e:	d105      	bne.n	801161c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8011610:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011614:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011618:	2b00      	cmp	r3, #0
 801161a:	d008      	beq.n	801162e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011620:	2b00      	cmp	r3, #0
 8011622:	d03a      	beq.n	801169a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011628:	6878      	ldr	r0, [r7, #4]
 801162a:	4798      	blx	r3
    }
    return;
 801162c:	e035      	b.n	801169a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801162e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011636:	2b00      	cmp	r3, #0
 8011638:	d009      	beq.n	801164e <HAL_UART_IRQHandler+0x6e2>
 801163a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801163e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011642:	2b00      	cmp	r3, #0
 8011644:	d003      	beq.n	801164e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8011646:	6878      	ldr	r0, [r7, #4]
 8011648:	f001 fab4 	bl	8012bb4 <UART_EndTransmit_IT>
    return;
 801164c:	e026      	b.n	801169c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801164e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011652:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011656:	2b00      	cmp	r3, #0
 8011658:	d009      	beq.n	801166e <HAL_UART_IRQHandler+0x702>
 801165a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801165e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011662:	2b00      	cmp	r3, #0
 8011664:	d003      	beq.n	801166e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8011666:	6878      	ldr	r0, [r7, #4]
 8011668:	f001 ff40 	bl	80134ec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801166c:	e016      	b.n	801169c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801166e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011672:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011676:	2b00      	cmp	r3, #0
 8011678:	d010      	beq.n	801169c <HAL_UART_IRQHandler+0x730>
 801167a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801167e:	2b00      	cmp	r3, #0
 8011680:	da0c      	bge.n	801169c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8011682:	6878      	ldr	r0, [r7, #4]
 8011684:	f001 ff28 	bl	80134d8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011688:	e008      	b.n	801169c <HAL_UART_IRQHandler+0x730>
      return;
 801168a:	bf00      	nop
 801168c:	e006      	b.n	801169c <HAL_UART_IRQHandler+0x730>
    return;
 801168e:	bf00      	nop
 8011690:	e004      	b.n	801169c <HAL_UART_IRQHandler+0x730>
      return;
 8011692:	bf00      	nop
 8011694:	e002      	b.n	801169c <HAL_UART_IRQHandler+0x730>
      return;
 8011696:	bf00      	nop
 8011698:	e000      	b.n	801169c <HAL_UART_IRQHandler+0x730>
    return;
 801169a:	bf00      	nop
  }
}
 801169c:	37e8      	adds	r7, #232	; 0xe8
 801169e:	46bd      	mov	sp, r7
 80116a0:	bd80      	pop	{r7, pc}
 80116a2:	bf00      	nop
 80116a4:	effffffe 	.word	0xeffffffe

080116a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80116a8:	b480      	push	{r7}
 80116aa:	b083      	sub	sp, #12
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80116b0:	bf00      	nop
 80116b2:	370c      	adds	r7, #12
 80116b4:	46bd      	mov	sp, r7
 80116b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ba:	4770      	bx	lr

080116bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80116bc:	b480      	push	{r7}
 80116be:	b083      	sub	sp, #12
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80116c4:	bf00      	nop
 80116c6:	370c      	adds	r7, #12
 80116c8:	46bd      	mov	sp, r7
 80116ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ce:	4770      	bx	lr

080116d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80116d0:	b480      	push	{r7}
 80116d2:	b083      	sub	sp, #12
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6078      	str	r0, [r7, #4]
 80116d8:	460b      	mov	r3, r1
 80116da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80116dc:	bf00      	nop
 80116de:	370c      	adds	r7, #12
 80116e0:	46bd      	mov	sp, r7
 80116e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e6:	4770      	bx	lr

080116e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80116e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80116ec:	b092      	sub	sp, #72	; 0x48
 80116ee:	af00      	add	r7, sp, #0
 80116f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80116f2:	2300      	movs	r3, #0
 80116f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80116f8:	697b      	ldr	r3, [r7, #20]
 80116fa:	689a      	ldr	r2, [r3, #8]
 80116fc:	697b      	ldr	r3, [r7, #20]
 80116fe:	691b      	ldr	r3, [r3, #16]
 8011700:	431a      	orrs	r2, r3
 8011702:	697b      	ldr	r3, [r7, #20]
 8011704:	695b      	ldr	r3, [r3, #20]
 8011706:	431a      	orrs	r2, r3
 8011708:	697b      	ldr	r3, [r7, #20]
 801170a:	69db      	ldr	r3, [r3, #28]
 801170c:	4313      	orrs	r3, r2
 801170e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011710:	697b      	ldr	r3, [r7, #20]
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	681a      	ldr	r2, [r3, #0]
 8011716:	4bbe      	ldr	r3, [pc, #760]	; (8011a10 <UART_SetConfig+0x328>)
 8011718:	4013      	ands	r3, r2
 801171a:	697a      	ldr	r2, [r7, #20]
 801171c:	6812      	ldr	r2, [r2, #0]
 801171e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011720:	430b      	orrs	r3, r1
 8011722:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011724:	697b      	ldr	r3, [r7, #20]
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	685b      	ldr	r3, [r3, #4]
 801172a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801172e:	697b      	ldr	r3, [r7, #20]
 8011730:	68da      	ldr	r2, [r3, #12]
 8011732:	697b      	ldr	r3, [r7, #20]
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	430a      	orrs	r2, r1
 8011738:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801173a:	697b      	ldr	r3, [r7, #20]
 801173c:	699b      	ldr	r3, [r3, #24]
 801173e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011740:	697b      	ldr	r3, [r7, #20]
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	4ab3      	ldr	r2, [pc, #716]	; (8011a14 <UART_SetConfig+0x32c>)
 8011746:	4293      	cmp	r3, r2
 8011748:	d004      	beq.n	8011754 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801174a:	697b      	ldr	r3, [r7, #20]
 801174c:	6a1b      	ldr	r3, [r3, #32]
 801174e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011750:	4313      	orrs	r3, r2
 8011752:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011754:	697b      	ldr	r3, [r7, #20]
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	689a      	ldr	r2, [r3, #8]
 801175a:	4baf      	ldr	r3, [pc, #700]	; (8011a18 <UART_SetConfig+0x330>)
 801175c:	4013      	ands	r3, r2
 801175e:	697a      	ldr	r2, [r7, #20]
 8011760:	6812      	ldr	r2, [r2, #0]
 8011762:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011764:	430b      	orrs	r3, r1
 8011766:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011768:	697b      	ldr	r3, [r7, #20]
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801176e:	f023 010f 	bic.w	r1, r3, #15
 8011772:	697b      	ldr	r3, [r7, #20]
 8011774:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011776:	697b      	ldr	r3, [r7, #20]
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	430a      	orrs	r2, r1
 801177c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801177e:	697b      	ldr	r3, [r7, #20]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	4aa6      	ldr	r2, [pc, #664]	; (8011a1c <UART_SetConfig+0x334>)
 8011784:	4293      	cmp	r3, r2
 8011786:	d177      	bne.n	8011878 <UART_SetConfig+0x190>
 8011788:	4ba5      	ldr	r3, [pc, #660]	; (8011a20 <UART_SetConfig+0x338>)
 801178a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801178c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011790:	2b28      	cmp	r3, #40	; 0x28
 8011792:	d86d      	bhi.n	8011870 <UART_SetConfig+0x188>
 8011794:	a201      	add	r2, pc, #4	; (adr r2, 801179c <UART_SetConfig+0xb4>)
 8011796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801179a:	bf00      	nop
 801179c:	08011841 	.word	0x08011841
 80117a0:	08011871 	.word	0x08011871
 80117a4:	08011871 	.word	0x08011871
 80117a8:	08011871 	.word	0x08011871
 80117ac:	08011871 	.word	0x08011871
 80117b0:	08011871 	.word	0x08011871
 80117b4:	08011871 	.word	0x08011871
 80117b8:	08011871 	.word	0x08011871
 80117bc:	08011849 	.word	0x08011849
 80117c0:	08011871 	.word	0x08011871
 80117c4:	08011871 	.word	0x08011871
 80117c8:	08011871 	.word	0x08011871
 80117cc:	08011871 	.word	0x08011871
 80117d0:	08011871 	.word	0x08011871
 80117d4:	08011871 	.word	0x08011871
 80117d8:	08011871 	.word	0x08011871
 80117dc:	08011851 	.word	0x08011851
 80117e0:	08011871 	.word	0x08011871
 80117e4:	08011871 	.word	0x08011871
 80117e8:	08011871 	.word	0x08011871
 80117ec:	08011871 	.word	0x08011871
 80117f0:	08011871 	.word	0x08011871
 80117f4:	08011871 	.word	0x08011871
 80117f8:	08011871 	.word	0x08011871
 80117fc:	08011859 	.word	0x08011859
 8011800:	08011871 	.word	0x08011871
 8011804:	08011871 	.word	0x08011871
 8011808:	08011871 	.word	0x08011871
 801180c:	08011871 	.word	0x08011871
 8011810:	08011871 	.word	0x08011871
 8011814:	08011871 	.word	0x08011871
 8011818:	08011871 	.word	0x08011871
 801181c:	08011861 	.word	0x08011861
 8011820:	08011871 	.word	0x08011871
 8011824:	08011871 	.word	0x08011871
 8011828:	08011871 	.word	0x08011871
 801182c:	08011871 	.word	0x08011871
 8011830:	08011871 	.word	0x08011871
 8011834:	08011871 	.word	0x08011871
 8011838:	08011871 	.word	0x08011871
 801183c:	08011869 	.word	0x08011869
 8011840:	2301      	movs	r3, #1
 8011842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011846:	e222      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011848:	2304      	movs	r3, #4
 801184a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801184e:	e21e      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011850:	2308      	movs	r3, #8
 8011852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011856:	e21a      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011858:	2310      	movs	r3, #16
 801185a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801185e:	e216      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011860:	2320      	movs	r3, #32
 8011862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011866:	e212      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011868:	2340      	movs	r3, #64	; 0x40
 801186a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801186e:	e20e      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011870:	2380      	movs	r3, #128	; 0x80
 8011872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011876:	e20a      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011878:	697b      	ldr	r3, [r7, #20]
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	4a69      	ldr	r2, [pc, #420]	; (8011a24 <UART_SetConfig+0x33c>)
 801187e:	4293      	cmp	r3, r2
 8011880:	d130      	bne.n	80118e4 <UART_SetConfig+0x1fc>
 8011882:	4b67      	ldr	r3, [pc, #412]	; (8011a20 <UART_SetConfig+0x338>)
 8011884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011886:	f003 0307 	and.w	r3, r3, #7
 801188a:	2b05      	cmp	r3, #5
 801188c:	d826      	bhi.n	80118dc <UART_SetConfig+0x1f4>
 801188e:	a201      	add	r2, pc, #4	; (adr r2, 8011894 <UART_SetConfig+0x1ac>)
 8011890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011894:	080118ad 	.word	0x080118ad
 8011898:	080118b5 	.word	0x080118b5
 801189c:	080118bd 	.word	0x080118bd
 80118a0:	080118c5 	.word	0x080118c5
 80118a4:	080118cd 	.word	0x080118cd
 80118a8:	080118d5 	.word	0x080118d5
 80118ac:	2300      	movs	r3, #0
 80118ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118b2:	e1ec      	b.n	8011c8e <UART_SetConfig+0x5a6>
 80118b4:	2304      	movs	r3, #4
 80118b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118ba:	e1e8      	b.n	8011c8e <UART_SetConfig+0x5a6>
 80118bc:	2308      	movs	r3, #8
 80118be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118c2:	e1e4      	b.n	8011c8e <UART_SetConfig+0x5a6>
 80118c4:	2310      	movs	r3, #16
 80118c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118ca:	e1e0      	b.n	8011c8e <UART_SetConfig+0x5a6>
 80118cc:	2320      	movs	r3, #32
 80118ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118d2:	e1dc      	b.n	8011c8e <UART_SetConfig+0x5a6>
 80118d4:	2340      	movs	r3, #64	; 0x40
 80118d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118da:	e1d8      	b.n	8011c8e <UART_SetConfig+0x5a6>
 80118dc:	2380      	movs	r3, #128	; 0x80
 80118de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118e2:	e1d4      	b.n	8011c8e <UART_SetConfig+0x5a6>
 80118e4:	697b      	ldr	r3, [r7, #20]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	4a4f      	ldr	r2, [pc, #316]	; (8011a28 <UART_SetConfig+0x340>)
 80118ea:	4293      	cmp	r3, r2
 80118ec:	d130      	bne.n	8011950 <UART_SetConfig+0x268>
 80118ee:	4b4c      	ldr	r3, [pc, #304]	; (8011a20 <UART_SetConfig+0x338>)
 80118f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80118f2:	f003 0307 	and.w	r3, r3, #7
 80118f6:	2b05      	cmp	r3, #5
 80118f8:	d826      	bhi.n	8011948 <UART_SetConfig+0x260>
 80118fa:	a201      	add	r2, pc, #4	; (adr r2, 8011900 <UART_SetConfig+0x218>)
 80118fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011900:	08011919 	.word	0x08011919
 8011904:	08011921 	.word	0x08011921
 8011908:	08011929 	.word	0x08011929
 801190c:	08011931 	.word	0x08011931
 8011910:	08011939 	.word	0x08011939
 8011914:	08011941 	.word	0x08011941
 8011918:	2300      	movs	r3, #0
 801191a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801191e:	e1b6      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011920:	2304      	movs	r3, #4
 8011922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011926:	e1b2      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011928:	2308      	movs	r3, #8
 801192a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801192e:	e1ae      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011930:	2310      	movs	r3, #16
 8011932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011936:	e1aa      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011938:	2320      	movs	r3, #32
 801193a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801193e:	e1a6      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011940:	2340      	movs	r3, #64	; 0x40
 8011942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011946:	e1a2      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011948:	2380      	movs	r3, #128	; 0x80
 801194a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801194e:	e19e      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011950:	697b      	ldr	r3, [r7, #20]
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	4a35      	ldr	r2, [pc, #212]	; (8011a2c <UART_SetConfig+0x344>)
 8011956:	4293      	cmp	r3, r2
 8011958:	d130      	bne.n	80119bc <UART_SetConfig+0x2d4>
 801195a:	4b31      	ldr	r3, [pc, #196]	; (8011a20 <UART_SetConfig+0x338>)
 801195c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801195e:	f003 0307 	and.w	r3, r3, #7
 8011962:	2b05      	cmp	r3, #5
 8011964:	d826      	bhi.n	80119b4 <UART_SetConfig+0x2cc>
 8011966:	a201      	add	r2, pc, #4	; (adr r2, 801196c <UART_SetConfig+0x284>)
 8011968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801196c:	08011985 	.word	0x08011985
 8011970:	0801198d 	.word	0x0801198d
 8011974:	08011995 	.word	0x08011995
 8011978:	0801199d 	.word	0x0801199d
 801197c:	080119a5 	.word	0x080119a5
 8011980:	080119ad 	.word	0x080119ad
 8011984:	2300      	movs	r3, #0
 8011986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801198a:	e180      	b.n	8011c8e <UART_SetConfig+0x5a6>
 801198c:	2304      	movs	r3, #4
 801198e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011992:	e17c      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011994:	2308      	movs	r3, #8
 8011996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801199a:	e178      	b.n	8011c8e <UART_SetConfig+0x5a6>
 801199c:	2310      	movs	r3, #16
 801199e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80119a2:	e174      	b.n	8011c8e <UART_SetConfig+0x5a6>
 80119a4:	2320      	movs	r3, #32
 80119a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80119aa:	e170      	b.n	8011c8e <UART_SetConfig+0x5a6>
 80119ac:	2340      	movs	r3, #64	; 0x40
 80119ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80119b2:	e16c      	b.n	8011c8e <UART_SetConfig+0x5a6>
 80119b4:	2380      	movs	r3, #128	; 0x80
 80119b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80119ba:	e168      	b.n	8011c8e <UART_SetConfig+0x5a6>
 80119bc:	697b      	ldr	r3, [r7, #20]
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	4a1b      	ldr	r2, [pc, #108]	; (8011a30 <UART_SetConfig+0x348>)
 80119c2:	4293      	cmp	r3, r2
 80119c4:	d142      	bne.n	8011a4c <UART_SetConfig+0x364>
 80119c6:	4b16      	ldr	r3, [pc, #88]	; (8011a20 <UART_SetConfig+0x338>)
 80119c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80119ca:	f003 0307 	and.w	r3, r3, #7
 80119ce:	2b05      	cmp	r3, #5
 80119d0:	d838      	bhi.n	8011a44 <UART_SetConfig+0x35c>
 80119d2:	a201      	add	r2, pc, #4	; (adr r2, 80119d8 <UART_SetConfig+0x2f0>)
 80119d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119d8:	080119f1 	.word	0x080119f1
 80119dc:	080119f9 	.word	0x080119f9
 80119e0:	08011a01 	.word	0x08011a01
 80119e4:	08011a09 	.word	0x08011a09
 80119e8:	08011a35 	.word	0x08011a35
 80119ec:	08011a3d 	.word	0x08011a3d
 80119f0:	2300      	movs	r3, #0
 80119f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80119f6:	e14a      	b.n	8011c8e <UART_SetConfig+0x5a6>
 80119f8:	2304      	movs	r3, #4
 80119fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80119fe:	e146      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011a00:	2308      	movs	r3, #8
 8011a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a06:	e142      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011a08:	2310      	movs	r3, #16
 8011a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a0e:	e13e      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011a10:	cfff69f3 	.word	0xcfff69f3
 8011a14:	58000c00 	.word	0x58000c00
 8011a18:	11fff4ff 	.word	0x11fff4ff
 8011a1c:	40011000 	.word	0x40011000
 8011a20:	58024400 	.word	0x58024400
 8011a24:	40004400 	.word	0x40004400
 8011a28:	40004800 	.word	0x40004800
 8011a2c:	40004c00 	.word	0x40004c00
 8011a30:	40005000 	.word	0x40005000
 8011a34:	2320      	movs	r3, #32
 8011a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a3a:	e128      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011a3c:	2340      	movs	r3, #64	; 0x40
 8011a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a42:	e124      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011a44:	2380      	movs	r3, #128	; 0x80
 8011a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a4a:	e120      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011a4c:	697b      	ldr	r3, [r7, #20]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	4acb      	ldr	r2, [pc, #812]	; (8011d80 <UART_SetConfig+0x698>)
 8011a52:	4293      	cmp	r3, r2
 8011a54:	d176      	bne.n	8011b44 <UART_SetConfig+0x45c>
 8011a56:	4bcb      	ldr	r3, [pc, #812]	; (8011d84 <UART_SetConfig+0x69c>)
 8011a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011a5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011a5e:	2b28      	cmp	r3, #40	; 0x28
 8011a60:	d86c      	bhi.n	8011b3c <UART_SetConfig+0x454>
 8011a62:	a201      	add	r2, pc, #4	; (adr r2, 8011a68 <UART_SetConfig+0x380>)
 8011a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a68:	08011b0d 	.word	0x08011b0d
 8011a6c:	08011b3d 	.word	0x08011b3d
 8011a70:	08011b3d 	.word	0x08011b3d
 8011a74:	08011b3d 	.word	0x08011b3d
 8011a78:	08011b3d 	.word	0x08011b3d
 8011a7c:	08011b3d 	.word	0x08011b3d
 8011a80:	08011b3d 	.word	0x08011b3d
 8011a84:	08011b3d 	.word	0x08011b3d
 8011a88:	08011b15 	.word	0x08011b15
 8011a8c:	08011b3d 	.word	0x08011b3d
 8011a90:	08011b3d 	.word	0x08011b3d
 8011a94:	08011b3d 	.word	0x08011b3d
 8011a98:	08011b3d 	.word	0x08011b3d
 8011a9c:	08011b3d 	.word	0x08011b3d
 8011aa0:	08011b3d 	.word	0x08011b3d
 8011aa4:	08011b3d 	.word	0x08011b3d
 8011aa8:	08011b1d 	.word	0x08011b1d
 8011aac:	08011b3d 	.word	0x08011b3d
 8011ab0:	08011b3d 	.word	0x08011b3d
 8011ab4:	08011b3d 	.word	0x08011b3d
 8011ab8:	08011b3d 	.word	0x08011b3d
 8011abc:	08011b3d 	.word	0x08011b3d
 8011ac0:	08011b3d 	.word	0x08011b3d
 8011ac4:	08011b3d 	.word	0x08011b3d
 8011ac8:	08011b25 	.word	0x08011b25
 8011acc:	08011b3d 	.word	0x08011b3d
 8011ad0:	08011b3d 	.word	0x08011b3d
 8011ad4:	08011b3d 	.word	0x08011b3d
 8011ad8:	08011b3d 	.word	0x08011b3d
 8011adc:	08011b3d 	.word	0x08011b3d
 8011ae0:	08011b3d 	.word	0x08011b3d
 8011ae4:	08011b3d 	.word	0x08011b3d
 8011ae8:	08011b2d 	.word	0x08011b2d
 8011aec:	08011b3d 	.word	0x08011b3d
 8011af0:	08011b3d 	.word	0x08011b3d
 8011af4:	08011b3d 	.word	0x08011b3d
 8011af8:	08011b3d 	.word	0x08011b3d
 8011afc:	08011b3d 	.word	0x08011b3d
 8011b00:	08011b3d 	.word	0x08011b3d
 8011b04:	08011b3d 	.word	0x08011b3d
 8011b08:	08011b35 	.word	0x08011b35
 8011b0c:	2301      	movs	r3, #1
 8011b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b12:	e0bc      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011b14:	2304      	movs	r3, #4
 8011b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b1a:	e0b8      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011b1c:	2308      	movs	r3, #8
 8011b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b22:	e0b4      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011b24:	2310      	movs	r3, #16
 8011b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b2a:	e0b0      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011b2c:	2320      	movs	r3, #32
 8011b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b32:	e0ac      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011b34:	2340      	movs	r3, #64	; 0x40
 8011b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b3a:	e0a8      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011b3c:	2380      	movs	r3, #128	; 0x80
 8011b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b42:	e0a4      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011b44:	697b      	ldr	r3, [r7, #20]
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	4a8f      	ldr	r2, [pc, #572]	; (8011d88 <UART_SetConfig+0x6a0>)
 8011b4a:	4293      	cmp	r3, r2
 8011b4c:	d130      	bne.n	8011bb0 <UART_SetConfig+0x4c8>
 8011b4e:	4b8d      	ldr	r3, [pc, #564]	; (8011d84 <UART_SetConfig+0x69c>)
 8011b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011b52:	f003 0307 	and.w	r3, r3, #7
 8011b56:	2b05      	cmp	r3, #5
 8011b58:	d826      	bhi.n	8011ba8 <UART_SetConfig+0x4c0>
 8011b5a:	a201      	add	r2, pc, #4	; (adr r2, 8011b60 <UART_SetConfig+0x478>)
 8011b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b60:	08011b79 	.word	0x08011b79
 8011b64:	08011b81 	.word	0x08011b81
 8011b68:	08011b89 	.word	0x08011b89
 8011b6c:	08011b91 	.word	0x08011b91
 8011b70:	08011b99 	.word	0x08011b99
 8011b74:	08011ba1 	.word	0x08011ba1
 8011b78:	2300      	movs	r3, #0
 8011b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b7e:	e086      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011b80:	2304      	movs	r3, #4
 8011b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b86:	e082      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011b88:	2308      	movs	r3, #8
 8011b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b8e:	e07e      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011b90:	2310      	movs	r3, #16
 8011b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b96:	e07a      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011b98:	2320      	movs	r3, #32
 8011b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b9e:	e076      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011ba0:	2340      	movs	r3, #64	; 0x40
 8011ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ba6:	e072      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011ba8:	2380      	movs	r3, #128	; 0x80
 8011baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bae:	e06e      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011bb0:	697b      	ldr	r3, [r7, #20]
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	4a75      	ldr	r2, [pc, #468]	; (8011d8c <UART_SetConfig+0x6a4>)
 8011bb6:	4293      	cmp	r3, r2
 8011bb8:	d130      	bne.n	8011c1c <UART_SetConfig+0x534>
 8011bba:	4b72      	ldr	r3, [pc, #456]	; (8011d84 <UART_SetConfig+0x69c>)
 8011bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011bbe:	f003 0307 	and.w	r3, r3, #7
 8011bc2:	2b05      	cmp	r3, #5
 8011bc4:	d826      	bhi.n	8011c14 <UART_SetConfig+0x52c>
 8011bc6:	a201      	add	r2, pc, #4	; (adr r2, 8011bcc <UART_SetConfig+0x4e4>)
 8011bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bcc:	08011be5 	.word	0x08011be5
 8011bd0:	08011bed 	.word	0x08011bed
 8011bd4:	08011bf5 	.word	0x08011bf5
 8011bd8:	08011bfd 	.word	0x08011bfd
 8011bdc:	08011c05 	.word	0x08011c05
 8011be0:	08011c0d 	.word	0x08011c0d
 8011be4:	2300      	movs	r3, #0
 8011be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bea:	e050      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011bec:	2304      	movs	r3, #4
 8011bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bf2:	e04c      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011bf4:	2308      	movs	r3, #8
 8011bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bfa:	e048      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011bfc:	2310      	movs	r3, #16
 8011bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c02:	e044      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011c04:	2320      	movs	r3, #32
 8011c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c0a:	e040      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011c0c:	2340      	movs	r3, #64	; 0x40
 8011c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c12:	e03c      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011c14:	2380      	movs	r3, #128	; 0x80
 8011c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c1a:	e038      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011c1c:	697b      	ldr	r3, [r7, #20]
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	4a5b      	ldr	r2, [pc, #364]	; (8011d90 <UART_SetConfig+0x6a8>)
 8011c22:	4293      	cmp	r3, r2
 8011c24:	d130      	bne.n	8011c88 <UART_SetConfig+0x5a0>
 8011c26:	4b57      	ldr	r3, [pc, #348]	; (8011d84 <UART_SetConfig+0x69c>)
 8011c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011c2a:	f003 0307 	and.w	r3, r3, #7
 8011c2e:	2b05      	cmp	r3, #5
 8011c30:	d826      	bhi.n	8011c80 <UART_SetConfig+0x598>
 8011c32:	a201      	add	r2, pc, #4	; (adr r2, 8011c38 <UART_SetConfig+0x550>)
 8011c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c38:	08011c51 	.word	0x08011c51
 8011c3c:	08011c59 	.word	0x08011c59
 8011c40:	08011c61 	.word	0x08011c61
 8011c44:	08011c69 	.word	0x08011c69
 8011c48:	08011c71 	.word	0x08011c71
 8011c4c:	08011c79 	.word	0x08011c79
 8011c50:	2302      	movs	r3, #2
 8011c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c56:	e01a      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011c58:	2304      	movs	r3, #4
 8011c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c5e:	e016      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011c60:	2308      	movs	r3, #8
 8011c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c66:	e012      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011c68:	2310      	movs	r3, #16
 8011c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c6e:	e00e      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011c70:	2320      	movs	r3, #32
 8011c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c76:	e00a      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011c78:	2340      	movs	r3, #64	; 0x40
 8011c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c7e:	e006      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011c80:	2380      	movs	r3, #128	; 0x80
 8011c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c86:	e002      	b.n	8011c8e <UART_SetConfig+0x5a6>
 8011c88:	2380      	movs	r3, #128	; 0x80
 8011c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011c8e:	697b      	ldr	r3, [r7, #20]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	4a3f      	ldr	r2, [pc, #252]	; (8011d90 <UART_SetConfig+0x6a8>)
 8011c94:	4293      	cmp	r3, r2
 8011c96:	f040 80f8 	bne.w	8011e8a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011c9a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011c9e:	2b20      	cmp	r3, #32
 8011ca0:	dc46      	bgt.n	8011d30 <UART_SetConfig+0x648>
 8011ca2:	2b02      	cmp	r3, #2
 8011ca4:	f2c0 8082 	blt.w	8011dac <UART_SetConfig+0x6c4>
 8011ca8:	3b02      	subs	r3, #2
 8011caa:	2b1e      	cmp	r3, #30
 8011cac:	d87e      	bhi.n	8011dac <UART_SetConfig+0x6c4>
 8011cae:	a201      	add	r2, pc, #4	; (adr r2, 8011cb4 <UART_SetConfig+0x5cc>)
 8011cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cb4:	08011d37 	.word	0x08011d37
 8011cb8:	08011dad 	.word	0x08011dad
 8011cbc:	08011d3f 	.word	0x08011d3f
 8011cc0:	08011dad 	.word	0x08011dad
 8011cc4:	08011dad 	.word	0x08011dad
 8011cc8:	08011dad 	.word	0x08011dad
 8011ccc:	08011d4f 	.word	0x08011d4f
 8011cd0:	08011dad 	.word	0x08011dad
 8011cd4:	08011dad 	.word	0x08011dad
 8011cd8:	08011dad 	.word	0x08011dad
 8011cdc:	08011dad 	.word	0x08011dad
 8011ce0:	08011dad 	.word	0x08011dad
 8011ce4:	08011dad 	.word	0x08011dad
 8011ce8:	08011dad 	.word	0x08011dad
 8011cec:	08011d5f 	.word	0x08011d5f
 8011cf0:	08011dad 	.word	0x08011dad
 8011cf4:	08011dad 	.word	0x08011dad
 8011cf8:	08011dad 	.word	0x08011dad
 8011cfc:	08011dad 	.word	0x08011dad
 8011d00:	08011dad 	.word	0x08011dad
 8011d04:	08011dad 	.word	0x08011dad
 8011d08:	08011dad 	.word	0x08011dad
 8011d0c:	08011dad 	.word	0x08011dad
 8011d10:	08011dad 	.word	0x08011dad
 8011d14:	08011dad 	.word	0x08011dad
 8011d18:	08011dad 	.word	0x08011dad
 8011d1c:	08011dad 	.word	0x08011dad
 8011d20:	08011dad 	.word	0x08011dad
 8011d24:	08011dad 	.word	0x08011dad
 8011d28:	08011dad 	.word	0x08011dad
 8011d2c:	08011d9f 	.word	0x08011d9f
 8011d30:	2b40      	cmp	r3, #64	; 0x40
 8011d32:	d037      	beq.n	8011da4 <UART_SetConfig+0x6bc>
 8011d34:	e03a      	b.n	8011dac <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8011d36:	f7fc f873 	bl	800de20 <HAL_RCCEx_GetD3PCLK1Freq>
 8011d3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011d3c:	e03c      	b.n	8011db8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011d42:	4618      	mov	r0, r3
 8011d44:	f7fc f882 	bl	800de4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d4c:	e034      	b.n	8011db8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011d4e:	f107 0318 	add.w	r3, r7, #24
 8011d52:	4618      	mov	r0, r3
 8011d54:	f7fc f9ce 	bl	800e0f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011d58:	69fb      	ldr	r3, [r7, #28]
 8011d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d5c:	e02c      	b.n	8011db8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011d5e:	4b09      	ldr	r3, [pc, #36]	; (8011d84 <UART_SetConfig+0x69c>)
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	f003 0320 	and.w	r3, r3, #32
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d016      	beq.n	8011d98 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011d6a:	4b06      	ldr	r3, [pc, #24]	; (8011d84 <UART_SetConfig+0x69c>)
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	08db      	lsrs	r3, r3, #3
 8011d70:	f003 0303 	and.w	r3, r3, #3
 8011d74:	4a07      	ldr	r2, [pc, #28]	; (8011d94 <UART_SetConfig+0x6ac>)
 8011d76:	fa22 f303 	lsr.w	r3, r2, r3
 8011d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011d7c:	e01c      	b.n	8011db8 <UART_SetConfig+0x6d0>
 8011d7e:	bf00      	nop
 8011d80:	40011400 	.word	0x40011400
 8011d84:	58024400 	.word	0x58024400
 8011d88:	40007800 	.word	0x40007800
 8011d8c:	40007c00 	.word	0x40007c00
 8011d90:	58000c00 	.word	0x58000c00
 8011d94:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8011d98:	4b9d      	ldr	r3, [pc, #628]	; (8012010 <UART_SetConfig+0x928>)
 8011d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d9c:	e00c      	b.n	8011db8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011d9e:	4b9d      	ldr	r3, [pc, #628]	; (8012014 <UART_SetConfig+0x92c>)
 8011da0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011da2:	e009      	b.n	8011db8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011da4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011da8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011daa:	e005      	b.n	8011db8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8011dac:	2300      	movs	r3, #0
 8011dae:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011db0:	2301      	movs	r3, #1
 8011db2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011db6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	f000 81de 	beq.w	801217c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011dc0:	697b      	ldr	r3, [r7, #20]
 8011dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dc4:	4a94      	ldr	r2, [pc, #592]	; (8012018 <UART_SetConfig+0x930>)
 8011dc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011dca:	461a      	mov	r2, r3
 8011dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dce:	fbb3 f3f2 	udiv	r3, r3, r2
 8011dd2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011dd4:	697b      	ldr	r3, [r7, #20]
 8011dd6:	685a      	ldr	r2, [r3, #4]
 8011dd8:	4613      	mov	r3, r2
 8011dda:	005b      	lsls	r3, r3, #1
 8011ddc:	4413      	add	r3, r2
 8011dde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011de0:	429a      	cmp	r2, r3
 8011de2:	d305      	bcc.n	8011df0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011de4:	697b      	ldr	r3, [r7, #20]
 8011de6:	685b      	ldr	r3, [r3, #4]
 8011de8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011dea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011dec:	429a      	cmp	r2, r3
 8011dee:	d903      	bls.n	8011df8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8011df0:	2301      	movs	r3, #1
 8011df2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011df6:	e1c1      	b.n	801217c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dfa:	2200      	movs	r2, #0
 8011dfc:	60bb      	str	r3, [r7, #8]
 8011dfe:	60fa      	str	r2, [r7, #12]
 8011e00:	697b      	ldr	r3, [r7, #20]
 8011e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e04:	4a84      	ldr	r2, [pc, #528]	; (8012018 <UART_SetConfig+0x930>)
 8011e06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011e0a:	b29b      	uxth	r3, r3
 8011e0c:	2200      	movs	r2, #0
 8011e0e:	603b      	str	r3, [r7, #0]
 8011e10:	607a      	str	r2, [r7, #4]
 8011e12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011e16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011e1a:	f7ee fab9 	bl	8000390 <__aeabi_uldivmod>
 8011e1e:	4602      	mov	r2, r0
 8011e20:	460b      	mov	r3, r1
 8011e22:	4610      	mov	r0, r2
 8011e24:	4619      	mov	r1, r3
 8011e26:	f04f 0200 	mov.w	r2, #0
 8011e2a:	f04f 0300 	mov.w	r3, #0
 8011e2e:	020b      	lsls	r3, r1, #8
 8011e30:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011e34:	0202      	lsls	r2, r0, #8
 8011e36:	6979      	ldr	r1, [r7, #20]
 8011e38:	6849      	ldr	r1, [r1, #4]
 8011e3a:	0849      	lsrs	r1, r1, #1
 8011e3c:	2000      	movs	r0, #0
 8011e3e:	460c      	mov	r4, r1
 8011e40:	4605      	mov	r5, r0
 8011e42:	eb12 0804 	adds.w	r8, r2, r4
 8011e46:	eb43 0905 	adc.w	r9, r3, r5
 8011e4a:	697b      	ldr	r3, [r7, #20]
 8011e4c:	685b      	ldr	r3, [r3, #4]
 8011e4e:	2200      	movs	r2, #0
 8011e50:	469a      	mov	sl, r3
 8011e52:	4693      	mov	fp, r2
 8011e54:	4652      	mov	r2, sl
 8011e56:	465b      	mov	r3, fp
 8011e58:	4640      	mov	r0, r8
 8011e5a:	4649      	mov	r1, r9
 8011e5c:	f7ee fa98 	bl	8000390 <__aeabi_uldivmod>
 8011e60:	4602      	mov	r2, r0
 8011e62:	460b      	mov	r3, r1
 8011e64:	4613      	mov	r3, r2
 8011e66:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011e6e:	d308      	bcc.n	8011e82 <UART_SetConfig+0x79a>
 8011e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011e76:	d204      	bcs.n	8011e82 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8011e78:	697b      	ldr	r3, [r7, #20]
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011e7e:	60da      	str	r2, [r3, #12]
 8011e80:	e17c      	b.n	801217c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8011e82:	2301      	movs	r3, #1
 8011e84:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011e88:	e178      	b.n	801217c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011e8a:	697b      	ldr	r3, [r7, #20]
 8011e8c:	69db      	ldr	r3, [r3, #28]
 8011e8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011e92:	f040 80c5 	bne.w	8012020 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8011e96:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011e9a:	2b20      	cmp	r3, #32
 8011e9c:	dc48      	bgt.n	8011f30 <UART_SetConfig+0x848>
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	db7b      	blt.n	8011f9a <UART_SetConfig+0x8b2>
 8011ea2:	2b20      	cmp	r3, #32
 8011ea4:	d879      	bhi.n	8011f9a <UART_SetConfig+0x8b2>
 8011ea6:	a201      	add	r2, pc, #4	; (adr r2, 8011eac <UART_SetConfig+0x7c4>)
 8011ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011eac:	08011f37 	.word	0x08011f37
 8011eb0:	08011f3f 	.word	0x08011f3f
 8011eb4:	08011f9b 	.word	0x08011f9b
 8011eb8:	08011f9b 	.word	0x08011f9b
 8011ebc:	08011f47 	.word	0x08011f47
 8011ec0:	08011f9b 	.word	0x08011f9b
 8011ec4:	08011f9b 	.word	0x08011f9b
 8011ec8:	08011f9b 	.word	0x08011f9b
 8011ecc:	08011f57 	.word	0x08011f57
 8011ed0:	08011f9b 	.word	0x08011f9b
 8011ed4:	08011f9b 	.word	0x08011f9b
 8011ed8:	08011f9b 	.word	0x08011f9b
 8011edc:	08011f9b 	.word	0x08011f9b
 8011ee0:	08011f9b 	.word	0x08011f9b
 8011ee4:	08011f9b 	.word	0x08011f9b
 8011ee8:	08011f9b 	.word	0x08011f9b
 8011eec:	08011f67 	.word	0x08011f67
 8011ef0:	08011f9b 	.word	0x08011f9b
 8011ef4:	08011f9b 	.word	0x08011f9b
 8011ef8:	08011f9b 	.word	0x08011f9b
 8011efc:	08011f9b 	.word	0x08011f9b
 8011f00:	08011f9b 	.word	0x08011f9b
 8011f04:	08011f9b 	.word	0x08011f9b
 8011f08:	08011f9b 	.word	0x08011f9b
 8011f0c:	08011f9b 	.word	0x08011f9b
 8011f10:	08011f9b 	.word	0x08011f9b
 8011f14:	08011f9b 	.word	0x08011f9b
 8011f18:	08011f9b 	.word	0x08011f9b
 8011f1c:	08011f9b 	.word	0x08011f9b
 8011f20:	08011f9b 	.word	0x08011f9b
 8011f24:	08011f9b 	.word	0x08011f9b
 8011f28:	08011f9b 	.word	0x08011f9b
 8011f2c:	08011f8d 	.word	0x08011f8d
 8011f30:	2b40      	cmp	r3, #64	; 0x40
 8011f32:	d02e      	beq.n	8011f92 <UART_SetConfig+0x8aa>
 8011f34:	e031      	b.n	8011f9a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011f36:	f7fa fb2f 	bl	800c598 <HAL_RCC_GetPCLK1Freq>
 8011f3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011f3c:	e033      	b.n	8011fa6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011f3e:	f7fa fb41 	bl	800c5c4 <HAL_RCC_GetPCLK2Freq>
 8011f42:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011f44:	e02f      	b.n	8011fa6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011f46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	f7fb ff7e 	bl	800de4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011f54:	e027      	b.n	8011fa6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011f56:	f107 0318 	add.w	r3, r7, #24
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	f7fc f8ca 	bl	800e0f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011f60:	69fb      	ldr	r3, [r7, #28]
 8011f62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011f64:	e01f      	b.n	8011fa6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011f66:	4b2d      	ldr	r3, [pc, #180]	; (801201c <UART_SetConfig+0x934>)
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	f003 0320 	and.w	r3, r3, #32
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d009      	beq.n	8011f86 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011f72:	4b2a      	ldr	r3, [pc, #168]	; (801201c <UART_SetConfig+0x934>)
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	08db      	lsrs	r3, r3, #3
 8011f78:	f003 0303 	and.w	r3, r3, #3
 8011f7c:	4a24      	ldr	r2, [pc, #144]	; (8012010 <UART_SetConfig+0x928>)
 8011f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8011f82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011f84:	e00f      	b.n	8011fa6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8011f86:	4b22      	ldr	r3, [pc, #136]	; (8012010 <UART_SetConfig+0x928>)
 8011f88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011f8a:	e00c      	b.n	8011fa6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011f8c:	4b21      	ldr	r3, [pc, #132]	; (8012014 <UART_SetConfig+0x92c>)
 8011f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011f90:	e009      	b.n	8011fa6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011f96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011f98:	e005      	b.n	8011fa6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011f9a:	2300      	movs	r3, #0
 8011f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011f9e:	2301      	movs	r3, #1
 8011fa0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011fa4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	f000 80e7 	beq.w	801217c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011fae:	697b      	ldr	r3, [r7, #20]
 8011fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fb2:	4a19      	ldr	r2, [pc, #100]	; (8012018 <UART_SetConfig+0x930>)
 8011fb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011fb8:	461a      	mov	r2, r3
 8011fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8011fc0:	005a      	lsls	r2, r3, #1
 8011fc2:	697b      	ldr	r3, [r7, #20]
 8011fc4:	685b      	ldr	r3, [r3, #4]
 8011fc6:	085b      	lsrs	r3, r3, #1
 8011fc8:	441a      	add	r2, r3
 8011fca:	697b      	ldr	r3, [r7, #20]
 8011fcc:	685b      	ldr	r3, [r3, #4]
 8011fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8011fd2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fd6:	2b0f      	cmp	r3, #15
 8011fd8:	d916      	bls.n	8012008 <UART_SetConfig+0x920>
 8011fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011fe0:	d212      	bcs.n	8012008 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fe4:	b29b      	uxth	r3, r3
 8011fe6:	f023 030f 	bic.w	r3, r3, #15
 8011fea:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fee:	085b      	lsrs	r3, r3, #1
 8011ff0:	b29b      	uxth	r3, r3
 8011ff2:	f003 0307 	and.w	r3, r3, #7
 8011ff6:	b29a      	uxth	r2, r3
 8011ff8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011ffa:	4313      	orrs	r3, r2
 8011ffc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011ffe:	697b      	ldr	r3, [r7, #20]
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8012004:	60da      	str	r2, [r3, #12]
 8012006:	e0b9      	b.n	801217c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8012008:	2301      	movs	r3, #1
 801200a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801200e:	e0b5      	b.n	801217c <UART_SetConfig+0xa94>
 8012010:	03d09000 	.word	0x03d09000
 8012014:	003d0900 	.word	0x003d0900
 8012018:	0801acb4 	.word	0x0801acb4
 801201c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8012020:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012024:	2b20      	cmp	r3, #32
 8012026:	dc49      	bgt.n	80120bc <UART_SetConfig+0x9d4>
 8012028:	2b00      	cmp	r3, #0
 801202a:	db7c      	blt.n	8012126 <UART_SetConfig+0xa3e>
 801202c:	2b20      	cmp	r3, #32
 801202e:	d87a      	bhi.n	8012126 <UART_SetConfig+0xa3e>
 8012030:	a201      	add	r2, pc, #4	; (adr r2, 8012038 <UART_SetConfig+0x950>)
 8012032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012036:	bf00      	nop
 8012038:	080120c3 	.word	0x080120c3
 801203c:	080120cb 	.word	0x080120cb
 8012040:	08012127 	.word	0x08012127
 8012044:	08012127 	.word	0x08012127
 8012048:	080120d3 	.word	0x080120d3
 801204c:	08012127 	.word	0x08012127
 8012050:	08012127 	.word	0x08012127
 8012054:	08012127 	.word	0x08012127
 8012058:	080120e3 	.word	0x080120e3
 801205c:	08012127 	.word	0x08012127
 8012060:	08012127 	.word	0x08012127
 8012064:	08012127 	.word	0x08012127
 8012068:	08012127 	.word	0x08012127
 801206c:	08012127 	.word	0x08012127
 8012070:	08012127 	.word	0x08012127
 8012074:	08012127 	.word	0x08012127
 8012078:	080120f3 	.word	0x080120f3
 801207c:	08012127 	.word	0x08012127
 8012080:	08012127 	.word	0x08012127
 8012084:	08012127 	.word	0x08012127
 8012088:	08012127 	.word	0x08012127
 801208c:	08012127 	.word	0x08012127
 8012090:	08012127 	.word	0x08012127
 8012094:	08012127 	.word	0x08012127
 8012098:	08012127 	.word	0x08012127
 801209c:	08012127 	.word	0x08012127
 80120a0:	08012127 	.word	0x08012127
 80120a4:	08012127 	.word	0x08012127
 80120a8:	08012127 	.word	0x08012127
 80120ac:	08012127 	.word	0x08012127
 80120b0:	08012127 	.word	0x08012127
 80120b4:	08012127 	.word	0x08012127
 80120b8:	08012119 	.word	0x08012119
 80120bc:	2b40      	cmp	r3, #64	; 0x40
 80120be:	d02e      	beq.n	801211e <UART_SetConfig+0xa36>
 80120c0:	e031      	b.n	8012126 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80120c2:	f7fa fa69 	bl	800c598 <HAL_RCC_GetPCLK1Freq>
 80120c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80120c8:	e033      	b.n	8012132 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80120ca:	f7fa fa7b 	bl	800c5c4 <HAL_RCC_GetPCLK2Freq>
 80120ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80120d0:	e02f      	b.n	8012132 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80120d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80120d6:	4618      	mov	r0, r3
 80120d8:	f7fb feb8 	bl	800de4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80120dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80120e0:	e027      	b.n	8012132 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80120e2:	f107 0318 	add.w	r3, r7, #24
 80120e6:	4618      	mov	r0, r3
 80120e8:	f7fc f804 	bl	800e0f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80120ec:	69fb      	ldr	r3, [r7, #28]
 80120ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80120f0:	e01f      	b.n	8012132 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80120f2:	4b2d      	ldr	r3, [pc, #180]	; (80121a8 <UART_SetConfig+0xac0>)
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	f003 0320 	and.w	r3, r3, #32
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d009      	beq.n	8012112 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80120fe:	4b2a      	ldr	r3, [pc, #168]	; (80121a8 <UART_SetConfig+0xac0>)
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	08db      	lsrs	r3, r3, #3
 8012104:	f003 0303 	and.w	r3, r3, #3
 8012108:	4a28      	ldr	r2, [pc, #160]	; (80121ac <UART_SetConfig+0xac4>)
 801210a:	fa22 f303 	lsr.w	r3, r2, r3
 801210e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012110:	e00f      	b.n	8012132 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8012112:	4b26      	ldr	r3, [pc, #152]	; (80121ac <UART_SetConfig+0xac4>)
 8012114:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012116:	e00c      	b.n	8012132 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012118:	4b25      	ldr	r3, [pc, #148]	; (80121b0 <UART_SetConfig+0xac8>)
 801211a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801211c:	e009      	b.n	8012132 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801211e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012122:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012124:	e005      	b.n	8012132 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8012126:	2300      	movs	r3, #0
 8012128:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801212a:	2301      	movs	r3, #1
 801212c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8012130:	bf00      	nop
    }

    if (pclk != 0U)
 8012132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012134:	2b00      	cmp	r3, #0
 8012136:	d021      	beq.n	801217c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012138:	697b      	ldr	r3, [r7, #20]
 801213a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801213c:	4a1d      	ldr	r2, [pc, #116]	; (80121b4 <UART_SetConfig+0xacc>)
 801213e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012142:	461a      	mov	r2, r3
 8012144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012146:	fbb3 f2f2 	udiv	r2, r3, r2
 801214a:	697b      	ldr	r3, [r7, #20]
 801214c:	685b      	ldr	r3, [r3, #4]
 801214e:	085b      	lsrs	r3, r3, #1
 8012150:	441a      	add	r2, r3
 8012152:	697b      	ldr	r3, [r7, #20]
 8012154:	685b      	ldr	r3, [r3, #4]
 8012156:	fbb2 f3f3 	udiv	r3, r2, r3
 801215a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801215c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801215e:	2b0f      	cmp	r3, #15
 8012160:	d909      	bls.n	8012176 <UART_SetConfig+0xa8e>
 8012162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012168:	d205      	bcs.n	8012176 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801216a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801216c:	b29a      	uxth	r2, r3
 801216e:	697b      	ldr	r3, [r7, #20]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	60da      	str	r2, [r3, #12]
 8012174:	e002      	b.n	801217c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8012176:	2301      	movs	r3, #1
 8012178:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801217c:	697b      	ldr	r3, [r7, #20]
 801217e:	2201      	movs	r2, #1
 8012180:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8012184:	697b      	ldr	r3, [r7, #20]
 8012186:	2201      	movs	r2, #1
 8012188:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801218c:	697b      	ldr	r3, [r7, #20]
 801218e:	2200      	movs	r2, #0
 8012190:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8012192:	697b      	ldr	r3, [r7, #20]
 8012194:	2200      	movs	r2, #0
 8012196:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8012198:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 801219c:	4618      	mov	r0, r3
 801219e:	3748      	adds	r7, #72	; 0x48
 80121a0:	46bd      	mov	sp, r7
 80121a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80121a6:	bf00      	nop
 80121a8:	58024400 	.word	0x58024400
 80121ac:	03d09000 	.word	0x03d09000
 80121b0:	003d0900 	.word	0x003d0900
 80121b4:	0801acb4 	.word	0x0801acb4

080121b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80121b8:	b480      	push	{r7}
 80121ba:	b083      	sub	sp, #12
 80121bc:	af00      	add	r7, sp, #0
 80121be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80121c4:	f003 0301 	and.w	r3, r3, #1
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d00a      	beq.n	80121e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	685b      	ldr	r3, [r3, #4]
 80121d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	430a      	orrs	r2, r1
 80121e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80121e6:	f003 0302 	and.w	r3, r3, #2
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d00a      	beq.n	8012204 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	685b      	ldr	r3, [r3, #4]
 80121f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	430a      	orrs	r2, r1
 8012202:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012208:	f003 0304 	and.w	r3, r3, #4
 801220c:	2b00      	cmp	r3, #0
 801220e:	d00a      	beq.n	8012226 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	681b      	ldr	r3, [r3, #0]
 8012214:	685b      	ldr	r3, [r3, #4]
 8012216:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	430a      	orrs	r2, r1
 8012224:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801222a:	f003 0308 	and.w	r3, r3, #8
 801222e:	2b00      	cmp	r3, #0
 8012230:	d00a      	beq.n	8012248 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	685b      	ldr	r3, [r3, #4]
 8012238:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	430a      	orrs	r2, r1
 8012246:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801224c:	f003 0310 	and.w	r3, r3, #16
 8012250:	2b00      	cmp	r3, #0
 8012252:	d00a      	beq.n	801226a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	689b      	ldr	r3, [r3, #8]
 801225a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	430a      	orrs	r2, r1
 8012268:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801226e:	f003 0320 	and.w	r3, r3, #32
 8012272:	2b00      	cmp	r3, #0
 8012274:	d00a      	beq.n	801228c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	689b      	ldr	r3, [r3, #8]
 801227c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	430a      	orrs	r2, r1
 801228a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012294:	2b00      	cmp	r3, #0
 8012296:	d01a      	beq.n	80122ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	685b      	ldr	r3, [r3, #4]
 801229e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	430a      	orrs	r2, r1
 80122ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80122b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80122b6:	d10a      	bne.n	80122ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	685b      	ldr	r3, [r3, #4]
 80122be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	430a      	orrs	r2, r1
 80122cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80122d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d00a      	beq.n	80122f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	685b      	ldr	r3, [r3, #4]
 80122e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	430a      	orrs	r2, r1
 80122ee:	605a      	str	r2, [r3, #4]
  }
}
 80122f0:	bf00      	nop
 80122f2:	370c      	adds	r7, #12
 80122f4:	46bd      	mov	sp, r7
 80122f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122fa:	4770      	bx	lr

080122fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80122fc:	b580      	push	{r7, lr}
 80122fe:	b086      	sub	sp, #24
 8012300:	af02      	add	r7, sp, #8
 8012302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	2200      	movs	r2, #0
 8012308:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801230c:	f7f2 fa42 	bl	8004794 <HAL_GetTick>
 8012310:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	f003 0308 	and.w	r3, r3, #8
 801231c:	2b08      	cmp	r3, #8
 801231e:	d10e      	bne.n	801233e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012320:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012324:	9300      	str	r3, [sp, #0]
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	2200      	movs	r2, #0
 801232a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801232e:	6878      	ldr	r0, [r7, #4]
 8012330:	f000 f82f 	bl	8012392 <UART_WaitOnFlagUntilTimeout>
 8012334:	4603      	mov	r3, r0
 8012336:	2b00      	cmp	r3, #0
 8012338:	d001      	beq.n	801233e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801233a:	2303      	movs	r3, #3
 801233c:	e025      	b.n	801238a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	f003 0304 	and.w	r3, r3, #4
 8012348:	2b04      	cmp	r3, #4
 801234a:	d10e      	bne.n	801236a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801234c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012350:	9300      	str	r3, [sp, #0]
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	2200      	movs	r2, #0
 8012356:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801235a:	6878      	ldr	r0, [r7, #4]
 801235c:	f000 f819 	bl	8012392 <UART_WaitOnFlagUntilTimeout>
 8012360:	4603      	mov	r3, r0
 8012362:	2b00      	cmp	r3, #0
 8012364:	d001      	beq.n	801236a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012366:	2303      	movs	r3, #3
 8012368:	e00f      	b.n	801238a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	2220      	movs	r2, #32
 801236e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	2220      	movs	r2, #32
 8012376:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	2200      	movs	r2, #0
 801237e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	2200      	movs	r2, #0
 8012384:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8012388:	2300      	movs	r3, #0
}
 801238a:	4618      	mov	r0, r3
 801238c:	3710      	adds	r7, #16
 801238e:	46bd      	mov	sp, r7
 8012390:	bd80      	pop	{r7, pc}

08012392 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012392:	b580      	push	{r7, lr}
 8012394:	b09c      	sub	sp, #112	; 0x70
 8012396:	af00      	add	r7, sp, #0
 8012398:	60f8      	str	r0, [r7, #12]
 801239a:	60b9      	str	r1, [r7, #8]
 801239c:	603b      	str	r3, [r7, #0]
 801239e:	4613      	mov	r3, r2
 80123a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80123a2:	e0a9      	b.n	80124f8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80123a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80123a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123aa:	f000 80a5 	beq.w	80124f8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80123ae:	f7f2 f9f1 	bl	8004794 <HAL_GetTick>
 80123b2:	4602      	mov	r2, r0
 80123b4:	683b      	ldr	r3, [r7, #0]
 80123b6:	1ad3      	subs	r3, r2, r3
 80123b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80123ba:	429a      	cmp	r2, r3
 80123bc:	d302      	bcc.n	80123c4 <UART_WaitOnFlagUntilTimeout+0x32>
 80123be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d140      	bne.n	8012446 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123cc:	e853 3f00 	ldrex	r3, [r3]
 80123d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80123d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80123d8:	667b      	str	r3, [r7, #100]	; 0x64
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	461a      	mov	r2, r3
 80123e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80123e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80123e4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80123e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80123ea:	e841 2300 	strex	r3, r2, [r1]
 80123ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80123f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d1e6      	bne.n	80123c4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	3308      	adds	r3, #8
 80123fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012400:	e853 3f00 	ldrex	r3, [r3]
 8012404:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012408:	f023 0301 	bic.w	r3, r3, #1
 801240c:	663b      	str	r3, [r7, #96]	; 0x60
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	3308      	adds	r3, #8
 8012414:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012416:	64ba      	str	r2, [r7, #72]	; 0x48
 8012418:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801241a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801241c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801241e:	e841 2300 	strex	r3, r2, [r1]
 8012422:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8012424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012426:	2b00      	cmp	r3, #0
 8012428:	d1e5      	bne.n	80123f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	2220      	movs	r2, #32
 801242e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	2220      	movs	r2, #32
 8012436:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	2200      	movs	r2, #0
 801243e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8012442:	2303      	movs	r3, #3
 8012444:	e069      	b.n	801251a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	f003 0304 	and.w	r3, r3, #4
 8012450:	2b00      	cmp	r3, #0
 8012452:	d051      	beq.n	80124f8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	69db      	ldr	r3, [r3, #28]
 801245a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801245e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012462:	d149      	bne.n	80124f8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801246c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012476:	e853 3f00 	ldrex	r3, [r3]
 801247a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801247e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8012482:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	461a      	mov	r2, r3
 801248a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801248c:	637b      	str	r3, [r7, #52]	; 0x34
 801248e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012490:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012492:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012494:	e841 2300 	strex	r3, r2, [r1]
 8012498:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801249a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801249c:	2b00      	cmp	r3, #0
 801249e:	d1e6      	bne.n	801246e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	3308      	adds	r3, #8
 80124a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124a8:	697b      	ldr	r3, [r7, #20]
 80124aa:	e853 3f00 	ldrex	r3, [r3]
 80124ae:	613b      	str	r3, [r7, #16]
   return(result);
 80124b0:	693b      	ldr	r3, [r7, #16]
 80124b2:	f023 0301 	bic.w	r3, r3, #1
 80124b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	3308      	adds	r3, #8
 80124be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80124c0:	623a      	str	r2, [r7, #32]
 80124c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124c4:	69f9      	ldr	r1, [r7, #28]
 80124c6:	6a3a      	ldr	r2, [r7, #32]
 80124c8:	e841 2300 	strex	r3, r2, [r1]
 80124cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80124ce:	69bb      	ldr	r3, [r7, #24]
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d1e5      	bne.n	80124a0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	2220      	movs	r2, #32
 80124d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	2220      	movs	r2, #32
 80124e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	2220      	movs	r2, #32
 80124e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	2200      	movs	r2, #0
 80124f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80124f4:	2303      	movs	r3, #3
 80124f6:	e010      	b.n	801251a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	69da      	ldr	r2, [r3, #28]
 80124fe:	68bb      	ldr	r3, [r7, #8]
 8012500:	4013      	ands	r3, r2
 8012502:	68ba      	ldr	r2, [r7, #8]
 8012504:	429a      	cmp	r2, r3
 8012506:	bf0c      	ite	eq
 8012508:	2301      	moveq	r3, #1
 801250a:	2300      	movne	r3, #0
 801250c:	b2db      	uxtb	r3, r3
 801250e:	461a      	mov	r2, r3
 8012510:	79fb      	ldrb	r3, [r7, #7]
 8012512:	429a      	cmp	r2, r3
 8012514:	f43f af46 	beq.w	80123a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012518:	2300      	movs	r3, #0
}
 801251a:	4618      	mov	r0, r3
 801251c:	3770      	adds	r7, #112	; 0x70
 801251e:	46bd      	mov	sp, r7
 8012520:	bd80      	pop	{r7, pc}
	...

08012524 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012524:	b480      	push	{r7}
 8012526:	b0a3      	sub	sp, #140	; 0x8c
 8012528:	af00      	add	r7, sp, #0
 801252a:	60f8      	str	r0, [r7, #12]
 801252c:	60b9      	str	r1, [r7, #8]
 801252e:	4613      	mov	r3, r2
 8012530:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	68ba      	ldr	r2, [r7, #8]
 8012536:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	88fa      	ldrh	r2, [r7, #6]
 801253c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	88fa      	ldrh	r2, [r7, #6]
 8012544:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	2200      	movs	r2, #0
 801254c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	689b      	ldr	r3, [r3, #8]
 8012552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012556:	d10e      	bne.n	8012576 <UART_Start_Receive_IT+0x52>
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	691b      	ldr	r3, [r3, #16]
 801255c:	2b00      	cmp	r3, #0
 801255e:	d105      	bne.n	801256c <UART_Start_Receive_IT+0x48>
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	f240 12ff 	movw	r2, #511	; 0x1ff
 8012566:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801256a:	e02d      	b.n	80125c8 <UART_Start_Receive_IT+0xa4>
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	22ff      	movs	r2, #255	; 0xff
 8012570:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012574:	e028      	b.n	80125c8 <UART_Start_Receive_IT+0xa4>
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	689b      	ldr	r3, [r3, #8]
 801257a:	2b00      	cmp	r3, #0
 801257c:	d10d      	bne.n	801259a <UART_Start_Receive_IT+0x76>
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	691b      	ldr	r3, [r3, #16]
 8012582:	2b00      	cmp	r3, #0
 8012584:	d104      	bne.n	8012590 <UART_Start_Receive_IT+0x6c>
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	22ff      	movs	r2, #255	; 0xff
 801258a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801258e:	e01b      	b.n	80125c8 <UART_Start_Receive_IT+0xa4>
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	227f      	movs	r2, #127	; 0x7f
 8012594:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012598:	e016      	b.n	80125c8 <UART_Start_Receive_IT+0xa4>
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	689b      	ldr	r3, [r3, #8]
 801259e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80125a2:	d10d      	bne.n	80125c0 <UART_Start_Receive_IT+0x9c>
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	691b      	ldr	r3, [r3, #16]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d104      	bne.n	80125b6 <UART_Start_Receive_IT+0x92>
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	227f      	movs	r2, #127	; 0x7f
 80125b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80125b4:	e008      	b.n	80125c8 <UART_Start_Receive_IT+0xa4>
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	223f      	movs	r2, #63	; 0x3f
 80125ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80125be:	e003      	b.n	80125c8 <UART_Start_Receive_IT+0xa4>
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	2200      	movs	r2, #0
 80125c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	2200      	movs	r2, #0
 80125cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	2222      	movs	r2, #34	; 0x22
 80125d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	3308      	adds	r3, #8
 80125de:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80125e2:	e853 3f00 	ldrex	r3, [r3]
 80125e6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80125e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80125ea:	f043 0301 	orr.w	r3, r3, #1
 80125ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	3308      	adds	r3, #8
 80125f8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80125fc:	673a      	str	r2, [r7, #112]	; 0x70
 80125fe:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012600:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8012602:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012604:	e841 2300 	strex	r3, r2, [r1]
 8012608:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 801260a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801260c:	2b00      	cmp	r3, #0
 801260e:	d1e3      	bne.n	80125d8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012614:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012618:	d153      	bne.n	80126c2 <UART_Start_Receive_IT+0x19e>
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012620:	88fa      	ldrh	r2, [r7, #6]
 8012622:	429a      	cmp	r2, r3
 8012624:	d34d      	bcc.n	80126c2 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	689b      	ldr	r3, [r3, #8]
 801262a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801262e:	d107      	bne.n	8012640 <UART_Start_Receive_IT+0x11c>
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	691b      	ldr	r3, [r3, #16]
 8012634:	2b00      	cmp	r3, #0
 8012636:	d103      	bne.n	8012640 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	4a4b      	ldr	r2, [pc, #300]	; (8012768 <UART_Start_Receive_IT+0x244>)
 801263c:	671a      	str	r2, [r3, #112]	; 0x70
 801263e:	e002      	b.n	8012646 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	4a4a      	ldr	r2, [pc, #296]	; (801276c <UART_Start_Receive_IT+0x248>)
 8012644:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	2200      	movs	r2, #0
 801264a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	691b      	ldr	r3, [r3, #16]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d01a      	beq.n	801268c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801265c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801265e:	e853 3f00 	ldrex	r3, [r3]
 8012662:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801266a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801266e:	68fb      	ldr	r3, [r7, #12]
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	461a      	mov	r2, r3
 8012674:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012678:	65fb      	str	r3, [r7, #92]	; 0x5c
 801267a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801267c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801267e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012680:	e841 2300 	strex	r3, r2, [r1]
 8012684:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8012686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012688:	2b00      	cmp	r3, #0
 801268a:	d1e4      	bne.n	8012656 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	3308      	adds	r3, #8
 8012692:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012696:	e853 3f00 	ldrex	r3, [r3]
 801269a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801269c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801269e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80126a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	3308      	adds	r3, #8
 80126aa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80126ac:	64ba      	str	r2, [r7, #72]	; 0x48
 80126ae:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126b0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80126b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80126b4:	e841 2300 	strex	r3, r2, [r1]
 80126b8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80126ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d1e5      	bne.n	801268c <UART_Start_Receive_IT+0x168>
 80126c0:	e04a      	b.n	8012758 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	689b      	ldr	r3, [r3, #8]
 80126c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80126ca:	d107      	bne.n	80126dc <UART_Start_Receive_IT+0x1b8>
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	691b      	ldr	r3, [r3, #16]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d103      	bne.n	80126dc <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	4a26      	ldr	r2, [pc, #152]	; (8012770 <UART_Start_Receive_IT+0x24c>)
 80126d8:	671a      	str	r2, [r3, #112]	; 0x70
 80126da:	e002      	b.n	80126e2 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	4a25      	ldr	r2, [pc, #148]	; (8012774 <UART_Start_Receive_IT+0x250>)
 80126e0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	2200      	movs	r2, #0
 80126e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	691b      	ldr	r3, [r3, #16]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d019      	beq.n	8012726 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126fa:	e853 3f00 	ldrex	r3, [r3]
 80126fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012702:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8012706:	677b      	str	r3, [r7, #116]	; 0x74
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	461a      	mov	r2, r3
 801270e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012710:	637b      	str	r3, [r7, #52]	; 0x34
 8012712:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012714:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012716:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012718:	e841 2300 	strex	r3, r2, [r1]
 801271c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801271e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012720:	2b00      	cmp	r3, #0
 8012722:	d1e6      	bne.n	80126f2 <UART_Start_Receive_IT+0x1ce>
 8012724:	e018      	b.n	8012758 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801272c:	697b      	ldr	r3, [r7, #20]
 801272e:	e853 3f00 	ldrex	r3, [r3]
 8012732:	613b      	str	r3, [r7, #16]
   return(result);
 8012734:	693b      	ldr	r3, [r7, #16]
 8012736:	f043 0320 	orr.w	r3, r3, #32
 801273a:	67bb      	str	r3, [r7, #120]	; 0x78
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	461a      	mov	r2, r3
 8012742:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012744:	623b      	str	r3, [r7, #32]
 8012746:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012748:	69f9      	ldr	r1, [r7, #28]
 801274a:	6a3a      	ldr	r2, [r7, #32]
 801274c:	e841 2300 	strex	r3, r2, [r1]
 8012750:	61bb      	str	r3, [r7, #24]
   return(result);
 8012752:	69bb      	ldr	r3, [r7, #24]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d1e6      	bne.n	8012726 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 8012758:	2300      	movs	r3, #0
}
 801275a:	4618      	mov	r0, r3
 801275c:	378c      	adds	r7, #140	; 0x8c
 801275e:	46bd      	mov	sp, r7
 8012760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012764:	4770      	bx	lr
 8012766:	bf00      	nop
 8012768:	080131c5 	.word	0x080131c5
 801276c:	08012ecd 	.word	0x08012ecd
 8012770:	08012d6b 	.word	0x08012d6b
 8012774:	08012c0b 	.word	0x08012c0b

08012778 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012778:	b480      	push	{r7}
 801277a:	b095      	sub	sp, #84	; 0x54
 801277c:	af00      	add	r7, sp, #0
 801277e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012788:	e853 3f00 	ldrex	r3, [r3]
 801278c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801278e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012790:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012794:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	461a      	mov	r2, r3
 801279c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801279e:	643b      	str	r3, [r7, #64]	; 0x40
 80127a0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80127a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80127a6:	e841 2300 	strex	r3, r2, [r1]
 80127aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80127ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d1e6      	bne.n	8012780 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	3308      	adds	r3, #8
 80127b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127ba:	6a3b      	ldr	r3, [r7, #32]
 80127bc:	e853 3f00 	ldrex	r3, [r3]
 80127c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80127c2:	69fa      	ldr	r2, [r7, #28]
 80127c4:	4b1e      	ldr	r3, [pc, #120]	; (8012840 <UART_EndRxTransfer+0xc8>)
 80127c6:	4013      	ands	r3, r2
 80127c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	3308      	adds	r3, #8
 80127d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80127d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80127d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80127d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80127da:	e841 2300 	strex	r3, r2, [r1]
 80127de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80127e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d1e5      	bne.n	80127b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127ea:	2b01      	cmp	r3, #1
 80127ec:	d118      	bne.n	8012820 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	e853 3f00 	ldrex	r3, [r3]
 80127fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80127fc:	68bb      	ldr	r3, [r7, #8]
 80127fe:	f023 0310 	bic.w	r3, r3, #16
 8012802:	647b      	str	r3, [r7, #68]	; 0x44
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	461a      	mov	r2, r3
 801280a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801280c:	61bb      	str	r3, [r7, #24]
 801280e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012810:	6979      	ldr	r1, [r7, #20]
 8012812:	69ba      	ldr	r2, [r7, #24]
 8012814:	e841 2300 	strex	r3, r2, [r1]
 8012818:	613b      	str	r3, [r7, #16]
   return(result);
 801281a:	693b      	ldr	r3, [r7, #16]
 801281c:	2b00      	cmp	r3, #0
 801281e:	d1e6      	bne.n	80127ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	2220      	movs	r2, #32
 8012824:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	2200      	movs	r2, #0
 801282c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	2200      	movs	r2, #0
 8012832:	671a      	str	r2, [r3, #112]	; 0x70
}
 8012834:	bf00      	nop
 8012836:	3754      	adds	r7, #84	; 0x54
 8012838:	46bd      	mov	sp, r7
 801283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801283e:	4770      	bx	lr
 8012840:	effffffe 	.word	0xeffffffe

08012844 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012844:	b580      	push	{r7, lr}
 8012846:	b084      	sub	sp, #16
 8012848:	af00      	add	r7, sp, #0
 801284a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012850:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	2200      	movs	r2, #0
 8012856:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	2200      	movs	r2, #0
 801285e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012862:	68f8      	ldr	r0, [r7, #12]
 8012864:	f7fe ff2a 	bl	80116bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012868:	bf00      	nop
 801286a:	3710      	adds	r7, #16
 801286c:	46bd      	mov	sp, r7
 801286e:	bd80      	pop	{r7, pc}

08012870 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8012870:	b480      	push	{r7}
 8012872:	b08f      	sub	sp, #60	; 0x3c
 8012874:	af00      	add	r7, sp, #0
 8012876:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801287e:	2b21      	cmp	r3, #33	; 0x21
 8012880:	d14c      	bne.n	801291c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012888:	b29b      	uxth	r3, r3
 801288a:	2b00      	cmp	r3, #0
 801288c:	d132      	bne.n	80128f4 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012894:	6a3b      	ldr	r3, [r7, #32]
 8012896:	e853 3f00 	ldrex	r3, [r3]
 801289a:	61fb      	str	r3, [r7, #28]
   return(result);
 801289c:	69fb      	ldr	r3, [r7, #28]
 801289e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80128a2:	637b      	str	r3, [r7, #52]	; 0x34
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	461a      	mov	r2, r3
 80128aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80128ae:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80128b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80128b4:	e841 2300 	strex	r3, r2, [r1]
 80128b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80128ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d1e6      	bne.n	801288e <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	e853 3f00 	ldrex	r3, [r3]
 80128cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80128ce:	68bb      	ldr	r3, [r7, #8]
 80128d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80128d4:	633b      	str	r3, [r7, #48]	; 0x30
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	461a      	mov	r2, r3
 80128dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128de:	61bb      	str	r3, [r7, #24]
 80128e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128e2:	6979      	ldr	r1, [r7, #20]
 80128e4:	69ba      	ldr	r2, [r7, #24]
 80128e6:	e841 2300 	strex	r3, r2, [r1]
 80128ea:	613b      	str	r3, [r7, #16]
   return(result);
 80128ec:	693b      	ldr	r3, [r7, #16]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d1e6      	bne.n	80128c0 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80128f2:	e013      	b.n	801291c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80128f8:	781a      	ldrb	r2, [r3, #0]
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012904:	1c5a      	adds	r2, r3, #1
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012910:	b29b      	uxth	r3, r3
 8012912:	3b01      	subs	r3, #1
 8012914:	b29a      	uxth	r2, r3
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 801291c:	bf00      	nop
 801291e:	373c      	adds	r7, #60	; 0x3c
 8012920:	46bd      	mov	sp, r7
 8012922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012926:	4770      	bx	lr

08012928 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8012928:	b480      	push	{r7}
 801292a:	b091      	sub	sp, #68	; 0x44
 801292c:	af00      	add	r7, sp, #0
 801292e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012936:	2b21      	cmp	r3, #33	; 0x21
 8012938:	d151      	bne.n	80129de <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012940:	b29b      	uxth	r3, r3
 8012942:	2b00      	cmp	r3, #0
 8012944:	d132      	bne.n	80129ac <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801294e:	e853 3f00 	ldrex	r3, [r3]
 8012952:	623b      	str	r3, [r7, #32]
   return(result);
 8012954:	6a3b      	ldr	r3, [r7, #32]
 8012956:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801295a:	63bb      	str	r3, [r7, #56]	; 0x38
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	461a      	mov	r2, r3
 8012962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012964:	633b      	str	r3, [r7, #48]	; 0x30
 8012966:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012968:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801296a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801296c:	e841 2300 	strex	r3, r2, [r1]
 8012970:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012974:	2b00      	cmp	r3, #0
 8012976:	d1e6      	bne.n	8012946 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801297e:	693b      	ldr	r3, [r7, #16]
 8012980:	e853 3f00 	ldrex	r3, [r3]
 8012984:	60fb      	str	r3, [r7, #12]
   return(result);
 8012986:	68fb      	ldr	r3, [r7, #12]
 8012988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801298c:	637b      	str	r3, [r7, #52]	; 0x34
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	461a      	mov	r2, r3
 8012994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012996:	61fb      	str	r3, [r7, #28]
 8012998:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801299a:	69b9      	ldr	r1, [r7, #24]
 801299c:	69fa      	ldr	r2, [r7, #28]
 801299e:	e841 2300 	strex	r3, r2, [r1]
 80129a2:	617b      	str	r3, [r7, #20]
   return(result);
 80129a4:	697b      	ldr	r3, [r7, #20]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d1e6      	bne.n	8012978 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80129aa:	e018      	b.n	80129de <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80129b0:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80129b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129b4:	881b      	ldrh	r3, [r3, #0]
 80129b6:	461a      	mov	r2, r3
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80129c0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80129c6:	1c9a      	adds	r2, r3, #2
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80129d2:	b29b      	uxth	r3, r3
 80129d4:	3b01      	subs	r3, #1
 80129d6:	b29a      	uxth	r2, r3
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80129de:	bf00      	nop
 80129e0:	3744      	adds	r7, #68	; 0x44
 80129e2:	46bd      	mov	sp, r7
 80129e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129e8:	4770      	bx	lr

080129ea <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80129ea:	b480      	push	{r7}
 80129ec:	b091      	sub	sp, #68	; 0x44
 80129ee:	af00      	add	r7, sp, #0
 80129f0:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80129f8:	2b21      	cmp	r3, #33	; 0x21
 80129fa:	d160      	bne.n	8012abe <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012a02:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8012a04:	e057      	b.n	8012ab6 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012a0c:	b29b      	uxth	r3, r3
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d133      	bne.n	8012a7a <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	3308      	adds	r3, #8
 8012a18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a1c:	e853 3f00 	ldrex	r3, [r3]
 8012a20:	623b      	str	r3, [r7, #32]
   return(result);
 8012a22:	6a3b      	ldr	r3, [r7, #32]
 8012a24:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8012a28:	63bb      	str	r3, [r7, #56]	; 0x38
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	3308      	adds	r3, #8
 8012a30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012a32:	633a      	str	r2, [r7, #48]	; 0x30
 8012a34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012a38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012a3a:	e841 2300 	strex	r3, r2, [r1]
 8012a3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d1e5      	bne.n	8012a12 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a4c:	693b      	ldr	r3, [r7, #16]
 8012a4e:	e853 3f00 	ldrex	r3, [r3]
 8012a52:	60fb      	str	r3, [r7, #12]
   return(result);
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012a5a:	637b      	str	r3, [r7, #52]	; 0x34
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	461a      	mov	r2, r3
 8012a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a64:	61fb      	str	r3, [r7, #28]
 8012a66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a68:	69b9      	ldr	r1, [r7, #24]
 8012a6a:	69fa      	ldr	r2, [r7, #28]
 8012a6c:	e841 2300 	strex	r3, r2, [r1]
 8012a70:	617b      	str	r3, [r7, #20]
   return(result);
 8012a72:	697b      	ldr	r3, [r7, #20]
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d1e6      	bne.n	8012a46 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8012a78:	e021      	b.n	8012abe <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	69db      	ldr	r3, [r3, #28]
 8012a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d013      	beq.n	8012ab0 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012a8c:	781a      	ldrb	r2, [r3, #0]
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012a98:	1c5a      	adds	r2, r3, #1
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012aa4:	b29b      	uxth	r3, r3
 8012aa6:	3b01      	subs	r3, #1
 8012aa8:	b29a      	uxth	r2, r3
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8012ab0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012ab2:	3b01      	subs	r3, #1
 8012ab4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8012ab6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d1a4      	bne.n	8012a06 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8012abc:	e7ff      	b.n	8012abe <UART_TxISR_8BIT_FIFOEN+0xd4>
 8012abe:	bf00      	nop
 8012ac0:	3744      	adds	r7, #68	; 0x44
 8012ac2:	46bd      	mov	sp, r7
 8012ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac8:	4770      	bx	lr

08012aca <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012aca:	b480      	push	{r7}
 8012acc:	b091      	sub	sp, #68	; 0x44
 8012ace:	af00      	add	r7, sp, #0
 8012ad0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012ad8:	2b21      	cmp	r3, #33	; 0x21
 8012ada:	d165      	bne.n	8012ba8 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012ae2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8012ae4:	e05c      	b.n	8012ba0 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012aec:	b29b      	uxth	r3, r3
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d133      	bne.n	8012b5a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	3308      	adds	r3, #8
 8012af8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012afa:	6a3b      	ldr	r3, [r7, #32]
 8012afc:	e853 3f00 	ldrex	r3, [r3]
 8012b00:	61fb      	str	r3, [r7, #28]
   return(result);
 8012b02:	69fb      	ldr	r3, [r7, #28]
 8012b04:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8012b08:	637b      	str	r3, [r7, #52]	; 0x34
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	3308      	adds	r3, #8
 8012b10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012b12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012b14:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012b18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012b1a:	e841 2300 	strex	r3, r2, [r1]
 8012b1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d1e5      	bne.n	8012af2 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	e853 3f00 	ldrex	r3, [r3]
 8012b32:	60bb      	str	r3, [r7, #8]
   return(result);
 8012b34:	68bb      	ldr	r3, [r7, #8]
 8012b36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b3a:	633b      	str	r3, [r7, #48]	; 0x30
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	461a      	mov	r2, r3
 8012b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b44:	61bb      	str	r3, [r7, #24]
 8012b46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b48:	6979      	ldr	r1, [r7, #20]
 8012b4a:	69ba      	ldr	r2, [r7, #24]
 8012b4c:	e841 2300 	strex	r3, r2, [r1]
 8012b50:	613b      	str	r3, [r7, #16]
   return(result);
 8012b52:	693b      	ldr	r3, [r7, #16]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d1e6      	bne.n	8012b26 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8012b58:	e026      	b.n	8012ba8 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	69db      	ldr	r3, [r3, #28]
 8012b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d018      	beq.n	8012b9a <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b6c:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8012b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b70:	881b      	ldrh	r3, [r3, #0]
 8012b72:	461a      	mov	r2, r3
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012b7c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b82:	1c9a      	adds	r2, r3, #2
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012b8e:	b29b      	uxth	r3, r3
 8012b90:	3b01      	subs	r3, #1
 8012b92:	b29a      	uxth	r2, r3
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8012b9a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012b9c:	3b01      	subs	r3, #1
 8012b9e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8012ba0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d19f      	bne.n	8012ae6 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8012ba6:	e7ff      	b.n	8012ba8 <UART_TxISR_16BIT_FIFOEN+0xde>
 8012ba8:	bf00      	nop
 8012baa:	3744      	adds	r7, #68	; 0x44
 8012bac:	46bd      	mov	sp, r7
 8012bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bb2:	4770      	bx	lr

08012bb4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012bb4:	b580      	push	{r7, lr}
 8012bb6:	b088      	sub	sp, #32
 8012bb8:	af00      	add	r7, sp, #0
 8012bba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	e853 3f00 	ldrex	r3, [r3]
 8012bc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8012bca:	68bb      	ldr	r3, [r7, #8]
 8012bcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012bd0:	61fb      	str	r3, [r7, #28]
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	461a      	mov	r2, r3
 8012bd8:	69fb      	ldr	r3, [r7, #28]
 8012bda:	61bb      	str	r3, [r7, #24]
 8012bdc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012bde:	6979      	ldr	r1, [r7, #20]
 8012be0:	69ba      	ldr	r2, [r7, #24]
 8012be2:	e841 2300 	strex	r3, r2, [r1]
 8012be6:	613b      	str	r3, [r7, #16]
   return(result);
 8012be8:	693b      	ldr	r3, [r7, #16]
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d1e6      	bne.n	8012bbc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	2220      	movs	r2, #32
 8012bf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	2200      	movs	r2, #0
 8012bfa:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8012bfc:	6878      	ldr	r0, [r7, #4]
 8012bfe:	f7fe fd53 	bl	80116a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012c02:	bf00      	nop
 8012c04:	3720      	adds	r7, #32
 8012c06:	46bd      	mov	sp, r7
 8012c08:	bd80      	pop	{r7, pc}

08012c0a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8012c0a:	b580      	push	{r7, lr}
 8012c0c:	b096      	sub	sp, #88	; 0x58
 8012c0e:	af00      	add	r7, sp, #0
 8012c10:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012c18:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012c22:	2b22      	cmp	r3, #34	; 0x22
 8012c24:	f040 8095 	bne.w	8012d52 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c2e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8012c32:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8012c36:	b2d9      	uxtb	r1, r3
 8012c38:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8012c3c:	b2da      	uxtb	r2, r3
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012c42:	400a      	ands	r2, r1
 8012c44:	b2d2      	uxtb	r2, r2
 8012c46:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012c4c:	1c5a      	adds	r2, r3, #1
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012c58:	b29b      	uxth	r3, r3
 8012c5a:	3b01      	subs	r3, #1
 8012c5c:	b29a      	uxth	r2, r3
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012c6a:	b29b      	uxth	r3, r3
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d178      	bne.n	8012d62 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c78:	e853 3f00 	ldrex	r3, [r3]
 8012c7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012c84:	653b      	str	r3, [r7, #80]	; 0x50
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	461a      	mov	r2, r3
 8012c8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c8e:	647b      	str	r3, [r7, #68]	; 0x44
 8012c90:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012c94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012c96:	e841 2300 	strex	r3, r2, [r1]
 8012c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d1e6      	bne.n	8012c70 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	3308      	adds	r3, #8
 8012ca8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cac:	e853 3f00 	ldrex	r3, [r3]
 8012cb0:	623b      	str	r3, [r7, #32]
   return(result);
 8012cb2:	6a3b      	ldr	r3, [r7, #32]
 8012cb4:	f023 0301 	bic.w	r3, r3, #1
 8012cb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	3308      	adds	r3, #8
 8012cc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012cc2:	633a      	str	r2, [r7, #48]	; 0x30
 8012cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012cc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012cc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012cca:	e841 2300 	strex	r3, r2, [r1]
 8012cce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d1e5      	bne.n	8012ca2 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	2220      	movs	r2, #32
 8012cda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	2200      	movs	r2, #0
 8012ce2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ce8:	2b01      	cmp	r3, #1
 8012cea:	d12e      	bne.n	8012d4a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	2200      	movs	r2, #0
 8012cf0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012cf8:	693b      	ldr	r3, [r7, #16]
 8012cfa:	e853 3f00 	ldrex	r3, [r3]
 8012cfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	f023 0310 	bic.w	r3, r3, #16
 8012d06:	64bb      	str	r3, [r7, #72]	; 0x48
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	461a      	mov	r2, r3
 8012d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d10:	61fb      	str	r3, [r7, #28]
 8012d12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d14:	69b9      	ldr	r1, [r7, #24]
 8012d16:	69fa      	ldr	r2, [r7, #28]
 8012d18:	e841 2300 	strex	r3, r2, [r1]
 8012d1c:	617b      	str	r3, [r7, #20]
   return(result);
 8012d1e:	697b      	ldr	r3, [r7, #20]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d1e6      	bne.n	8012cf2 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	69db      	ldr	r3, [r3, #28]
 8012d2a:	f003 0310 	and.w	r3, r3, #16
 8012d2e:	2b10      	cmp	r3, #16
 8012d30:	d103      	bne.n	8012d3a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	2210      	movs	r2, #16
 8012d38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012d40:	4619      	mov	r1, r3
 8012d42:	6878      	ldr	r0, [r7, #4]
 8012d44:	f7fe fcc4 	bl	80116d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012d48:	e00b      	b.n	8012d62 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8012d4a:	6878      	ldr	r0, [r7, #4]
 8012d4c:	f7ee ffa0 	bl	8001c90 <HAL_UART_RxCpltCallback>
}
 8012d50:	e007      	b.n	8012d62 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	699a      	ldr	r2, [r3, #24]
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	f042 0208 	orr.w	r2, r2, #8
 8012d60:	619a      	str	r2, [r3, #24]
}
 8012d62:	bf00      	nop
 8012d64:	3758      	adds	r7, #88	; 0x58
 8012d66:	46bd      	mov	sp, r7
 8012d68:	bd80      	pop	{r7, pc}

08012d6a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8012d6a:	b580      	push	{r7, lr}
 8012d6c:	b096      	sub	sp, #88	; 0x58
 8012d6e:	af00      	add	r7, sp, #0
 8012d70:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012d78:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012d82:	2b22      	cmp	r3, #34	; 0x22
 8012d84:	f040 8095 	bne.w	8012eb2 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d8e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012d96:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8012d98:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8012d9c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8012da0:	4013      	ands	r3, r2
 8012da2:	b29a      	uxth	r2, r3
 8012da4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012da6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012dac:	1c9a      	adds	r2, r3, #2
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012db8:	b29b      	uxth	r3, r3
 8012dba:	3b01      	subs	r3, #1
 8012dbc:	b29a      	uxth	r2, r3
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012dca:	b29b      	uxth	r3, r3
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d178      	bne.n	8012ec2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012dd8:	e853 3f00 	ldrex	r3, [r3]
 8012ddc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012de0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012de4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	461a      	mov	r2, r3
 8012dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012dee:	643b      	str	r3, [r7, #64]	; 0x40
 8012df0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012df2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012df4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012df6:	e841 2300 	strex	r3, r2, [r1]
 8012dfa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d1e6      	bne.n	8012dd0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	3308      	adds	r3, #8
 8012e08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e0a:	6a3b      	ldr	r3, [r7, #32]
 8012e0c:	e853 3f00 	ldrex	r3, [r3]
 8012e10:	61fb      	str	r3, [r7, #28]
   return(result);
 8012e12:	69fb      	ldr	r3, [r7, #28]
 8012e14:	f023 0301 	bic.w	r3, r3, #1
 8012e18:	64bb      	str	r3, [r7, #72]	; 0x48
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	3308      	adds	r3, #8
 8012e20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012e22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012e24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012e28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012e2a:	e841 2300 	strex	r3, r2, [r1]
 8012e2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d1e5      	bne.n	8012e02 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	2220      	movs	r2, #32
 8012e3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	2200      	movs	r2, #0
 8012e42:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e48:	2b01      	cmp	r3, #1
 8012e4a:	d12e      	bne.n	8012eaa <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	2200      	movs	r2, #0
 8012e50:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	e853 3f00 	ldrex	r3, [r3]
 8012e5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8012e60:	68bb      	ldr	r3, [r7, #8]
 8012e62:	f023 0310 	bic.w	r3, r3, #16
 8012e66:	647b      	str	r3, [r7, #68]	; 0x44
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	461a      	mov	r2, r3
 8012e6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e70:	61bb      	str	r3, [r7, #24]
 8012e72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e74:	6979      	ldr	r1, [r7, #20]
 8012e76:	69ba      	ldr	r2, [r7, #24]
 8012e78:	e841 2300 	strex	r3, r2, [r1]
 8012e7c:	613b      	str	r3, [r7, #16]
   return(result);
 8012e7e:	693b      	ldr	r3, [r7, #16]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d1e6      	bne.n	8012e52 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	69db      	ldr	r3, [r3, #28]
 8012e8a:	f003 0310 	and.w	r3, r3, #16
 8012e8e:	2b10      	cmp	r3, #16
 8012e90:	d103      	bne.n	8012e9a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	2210      	movs	r2, #16
 8012e98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012ea0:	4619      	mov	r1, r3
 8012ea2:	6878      	ldr	r0, [r7, #4]
 8012ea4:	f7fe fc14 	bl	80116d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012ea8:	e00b      	b.n	8012ec2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8012eaa:	6878      	ldr	r0, [r7, #4]
 8012eac:	f7ee fef0 	bl	8001c90 <HAL_UART_RxCpltCallback>
}
 8012eb0:	e007      	b.n	8012ec2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	699a      	ldr	r2, [r3, #24]
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	f042 0208 	orr.w	r2, r2, #8
 8012ec0:	619a      	str	r2, [r3, #24]
}
 8012ec2:	bf00      	nop
 8012ec4:	3758      	adds	r7, #88	; 0x58
 8012ec6:	46bd      	mov	sp, r7
 8012ec8:	bd80      	pop	{r7, pc}
	...

08012ecc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012ecc:	b580      	push	{r7, lr}
 8012ece:	b0a6      	sub	sp, #152	; 0x98
 8012ed0:	af00      	add	r7, sp, #0
 8012ed2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012eda:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	69db      	ldr	r3, [r3, #28]
 8012ee4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	689b      	ldr	r3, [r3, #8]
 8012ef8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012f02:	2b22      	cmp	r3, #34	; 0x22
 8012f04:	f040 814d 	bne.w	80131a2 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012f0e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012f12:	e0f4      	b.n	80130fe <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f1a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8012f1e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8012f22:	b2d9      	uxtb	r1, r3
 8012f24:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8012f28:	b2da      	uxtb	r2, r3
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012f2e:	400a      	ands	r2, r1
 8012f30:	b2d2      	uxtb	r2, r2
 8012f32:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012f38:	1c5a      	adds	r2, r3, #1
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012f44:	b29b      	uxth	r3, r3
 8012f46:	3b01      	subs	r3, #1
 8012f48:	b29a      	uxth	r2, r3
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	69db      	ldr	r3, [r3, #28]
 8012f56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8012f5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012f5e:	f003 0307 	and.w	r3, r3, #7
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d053      	beq.n	801300e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012f66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012f6a:	f003 0301 	and.w	r3, r3, #1
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d011      	beq.n	8012f96 <UART_RxISR_8BIT_FIFOEN+0xca>
 8012f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d00b      	beq.n	8012f96 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	2201      	movs	r2, #1
 8012f84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012f8c:	f043 0201 	orr.w	r2, r3, #1
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012f96:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012f9a:	f003 0302 	and.w	r3, r3, #2
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d011      	beq.n	8012fc6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8012fa2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012fa6:	f003 0301 	and.w	r3, r3, #1
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d00b      	beq.n	8012fc6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	2202      	movs	r2, #2
 8012fb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012fbc:	f043 0204 	orr.w	r2, r3, #4
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012fc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012fca:	f003 0304 	and.w	r3, r3, #4
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d011      	beq.n	8012ff6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8012fd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012fd6:	f003 0301 	and.w	r3, r3, #1
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d00b      	beq.n	8012ff6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	2204      	movs	r2, #4
 8012fe4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012fec:	f043 0202 	orr.w	r2, r3, #2
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d006      	beq.n	801300e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8013000:	6878      	ldr	r0, [r7, #4]
 8013002:	f7fe fb5b 	bl	80116bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	2200      	movs	r2, #0
 801300a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013014:	b29b      	uxth	r3, r3
 8013016:	2b00      	cmp	r3, #0
 8013018:	d171      	bne.n	80130fe <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	681b      	ldr	r3, [r3, #0]
 801301e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013020:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013022:	e853 3f00 	ldrex	r3, [r3]
 8013026:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8013028:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801302a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801302e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	461a      	mov	r2, r3
 8013038:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801303c:	66bb      	str	r3, [r7, #104]	; 0x68
 801303e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013040:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8013042:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013044:	e841 2300 	strex	r3, r2, [r1]
 8013048:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 801304a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801304c:	2b00      	cmp	r3, #0
 801304e:	d1e4      	bne.n	801301a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	3308      	adds	r3, #8
 8013056:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013058:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801305a:	e853 3f00 	ldrex	r3, [r3]
 801305e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8013060:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013062:	4b56      	ldr	r3, [pc, #344]	; (80131bc <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8013064:	4013      	ands	r3, r2
 8013066:	67fb      	str	r3, [r7, #124]	; 0x7c
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	3308      	adds	r3, #8
 801306e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013070:	657a      	str	r2, [r7, #84]	; 0x54
 8013072:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013074:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013076:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013078:	e841 2300 	strex	r3, r2, [r1]
 801307c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801307e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013080:	2b00      	cmp	r3, #0
 8013082:	d1e5      	bne.n	8013050 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	2220      	movs	r2, #32
 8013088:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	2200      	movs	r2, #0
 8013090:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013096:	2b01      	cmp	r3, #1
 8013098:	d12e      	bne.n	80130f8 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	2200      	movs	r2, #0
 801309e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80130a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130a8:	e853 3f00 	ldrex	r3, [r3]
 80130ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80130ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130b0:	f023 0310 	bic.w	r3, r3, #16
 80130b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	461a      	mov	r2, r3
 80130bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80130be:	643b      	str	r3, [r7, #64]	; 0x40
 80130c0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80130c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80130c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80130c6:	e841 2300 	strex	r3, r2, [r1]
 80130ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80130cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d1e6      	bne.n	80130a0 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	69db      	ldr	r3, [r3, #28]
 80130d8:	f003 0310 	and.w	r3, r3, #16
 80130dc:	2b10      	cmp	r3, #16
 80130de:	d103      	bne.n	80130e8 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	2210      	movs	r2, #16
 80130e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80130ee:	4619      	mov	r1, r3
 80130f0:	6878      	ldr	r0, [r7, #4]
 80130f2:	f7fe faed 	bl	80116d0 <HAL_UARTEx_RxEventCallback>
 80130f6:	e002      	b.n	80130fe <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80130f8:	6878      	ldr	r0, [r7, #4]
 80130fa:	f7ee fdc9 	bl	8001c90 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80130fe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8013102:	2b00      	cmp	r3, #0
 8013104:	d006      	beq.n	8013114 <UART_RxISR_8BIT_FIFOEN+0x248>
 8013106:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801310a:	f003 0320 	and.w	r3, r3, #32
 801310e:	2b00      	cmp	r3, #0
 8013110:	f47f af00 	bne.w	8012f14 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801311a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801311e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8013122:	2b00      	cmp	r3, #0
 8013124:	d045      	beq.n	80131b2 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801312c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8013130:	429a      	cmp	r2, r3
 8013132:	d23e      	bcs.n	80131b2 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	3308      	adds	r3, #8
 801313a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801313c:	6a3b      	ldr	r3, [r7, #32]
 801313e:	e853 3f00 	ldrex	r3, [r3]
 8013142:	61fb      	str	r3, [r7, #28]
   return(result);
 8013144:	69fb      	ldr	r3, [r7, #28]
 8013146:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801314a:	673b      	str	r3, [r7, #112]	; 0x70
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	681b      	ldr	r3, [r3, #0]
 8013150:	3308      	adds	r3, #8
 8013152:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013154:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013156:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013158:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801315a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801315c:	e841 2300 	strex	r3, r2, [r1]
 8013160:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013164:	2b00      	cmp	r3, #0
 8013166:	d1e5      	bne.n	8013134 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	4a15      	ldr	r2, [pc, #84]	; (80131c0 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 801316c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	e853 3f00 	ldrex	r3, [r3]
 801317a:	60bb      	str	r3, [r7, #8]
   return(result);
 801317c:	68bb      	ldr	r3, [r7, #8]
 801317e:	f043 0320 	orr.w	r3, r3, #32
 8013182:	66fb      	str	r3, [r7, #108]	; 0x6c
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	461a      	mov	r2, r3
 801318a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801318c:	61bb      	str	r3, [r7, #24]
 801318e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013190:	6979      	ldr	r1, [r7, #20]
 8013192:	69ba      	ldr	r2, [r7, #24]
 8013194:	e841 2300 	strex	r3, r2, [r1]
 8013198:	613b      	str	r3, [r7, #16]
   return(result);
 801319a:	693b      	ldr	r3, [r7, #16]
 801319c:	2b00      	cmp	r3, #0
 801319e:	d1e6      	bne.n	801316e <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80131a0:	e007      	b.n	80131b2 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	699a      	ldr	r2, [r3, #24]
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	f042 0208 	orr.w	r2, r2, #8
 80131b0:	619a      	str	r2, [r3, #24]
}
 80131b2:	bf00      	nop
 80131b4:	3798      	adds	r7, #152	; 0x98
 80131b6:	46bd      	mov	sp, r7
 80131b8:	bd80      	pop	{r7, pc}
 80131ba:	bf00      	nop
 80131bc:	effffffe 	.word	0xeffffffe
 80131c0:	08012c0b 	.word	0x08012c0b

080131c4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80131c4:	b580      	push	{r7, lr}
 80131c6:	b0a8      	sub	sp, #160	; 0xa0
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80131d2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	69db      	ldr	r3, [r3, #28]
 80131dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	689b      	ldr	r3, [r3, #8]
 80131f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80131fa:	2b22      	cmp	r3, #34	; 0x22
 80131fc:	f040 8151 	bne.w	80134a2 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013206:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801320a:	e0f8      	b.n	80133fe <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013212:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801321a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 801321e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8013222:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8013226:	4013      	ands	r3, r2
 8013228:	b29a      	uxth	r2, r3
 801322a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801322e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013234:	1c9a      	adds	r2, r3, #2
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013240:	b29b      	uxth	r3, r3
 8013242:	3b01      	subs	r3, #1
 8013244:	b29a      	uxth	r2, r3
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	69db      	ldr	r3, [r3, #28]
 8013252:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8013256:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801325a:	f003 0307 	and.w	r3, r3, #7
 801325e:	2b00      	cmp	r3, #0
 8013260:	d053      	beq.n	801330a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8013262:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013266:	f003 0301 	and.w	r3, r3, #1
 801326a:	2b00      	cmp	r3, #0
 801326c:	d011      	beq.n	8013292 <UART_RxISR_16BIT_FIFOEN+0xce>
 801326e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013276:	2b00      	cmp	r3, #0
 8013278:	d00b      	beq.n	8013292 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	2201      	movs	r2, #1
 8013280:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013288:	f043 0201 	orr.w	r2, r3, #1
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013292:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013296:	f003 0302 	and.w	r3, r3, #2
 801329a:	2b00      	cmp	r3, #0
 801329c:	d011      	beq.n	80132c2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 801329e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80132a2:	f003 0301 	and.w	r3, r3, #1
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d00b      	beq.n	80132c2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	2202      	movs	r2, #2
 80132b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80132b8:	f043 0204 	orr.w	r2, r3, #4
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80132c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80132c6:	f003 0304 	and.w	r3, r3, #4
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d011      	beq.n	80132f2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80132ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80132d2:	f003 0301 	and.w	r3, r3, #1
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d00b      	beq.n	80132f2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	2204      	movs	r2, #4
 80132e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80132e8:	f043 0202 	orr.w	r2, r3, #2
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d006      	beq.n	801330a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80132fc:	6878      	ldr	r0, [r7, #4]
 80132fe:	f7fe f9dd 	bl	80116bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	2200      	movs	r2, #0
 8013306:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013310:	b29b      	uxth	r3, r3
 8013312:	2b00      	cmp	r3, #0
 8013314:	d173      	bne.n	80133fe <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801331c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801331e:	e853 3f00 	ldrex	r3, [r3]
 8013322:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8013324:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013326:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801332a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	461a      	mov	r2, r3
 8013334:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013338:	66fb      	str	r3, [r7, #108]	; 0x6c
 801333a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801333c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801333e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8013340:	e841 2300 	strex	r3, r2, [r1]
 8013344:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8013346:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013348:	2b00      	cmp	r3, #0
 801334a:	d1e4      	bne.n	8013316 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	3308      	adds	r3, #8
 8013352:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013356:	e853 3f00 	ldrex	r3, [r3]
 801335a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801335c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801335e:	4b57      	ldr	r3, [pc, #348]	; (80134bc <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8013360:	4013      	ands	r3, r2
 8013362:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	3308      	adds	r3, #8
 801336c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013370:	65ba      	str	r2, [r7, #88]	; 0x58
 8013372:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013374:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013376:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013378:	e841 2300 	strex	r3, r2, [r1]
 801337c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801337e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013380:	2b00      	cmp	r3, #0
 8013382:	d1e3      	bne.n	801334c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	2220      	movs	r2, #32
 8013388:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	2200      	movs	r2, #0
 8013390:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013396:	2b01      	cmp	r3, #1
 8013398:	d12e      	bne.n	80133f8 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	2200      	movs	r2, #0
 801339e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	681b      	ldr	r3, [r3, #0]
 80133a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80133a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133a8:	e853 3f00 	ldrex	r3, [r3]
 80133ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80133ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133b0:	f023 0310 	bic.w	r3, r3, #16
 80133b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	461a      	mov	r2, r3
 80133bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80133be:	647b      	str	r3, [r7, #68]	; 0x44
 80133c0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80133c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80133c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80133c6:	e841 2300 	strex	r3, r2, [r1]
 80133ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80133cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d1e6      	bne.n	80133a0 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	69db      	ldr	r3, [r3, #28]
 80133d8:	f003 0310 	and.w	r3, r3, #16
 80133dc:	2b10      	cmp	r3, #16
 80133de:	d103      	bne.n	80133e8 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	2210      	movs	r2, #16
 80133e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80133ee:	4619      	mov	r1, r3
 80133f0:	6878      	ldr	r0, [r7, #4]
 80133f2:	f7fe f96d 	bl	80116d0 <HAL_UARTEx_RxEventCallback>
 80133f6:	e002      	b.n	80133fe <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80133f8:	6878      	ldr	r0, [r7, #4]
 80133fa:	f7ee fc49 	bl	8001c90 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80133fe:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8013402:	2b00      	cmp	r3, #0
 8013404:	d006      	beq.n	8013414 <UART_RxISR_16BIT_FIFOEN+0x250>
 8013406:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801340a:	f003 0320 	and.w	r3, r3, #32
 801340e:	2b00      	cmp	r3, #0
 8013410:	f47f aefc 	bne.w	801320c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801341a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801341e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8013422:	2b00      	cmp	r3, #0
 8013424:	d045      	beq.n	80134b2 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801342c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8013430:	429a      	cmp	r2, r3
 8013432:	d23e      	bcs.n	80134b2 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	3308      	adds	r3, #8
 801343a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801343e:	e853 3f00 	ldrex	r3, [r3]
 8013442:	623b      	str	r3, [r7, #32]
   return(result);
 8013444:	6a3b      	ldr	r3, [r7, #32]
 8013446:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801344a:	677b      	str	r3, [r7, #116]	; 0x74
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	3308      	adds	r3, #8
 8013452:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013454:	633a      	str	r2, [r7, #48]	; 0x30
 8013456:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013458:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801345a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801345c:	e841 2300 	strex	r3, r2, [r1]
 8013460:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013464:	2b00      	cmp	r3, #0
 8013466:	d1e5      	bne.n	8013434 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	4a15      	ldr	r2, [pc, #84]	; (80134c0 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 801346c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013474:	693b      	ldr	r3, [r7, #16]
 8013476:	e853 3f00 	ldrex	r3, [r3]
 801347a:	60fb      	str	r3, [r7, #12]
   return(result);
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	f043 0320 	orr.w	r3, r3, #32
 8013482:	673b      	str	r3, [r7, #112]	; 0x70
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	461a      	mov	r2, r3
 801348a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801348c:	61fb      	str	r3, [r7, #28]
 801348e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013490:	69b9      	ldr	r1, [r7, #24]
 8013492:	69fa      	ldr	r2, [r7, #28]
 8013494:	e841 2300 	strex	r3, r2, [r1]
 8013498:	617b      	str	r3, [r7, #20]
   return(result);
 801349a:	697b      	ldr	r3, [r7, #20]
 801349c:	2b00      	cmp	r3, #0
 801349e:	d1e6      	bne.n	801346e <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80134a0:	e007      	b.n	80134b2 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	699a      	ldr	r2, [r3, #24]
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	f042 0208 	orr.w	r2, r2, #8
 80134b0:	619a      	str	r2, [r3, #24]
}
 80134b2:	bf00      	nop
 80134b4:	37a0      	adds	r7, #160	; 0xa0
 80134b6:	46bd      	mov	sp, r7
 80134b8:	bd80      	pop	{r7, pc}
 80134ba:	bf00      	nop
 80134bc:	effffffe 	.word	0xeffffffe
 80134c0:	08012d6b 	.word	0x08012d6b

080134c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80134c4:	b480      	push	{r7}
 80134c6:	b083      	sub	sp, #12
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80134cc:	bf00      	nop
 80134ce:	370c      	adds	r7, #12
 80134d0:	46bd      	mov	sp, r7
 80134d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d6:	4770      	bx	lr

080134d8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80134d8:	b480      	push	{r7}
 80134da:	b083      	sub	sp, #12
 80134dc:	af00      	add	r7, sp, #0
 80134de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80134e0:	bf00      	nop
 80134e2:	370c      	adds	r7, #12
 80134e4:	46bd      	mov	sp, r7
 80134e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ea:	4770      	bx	lr

080134ec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80134ec:	b480      	push	{r7}
 80134ee:	b083      	sub	sp, #12
 80134f0:	af00      	add	r7, sp, #0
 80134f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80134f4:	bf00      	nop
 80134f6:	370c      	adds	r7, #12
 80134f8:	46bd      	mov	sp, r7
 80134fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134fe:	4770      	bx	lr

08013500 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8013500:	b480      	push	{r7}
 8013502:	b085      	sub	sp, #20
 8013504:	af00      	add	r7, sp, #0
 8013506:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801350e:	2b01      	cmp	r3, #1
 8013510:	d101      	bne.n	8013516 <HAL_UARTEx_DisableFifoMode+0x16>
 8013512:	2302      	movs	r3, #2
 8013514:	e027      	b.n	8013566 <HAL_UARTEx_DisableFifoMode+0x66>
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	2201      	movs	r2, #1
 801351a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	2224      	movs	r2, #36	; 0x24
 8013522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	681a      	ldr	r2, [r3, #0]
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	f022 0201 	bic.w	r2, r2, #1
 801353c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8013544:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	2200      	movs	r2, #0
 801354a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	68fa      	ldr	r2, [r7, #12]
 8013552:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	2220      	movs	r2, #32
 8013558:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	2200      	movs	r2, #0
 8013560:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8013564:	2300      	movs	r3, #0
}
 8013566:	4618      	mov	r0, r3
 8013568:	3714      	adds	r7, #20
 801356a:	46bd      	mov	sp, r7
 801356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013570:	4770      	bx	lr

08013572 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013572:	b580      	push	{r7, lr}
 8013574:	b084      	sub	sp, #16
 8013576:	af00      	add	r7, sp, #0
 8013578:	6078      	str	r0, [r7, #4]
 801357a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8013582:	2b01      	cmp	r3, #1
 8013584:	d101      	bne.n	801358a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8013586:	2302      	movs	r3, #2
 8013588:	e02d      	b.n	80135e6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	2201      	movs	r2, #1
 801358e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	2224      	movs	r2, #36	; 0x24
 8013596:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	681a      	ldr	r2, [r3, #0]
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	f022 0201 	bic.w	r2, r2, #1
 80135b0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	689b      	ldr	r3, [r3, #8]
 80135b8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	683a      	ldr	r2, [r7, #0]
 80135c2:	430a      	orrs	r2, r1
 80135c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80135c6:	6878      	ldr	r0, [r7, #4]
 80135c8:	f000 f850 	bl	801366c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	681b      	ldr	r3, [r3, #0]
 80135d0:	68fa      	ldr	r2, [r7, #12]
 80135d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	2220      	movs	r2, #32
 80135d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	2200      	movs	r2, #0
 80135e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80135e4:	2300      	movs	r3, #0
}
 80135e6:	4618      	mov	r0, r3
 80135e8:	3710      	adds	r7, #16
 80135ea:	46bd      	mov	sp, r7
 80135ec:	bd80      	pop	{r7, pc}

080135ee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80135ee:	b580      	push	{r7, lr}
 80135f0:	b084      	sub	sp, #16
 80135f2:	af00      	add	r7, sp, #0
 80135f4:	6078      	str	r0, [r7, #4]
 80135f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80135fe:	2b01      	cmp	r3, #1
 8013600:	d101      	bne.n	8013606 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8013602:	2302      	movs	r3, #2
 8013604:	e02d      	b.n	8013662 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	2201      	movs	r2, #1
 801360a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	2224      	movs	r2, #36	; 0x24
 8013612:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	681a      	ldr	r2, [r3, #0]
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	681b      	ldr	r3, [r3, #0]
 8013628:	f022 0201 	bic.w	r2, r2, #1
 801362c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	689b      	ldr	r3, [r3, #8]
 8013634:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	683a      	ldr	r2, [r7, #0]
 801363e:	430a      	orrs	r2, r1
 8013640:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013642:	6878      	ldr	r0, [r7, #4]
 8013644:	f000 f812 	bl	801366c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	68fa      	ldr	r2, [r7, #12]
 801364e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	2220      	movs	r2, #32
 8013654:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	2200      	movs	r2, #0
 801365c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8013660:	2300      	movs	r3, #0
}
 8013662:	4618      	mov	r0, r3
 8013664:	3710      	adds	r7, #16
 8013666:	46bd      	mov	sp, r7
 8013668:	bd80      	pop	{r7, pc}
	...

0801366c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801366c:	b480      	push	{r7}
 801366e:	b085      	sub	sp, #20
 8013670:	af00      	add	r7, sp, #0
 8013672:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013678:	2b00      	cmp	r3, #0
 801367a:	d108      	bne.n	801368e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	2201      	movs	r2, #1
 8013680:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	2201      	movs	r2, #1
 8013688:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801368c:	e031      	b.n	80136f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801368e:	2310      	movs	r3, #16
 8013690:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8013692:	2310      	movs	r3, #16
 8013694:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	689b      	ldr	r3, [r3, #8]
 801369c:	0e5b      	lsrs	r3, r3, #25
 801369e:	b2db      	uxtb	r3, r3
 80136a0:	f003 0307 	and.w	r3, r3, #7
 80136a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	689b      	ldr	r3, [r3, #8]
 80136ac:	0f5b      	lsrs	r3, r3, #29
 80136ae:	b2db      	uxtb	r3, r3
 80136b0:	f003 0307 	and.w	r3, r3, #7
 80136b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80136b6:	7bbb      	ldrb	r3, [r7, #14]
 80136b8:	7b3a      	ldrb	r2, [r7, #12]
 80136ba:	4911      	ldr	r1, [pc, #68]	; (8013700 <UARTEx_SetNbDataToProcess+0x94>)
 80136bc:	5c8a      	ldrb	r2, [r1, r2]
 80136be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80136c2:	7b3a      	ldrb	r2, [r7, #12]
 80136c4:	490f      	ldr	r1, [pc, #60]	; (8013704 <UARTEx_SetNbDataToProcess+0x98>)
 80136c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80136c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80136cc:	b29a      	uxth	r2, r3
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80136d4:	7bfb      	ldrb	r3, [r7, #15]
 80136d6:	7b7a      	ldrb	r2, [r7, #13]
 80136d8:	4909      	ldr	r1, [pc, #36]	; (8013700 <UARTEx_SetNbDataToProcess+0x94>)
 80136da:	5c8a      	ldrb	r2, [r1, r2]
 80136dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80136e0:	7b7a      	ldrb	r2, [r7, #13]
 80136e2:	4908      	ldr	r1, [pc, #32]	; (8013704 <UARTEx_SetNbDataToProcess+0x98>)
 80136e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80136e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80136ea:	b29a      	uxth	r2, r3
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80136f2:	bf00      	nop
 80136f4:	3714      	adds	r7, #20
 80136f6:	46bd      	mov	sp, r7
 80136f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136fc:	4770      	bx	lr
 80136fe:	bf00      	nop
 8013700:	0801accc 	.word	0x0801accc
 8013704:	0801acd4 	.word	0x0801acd4

08013708 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013708:	b084      	sub	sp, #16
 801370a:	b580      	push	{r7, lr}
 801370c:	b084      	sub	sp, #16
 801370e:	af00      	add	r7, sp, #0
 8013710:	6078      	str	r0, [r7, #4]
 8013712:	f107 001c 	add.w	r0, r7, #28
 8013716:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801371a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801371c:	2b01      	cmp	r3, #1
 801371e:	d120      	bne.n	8013762 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013724:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	68da      	ldr	r2, [r3, #12]
 8013730:	4b2a      	ldr	r3, [pc, #168]	; (80137dc <USB_CoreInit+0xd4>)
 8013732:	4013      	ands	r3, r2
 8013734:	687a      	ldr	r2, [r7, #4]
 8013736:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	68db      	ldr	r3, [r3, #12]
 801373c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8013744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013746:	2b01      	cmp	r3, #1
 8013748:	d105      	bne.n	8013756 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	68db      	ldr	r3, [r3, #12]
 801374e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8013756:	6878      	ldr	r0, [r7, #4]
 8013758:	f001 fc04 	bl	8014f64 <USB_CoreReset>
 801375c:	4603      	mov	r3, r0
 801375e:	73fb      	strb	r3, [r7, #15]
 8013760:	e01a      	b.n	8013798 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	68db      	ldr	r3, [r3, #12]
 8013766:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801376e:	6878      	ldr	r0, [r7, #4]
 8013770:	f001 fbf8 	bl	8014f64 <USB_CoreReset>
 8013774:	4603      	mov	r3, r0
 8013776:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8013778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801377a:	2b00      	cmp	r3, #0
 801377c:	d106      	bne.n	801378c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013782:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	639a      	str	r2, [r3, #56]	; 0x38
 801378a:	e005      	b.n	8013798 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013790:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8013798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801379a:	2b01      	cmp	r3, #1
 801379c:	d116      	bne.n	80137cc <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80137a2:	b29a      	uxth	r2, r3
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80137ac:	4b0c      	ldr	r3, [pc, #48]	; (80137e0 <USB_CoreInit+0xd8>)
 80137ae:	4313      	orrs	r3, r2
 80137b0:	687a      	ldr	r2, [r7, #4]
 80137b2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	689b      	ldr	r3, [r3, #8]
 80137b8:	f043 0206 	orr.w	r2, r3, #6
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	689b      	ldr	r3, [r3, #8]
 80137c4:	f043 0220 	orr.w	r2, r3, #32
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80137cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80137ce:	4618      	mov	r0, r3
 80137d0:	3710      	adds	r7, #16
 80137d2:	46bd      	mov	sp, r7
 80137d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80137d8:	b004      	add	sp, #16
 80137da:	4770      	bx	lr
 80137dc:	ffbdffbf 	.word	0xffbdffbf
 80137e0:	03ee0000 	.word	0x03ee0000

080137e4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80137e4:	b480      	push	{r7}
 80137e6:	b087      	sub	sp, #28
 80137e8:	af00      	add	r7, sp, #0
 80137ea:	60f8      	str	r0, [r7, #12]
 80137ec:	60b9      	str	r1, [r7, #8]
 80137ee:	4613      	mov	r3, r2
 80137f0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80137f2:	79fb      	ldrb	r3, [r7, #7]
 80137f4:	2b02      	cmp	r3, #2
 80137f6:	d165      	bne.n	80138c4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80137f8:	68bb      	ldr	r3, [r7, #8]
 80137fa:	4a41      	ldr	r2, [pc, #260]	; (8013900 <USB_SetTurnaroundTime+0x11c>)
 80137fc:	4293      	cmp	r3, r2
 80137fe:	d906      	bls.n	801380e <USB_SetTurnaroundTime+0x2a>
 8013800:	68bb      	ldr	r3, [r7, #8]
 8013802:	4a40      	ldr	r2, [pc, #256]	; (8013904 <USB_SetTurnaroundTime+0x120>)
 8013804:	4293      	cmp	r3, r2
 8013806:	d202      	bcs.n	801380e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8013808:	230f      	movs	r3, #15
 801380a:	617b      	str	r3, [r7, #20]
 801380c:	e062      	b.n	80138d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801380e:	68bb      	ldr	r3, [r7, #8]
 8013810:	4a3c      	ldr	r2, [pc, #240]	; (8013904 <USB_SetTurnaroundTime+0x120>)
 8013812:	4293      	cmp	r3, r2
 8013814:	d306      	bcc.n	8013824 <USB_SetTurnaroundTime+0x40>
 8013816:	68bb      	ldr	r3, [r7, #8]
 8013818:	4a3b      	ldr	r2, [pc, #236]	; (8013908 <USB_SetTurnaroundTime+0x124>)
 801381a:	4293      	cmp	r3, r2
 801381c:	d202      	bcs.n	8013824 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801381e:	230e      	movs	r3, #14
 8013820:	617b      	str	r3, [r7, #20]
 8013822:	e057      	b.n	80138d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8013824:	68bb      	ldr	r3, [r7, #8]
 8013826:	4a38      	ldr	r2, [pc, #224]	; (8013908 <USB_SetTurnaroundTime+0x124>)
 8013828:	4293      	cmp	r3, r2
 801382a:	d306      	bcc.n	801383a <USB_SetTurnaroundTime+0x56>
 801382c:	68bb      	ldr	r3, [r7, #8]
 801382e:	4a37      	ldr	r2, [pc, #220]	; (801390c <USB_SetTurnaroundTime+0x128>)
 8013830:	4293      	cmp	r3, r2
 8013832:	d202      	bcs.n	801383a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8013834:	230d      	movs	r3, #13
 8013836:	617b      	str	r3, [r7, #20]
 8013838:	e04c      	b.n	80138d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801383a:	68bb      	ldr	r3, [r7, #8]
 801383c:	4a33      	ldr	r2, [pc, #204]	; (801390c <USB_SetTurnaroundTime+0x128>)
 801383e:	4293      	cmp	r3, r2
 8013840:	d306      	bcc.n	8013850 <USB_SetTurnaroundTime+0x6c>
 8013842:	68bb      	ldr	r3, [r7, #8]
 8013844:	4a32      	ldr	r2, [pc, #200]	; (8013910 <USB_SetTurnaroundTime+0x12c>)
 8013846:	4293      	cmp	r3, r2
 8013848:	d802      	bhi.n	8013850 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801384a:	230c      	movs	r3, #12
 801384c:	617b      	str	r3, [r7, #20]
 801384e:	e041      	b.n	80138d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8013850:	68bb      	ldr	r3, [r7, #8]
 8013852:	4a2f      	ldr	r2, [pc, #188]	; (8013910 <USB_SetTurnaroundTime+0x12c>)
 8013854:	4293      	cmp	r3, r2
 8013856:	d906      	bls.n	8013866 <USB_SetTurnaroundTime+0x82>
 8013858:	68bb      	ldr	r3, [r7, #8]
 801385a:	4a2e      	ldr	r2, [pc, #184]	; (8013914 <USB_SetTurnaroundTime+0x130>)
 801385c:	4293      	cmp	r3, r2
 801385e:	d802      	bhi.n	8013866 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8013860:	230b      	movs	r3, #11
 8013862:	617b      	str	r3, [r7, #20]
 8013864:	e036      	b.n	80138d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8013866:	68bb      	ldr	r3, [r7, #8]
 8013868:	4a2a      	ldr	r2, [pc, #168]	; (8013914 <USB_SetTurnaroundTime+0x130>)
 801386a:	4293      	cmp	r3, r2
 801386c:	d906      	bls.n	801387c <USB_SetTurnaroundTime+0x98>
 801386e:	68bb      	ldr	r3, [r7, #8]
 8013870:	4a29      	ldr	r2, [pc, #164]	; (8013918 <USB_SetTurnaroundTime+0x134>)
 8013872:	4293      	cmp	r3, r2
 8013874:	d802      	bhi.n	801387c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8013876:	230a      	movs	r3, #10
 8013878:	617b      	str	r3, [r7, #20]
 801387a:	e02b      	b.n	80138d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801387c:	68bb      	ldr	r3, [r7, #8]
 801387e:	4a26      	ldr	r2, [pc, #152]	; (8013918 <USB_SetTurnaroundTime+0x134>)
 8013880:	4293      	cmp	r3, r2
 8013882:	d906      	bls.n	8013892 <USB_SetTurnaroundTime+0xae>
 8013884:	68bb      	ldr	r3, [r7, #8]
 8013886:	4a25      	ldr	r2, [pc, #148]	; (801391c <USB_SetTurnaroundTime+0x138>)
 8013888:	4293      	cmp	r3, r2
 801388a:	d202      	bcs.n	8013892 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801388c:	2309      	movs	r3, #9
 801388e:	617b      	str	r3, [r7, #20]
 8013890:	e020      	b.n	80138d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8013892:	68bb      	ldr	r3, [r7, #8]
 8013894:	4a21      	ldr	r2, [pc, #132]	; (801391c <USB_SetTurnaroundTime+0x138>)
 8013896:	4293      	cmp	r3, r2
 8013898:	d306      	bcc.n	80138a8 <USB_SetTurnaroundTime+0xc4>
 801389a:	68bb      	ldr	r3, [r7, #8]
 801389c:	4a20      	ldr	r2, [pc, #128]	; (8013920 <USB_SetTurnaroundTime+0x13c>)
 801389e:	4293      	cmp	r3, r2
 80138a0:	d802      	bhi.n	80138a8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80138a2:	2308      	movs	r3, #8
 80138a4:	617b      	str	r3, [r7, #20]
 80138a6:	e015      	b.n	80138d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80138a8:	68bb      	ldr	r3, [r7, #8]
 80138aa:	4a1d      	ldr	r2, [pc, #116]	; (8013920 <USB_SetTurnaroundTime+0x13c>)
 80138ac:	4293      	cmp	r3, r2
 80138ae:	d906      	bls.n	80138be <USB_SetTurnaroundTime+0xda>
 80138b0:	68bb      	ldr	r3, [r7, #8]
 80138b2:	4a1c      	ldr	r2, [pc, #112]	; (8013924 <USB_SetTurnaroundTime+0x140>)
 80138b4:	4293      	cmp	r3, r2
 80138b6:	d202      	bcs.n	80138be <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80138b8:	2307      	movs	r3, #7
 80138ba:	617b      	str	r3, [r7, #20]
 80138bc:	e00a      	b.n	80138d4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80138be:	2306      	movs	r3, #6
 80138c0:	617b      	str	r3, [r7, #20]
 80138c2:	e007      	b.n	80138d4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80138c4:	79fb      	ldrb	r3, [r7, #7]
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d102      	bne.n	80138d0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80138ca:	2309      	movs	r3, #9
 80138cc:	617b      	str	r3, [r7, #20]
 80138ce:	e001      	b.n	80138d4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80138d0:	2309      	movs	r3, #9
 80138d2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	68db      	ldr	r3, [r3, #12]
 80138d8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	68da      	ldr	r2, [r3, #12]
 80138e4:	697b      	ldr	r3, [r7, #20]
 80138e6:	029b      	lsls	r3, r3, #10
 80138e8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80138ec:	431a      	orrs	r2, r3
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80138f2:	2300      	movs	r3, #0
}
 80138f4:	4618      	mov	r0, r3
 80138f6:	371c      	adds	r7, #28
 80138f8:	46bd      	mov	sp, r7
 80138fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138fe:	4770      	bx	lr
 8013900:	00d8acbf 	.word	0x00d8acbf
 8013904:	00e4e1c0 	.word	0x00e4e1c0
 8013908:	00f42400 	.word	0x00f42400
 801390c:	01067380 	.word	0x01067380
 8013910:	011a499f 	.word	0x011a499f
 8013914:	01312cff 	.word	0x01312cff
 8013918:	014ca43f 	.word	0x014ca43f
 801391c:	016e3600 	.word	0x016e3600
 8013920:	01a6ab1f 	.word	0x01a6ab1f
 8013924:	01e84800 	.word	0x01e84800

08013928 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013928:	b480      	push	{r7}
 801392a:	b083      	sub	sp, #12
 801392c:	af00      	add	r7, sp, #0
 801392e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	689b      	ldr	r3, [r3, #8]
 8013934:	f043 0201 	orr.w	r2, r3, #1
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801393c:	2300      	movs	r3, #0
}
 801393e:	4618      	mov	r0, r3
 8013940:	370c      	adds	r7, #12
 8013942:	46bd      	mov	sp, r7
 8013944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013948:	4770      	bx	lr

0801394a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801394a:	b480      	push	{r7}
 801394c:	b083      	sub	sp, #12
 801394e:	af00      	add	r7, sp, #0
 8013950:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	689b      	ldr	r3, [r3, #8]
 8013956:	f023 0201 	bic.w	r2, r3, #1
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801395e:	2300      	movs	r3, #0
}
 8013960:	4618      	mov	r0, r3
 8013962:	370c      	adds	r7, #12
 8013964:	46bd      	mov	sp, r7
 8013966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801396a:	4770      	bx	lr

0801396c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801396c:	b580      	push	{r7, lr}
 801396e:	b084      	sub	sp, #16
 8013970:	af00      	add	r7, sp, #0
 8013972:	6078      	str	r0, [r7, #4]
 8013974:	460b      	mov	r3, r1
 8013976:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8013978:	2300      	movs	r3, #0
 801397a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	68db      	ldr	r3, [r3, #12]
 8013980:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8013988:	78fb      	ldrb	r3, [r7, #3]
 801398a:	2b01      	cmp	r3, #1
 801398c:	d115      	bne.n	80139ba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	68db      	ldr	r3, [r3, #12]
 8013992:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801399a:	2001      	movs	r0, #1
 801399c:	f7f0 ff06 	bl	80047ac <HAL_Delay>
      ms++;
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	3301      	adds	r3, #1
 80139a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80139a6:	6878      	ldr	r0, [r7, #4]
 80139a8:	f001 fa4b 	bl	8014e42 <USB_GetMode>
 80139ac:	4603      	mov	r3, r0
 80139ae:	2b01      	cmp	r3, #1
 80139b0:	d01e      	beq.n	80139f0 <USB_SetCurrentMode+0x84>
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	2b31      	cmp	r3, #49	; 0x31
 80139b6:	d9f0      	bls.n	801399a <USB_SetCurrentMode+0x2e>
 80139b8:	e01a      	b.n	80139f0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80139ba:	78fb      	ldrb	r3, [r7, #3]
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d115      	bne.n	80139ec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	68db      	ldr	r3, [r3, #12]
 80139c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80139cc:	2001      	movs	r0, #1
 80139ce:	f7f0 feed 	bl	80047ac <HAL_Delay>
      ms++;
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	3301      	adds	r3, #1
 80139d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80139d8:	6878      	ldr	r0, [r7, #4]
 80139da:	f001 fa32 	bl	8014e42 <USB_GetMode>
 80139de:	4603      	mov	r3, r0
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d005      	beq.n	80139f0 <USB_SetCurrentMode+0x84>
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	2b31      	cmp	r3, #49	; 0x31
 80139e8:	d9f0      	bls.n	80139cc <USB_SetCurrentMode+0x60>
 80139ea:	e001      	b.n	80139f0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80139ec:	2301      	movs	r3, #1
 80139ee:	e005      	b.n	80139fc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	2b32      	cmp	r3, #50	; 0x32
 80139f4:	d101      	bne.n	80139fa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80139f6:	2301      	movs	r3, #1
 80139f8:	e000      	b.n	80139fc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80139fa:	2300      	movs	r3, #0
}
 80139fc:	4618      	mov	r0, r3
 80139fe:	3710      	adds	r7, #16
 8013a00:	46bd      	mov	sp, r7
 8013a02:	bd80      	pop	{r7, pc}

08013a04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013a04:	b084      	sub	sp, #16
 8013a06:	b580      	push	{r7, lr}
 8013a08:	b086      	sub	sp, #24
 8013a0a:	af00      	add	r7, sp, #0
 8013a0c:	6078      	str	r0, [r7, #4]
 8013a0e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8013a12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8013a16:	2300      	movs	r3, #0
 8013a18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8013a1e:	2300      	movs	r3, #0
 8013a20:	613b      	str	r3, [r7, #16]
 8013a22:	e009      	b.n	8013a38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8013a24:	687a      	ldr	r2, [r7, #4]
 8013a26:	693b      	ldr	r3, [r7, #16]
 8013a28:	3340      	adds	r3, #64	; 0x40
 8013a2a:	009b      	lsls	r3, r3, #2
 8013a2c:	4413      	add	r3, r2
 8013a2e:	2200      	movs	r2, #0
 8013a30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8013a32:	693b      	ldr	r3, [r7, #16]
 8013a34:	3301      	adds	r3, #1
 8013a36:	613b      	str	r3, [r7, #16]
 8013a38:	693b      	ldr	r3, [r7, #16]
 8013a3a:	2b0e      	cmp	r3, #14
 8013a3c:	d9f2      	bls.n	8013a24 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8013a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d11c      	bne.n	8013a7e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a4a:	685b      	ldr	r3, [r3, #4]
 8013a4c:	68fa      	ldr	r2, [r7, #12]
 8013a4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013a52:	f043 0302 	orr.w	r3, r3, #2
 8013a56:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a5c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	601a      	str	r2, [r3, #0]
 8013a7c:	e005      	b.n	8013a8a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a82:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013a90:	461a      	mov	r2, r3
 8013a92:	2300      	movs	r3, #0
 8013a94:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a9c:	4619      	mov	r1, r3
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013aa4:	461a      	mov	r2, r3
 8013aa6:	680b      	ldr	r3, [r1, #0]
 8013aa8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013aac:	2b01      	cmp	r3, #1
 8013aae:	d10c      	bne.n	8013aca <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8013ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d104      	bne.n	8013ac0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8013ab6:	2100      	movs	r1, #0
 8013ab8:	6878      	ldr	r0, [r7, #4]
 8013aba:	f000 f965 	bl	8013d88 <USB_SetDevSpeed>
 8013abe:	e008      	b.n	8013ad2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8013ac0:	2101      	movs	r1, #1
 8013ac2:	6878      	ldr	r0, [r7, #4]
 8013ac4:	f000 f960 	bl	8013d88 <USB_SetDevSpeed>
 8013ac8:	e003      	b.n	8013ad2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8013aca:	2103      	movs	r1, #3
 8013acc:	6878      	ldr	r0, [r7, #4]
 8013ace:	f000 f95b 	bl	8013d88 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8013ad2:	2110      	movs	r1, #16
 8013ad4:	6878      	ldr	r0, [r7, #4]
 8013ad6:	f000 f8f3 	bl	8013cc0 <USB_FlushTxFifo>
 8013ada:	4603      	mov	r3, r0
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d001      	beq.n	8013ae4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8013ae0:	2301      	movs	r3, #1
 8013ae2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8013ae4:	6878      	ldr	r0, [r7, #4]
 8013ae6:	f000 f91f 	bl	8013d28 <USB_FlushRxFifo>
 8013aea:	4603      	mov	r3, r0
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d001      	beq.n	8013af4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8013af0:	2301      	movs	r3, #1
 8013af2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013afa:	461a      	mov	r2, r3
 8013afc:	2300      	movs	r3, #0
 8013afe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b06:	461a      	mov	r2, r3
 8013b08:	2300      	movs	r3, #0
 8013b0a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b12:	461a      	mov	r2, r3
 8013b14:	2300      	movs	r3, #0
 8013b16:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013b18:	2300      	movs	r3, #0
 8013b1a:	613b      	str	r3, [r7, #16]
 8013b1c:	e043      	b.n	8013ba6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013b1e:	693b      	ldr	r3, [r7, #16]
 8013b20:	015a      	lsls	r2, r3, #5
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	4413      	add	r3, r2
 8013b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013b30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013b34:	d118      	bne.n	8013b68 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8013b36:	693b      	ldr	r3, [r7, #16]
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d10a      	bne.n	8013b52 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8013b3c:	693b      	ldr	r3, [r7, #16]
 8013b3e:	015a      	lsls	r2, r3, #5
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	4413      	add	r3, r2
 8013b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b48:	461a      	mov	r2, r3
 8013b4a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013b4e:	6013      	str	r3, [r2, #0]
 8013b50:	e013      	b.n	8013b7a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8013b52:	693b      	ldr	r3, [r7, #16]
 8013b54:	015a      	lsls	r2, r3, #5
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	4413      	add	r3, r2
 8013b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b5e:	461a      	mov	r2, r3
 8013b60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013b64:	6013      	str	r3, [r2, #0]
 8013b66:	e008      	b.n	8013b7a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8013b68:	693b      	ldr	r3, [r7, #16]
 8013b6a:	015a      	lsls	r2, r3, #5
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	4413      	add	r3, r2
 8013b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b74:	461a      	mov	r2, r3
 8013b76:	2300      	movs	r3, #0
 8013b78:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8013b7a:	693b      	ldr	r3, [r7, #16]
 8013b7c:	015a      	lsls	r2, r3, #5
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	4413      	add	r3, r2
 8013b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b86:	461a      	mov	r2, r3
 8013b88:	2300      	movs	r3, #0
 8013b8a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8013b8c:	693b      	ldr	r3, [r7, #16]
 8013b8e:	015a      	lsls	r2, r3, #5
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	4413      	add	r3, r2
 8013b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b98:	461a      	mov	r2, r3
 8013b9a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013b9e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013ba0:	693b      	ldr	r3, [r7, #16]
 8013ba2:	3301      	adds	r3, #1
 8013ba4:	613b      	str	r3, [r7, #16]
 8013ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ba8:	693a      	ldr	r2, [r7, #16]
 8013baa:	429a      	cmp	r2, r3
 8013bac:	d3b7      	bcc.n	8013b1e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013bae:	2300      	movs	r3, #0
 8013bb0:	613b      	str	r3, [r7, #16]
 8013bb2:	e043      	b.n	8013c3c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013bb4:	693b      	ldr	r3, [r7, #16]
 8013bb6:	015a      	lsls	r2, r3, #5
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	4413      	add	r3, r2
 8013bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013bc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013bca:	d118      	bne.n	8013bfe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8013bcc:	693b      	ldr	r3, [r7, #16]
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d10a      	bne.n	8013be8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8013bd2:	693b      	ldr	r3, [r7, #16]
 8013bd4:	015a      	lsls	r2, r3, #5
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	4413      	add	r3, r2
 8013bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013bde:	461a      	mov	r2, r3
 8013be0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013be4:	6013      	str	r3, [r2, #0]
 8013be6:	e013      	b.n	8013c10 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8013be8:	693b      	ldr	r3, [r7, #16]
 8013bea:	015a      	lsls	r2, r3, #5
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	4413      	add	r3, r2
 8013bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013bf4:	461a      	mov	r2, r3
 8013bf6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013bfa:	6013      	str	r3, [r2, #0]
 8013bfc:	e008      	b.n	8013c10 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8013bfe:	693b      	ldr	r3, [r7, #16]
 8013c00:	015a      	lsls	r2, r3, #5
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	4413      	add	r3, r2
 8013c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c0a:	461a      	mov	r2, r3
 8013c0c:	2300      	movs	r3, #0
 8013c0e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8013c10:	693b      	ldr	r3, [r7, #16]
 8013c12:	015a      	lsls	r2, r3, #5
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	4413      	add	r3, r2
 8013c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c1c:	461a      	mov	r2, r3
 8013c1e:	2300      	movs	r3, #0
 8013c20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8013c22:	693b      	ldr	r3, [r7, #16]
 8013c24:	015a      	lsls	r2, r3, #5
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	4413      	add	r3, r2
 8013c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c2e:	461a      	mov	r2, r3
 8013c30:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013c34:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013c36:	693b      	ldr	r3, [r7, #16]
 8013c38:	3301      	adds	r3, #1
 8013c3a:	613b      	str	r3, [r7, #16]
 8013c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c3e:	693a      	ldr	r2, [r7, #16]
 8013c40:	429a      	cmp	r2, r3
 8013c42:	d3b7      	bcc.n	8013bb4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c4a:	691b      	ldr	r3, [r3, #16]
 8013c4c:	68fa      	ldr	r2, [r7, #12]
 8013c4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013c52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013c56:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	2200      	movs	r2, #0
 8013c5c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8013c64:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8013c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d105      	bne.n	8013c78 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	699b      	ldr	r3, [r3, #24]
 8013c70:	f043 0210 	orr.w	r2, r3, #16
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	699a      	ldr	r2, [r3, #24]
 8013c7c:	4b0e      	ldr	r3, [pc, #56]	; (8013cb8 <USB_DevInit+0x2b4>)
 8013c7e:	4313      	orrs	r3, r2
 8013c80:	687a      	ldr	r2, [r7, #4]
 8013c82:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8013c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d005      	beq.n	8013c96 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	699b      	ldr	r3, [r3, #24]
 8013c8e:	f043 0208 	orr.w	r2, r3, #8
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8013c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c98:	2b01      	cmp	r3, #1
 8013c9a:	d105      	bne.n	8013ca8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	699a      	ldr	r2, [r3, #24]
 8013ca0:	4b06      	ldr	r3, [pc, #24]	; (8013cbc <USB_DevInit+0x2b8>)
 8013ca2:	4313      	orrs	r3, r2
 8013ca4:	687a      	ldr	r2, [r7, #4]
 8013ca6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8013ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8013caa:	4618      	mov	r0, r3
 8013cac:	3718      	adds	r7, #24
 8013cae:	46bd      	mov	sp, r7
 8013cb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013cb4:	b004      	add	sp, #16
 8013cb6:	4770      	bx	lr
 8013cb8:	803c3800 	.word	0x803c3800
 8013cbc:	40000004 	.word	0x40000004

08013cc0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8013cc0:	b480      	push	{r7}
 8013cc2:	b085      	sub	sp, #20
 8013cc4:	af00      	add	r7, sp, #0
 8013cc6:	6078      	str	r0, [r7, #4]
 8013cc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013cca:	2300      	movs	r3, #0
 8013ccc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	3301      	adds	r3, #1
 8013cd2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	4a13      	ldr	r2, [pc, #76]	; (8013d24 <USB_FlushTxFifo+0x64>)
 8013cd8:	4293      	cmp	r3, r2
 8013cda:	d901      	bls.n	8013ce0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8013cdc:	2303      	movs	r3, #3
 8013cde:	e01b      	b.n	8013d18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	691b      	ldr	r3, [r3, #16]
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	daf2      	bge.n	8013cce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8013ce8:	2300      	movs	r3, #0
 8013cea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013cec:	683b      	ldr	r3, [r7, #0]
 8013cee:	019b      	lsls	r3, r3, #6
 8013cf0:	f043 0220 	orr.w	r2, r3, #32
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	3301      	adds	r3, #1
 8013cfc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	4a08      	ldr	r2, [pc, #32]	; (8013d24 <USB_FlushTxFifo+0x64>)
 8013d02:	4293      	cmp	r3, r2
 8013d04:	d901      	bls.n	8013d0a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8013d06:	2303      	movs	r3, #3
 8013d08:	e006      	b.n	8013d18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	691b      	ldr	r3, [r3, #16]
 8013d0e:	f003 0320 	and.w	r3, r3, #32
 8013d12:	2b20      	cmp	r3, #32
 8013d14:	d0f0      	beq.n	8013cf8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8013d16:	2300      	movs	r3, #0
}
 8013d18:	4618      	mov	r0, r3
 8013d1a:	3714      	adds	r7, #20
 8013d1c:	46bd      	mov	sp, r7
 8013d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d22:	4770      	bx	lr
 8013d24:	00030d40 	.word	0x00030d40

08013d28 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8013d28:	b480      	push	{r7}
 8013d2a:	b085      	sub	sp, #20
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013d30:	2300      	movs	r3, #0
 8013d32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013d34:	68fb      	ldr	r3, [r7, #12]
 8013d36:	3301      	adds	r3, #1
 8013d38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013d3a:	68fb      	ldr	r3, [r7, #12]
 8013d3c:	4a11      	ldr	r2, [pc, #68]	; (8013d84 <USB_FlushRxFifo+0x5c>)
 8013d3e:	4293      	cmp	r3, r2
 8013d40:	d901      	bls.n	8013d46 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8013d42:	2303      	movs	r3, #3
 8013d44:	e018      	b.n	8013d78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	691b      	ldr	r3, [r3, #16]
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	daf2      	bge.n	8013d34 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8013d4e:	2300      	movs	r3, #0
 8013d50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	2210      	movs	r2, #16
 8013d56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	3301      	adds	r3, #1
 8013d5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	4a08      	ldr	r2, [pc, #32]	; (8013d84 <USB_FlushRxFifo+0x5c>)
 8013d62:	4293      	cmp	r3, r2
 8013d64:	d901      	bls.n	8013d6a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8013d66:	2303      	movs	r3, #3
 8013d68:	e006      	b.n	8013d78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	691b      	ldr	r3, [r3, #16]
 8013d6e:	f003 0310 	and.w	r3, r3, #16
 8013d72:	2b10      	cmp	r3, #16
 8013d74:	d0f0      	beq.n	8013d58 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8013d76:	2300      	movs	r3, #0
}
 8013d78:	4618      	mov	r0, r3
 8013d7a:	3714      	adds	r7, #20
 8013d7c:	46bd      	mov	sp, r7
 8013d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d82:	4770      	bx	lr
 8013d84:	00030d40 	.word	0x00030d40

08013d88 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8013d88:	b480      	push	{r7}
 8013d8a:	b085      	sub	sp, #20
 8013d8c:	af00      	add	r7, sp, #0
 8013d8e:	6078      	str	r0, [r7, #4]
 8013d90:	460b      	mov	r3, r1
 8013d92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d9e:	681a      	ldr	r2, [r3, #0]
 8013da0:	78fb      	ldrb	r3, [r7, #3]
 8013da2:	68f9      	ldr	r1, [r7, #12]
 8013da4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013da8:	4313      	orrs	r3, r2
 8013daa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8013dac:	2300      	movs	r3, #0
}
 8013dae:	4618      	mov	r0, r3
 8013db0:	3714      	adds	r7, #20
 8013db2:	46bd      	mov	sp, r7
 8013db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013db8:	4770      	bx	lr

08013dba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8013dba:	b480      	push	{r7}
 8013dbc:	b087      	sub	sp, #28
 8013dbe:	af00      	add	r7, sp, #0
 8013dc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8013dc6:	693b      	ldr	r3, [r7, #16]
 8013dc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013dcc:	689b      	ldr	r3, [r3, #8]
 8013dce:	f003 0306 	and.w	r3, r3, #6
 8013dd2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d102      	bne.n	8013de0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8013dda:	2300      	movs	r3, #0
 8013ddc:	75fb      	strb	r3, [r7, #23]
 8013dde:	e00a      	b.n	8013df6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	2b02      	cmp	r3, #2
 8013de4:	d002      	beq.n	8013dec <USB_GetDevSpeed+0x32>
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	2b06      	cmp	r3, #6
 8013dea:	d102      	bne.n	8013df2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8013dec:	2302      	movs	r3, #2
 8013dee:	75fb      	strb	r3, [r7, #23]
 8013df0:	e001      	b.n	8013df6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8013df2:	230f      	movs	r3, #15
 8013df4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8013df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8013df8:	4618      	mov	r0, r3
 8013dfa:	371c      	adds	r7, #28
 8013dfc:	46bd      	mov	sp, r7
 8013dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e02:	4770      	bx	lr

08013e04 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013e04:	b480      	push	{r7}
 8013e06:	b085      	sub	sp, #20
 8013e08:	af00      	add	r7, sp, #0
 8013e0a:	6078      	str	r0, [r7, #4]
 8013e0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013e12:	683b      	ldr	r3, [r7, #0]
 8013e14:	781b      	ldrb	r3, [r3, #0]
 8013e16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013e18:	683b      	ldr	r3, [r7, #0]
 8013e1a:	785b      	ldrb	r3, [r3, #1]
 8013e1c:	2b01      	cmp	r3, #1
 8013e1e:	d139      	bne.n	8013e94 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e26:	69da      	ldr	r2, [r3, #28]
 8013e28:	683b      	ldr	r3, [r7, #0]
 8013e2a:	781b      	ldrb	r3, [r3, #0]
 8013e2c:	f003 030f 	and.w	r3, r3, #15
 8013e30:	2101      	movs	r1, #1
 8013e32:	fa01 f303 	lsl.w	r3, r1, r3
 8013e36:	b29b      	uxth	r3, r3
 8013e38:	68f9      	ldr	r1, [r7, #12]
 8013e3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013e3e:	4313      	orrs	r3, r2
 8013e40:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8013e42:	68bb      	ldr	r3, [r7, #8]
 8013e44:	015a      	lsls	r2, r3, #5
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	4413      	add	r3, r2
 8013e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d153      	bne.n	8013f00 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013e58:	68bb      	ldr	r3, [r7, #8]
 8013e5a:	015a      	lsls	r2, r3, #5
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	4413      	add	r3, r2
 8013e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e64:	681a      	ldr	r2, [r3, #0]
 8013e66:	683b      	ldr	r3, [r7, #0]
 8013e68:	68db      	ldr	r3, [r3, #12]
 8013e6a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013e6e:	683b      	ldr	r3, [r7, #0]
 8013e70:	791b      	ldrb	r3, [r3, #4]
 8013e72:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013e74:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013e76:	68bb      	ldr	r3, [r7, #8]
 8013e78:	059b      	lsls	r3, r3, #22
 8013e7a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013e7c:	431a      	orrs	r2, r3
 8013e7e:	68bb      	ldr	r3, [r7, #8]
 8013e80:	0159      	lsls	r1, r3, #5
 8013e82:	68fb      	ldr	r3, [r7, #12]
 8013e84:	440b      	add	r3, r1
 8013e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e8a:	4619      	mov	r1, r3
 8013e8c:	4b20      	ldr	r3, [pc, #128]	; (8013f10 <USB_ActivateEndpoint+0x10c>)
 8013e8e:	4313      	orrs	r3, r2
 8013e90:	600b      	str	r3, [r1, #0]
 8013e92:	e035      	b.n	8013f00 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e9a:	69da      	ldr	r2, [r3, #28]
 8013e9c:	683b      	ldr	r3, [r7, #0]
 8013e9e:	781b      	ldrb	r3, [r3, #0]
 8013ea0:	f003 030f 	and.w	r3, r3, #15
 8013ea4:	2101      	movs	r1, #1
 8013ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8013eaa:	041b      	lsls	r3, r3, #16
 8013eac:	68f9      	ldr	r1, [r7, #12]
 8013eae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013eb2:	4313      	orrs	r3, r2
 8013eb4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8013eb6:	68bb      	ldr	r3, [r7, #8]
 8013eb8:	015a      	lsls	r2, r3, #5
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	4413      	add	r3, r2
 8013ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d119      	bne.n	8013f00 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013ecc:	68bb      	ldr	r3, [r7, #8]
 8013ece:	015a      	lsls	r2, r3, #5
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	4413      	add	r3, r2
 8013ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ed8:	681a      	ldr	r2, [r3, #0]
 8013eda:	683b      	ldr	r3, [r7, #0]
 8013edc:	68db      	ldr	r3, [r3, #12]
 8013ede:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8013ee2:	683b      	ldr	r3, [r7, #0]
 8013ee4:	791b      	ldrb	r3, [r3, #4]
 8013ee6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013ee8:	430b      	orrs	r3, r1
 8013eea:	431a      	orrs	r2, r3
 8013eec:	68bb      	ldr	r3, [r7, #8]
 8013eee:	0159      	lsls	r1, r3, #5
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	440b      	add	r3, r1
 8013ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ef8:	4619      	mov	r1, r3
 8013efa:	4b05      	ldr	r3, [pc, #20]	; (8013f10 <USB_ActivateEndpoint+0x10c>)
 8013efc:	4313      	orrs	r3, r2
 8013efe:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8013f00:	2300      	movs	r3, #0
}
 8013f02:	4618      	mov	r0, r3
 8013f04:	3714      	adds	r7, #20
 8013f06:	46bd      	mov	sp, r7
 8013f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f0c:	4770      	bx	lr
 8013f0e:	bf00      	nop
 8013f10:	10008000 	.word	0x10008000

08013f14 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013f14:	b480      	push	{r7}
 8013f16:	b085      	sub	sp, #20
 8013f18:	af00      	add	r7, sp, #0
 8013f1a:	6078      	str	r0, [r7, #4]
 8013f1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013f22:	683b      	ldr	r3, [r7, #0]
 8013f24:	781b      	ldrb	r3, [r3, #0]
 8013f26:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8013f28:	683b      	ldr	r3, [r7, #0]
 8013f2a:	785b      	ldrb	r3, [r3, #1]
 8013f2c:	2b01      	cmp	r3, #1
 8013f2e:	d161      	bne.n	8013ff4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013f30:	68bb      	ldr	r3, [r7, #8]
 8013f32:	015a      	lsls	r2, r3, #5
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	4413      	add	r3, r2
 8013f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013f42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013f46:	d11f      	bne.n	8013f88 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8013f48:	68bb      	ldr	r3, [r7, #8]
 8013f4a:	015a      	lsls	r2, r3, #5
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	4413      	add	r3, r2
 8013f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	68ba      	ldr	r2, [r7, #8]
 8013f58:	0151      	lsls	r1, r2, #5
 8013f5a:	68fa      	ldr	r2, [r7, #12]
 8013f5c:	440a      	add	r2, r1
 8013f5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013f62:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013f66:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8013f68:	68bb      	ldr	r3, [r7, #8]
 8013f6a:	015a      	lsls	r2, r3, #5
 8013f6c:	68fb      	ldr	r3, [r7, #12]
 8013f6e:	4413      	add	r3, r2
 8013f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f74:	681b      	ldr	r3, [r3, #0]
 8013f76:	68ba      	ldr	r2, [r7, #8]
 8013f78:	0151      	lsls	r1, r2, #5
 8013f7a:	68fa      	ldr	r2, [r7, #12]
 8013f7c:	440a      	add	r2, r1
 8013f7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013f82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013f86:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013f90:	683b      	ldr	r3, [r7, #0]
 8013f92:	781b      	ldrb	r3, [r3, #0]
 8013f94:	f003 030f 	and.w	r3, r3, #15
 8013f98:	2101      	movs	r1, #1
 8013f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8013f9e:	b29b      	uxth	r3, r3
 8013fa0:	43db      	mvns	r3, r3
 8013fa2:	68f9      	ldr	r1, [r7, #12]
 8013fa4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013fa8:	4013      	ands	r3, r2
 8013faa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013fb2:	69da      	ldr	r2, [r3, #28]
 8013fb4:	683b      	ldr	r3, [r7, #0]
 8013fb6:	781b      	ldrb	r3, [r3, #0]
 8013fb8:	f003 030f 	and.w	r3, r3, #15
 8013fbc:	2101      	movs	r1, #1
 8013fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8013fc2:	b29b      	uxth	r3, r3
 8013fc4:	43db      	mvns	r3, r3
 8013fc6:	68f9      	ldr	r1, [r7, #12]
 8013fc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013fcc:	4013      	ands	r3, r2
 8013fce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8013fd0:	68bb      	ldr	r3, [r7, #8]
 8013fd2:	015a      	lsls	r2, r3, #5
 8013fd4:	68fb      	ldr	r3, [r7, #12]
 8013fd6:	4413      	add	r3, r2
 8013fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fdc:	681a      	ldr	r2, [r3, #0]
 8013fde:	68bb      	ldr	r3, [r7, #8]
 8013fe0:	0159      	lsls	r1, r3, #5
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	440b      	add	r3, r1
 8013fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fea:	4619      	mov	r1, r3
 8013fec:	4b35      	ldr	r3, [pc, #212]	; (80140c4 <USB_DeactivateEndpoint+0x1b0>)
 8013fee:	4013      	ands	r3, r2
 8013ff0:	600b      	str	r3, [r1, #0]
 8013ff2:	e060      	b.n	80140b6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013ff4:	68bb      	ldr	r3, [r7, #8]
 8013ff6:	015a      	lsls	r2, r3, #5
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	4413      	add	r3, r2
 8013ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014006:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801400a:	d11f      	bne.n	801404c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801400c:	68bb      	ldr	r3, [r7, #8]
 801400e:	015a      	lsls	r2, r3, #5
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	4413      	add	r3, r2
 8014014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	68ba      	ldr	r2, [r7, #8]
 801401c:	0151      	lsls	r1, r2, #5
 801401e:	68fa      	ldr	r2, [r7, #12]
 8014020:	440a      	add	r2, r1
 8014022:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014026:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801402a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801402c:	68bb      	ldr	r3, [r7, #8]
 801402e:	015a      	lsls	r2, r3, #5
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	4413      	add	r3, r2
 8014034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	68ba      	ldr	r2, [r7, #8]
 801403c:	0151      	lsls	r1, r2, #5
 801403e:	68fa      	ldr	r2, [r7, #12]
 8014040:	440a      	add	r2, r1
 8014042:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014046:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801404a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014052:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014054:	683b      	ldr	r3, [r7, #0]
 8014056:	781b      	ldrb	r3, [r3, #0]
 8014058:	f003 030f 	and.w	r3, r3, #15
 801405c:	2101      	movs	r1, #1
 801405e:	fa01 f303 	lsl.w	r3, r1, r3
 8014062:	041b      	lsls	r3, r3, #16
 8014064:	43db      	mvns	r3, r3
 8014066:	68f9      	ldr	r1, [r7, #12]
 8014068:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801406c:	4013      	ands	r3, r2
 801406e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014076:	69da      	ldr	r2, [r3, #28]
 8014078:	683b      	ldr	r3, [r7, #0]
 801407a:	781b      	ldrb	r3, [r3, #0]
 801407c:	f003 030f 	and.w	r3, r3, #15
 8014080:	2101      	movs	r1, #1
 8014082:	fa01 f303 	lsl.w	r3, r1, r3
 8014086:	041b      	lsls	r3, r3, #16
 8014088:	43db      	mvns	r3, r3
 801408a:	68f9      	ldr	r1, [r7, #12]
 801408c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014090:	4013      	ands	r3, r2
 8014092:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8014094:	68bb      	ldr	r3, [r7, #8]
 8014096:	015a      	lsls	r2, r3, #5
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	4413      	add	r3, r2
 801409c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140a0:	681a      	ldr	r2, [r3, #0]
 80140a2:	68bb      	ldr	r3, [r7, #8]
 80140a4:	0159      	lsls	r1, r3, #5
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	440b      	add	r3, r1
 80140aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140ae:	4619      	mov	r1, r3
 80140b0:	4b05      	ldr	r3, [pc, #20]	; (80140c8 <USB_DeactivateEndpoint+0x1b4>)
 80140b2:	4013      	ands	r3, r2
 80140b4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80140b6:	2300      	movs	r3, #0
}
 80140b8:	4618      	mov	r0, r3
 80140ba:	3714      	adds	r7, #20
 80140bc:	46bd      	mov	sp, r7
 80140be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140c2:	4770      	bx	lr
 80140c4:	ec337800 	.word	0xec337800
 80140c8:	eff37800 	.word	0xeff37800

080140cc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80140cc:	b580      	push	{r7, lr}
 80140ce:	b08a      	sub	sp, #40	; 0x28
 80140d0:	af02      	add	r7, sp, #8
 80140d2:	60f8      	str	r0, [r7, #12]
 80140d4:	60b9      	str	r1, [r7, #8]
 80140d6:	4613      	mov	r3, r2
 80140d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80140de:	68bb      	ldr	r3, [r7, #8]
 80140e0:	781b      	ldrb	r3, [r3, #0]
 80140e2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80140e4:	68bb      	ldr	r3, [r7, #8]
 80140e6:	785b      	ldrb	r3, [r3, #1]
 80140e8:	2b01      	cmp	r3, #1
 80140ea:	f040 8163 	bne.w	80143b4 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80140ee:	68bb      	ldr	r3, [r7, #8]
 80140f0:	699b      	ldr	r3, [r3, #24]
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d132      	bne.n	801415c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80140f6:	69bb      	ldr	r3, [r7, #24]
 80140f8:	015a      	lsls	r2, r3, #5
 80140fa:	69fb      	ldr	r3, [r7, #28]
 80140fc:	4413      	add	r3, r2
 80140fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014102:	691a      	ldr	r2, [r3, #16]
 8014104:	69bb      	ldr	r3, [r7, #24]
 8014106:	0159      	lsls	r1, r3, #5
 8014108:	69fb      	ldr	r3, [r7, #28]
 801410a:	440b      	add	r3, r1
 801410c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014110:	4619      	mov	r1, r3
 8014112:	4ba5      	ldr	r3, [pc, #660]	; (80143a8 <USB_EPStartXfer+0x2dc>)
 8014114:	4013      	ands	r3, r2
 8014116:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014118:	69bb      	ldr	r3, [r7, #24]
 801411a:	015a      	lsls	r2, r3, #5
 801411c:	69fb      	ldr	r3, [r7, #28]
 801411e:	4413      	add	r3, r2
 8014120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014124:	691b      	ldr	r3, [r3, #16]
 8014126:	69ba      	ldr	r2, [r7, #24]
 8014128:	0151      	lsls	r1, r2, #5
 801412a:	69fa      	ldr	r2, [r7, #28]
 801412c:	440a      	add	r2, r1
 801412e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014132:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014136:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014138:	69bb      	ldr	r3, [r7, #24]
 801413a:	015a      	lsls	r2, r3, #5
 801413c:	69fb      	ldr	r3, [r7, #28]
 801413e:	4413      	add	r3, r2
 8014140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014144:	691a      	ldr	r2, [r3, #16]
 8014146:	69bb      	ldr	r3, [r7, #24]
 8014148:	0159      	lsls	r1, r3, #5
 801414a:	69fb      	ldr	r3, [r7, #28]
 801414c:	440b      	add	r3, r1
 801414e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014152:	4619      	mov	r1, r3
 8014154:	4b95      	ldr	r3, [pc, #596]	; (80143ac <USB_EPStartXfer+0x2e0>)
 8014156:	4013      	ands	r3, r2
 8014158:	610b      	str	r3, [r1, #16]
 801415a:	e074      	b.n	8014246 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801415c:	69bb      	ldr	r3, [r7, #24]
 801415e:	015a      	lsls	r2, r3, #5
 8014160:	69fb      	ldr	r3, [r7, #28]
 8014162:	4413      	add	r3, r2
 8014164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014168:	691a      	ldr	r2, [r3, #16]
 801416a:	69bb      	ldr	r3, [r7, #24]
 801416c:	0159      	lsls	r1, r3, #5
 801416e:	69fb      	ldr	r3, [r7, #28]
 8014170:	440b      	add	r3, r1
 8014172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014176:	4619      	mov	r1, r3
 8014178:	4b8c      	ldr	r3, [pc, #560]	; (80143ac <USB_EPStartXfer+0x2e0>)
 801417a:	4013      	ands	r3, r2
 801417c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801417e:	69bb      	ldr	r3, [r7, #24]
 8014180:	015a      	lsls	r2, r3, #5
 8014182:	69fb      	ldr	r3, [r7, #28]
 8014184:	4413      	add	r3, r2
 8014186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801418a:	691a      	ldr	r2, [r3, #16]
 801418c:	69bb      	ldr	r3, [r7, #24]
 801418e:	0159      	lsls	r1, r3, #5
 8014190:	69fb      	ldr	r3, [r7, #28]
 8014192:	440b      	add	r3, r1
 8014194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014198:	4619      	mov	r1, r3
 801419a:	4b83      	ldr	r3, [pc, #524]	; (80143a8 <USB_EPStartXfer+0x2dc>)
 801419c:	4013      	ands	r3, r2
 801419e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80141a0:	69bb      	ldr	r3, [r7, #24]
 80141a2:	015a      	lsls	r2, r3, #5
 80141a4:	69fb      	ldr	r3, [r7, #28]
 80141a6:	4413      	add	r3, r2
 80141a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80141ac:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80141ae:	68bb      	ldr	r3, [r7, #8]
 80141b0:	6999      	ldr	r1, [r3, #24]
 80141b2:	68bb      	ldr	r3, [r7, #8]
 80141b4:	68db      	ldr	r3, [r3, #12]
 80141b6:	440b      	add	r3, r1
 80141b8:	1e59      	subs	r1, r3, #1
 80141ba:	68bb      	ldr	r3, [r7, #8]
 80141bc:	68db      	ldr	r3, [r3, #12]
 80141be:	fbb1 f3f3 	udiv	r3, r1, r3
 80141c2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80141c4:	4b7a      	ldr	r3, [pc, #488]	; (80143b0 <USB_EPStartXfer+0x2e4>)
 80141c6:	400b      	ands	r3, r1
 80141c8:	69b9      	ldr	r1, [r7, #24]
 80141ca:	0148      	lsls	r0, r1, #5
 80141cc:	69f9      	ldr	r1, [r7, #28]
 80141ce:	4401      	add	r1, r0
 80141d0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80141d4:	4313      	orrs	r3, r2
 80141d6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80141d8:	69bb      	ldr	r3, [r7, #24]
 80141da:	015a      	lsls	r2, r3, #5
 80141dc:	69fb      	ldr	r3, [r7, #28]
 80141de:	4413      	add	r3, r2
 80141e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80141e4:	691a      	ldr	r2, [r3, #16]
 80141e6:	68bb      	ldr	r3, [r7, #8]
 80141e8:	699b      	ldr	r3, [r3, #24]
 80141ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80141ee:	69b9      	ldr	r1, [r7, #24]
 80141f0:	0148      	lsls	r0, r1, #5
 80141f2:	69f9      	ldr	r1, [r7, #28]
 80141f4:	4401      	add	r1, r0
 80141f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80141fa:	4313      	orrs	r3, r2
 80141fc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80141fe:	68bb      	ldr	r3, [r7, #8]
 8014200:	791b      	ldrb	r3, [r3, #4]
 8014202:	2b01      	cmp	r3, #1
 8014204:	d11f      	bne.n	8014246 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8014206:	69bb      	ldr	r3, [r7, #24]
 8014208:	015a      	lsls	r2, r3, #5
 801420a:	69fb      	ldr	r3, [r7, #28]
 801420c:	4413      	add	r3, r2
 801420e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014212:	691b      	ldr	r3, [r3, #16]
 8014214:	69ba      	ldr	r2, [r7, #24]
 8014216:	0151      	lsls	r1, r2, #5
 8014218:	69fa      	ldr	r2, [r7, #28]
 801421a:	440a      	add	r2, r1
 801421c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014220:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8014224:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8014226:	69bb      	ldr	r3, [r7, #24]
 8014228:	015a      	lsls	r2, r3, #5
 801422a:	69fb      	ldr	r3, [r7, #28]
 801422c:	4413      	add	r3, r2
 801422e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014232:	691b      	ldr	r3, [r3, #16]
 8014234:	69ba      	ldr	r2, [r7, #24]
 8014236:	0151      	lsls	r1, r2, #5
 8014238:	69fa      	ldr	r2, [r7, #28]
 801423a:	440a      	add	r2, r1
 801423c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014240:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014244:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8014246:	79fb      	ldrb	r3, [r7, #7]
 8014248:	2b01      	cmp	r3, #1
 801424a:	d14b      	bne.n	80142e4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801424c:	68bb      	ldr	r3, [r7, #8]
 801424e:	695b      	ldr	r3, [r3, #20]
 8014250:	2b00      	cmp	r3, #0
 8014252:	d009      	beq.n	8014268 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8014254:	69bb      	ldr	r3, [r7, #24]
 8014256:	015a      	lsls	r2, r3, #5
 8014258:	69fb      	ldr	r3, [r7, #28]
 801425a:	4413      	add	r3, r2
 801425c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014260:	461a      	mov	r2, r3
 8014262:	68bb      	ldr	r3, [r7, #8]
 8014264:	695b      	ldr	r3, [r3, #20]
 8014266:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8014268:	68bb      	ldr	r3, [r7, #8]
 801426a:	791b      	ldrb	r3, [r3, #4]
 801426c:	2b01      	cmp	r3, #1
 801426e:	d128      	bne.n	80142c2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014270:	69fb      	ldr	r3, [r7, #28]
 8014272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014276:	689b      	ldr	r3, [r3, #8]
 8014278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801427c:	2b00      	cmp	r3, #0
 801427e:	d110      	bne.n	80142a2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014280:	69bb      	ldr	r3, [r7, #24]
 8014282:	015a      	lsls	r2, r3, #5
 8014284:	69fb      	ldr	r3, [r7, #28]
 8014286:	4413      	add	r3, r2
 8014288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	69ba      	ldr	r2, [r7, #24]
 8014290:	0151      	lsls	r1, r2, #5
 8014292:	69fa      	ldr	r2, [r7, #28]
 8014294:	440a      	add	r2, r1
 8014296:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801429a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801429e:	6013      	str	r3, [r2, #0]
 80142a0:	e00f      	b.n	80142c2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80142a2:	69bb      	ldr	r3, [r7, #24]
 80142a4:	015a      	lsls	r2, r3, #5
 80142a6:	69fb      	ldr	r3, [r7, #28]
 80142a8:	4413      	add	r3, r2
 80142aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142ae:	681b      	ldr	r3, [r3, #0]
 80142b0:	69ba      	ldr	r2, [r7, #24]
 80142b2:	0151      	lsls	r1, r2, #5
 80142b4:	69fa      	ldr	r2, [r7, #28]
 80142b6:	440a      	add	r2, r1
 80142b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80142bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80142c0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80142c2:	69bb      	ldr	r3, [r7, #24]
 80142c4:	015a      	lsls	r2, r3, #5
 80142c6:	69fb      	ldr	r3, [r7, #28]
 80142c8:	4413      	add	r3, r2
 80142ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	69ba      	ldr	r2, [r7, #24]
 80142d2:	0151      	lsls	r1, r2, #5
 80142d4:	69fa      	ldr	r2, [r7, #28]
 80142d6:	440a      	add	r2, r1
 80142d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80142dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80142e0:	6013      	str	r3, [r2, #0]
 80142e2:	e137      	b.n	8014554 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80142e4:	69bb      	ldr	r3, [r7, #24]
 80142e6:	015a      	lsls	r2, r3, #5
 80142e8:	69fb      	ldr	r3, [r7, #28]
 80142ea:	4413      	add	r3, r2
 80142ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	69ba      	ldr	r2, [r7, #24]
 80142f4:	0151      	lsls	r1, r2, #5
 80142f6:	69fa      	ldr	r2, [r7, #28]
 80142f8:	440a      	add	r2, r1
 80142fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80142fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014302:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8014304:	68bb      	ldr	r3, [r7, #8]
 8014306:	791b      	ldrb	r3, [r3, #4]
 8014308:	2b01      	cmp	r3, #1
 801430a:	d015      	beq.n	8014338 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801430c:	68bb      	ldr	r3, [r7, #8]
 801430e:	699b      	ldr	r3, [r3, #24]
 8014310:	2b00      	cmp	r3, #0
 8014312:	f000 811f 	beq.w	8014554 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014316:	69fb      	ldr	r3, [r7, #28]
 8014318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801431c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801431e:	68bb      	ldr	r3, [r7, #8]
 8014320:	781b      	ldrb	r3, [r3, #0]
 8014322:	f003 030f 	and.w	r3, r3, #15
 8014326:	2101      	movs	r1, #1
 8014328:	fa01 f303 	lsl.w	r3, r1, r3
 801432c:	69f9      	ldr	r1, [r7, #28]
 801432e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014332:	4313      	orrs	r3, r2
 8014334:	634b      	str	r3, [r1, #52]	; 0x34
 8014336:	e10d      	b.n	8014554 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014338:	69fb      	ldr	r3, [r7, #28]
 801433a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801433e:	689b      	ldr	r3, [r3, #8]
 8014340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014344:	2b00      	cmp	r3, #0
 8014346:	d110      	bne.n	801436a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014348:	69bb      	ldr	r3, [r7, #24]
 801434a:	015a      	lsls	r2, r3, #5
 801434c:	69fb      	ldr	r3, [r7, #28]
 801434e:	4413      	add	r3, r2
 8014350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014354:	681b      	ldr	r3, [r3, #0]
 8014356:	69ba      	ldr	r2, [r7, #24]
 8014358:	0151      	lsls	r1, r2, #5
 801435a:	69fa      	ldr	r2, [r7, #28]
 801435c:	440a      	add	r2, r1
 801435e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014362:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014366:	6013      	str	r3, [r2, #0]
 8014368:	e00f      	b.n	801438a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801436a:	69bb      	ldr	r3, [r7, #24]
 801436c:	015a      	lsls	r2, r3, #5
 801436e:	69fb      	ldr	r3, [r7, #28]
 8014370:	4413      	add	r3, r2
 8014372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014376:	681b      	ldr	r3, [r3, #0]
 8014378:	69ba      	ldr	r2, [r7, #24]
 801437a:	0151      	lsls	r1, r2, #5
 801437c:	69fa      	ldr	r2, [r7, #28]
 801437e:	440a      	add	r2, r1
 8014380:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014388:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801438a:	68bb      	ldr	r3, [r7, #8]
 801438c:	6919      	ldr	r1, [r3, #16]
 801438e:	68bb      	ldr	r3, [r7, #8]
 8014390:	781a      	ldrb	r2, [r3, #0]
 8014392:	68bb      	ldr	r3, [r7, #8]
 8014394:	699b      	ldr	r3, [r3, #24]
 8014396:	b298      	uxth	r0, r3
 8014398:	79fb      	ldrb	r3, [r7, #7]
 801439a:	9300      	str	r3, [sp, #0]
 801439c:	4603      	mov	r3, r0
 801439e:	68f8      	ldr	r0, [r7, #12]
 80143a0:	f000 faea 	bl	8014978 <USB_WritePacket>
 80143a4:	e0d6      	b.n	8014554 <USB_EPStartXfer+0x488>
 80143a6:	bf00      	nop
 80143a8:	e007ffff 	.word	0xe007ffff
 80143ac:	fff80000 	.word	0xfff80000
 80143b0:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80143b4:	69bb      	ldr	r3, [r7, #24]
 80143b6:	015a      	lsls	r2, r3, #5
 80143b8:	69fb      	ldr	r3, [r7, #28]
 80143ba:	4413      	add	r3, r2
 80143bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80143c0:	691a      	ldr	r2, [r3, #16]
 80143c2:	69bb      	ldr	r3, [r7, #24]
 80143c4:	0159      	lsls	r1, r3, #5
 80143c6:	69fb      	ldr	r3, [r7, #28]
 80143c8:	440b      	add	r3, r1
 80143ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80143ce:	4619      	mov	r1, r3
 80143d0:	4b63      	ldr	r3, [pc, #396]	; (8014560 <USB_EPStartXfer+0x494>)
 80143d2:	4013      	ands	r3, r2
 80143d4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80143d6:	69bb      	ldr	r3, [r7, #24]
 80143d8:	015a      	lsls	r2, r3, #5
 80143da:	69fb      	ldr	r3, [r7, #28]
 80143dc:	4413      	add	r3, r2
 80143de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80143e2:	691a      	ldr	r2, [r3, #16]
 80143e4:	69bb      	ldr	r3, [r7, #24]
 80143e6:	0159      	lsls	r1, r3, #5
 80143e8:	69fb      	ldr	r3, [r7, #28]
 80143ea:	440b      	add	r3, r1
 80143ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80143f0:	4619      	mov	r1, r3
 80143f2:	4b5c      	ldr	r3, [pc, #368]	; (8014564 <USB_EPStartXfer+0x498>)
 80143f4:	4013      	ands	r3, r2
 80143f6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80143f8:	68bb      	ldr	r3, [r7, #8]
 80143fa:	699b      	ldr	r3, [r3, #24]
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d123      	bne.n	8014448 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8014400:	69bb      	ldr	r3, [r7, #24]
 8014402:	015a      	lsls	r2, r3, #5
 8014404:	69fb      	ldr	r3, [r7, #28]
 8014406:	4413      	add	r3, r2
 8014408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801440c:	691a      	ldr	r2, [r3, #16]
 801440e:	68bb      	ldr	r3, [r7, #8]
 8014410:	68db      	ldr	r3, [r3, #12]
 8014412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014416:	69b9      	ldr	r1, [r7, #24]
 8014418:	0148      	lsls	r0, r1, #5
 801441a:	69f9      	ldr	r1, [r7, #28]
 801441c:	4401      	add	r1, r0
 801441e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014422:	4313      	orrs	r3, r2
 8014424:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014426:	69bb      	ldr	r3, [r7, #24]
 8014428:	015a      	lsls	r2, r3, #5
 801442a:	69fb      	ldr	r3, [r7, #28]
 801442c:	4413      	add	r3, r2
 801442e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014432:	691b      	ldr	r3, [r3, #16]
 8014434:	69ba      	ldr	r2, [r7, #24]
 8014436:	0151      	lsls	r1, r2, #5
 8014438:	69fa      	ldr	r2, [r7, #28]
 801443a:	440a      	add	r2, r1
 801443c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014440:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014444:	6113      	str	r3, [r2, #16]
 8014446:	e037      	b.n	80144b8 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014448:	68bb      	ldr	r3, [r7, #8]
 801444a:	699a      	ldr	r2, [r3, #24]
 801444c:	68bb      	ldr	r3, [r7, #8]
 801444e:	68db      	ldr	r3, [r3, #12]
 8014450:	4413      	add	r3, r2
 8014452:	1e5a      	subs	r2, r3, #1
 8014454:	68bb      	ldr	r3, [r7, #8]
 8014456:	68db      	ldr	r3, [r3, #12]
 8014458:	fbb2 f3f3 	udiv	r3, r2, r3
 801445c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 801445e:	68bb      	ldr	r3, [r7, #8]
 8014460:	68db      	ldr	r3, [r3, #12]
 8014462:	8afa      	ldrh	r2, [r7, #22]
 8014464:	fb03 f202 	mul.w	r2, r3, r2
 8014468:	68bb      	ldr	r3, [r7, #8]
 801446a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801446c:	69bb      	ldr	r3, [r7, #24]
 801446e:	015a      	lsls	r2, r3, #5
 8014470:	69fb      	ldr	r3, [r7, #28]
 8014472:	4413      	add	r3, r2
 8014474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014478:	691a      	ldr	r2, [r3, #16]
 801447a:	8afb      	ldrh	r3, [r7, #22]
 801447c:	04d9      	lsls	r1, r3, #19
 801447e:	4b3a      	ldr	r3, [pc, #232]	; (8014568 <USB_EPStartXfer+0x49c>)
 8014480:	400b      	ands	r3, r1
 8014482:	69b9      	ldr	r1, [r7, #24]
 8014484:	0148      	lsls	r0, r1, #5
 8014486:	69f9      	ldr	r1, [r7, #28]
 8014488:	4401      	add	r1, r0
 801448a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801448e:	4313      	orrs	r3, r2
 8014490:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8014492:	69bb      	ldr	r3, [r7, #24]
 8014494:	015a      	lsls	r2, r3, #5
 8014496:	69fb      	ldr	r3, [r7, #28]
 8014498:	4413      	add	r3, r2
 801449a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801449e:	691a      	ldr	r2, [r3, #16]
 80144a0:	68bb      	ldr	r3, [r7, #8]
 80144a2:	69db      	ldr	r3, [r3, #28]
 80144a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80144a8:	69b9      	ldr	r1, [r7, #24]
 80144aa:	0148      	lsls	r0, r1, #5
 80144ac:	69f9      	ldr	r1, [r7, #28]
 80144ae:	4401      	add	r1, r0
 80144b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80144b4:	4313      	orrs	r3, r2
 80144b6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80144b8:	79fb      	ldrb	r3, [r7, #7]
 80144ba:	2b01      	cmp	r3, #1
 80144bc:	d10d      	bne.n	80144da <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80144be:	68bb      	ldr	r3, [r7, #8]
 80144c0:	691b      	ldr	r3, [r3, #16]
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d009      	beq.n	80144da <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80144c6:	68bb      	ldr	r3, [r7, #8]
 80144c8:	6919      	ldr	r1, [r3, #16]
 80144ca:	69bb      	ldr	r3, [r7, #24]
 80144cc:	015a      	lsls	r2, r3, #5
 80144ce:	69fb      	ldr	r3, [r7, #28]
 80144d0:	4413      	add	r3, r2
 80144d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80144d6:	460a      	mov	r2, r1
 80144d8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80144da:	68bb      	ldr	r3, [r7, #8]
 80144dc:	791b      	ldrb	r3, [r3, #4]
 80144de:	2b01      	cmp	r3, #1
 80144e0:	d128      	bne.n	8014534 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80144e2:	69fb      	ldr	r3, [r7, #28]
 80144e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80144e8:	689b      	ldr	r3, [r3, #8]
 80144ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d110      	bne.n	8014514 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80144f2:	69bb      	ldr	r3, [r7, #24]
 80144f4:	015a      	lsls	r2, r3, #5
 80144f6:	69fb      	ldr	r3, [r7, #28]
 80144f8:	4413      	add	r3, r2
 80144fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	69ba      	ldr	r2, [r7, #24]
 8014502:	0151      	lsls	r1, r2, #5
 8014504:	69fa      	ldr	r2, [r7, #28]
 8014506:	440a      	add	r2, r1
 8014508:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801450c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014510:	6013      	str	r3, [r2, #0]
 8014512:	e00f      	b.n	8014534 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8014514:	69bb      	ldr	r3, [r7, #24]
 8014516:	015a      	lsls	r2, r3, #5
 8014518:	69fb      	ldr	r3, [r7, #28]
 801451a:	4413      	add	r3, r2
 801451c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014520:	681b      	ldr	r3, [r3, #0]
 8014522:	69ba      	ldr	r2, [r7, #24]
 8014524:	0151      	lsls	r1, r2, #5
 8014526:	69fa      	ldr	r2, [r7, #28]
 8014528:	440a      	add	r2, r1
 801452a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801452e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014532:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8014534:	69bb      	ldr	r3, [r7, #24]
 8014536:	015a      	lsls	r2, r3, #5
 8014538:	69fb      	ldr	r3, [r7, #28]
 801453a:	4413      	add	r3, r2
 801453c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014540:	681b      	ldr	r3, [r3, #0]
 8014542:	69ba      	ldr	r2, [r7, #24]
 8014544:	0151      	lsls	r1, r2, #5
 8014546:	69fa      	ldr	r2, [r7, #28]
 8014548:	440a      	add	r2, r1
 801454a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801454e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014552:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014554:	2300      	movs	r3, #0
}
 8014556:	4618      	mov	r0, r3
 8014558:	3720      	adds	r7, #32
 801455a:	46bd      	mov	sp, r7
 801455c:	bd80      	pop	{r7, pc}
 801455e:	bf00      	nop
 8014560:	fff80000 	.word	0xfff80000
 8014564:	e007ffff 	.word	0xe007ffff
 8014568:	1ff80000 	.word	0x1ff80000

0801456c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801456c:	b480      	push	{r7}
 801456e:	b087      	sub	sp, #28
 8014570:	af00      	add	r7, sp, #0
 8014572:	60f8      	str	r0, [r7, #12]
 8014574:	60b9      	str	r1, [r7, #8]
 8014576:	4613      	mov	r3, r2
 8014578:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801457a:	68fb      	ldr	r3, [r7, #12]
 801457c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801457e:	68bb      	ldr	r3, [r7, #8]
 8014580:	781b      	ldrb	r3, [r3, #0]
 8014582:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014584:	68bb      	ldr	r3, [r7, #8]
 8014586:	785b      	ldrb	r3, [r3, #1]
 8014588:	2b01      	cmp	r3, #1
 801458a:	f040 80ce 	bne.w	801472a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801458e:	68bb      	ldr	r3, [r7, #8]
 8014590:	699b      	ldr	r3, [r3, #24]
 8014592:	2b00      	cmp	r3, #0
 8014594:	d132      	bne.n	80145fc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014596:	693b      	ldr	r3, [r7, #16]
 8014598:	015a      	lsls	r2, r3, #5
 801459a:	697b      	ldr	r3, [r7, #20]
 801459c:	4413      	add	r3, r2
 801459e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80145a2:	691a      	ldr	r2, [r3, #16]
 80145a4:	693b      	ldr	r3, [r7, #16]
 80145a6:	0159      	lsls	r1, r3, #5
 80145a8:	697b      	ldr	r3, [r7, #20]
 80145aa:	440b      	add	r3, r1
 80145ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80145b0:	4619      	mov	r1, r3
 80145b2:	4b9a      	ldr	r3, [pc, #616]	; (801481c <USB_EP0StartXfer+0x2b0>)
 80145b4:	4013      	ands	r3, r2
 80145b6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80145b8:	693b      	ldr	r3, [r7, #16]
 80145ba:	015a      	lsls	r2, r3, #5
 80145bc:	697b      	ldr	r3, [r7, #20]
 80145be:	4413      	add	r3, r2
 80145c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80145c4:	691b      	ldr	r3, [r3, #16]
 80145c6:	693a      	ldr	r2, [r7, #16]
 80145c8:	0151      	lsls	r1, r2, #5
 80145ca:	697a      	ldr	r2, [r7, #20]
 80145cc:	440a      	add	r2, r1
 80145ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80145d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80145d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80145d8:	693b      	ldr	r3, [r7, #16]
 80145da:	015a      	lsls	r2, r3, #5
 80145dc:	697b      	ldr	r3, [r7, #20]
 80145de:	4413      	add	r3, r2
 80145e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80145e4:	691a      	ldr	r2, [r3, #16]
 80145e6:	693b      	ldr	r3, [r7, #16]
 80145e8:	0159      	lsls	r1, r3, #5
 80145ea:	697b      	ldr	r3, [r7, #20]
 80145ec:	440b      	add	r3, r1
 80145ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80145f2:	4619      	mov	r1, r3
 80145f4:	4b8a      	ldr	r3, [pc, #552]	; (8014820 <USB_EP0StartXfer+0x2b4>)
 80145f6:	4013      	ands	r3, r2
 80145f8:	610b      	str	r3, [r1, #16]
 80145fa:	e04e      	b.n	801469a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80145fc:	693b      	ldr	r3, [r7, #16]
 80145fe:	015a      	lsls	r2, r3, #5
 8014600:	697b      	ldr	r3, [r7, #20]
 8014602:	4413      	add	r3, r2
 8014604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014608:	691a      	ldr	r2, [r3, #16]
 801460a:	693b      	ldr	r3, [r7, #16]
 801460c:	0159      	lsls	r1, r3, #5
 801460e:	697b      	ldr	r3, [r7, #20]
 8014610:	440b      	add	r3, r1
 8014612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014616:	4619      	mov	r1, r3
 8014618:	4b81      	ldr	r3, [pc, #516]	; (8014820 <USB_EP0StartXfer+0x2b4>)
 801461a:	4013      	ands	r3, r2
 801461c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801461e:	693b      	ldr	r3, [r7, #16]
 8014620:	015a      	lsls	r2, r3, #5
 8014622:	697b      	ldr	r3, [r7, #20]
 8014624:	4413      	add	r3, r2
 8014626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801462a:	691a      	ldr	r2, [r3, #16]
 801462c:	693b      	ldr	r3, [r7, #16]
 801462e:	0159      	lsls	r1, r3, #5
 8014630:	697b      	ldr	r3, [r7, #20]
 8014632:	440b      	add	r3, r1
 8014634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014638:	4619      	mov	r1, r3
 801463a:	4b78      	ldr	r3, [pc, #480]	; (801481c <USB_EP0StartXfer+0x2b0>)
 801463c:	4013      	ands	r3, r2
 801463e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8014640:	68bb      	ldr	r3, [r7, #8]
 8014642:	699a      	ldr	r2, [r3, #24]
 8014644:	68bb      	ldr	r3, [r7, #8]
 8014646:	68db      	ldr	r3, [r3, #12]
 8014648:	429a      	cmp	r2, r3
 801464a:	d903      	bls.n	8014654 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 801464c:	68bb      	ldr	r3, [r7, #8]
 801464e:	68da      	ldr	r2, [r3, #12]
 8014650:	68bb      	ldr	r3, [r7, #8]
 8014652:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014654:	693b      	ldr	r3, [r7, #16]
 8014656:	015a      	lsls	r2, r3, #5
 8014658:	697b      	ldr	r3, [r7, #20]
 801465a:	4413      	add	r3, r2
 801465c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014660:	691b      	ldr	r3, [r3, #16]
 8014662:	693a      	ldr	r2, [r7, #16]
 8014664:	0151      	lsls	r1, r2, #5
 8014666:	697a      	ldr	r2, [r7, #20]
 8014668:	440a      	add	r2, r1
 801466a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801466e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014672:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8014674:	693b      	ldr	r3, [r7, #16]
 8014676:	015a      	lsls	r2, r3, #5
 8014678:	697b      	ldr	r3, [r7, #20]
 801467a:	4413      	add	r3, r2
 801467c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014680:	691a      	ldr	r2, [r3, #16]
 8014682:	68bb      	ldr	r3, [r7, #8]
 8014684:	699b      	ldr	r3, [r3, #24]
 8014686:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801468a:	6939      	ldr	r1, [r7, #16]
 801468c:	0148      	lsls	r0, r1, #5
 801468e:	6979      	ldr	r1, [r7, #20]
 8014690:	4401      	add	r1, r0
 8014692:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8014696:	4313      	orrs	r3, r2
 8014698:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801469a:	79fb      	ldrb	r3, [r7, #7]
 801469c:	2b01      	cmp	r3, #1
 801469e:	d11e      	bne.n	80146de <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80146a0:	68bb      	ldr	r3, [r7, #8]
 80146a2:	695b      	ldr	r3, [r3, #20]
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d009      	beq.n	80146bc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80146a8:	693b      	ldr	r3, [r7, #16]
 80146aa:	015a      	lsls	r2, r3, #5
 80146ac:	697b      	ldr	r3, [r7, #20]
 80146ae:	4413      	add	r3, r2
 80146b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80146b4:	461a      	mov	r2, r3
 80146b6:	68bb      	ldr	r3, [r7, #8]
 80146b8:	695b      	ldr	r3, [r3, #20]
 80146ba:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80146bc:	693b      	ldr	r3, [r7, #16]
 80146be:	015a      	lsls	r2, r3, #5
 80146c0:	697b      	ldr	r3, [r7, #20]
 80146c2:	4413      	add	r3, r2
 80146c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80146c8:	681b      	ldr	r3, [r3, #0]
 80146ca:	693a      	ldr	r2, [r7, #16]
 80146cc:	0151      	lsls	r1, r2, #5
 80146ce:	697a      	ldr	r2, [r7, #20]
 80146d0:	440a      	add	r2, r1
 80146d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80146d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80146da:	6013      	str	r3, [r2, #0]
 80146dc:	e097      	b.n	801480e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80146de:	693b      	ldr	r3, [r7, #16]
 80146e0:	015a      	lsls	r2, r3, #5
 80146e2:	697b      	ldr	r3, [r7, #20]
 80146e4:	4413      	add	r3, r2
 80146e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	693a      	ldr	r2, [r7, #16]
 80146ee:	0151      	lsls	r1, r2, #5
 80146f0:	697a      	ldr	r2, [r7, #20]
 80146f2:	440a      	add	r2, r1
 80146f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80146f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80146fc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80146fe:	68bb      	ldr	r3, [r7, #8]
 8014700:	699b      	ldr	r3, [r3, #24]
 8014702:	2b00      	cmp	r3, #0
 8014704:	f000 8083 	beq.w	801480e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014708:	697b      	ldr	r3, [r7, #20]
 801470a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801470e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014710:	68bb      	ldr	r3, [r7, #8]
 8014712:	781b      	ldrb	r3, [r3, #0]
 8014714:	f003 030f 	and.w	r3, r3, #15
 8014718:	2101      	movs	r1, #1
 801471a:	fa01 f303 	lsl.w	r3, r1, r3
 801471e:	6979      	ldr	r1, [r7, #20]
 8014720:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014724:	4313      	orrs	r3, r2
 8014726:	634b      	str	r3, [r1, #52]	; 0x34
 8014728:	e071      	b.n	801480e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801472a:	693b      	ldr	r3, [r7, #16]
 801472c:	015a      	lsls	r2, r3, #5
 801472e:	697b      	ldr	r3, [r7, #20]
 8014730:	4413      	add	r3, r2
 8014732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014736:	691a      	ldr	r2, [r3, #16]
 8014738:	693b      	ldr	r3, [r7, #16]
 801473a:	0159      	lsls	r1, r3, #5
 801473c:	697b      	ldr	r3, [r7, #20]
 801473e:	440b      	add	r3, r1
 8014740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014744:	4619      	mov	r1, r3
 8014746:	4b36      	ldr	r3, [pc, #216]	; (8014820 <USB_EP0StartXfer+0x2b4>)
 8014748:	4013      	ands	r3, r2
 801474a:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801474c:	693b      	ldr	r3, [r7, #16]
 801474e:	015a      	lsls	r2, r3, #5
 8014750:	697b      	ldr	r3, [r7, #20]
 8014752:	4413      	add	r3, r2
 8014754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014758:	691a      	ldr	r2, [r3, #16]
 801475a:	693b      	ldr	r3, [r7, #16]
 801475c:	0159      	lsls	r1, r3, #5
 801475e:	697b      	ldr	r3, [r7, #20]
 8014760:	440b      	add	r3, r1
 8014762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014766:	4619      	mov	r1, r3
 8014768:	4b2c      	ldr	r3, [pc, #176]	; (801481c <USB_EP0StartXfer+0x2b0>)
 801476a:	4013      	ands	r3, r2
 801476c:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 801476e:	68bb      	ldr	r3, [r7, #8]
 8014770:	699b      	ldr	r3, [r3, #24]
 8014772:	2b00      	cmp	r3, #0
 8014774:	d003      	beq.n	801477e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8014776:	68bb      	ldr	r3, [r7, #8]
 8014778:	68da      	ldr	r2, [r3, #12]
 801477a:	68bb      	ldr	r3, [r7, #8]
 801477c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 801477e:	68bb      	ldr	r3, [r7, #8]
 8014780:	68da      	ldr	r2, [r3, #12]
 8014782:	68bb      	ldr	r3, [r7, #8]
 8014784:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014786:	693b      	ldr	r3, [r7, #16]
 8014788:	015a      	lsls	r2, r3, #5
 801478a:	697b      	ldr	r3, [r7, #20]
 801478c:	4413      	add	r3, r2
 801478e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014792:	691b      	ldr	r3, [r3, #16]
 8014794:	693a      	ldr	r2, [r7, #16]
 8014796:	0151      	lsls	r1, r2, #5
 8014798:	697a      	ldr	r2, [r7, #20]
 801479a:	440a      	add	r2, r1
 801479c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80147a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80147a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80147a6:	693b      	ldr	r3, [r7, #16]
 80147a8:	015a      	lsls	r2, r3, #5
 80147aa:	697b      	ldr	r3, [r7, #20]
 80147ac:	4413      	add	r3, r2
 80147ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80147b2:	691a      	ldr	r2, [r3, #16]
 80147b4:	68bb      	ldr	r3, [r7, #8]
 80147b6:	69db      	ldr	r3, [r3, #28]
 80147b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80147bc:	6939      	ldr	r1, [r7, #16]
 80147be:	0148      	lsls	r0, r1, #5
 80147c0:	6979      	ldr	r1, [r7, #20]
 80147c2:	4401      	add	r1, r0
 80147c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80147c8:	4313      	orrs	r3, r2
 80147ca:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80147cc:	79fb      	ldrb	r3, [r7, #7]
 80147ce:	2b01      	cmp	r3, #1
 80147d0:	d10d      	bne.n	80147ee <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80147d2:	68bb      	ldr	r3, [r7, #8]
 80147d4:	691b      	ldr	r3, [r3, #16]
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d009      	beq.n	80147ee <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80147da:	68bb      	ldr	r3, [r7, #8]
 80147dc:	6919      	ldr	r1, [r3, #16]
 80147de:	693b      	ldr	r3, [r7, #16]
 80147e0:	015a      	lsls	r2, r3, #5
 80147e2:	697b      	ldr	r3, [r7, #20]
 80147e4:	4413      	add	r3, r2
 80147e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80147ea:	460a      	mov	r2, r1
 80147ec:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80147ee:	693b      	ldr	r3, [r7, #16]
 80147f0:	015a      	lsls	r2, r3, #5
 80147f2:	697b      	ldr	r3, [r7, #20]
 80147f4:	4413      	add	r3, r2
 80147f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	693a      	ldr	r2, [r7, #16]
 80147fe:	0151      	lsls	r1, r2, #5
 8014800:	697a      	ldr	r2, [r7, #20]
 8014802:	440a      	add	r2, r1
 8014804:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014808:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801480c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801480e:	2300      	movs	r3, #0
}
 8014810:	4618      	mov	r0, r3
 8014812:	371c      	adds	r7, #28
 8014814:	46bd      	mov	sp, r7
 8014816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801481a:	4770      	bx	lr
 801481c:	e007ffff 	.word	0xe007ffff
 8014820:	fff80000 	.word	0xfff80000

08014824 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014824:	b480      	push	{r7}
 8014826:	b087      	sub	sp, #28
 8014828:	af00      	add	r7, sp, #0
 801482a:	6078      	str	r0, [r7, #4]
 801482c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801482e:	2300      	movs	r3, #0
 8014830:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8014832:	2300      	movs	r3, #0
 8014834:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801483a:	683b      	ldr	r3, [r7, #0]
 801483c:	785b      	ldrb	r3, [r3, #1]
 801483e:	2b01      	cmp	r3, #1
 8014840:	d14a      	bne.n	80148d8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014842:	683b      	ldr	r3, [r7, #0]
 8014844:	781b      	ldrb	r3, [r3, #0]
 8014846:	015a      	lsls	r2, r3, #5
 8014848:	693b      	ldr	r3, [r7, #16]
 801484a:	4413      	add	r3, r2
 801484c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014850:	681b      	ldr	r3, [r3, #0]
 8014852:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014856:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801485a:	f040 8086 	bne.w	801496a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801485e:	683b      	ldr	r3, [r7, #0]
 8014860:	781b      	ldrb	r3, [r3, #0]
 8014862:	015a      	lsls	r2, r3, #5
 8014864:	693b      	ldr	r3, [r7, #16]
 8014866:	4413      	add	r3, r2
 8014868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801486c:	681b      	ldr	r3, [r3, #0]
 801486e:	683a      	ldr	r2, [r7, #0]
 8014870:	7812      	ldrb	r2, [r2, #0]
 8014872:	0151      	lsls	r1, r2, #5
 8014874:	693a      	ldr	r2, [r7, #16]
 8014876:	440a      	add	r2, r1
 8014878:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801487c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014880:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8014882:	683b      	ldr	r3, [r7, #0]
 8014884:	781b      	ldrb	r3, [r3, #0]
 8014886:	015a      	lsls	r2, r3, #5
 8014888:	693b      	ldr	r3, [r7, #16]
 801488a:	4413      	add	r3, r2
 801488c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	683a      	ldr	r2, [r7, #0]
 8014894:	7812      	ldrb	r2, [r2, #0]
 8014896:	0151      	lsls	r1, r2, #5
 8014898:	693a      	ldr	r2, [r7, #16]
 801489a:	440a      	add	r2, r1
 801489c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80148a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80148a4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	3301      	adds	r3, #1
 80148aa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80148ac:	68fb      	ldr	r3, [r7, #12]
 80148ae:	f242 7210 	movw	r2, #10000	; 0x2710
 80148b2:	4293      	cmp	r3, r2
 80148b4:	d902      	bls.n	80148bc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80148b6:	2301      	movs	r3, #1
 80148b8:	75fb      	strb	r3, [r7, #23]
          break;
 80148ba:	e056      	b.n	801496a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80148bc:	683b      	ldr	r3, [r7, #0]
 80148be:	781b      	ldrb	r3, [r3, #0]
 80148c0:	015a      	lsls	r2, r3, #5
 80148c2:	693b      	ldr	r3, [r7, #16]
 80148c4:	4413      	add	r3, r2
 80148c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80148ca:	681b      	ldr	r3, [r3, #0]
 80148cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80148d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80148d4:	d0e7      	beq.n	80148a6 <USB_EPStopXfer+0x82>
 80148d6:	e048      	b.n	801496a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80148d8:	683b      	ldr	r3, [r7, #0]
 80148da:	781b      	ldrb	r3, [r3, #0]
 80148dc:	015a      	lsls	r2, r3, #5
 80148de:	693b      	ldr	r3, [r7, #16]
 80148e0:	4413      	add	r3, r2
 80148e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80148ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80148f0:	d13b      	bne.n	801496a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80148f2:	683b      	ldr	r3, [r7, #0]
 80148f4:	781b      	ldrb	r3, [r3, #0]
 80148f6:	015a      	lsls	r2, r3, #5
 80148f8:	693b      	ldr	r3, [r7, #16]
 80148fa:	4413      	add	r3, r2
 80148fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	683a      	ldr	r2, [r7, #0]
 8014904:	7812      	ldrb	r2, [r2, #0]
 8014906:	0151      	lsls	r1, r2, #5
 8014908:	693a      	ldr	r2, [r7, #16]
 801490a:	440a      	add	r2, r1
 801490c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014910:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014914:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8014916:	683b      	ldr	r3, [r7, #0]
 8014918:	781b      	ldrb	r3, [r3, #0]
 801491a:	015a      	lsls	r2, r3, #5
 801491c:	693b      	ldr	r3, [r7, #16]
 801491e:	4413      	add	r3, r2
 8014920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	683a      	ldr	r2, [r7, #0]
 8014928:	7812      	ldrb	r2, [r2, #0]
 801492a:	0151      	lsls	r1, r2, #5
 801492c:	693a      	ldr	r2, [r7, #16]
 801492e:	440a      	add	r2, r1
 8014930:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014934:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014938:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	3301      	adds	r3, #1
 801493e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	f242 7210 	movw	r2, #10000	; 0x2710
 8014946:	4293      	cmp	r3, r2
 8014948:	d902      	bls.n	8014950 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801494a:	2301      	movs	r3, #1
 801494c:	75fb      	strb	r3, [r7, #23]
          break;
 801494e:	e00c      	b.n	801496a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8014950:	683b      	ldr	r3, [r7, #0]
 8014952:	781b      	ldrb	r3, [r3, #0]
 8014954:	015a      	lsls	r2, r3, #5
 8014956:	693b      	ldr	r3, [r7, #16]
 8014958:	4413      	add	r3, r2
 801495a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014964:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014968:	d0e7      	beq.n	801493a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801496a:	7dfb      	ldrb	r3, [r7, #23]
}
 801496c:	4618      	mov	r0, r3
 801496e:	371c      	adds	r7, #28
 8014970:	46bd      	mov	sp, r7
 8014972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014976:	4770      	bx	lr

08014978 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8014978:	b480      	push	{r7}
 801497a:	b089      	sub	sp, #36	; 0x24
 801497c:	af00      	add	r7, sp, #0
 801497e:	60f8      	str	r0, [r7, #12]
 8014980:	60b9      	str	r1, [r7, #8]
 8014982:	4611      	mov	r1, r2
 8014984:	461a      	mov	r2, r3
 8014986:	460b      	mov	r3, r1
 8014988:	71fb      	strb	r3, [r7, #7]
 801498a:	4613      	mov	r3, r2
 801498c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8014992:	68bb      	ldr	r3, [r7, #8]
 8014994:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8014996:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801499a:	2b00      	cmp	r3, #0
 801499c:	d123      	bne.n	80149e6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801499e:	88bb      	ldrh	r3, [r7, #4]
 80149a0:	3303      	adds	r3, #3
 80149a2:	089b      	lsrs	r3, r3, #2
 80149a4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80149a6:	2300      	movs	r3, #0
 80149a8:	61bb      	str	r3, [r7, #24]
 80149aa:	e018      	b.n	80149de <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80149ac:	79fb      	ldrb	r3, [r7, #7]
 80149ae:	031a      	lsls	r2, r3, #12
 80149b0:	697b      	ldr	r3, [r7, #20]
 80149b2:	4413      	add	r3, r2
 80149b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80149b8:	461a      	mov	r2, r3
 80149ba:	69fb      	ldr	r3, [r7, #28]
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	6013      	str	r3, [r2, #0]
      pSrc++;
 80149c0:	69fb      	ldr	r3, [r7, #28]
 80149c2:	3301      	adds	r3, #1
 80149c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80149c6:	69fb      	ldr	r3, [r7, #28]
 80149c8:	3301      	adds	r3, #1
 80149ca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80149cc:	69fb      	ldr	r3, [r7, #28]
 80149ce:	3301      	adds	r3, #1
 80149d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80149d2:	69fb      	ldr	r3, [r7, #28]
 80149d4:	3301      	adds	r3, #1
 80149d6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80149d8:	69bb      	ldr	r3, [r7, #24]
 80149da:	3301      	adds	r3, #1
 80149dc:	61bb      	str	r3, [r7, #24]
 80149de:	69ba      	ldr	r2, [r7, #24]
 80149e0:	693b      	ldr	r3, [r7, #16]
 80149e2:	429a      	cmp	r2, r3
 80149e4:	d3e2      	bcc.n	80149ac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80149e6:	2300      	movs	r3, #0
}
 80149e8:	4618      	mov	r0, r3
 80149ea:	3724      	adds	r7, #36	; 0x24
 80149ec:	46bd      	mov	sp, r7
 80149ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149f2:	4770      	bx	lr

080149f4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80149f4:	b480      	push	{r7}
 80149f6:	b08b      	sub	sp, #44	; 0x2c
 80149f8:	af00      	add	r7, sp, #0
 80149fa:	60f8      	str	r0, [r7, #12]
 80149fc:	60b9      	str	r1, [r7, #8]
 80149fe:	4613      	mov	r3, r2
 8014a00:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8014a06:	68bb      	ldr	r3, [r7, #8]
 8014a08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8014a0a:	88fb      	ldrh	r3, [r7, #6]
 8014a0c:	089b      	lsrs	r3, r3, #2
 8014a0e:	b29b      	uxth	r3, r3
 8014a10:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8014a12:	88fb      	ldrh	r3, [r7, #6]
 8014a14:	f003 0303 	and.w	r3, r3, #3
 8014a18:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8014a1a:	2300      	movs	r3, #0
 8014a1c:	623b      	str	r3, [r7, #32]
 8014a1e:	e014      	b.n	8014a4a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8014a20:	69bb      	ldr	r3, [r7, #24]
 8014a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014a26:	681a      	ldr	r2, [r3, #0]
 8014a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a2a:	601a      	str	r2, [r3, #0]
    pDest++;
 8014a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a2e:	3301      	adds	r3, #1
 8014a30:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a34:	3301      	adds	r3, #1
 8014a36:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a3a:	3301      	adds	r3, #1
 8014a3c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a40:	3301      	adds	r3, #1
 8014a42:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8014a44:	6a3b      	ldr	r3, [r7, #32]
 8014a46:	3301      	adds	r3, #1
 8014a48:	623b      	str	r3, [r7, #32]
 8014a4a:	6a3a      	ldr	r2, [r7, #32]
 8014a4c:	697b      	ldr	r3, [r7, #20]
 8014a4e:	429a      	cmp	r2, r3
 8014a50:	d3e6      	bcc.n	8014a20 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8014a52:	8bfb      	ldrh	r3, [r7, #30]
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d01e      	beq.n	8014a96 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8014a58:	2300      	movs	r3, #0
 8014a5a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8014a5c:	69bb      	ldr	r3, [r7, #24]
 8014a5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014a62:	461a      	mov	r2, r3
 8014a64:	f107 0310 	add.w	r3, r7, #16
 8014a68:	6812      	ldr	r2, [r2, #0]
 8014a6a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8014a6c:	693a      	ldr	r2, [r7, #16]
 8014a6e:	6a3b      	ldr	r3, [r7, #32]
 8014a70:	b2db      	uxtb	r3, r3
 8014a72:	00db      	lsls	r3, r3, #3
 8014a74:	fa22 f303 	lsr.w	r3, r2, r3
 8014a78:	b2da      	uxtb	r2, r3
 8014a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a7c:	701a      	strb	r2, [r3, #0]
      i++;
 8014a7e:	6a3b      	ldr	r3, [r7, #32]
 8014a80:	3301      	adds	r3, #1
 8014a82:	623b      	str	r3, [r7, #32]
      pDest++;
 8014a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a86:	3301      	adds	r3, #1
 8014a88:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8014a8a:	8bfb      	ldrh	r3, [r7, #30]
 8014a8c:	3b01      	subs	r3, #1
 8014a8e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8014a90:	8bfb      	ldrh	r3, [r7, #30]
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d1ea      	bne.n	8014a6c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8014a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014a98:	4618      	mov	r0, r3
 8014a9a:	372c      	adds	r7, #44	; 0x2c
 8014a9c:	46bd      	mov	sp, r7
 8014a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aa2:	4770      	bx	lr

08014aa4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014aa4:	b480      	push	{r7}
 8014aa6:	b085      	sub	sp, #20
 8014aa8:	af00      	add	r7, sp, #0
 8014aaa:	6078      	str	r0, [r7, #4]
 8014aac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014ab2:	683b      	ldr	r3, [r7, #0]
 8014ab4:	781b      	ldrb	r3, [r3, #0]
 8014ab6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014ab8:	683b      	ldr	r3, [r7, #0]
 8014aba:	785b      	ldrb	r3, [r3, #1]
 8014abc:	2b01      	cmp	r3, #1
 8014abe:	d12c      	bne.n	8014b1a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014ac0:	68bb      	ldr	r3, [r7, #8]
 8014ac2:	015a      	lsls	r2, r3, #5
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	4413      	add	r3, r2
 8014ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	db12      	blt.n	8014af8 <USB_EPSetStall+0x54>
 8014ad2:	68bb      	ldr	r3, [r7, #8]
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d00f      	beq.n	8014af8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8014ad8:	68bb      	ldr	r3, [r7, #8]
 8014ada:	015a      	lsls	r2, r3, #5
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	4413      	add	r3, r2
 8014ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	68ba      	ldr	r2, [r7, #8]
 8014ae8:	0151      	lsls	r1, r2, #5
 8014aea:	68fa      	ldr	r2, [r7, #12]
 8014aec:	440a      	add	r2, r1
 8014aee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014af2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014af6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8014af8:	68bb      	ldr	r3, [r7, #8]
 8014afa:	015a      	lsls	r2, r3, #5
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	4413      	add	r3, r2
 8014b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	68ba      	ldr	r2, [r7, #8]
 8014b08:	0151      	lsls	r1, r2, #5
 8014b0a:	68fa      	ldr	r2, [r7, #12]
 8014b0c:	440a      	add	r2, r1
 8014b0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014b12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014b16:	6013      	str	r3, [r2, #0]
 8014b18:	e02b      	b.n	8014b72 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014b1a:	68bb      	ldr	r3, [r7, #8]
 8014b1c:	015a      	lsls	r2, r3, #5
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	4413      	add	r3, r2
 8014b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b26:	681b      	ldr	r3, [r3, #0]
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	db12      	blt.n	8014b52 <USB_EPSetStall+0xae>
 8014b2c:	68bb      	ldr	r3, [r7, #8]
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d00f      	beq.n	8014b52 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8014b32:	68bb      	ldr	r3, [r7, #8]
 8014b34:	015a      	lsls	r2, r3, #5
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	4413      	add	r3, r2
 8014b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b3e:	681b      	ldr	r3, [r3, #0]
 8014b40:	68ba      	ldr	r2, [r7, #8]
 8014b42:	0151      	lsls	r1, r2, #5
 8014b44:	68fa      	ldr	r2, [r7, #12]
 8014b46:	440a      	add	r2, r1
 8014b48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014b4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014b50:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8014b52:	68bb      	ldr	r3, [r7, #8]
 8014b54:	015a      	lsls	r2, r3, #5
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	4413      	add	r3, r2
 8014b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	68ba      	ldr	r2, [r7, #8]
 8014b62:	0151      	lsls	r1, r2, #5
 8014b64:	68fa      	ldr	r2, [r7, #12]
 8014b66:	440a      	add	r2, r1
 8014b68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014b6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014b70:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014b72:	2300      	movs	r3, #0
}
 8014b74:	4618      	mov	r0, r3
 8014b76:	3714      	adds	r7, #20
 8014b78:	46bd      	mov	sp, r7
 8014b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b7e:	4770      	bx	lr

08014b80 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014b80:	b480      	push	{r7}
 8014b82:	b085      	sub	sp, #20
 8014b84:	af00      	add	r7, sp, #0
 8014b86:	6078      	str	r0, [r7, #4]
 8014b88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014b8e:	683b      	ldr	r3, [r7, #0]
 8014b90:	781b      	ldrb	r3, [r3, #0]
 8014b92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014b94:	683b      	ldr	r3, [r7, #0]
 8014b96:	785b      	ldrb	r3, [r3, #1]
 8014b98:	2b01      	cmp	r3, #1
 8014b9a:	d128      	bne.n	8014bee <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8014b9c:	68bb      	ldr	r3, [r7, #8]
 8014b9e:	015a      	lsls	r2, r3, #5
 8014ba0:	68fb      	ldr	r3, [r7, #12]
 8014ba2:	4413      	add	r3, r2
 8014ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014ba8:	681b      	ldr	r3, [r3, #0]
 8014baa:	68ba      	ldr	r2, [r7, #8]
 8014bac:	0151      	lsls	r1, r2, #5
 8014bae:	68fa      	ldr	r2, [r7, #12]
 8014bb0:	440a      	add	r2, r1
 8014bb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014bb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014bba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014bbc:	683b      	ldr	r3, [r7, #0]
 8014bbe:	791b      	ldrb	r3, [r3, #4]
 8014bc0:	2b03      	cmp	r3, #3
 8014bc2:	d003      	beq.n	8014bcc <USB_EPClearStall+0x4c>
 8014bc4:	683b      	ldr	r3, [r7, #0]
 8014bc6:	791b      	ldrb	r3, [r3, #4]
 8014bc8:	2b02      	cmp	r3, #2
 8014bca:	d138      	bne.n	8014c3e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014bcc:	68bb      	ldr	r3, [r7, #8]
 8014bce:	015a      	lsls	r2, r3, #5
 8014bd0:	68fb      	ldr	r3, [r7, #12]
 8014bd2:	4413      	add	r3, r2
 8014bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014bd8:	681b      	ldr	r3, [r3, #0]
 8014bda:	68ba      	ldr	r2, [r7, #8]
 8014bdc:	0151      	lsls	r1, r2, #5
 8014bde:	68fa      	ldr	r2, [r7, #12]
 8014be0:	440a      	add	r2, r1
 8014be2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014bea:	6013      	str	r3, [r2, #0]
 8014bec:	e027      	b.n	8014c3e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8014bee:	68bb      	ldr	r3, [r7, #8]
 8014bf0:	015a      	lsls	r2, r3, #5
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	4413      	add	r3, r2
 8014bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014bfa:	681b      	ldr	r3, [r3, #0]
 8014bfc:	68ba      	ldr	r2, [r7, #8]
 8014bfe:	0151      	lsls	r1, r2, #5
 8014c00:	68fa      	ldr	r2, [r7, #12]
 8014c02:	440a      	add	r2, r1
 8014c04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014c08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014c0c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014c0e:	683b      	ldr	r3, [r7, #0]
 8014c10:	791b      	ldrb	r3, [r3, #4]
 8014c12:	2b03      	cmp	r3, #3
 8014c14:	d003      	beq.n	8014c1e <USB_EPClearStall+0x9e>
 8014c16:	683b      	ldr	r3, [r7, #0]
 8014c18:	791b      	ldrb	r3, [r3, #4]
 8014c1a:	2b02      	cmp	r3, #2
 8014c1c:	d10f      	bne.n	8014c3e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014c1e:	68bb      	ldr	r3, [r7, #8]
 8014c20:	015a      	lsls	r2, r3, #5
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	4413      	add	r3, r2
 8014c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	68ba      	ldr	r2, [r7, #8]
 8014c2e:	0151      	lsls	r1, r2, #5
 8014c30:	68fa      	ldr	r2, [r7, #12]
 8014c32:	440a      	add	r2, r1
 8014c34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014c3c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8014c3e:	2300      	movs	r3, #0
}
 8014c40:	4618      	mov	r0, r3
 8014c42:	3714      	adds	r7, #20
 8014c44:	46bd      	mov	sp, r7
 8014c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c4a:	4770      	bx	lr

08014c4c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8014c4c:	b480      	push	{r7}
 8014c4e:	b085      	sub	sp, #20
 8014c50:	af00      	add	r7, sp, #0
 8014c52:	6078      	str	r0, [r7, #4]
 8014c54:	460b      	mov	r3, r1
 8014c56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	68fa      	ldr	r2, [r7, #12]
 8014c66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014c6a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8014c6e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014c76:	681a      	ldr	r2, [r3, #0]
 8014c78:	78fb      	ldrb	r3, [r7, #3]
 8014c7a:	011b      	lsls	r3, r3, #4
 8014c7c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8014c80:	68f9      	ldr	r1, [r7, #12]
 8014c82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014c86:	4313      	orrs	r3, r2
 8014c88:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8014c8a:	2300      	movs	r3, #0
}
 8014c8c:	4618      	mov	r0, r3
 8014c8e:	3714      	adds	r7, #20
 8014c90:	46bd      	mov	sp, r7
 8014c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c96:	4770      	bx	lr

08014c98 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014c98:	b480      	push	{r7}
 8014c9a:	b085      	sub	sp, #20
 8014c9c:	af00      	add	r7, sp, #0
 8014c9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014caa:	681b      	ldr	r3, [r3, #0]
 8014cac:	68fa      	ldr	r2, [r7, #12]
 8014cae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014cb2:	f023 0303 	bic.w	r3, r3, #3
 8014cb6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014cbe:	685b      	ldr	r3, [r3, #4]
 8014cc0:	68fa      	ldr	r2, [r7, #12]
 8014cc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014cc6:	f023 0302 	bic.w	r3, r3, #2
 8014cca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014ccc:	2300      	movs	r3, #0
}
 8014cce:	4618      	mov	r0, r3
 8014cd0:	3714      	adds	r7, #20
 8014cd2:	46bd      	mov	sp, r7
 8014cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cd8:	4770      	bx	lr

08014cda <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014cda:	b480      	push	{r7}
 8014cdc:	b085      	sub	sp, #20
 8014cde:	af00      	add	r7, sp, #0
 8014ce0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	68fa      	ldr	r2, [r7, #12]
 8014cf0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014cf4:	f023 0303 	bic.w	r3, r3, #3
 8014cf8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014d00:	685b      	ldr	r3, [r3, #4]
 8014d02:	68fa      	ldr	r2, [r7, #12]
 8014d04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014d08:	f043 0302 	orr.w	r3, r3, #2
 8014d0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014d0e:	2300      	movs	r3, #0
}
 8014d10:	4618      	mov	r0, r3
 8014d12:	3714      	adds	r7, #20
 8014d14:	46bd      	mov	sp, r7
 8014d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d1a:	4770      	bx	lr

08014d1c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8014d1c:	b480      	push	{r7}
 8014d1e:	b085      	sub	sp, #20
 8014d20:	af00      	add	r7, sp, #0
 8014d22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	695b      	ldr	r3, [r3, #20]
 8014d28:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	699b      	ldr	r3, [r3, #24]
 8014d2e:	68fa      	ldr	r2, [r7, #12]
 8014d30:	4013      	ands	r3, r2
 8014d32:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8014d34:	68fb      	ldr	r3, [r7, #12]
}
 8014d36:	4618      	mov	r0, r3
 8014d38:	3714      	adds	r7, #20
 8014d3a:	46bd      	mov	sp, r7
 8014d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d40:	4770      	bx	lr

08014d42 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014d42:	b480      	push	{r7}
 8014d44:	b085      	sub	sp, #20
 8014d46:	af00      	add	r7, sp, #0
 8014d48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014d4e:	68fb      	ldr	r3, [r7, #12]
 8014d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014d54:	699b      	ldr	r3, [r3, #24]
 8014d56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014d58:	68fb      	ldr	r3, [r7, #12]
 8014d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014d5e:	69db      	ldr	r3, [r3, #28]
 8014d60:	68ba      	ldr	r2, [r7, #8]
 8014d62:	4013      	ands	r3, r2
 8014d64:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8014d66:	68bb      	ldr	r3, [r7, #8]
 8014d68:	0c1b      	lsrs	r3, r3, #16
}
 8014d6a:	4618      	mov	r0, r3
 8014d6c:	3714      	adds	r7, #20
 8014d6e:	46bd      	mov	sp, r7
 8014d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d74:	4770      	bx	lr

08014d76 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014d76:	b480      	push	{r7}
 8014d78:	b085      	sub	sp, #20
 8014d7a:	af00      	add	r7, sp, #0
 8014d7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014d88:	699b      	ldr	r3, [r3, #24]
 8014d8a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014d92:	69db      	ldr	r3, [r3, #28]
 8014d94:	68ba      	ldr	r2, [r7, #8]
 8014d96:	4013      	ands	r3, r2
 8014d98:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8014d9a:	68bb      	ldr	r3, [r7, #8]
 8014d9c:	b29b      	uxth	r3, r3
}
 8014d9e:	4618      	mov	r0, r3
 8014da0:	3714      	adds	r7, #20
 8014da2:	46bd      	mov	sp, r7
 8014da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014da8:	4770      	bx	lr

08014daa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014daa:	b480      	push	{r7}
 8014dac:	b085      	sub	sp, #20
 8014dae:	af00      	add	r7, sp, #0
 8014db0:	6078      	str	r0, [r7, #4]
 8014db2:	460b      	mov	r3, r1
 8014db4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8014dba:	78fb      	ldrb	r3, [r7, #3]
 8014dbc:	015a      	lsls	r2, r3, #5
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	4413      	add	r3, r2
 8014dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014dc6:	689b      	ldr	r3, [r3, #8]
 8014dc8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014dd0:	695b      	ldr	r3, [r3, #20]
 8014dd2:	68ba      	ldr	r2, [r7, #8]
 8014dd4:	4013      	ands	r3, r2
 8014dd6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014dd8:	68bb      	ldr	r3, [r7, #8]
}
 8014dda:	4618      	mov	r0, r3
 8014ddc:	3714      	adds	r7, #20
 8014dde:	46bd      	mov	sp, r7
 8014de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014de4:	4770      	bx	lr

08014de6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014de6:	b480      	push	{r7}
 8014de8:	b087      	sub	sp, #28
 8014dea:	af00      	add	r7, sp, #0
 8014dec:	6078      	str	r0, [r7, #4]
 8014dee:	460b      	mov	r3, r1
 8014df0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8014df6:	697b      	ldr	r3, [r7, #20]
 8014df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014dfc:	691b      	ldr	r3, [r3, #16]
 8014dfe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8014e00:	697b      	ldr	r3, [r7, #20]
 8014e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014e08:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8014e0a:	78fb      	ldrb	r3, [r7, #3]
 8014e0c:	f003 030f 	and.w	r3, r3, #15
 8014e10:	68fa      	ldr	r2, [r7, #12]
 8014e12:	fa22 f303 	lsr.w	r3, r2, r3
 8014e16:	01db      	lsls	r3, r3, #7
 8014e18:	b2db      	uxtb	r3, r3
 8014e1a:	693a      	ldr	r2, [r7, #16]
 8014e1c:	4313      	orrs	r3, r2
 8014e1e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8014e20:	78fb      	ldrb	r3, [r7, #3]
 8014e22:	015a      	lsls	r2, r3, #5
 8014e24:	697b      	ldr	r3, [r7, #20]
 8014e26:	4413      	add	r3, r2
 8014e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014e2c:	689b      	ldr	r3, [r3, #8]
 8014e2e:	693a      	ldr	r2, [r7, #16]
 8014e30:	4013      	ands	r3, r2
 8014e32:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014e34:	68bb      	ldr	r3, [r7, #8]
}
 8014e36:	4618      	mov	r0, r3
 8014e38:	371c      	adds	r7, #28
 8014e3a:	46bd      	mov	sp, r7
 8014e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e40:	4770      	bx	lr

08014e42 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8014e42:	b480      	push	{r7}
 8014e44:	b083      	sub	sp, #12
 8014e46:	af00      	add	r7, sp, #0
 8014e48:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	695b      	ldr	r3, [r3, #20]
 8014e4e:	f003 0301 	and.w	r3, r3, #1
}
 8014e52:	4618      	mov	r0, r3
 8014e54:	370c      	adds	r7, #12
 8014e56:	46bd      	mov	sp, r7
 8014e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e5c:	4770      	bx	lr
	...

08014e60 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8014e60:	b480      	push	{r7}
 8014e62:	b085      	sub	sp, #20
 8014e64:	af00      	add	r7, sp, #0
 8014e66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8014e6c:	68fb      	ldr	r3, [r7, #12]
 8014e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014e72:	681a      	ldr	r2, [r3, #0]
 8014e74:	68fb      	ldr	r3, [r7, #12]
 8014e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014e7a:	4619      	mov	r1, r3
 8014e7c:	4b09      	ldr	r3, [pc, #36]	; (8014ea4 <USB_ActivateSetup+0x44>)
 8014e7e:	4013      	ands	r3, r2
 8014e80:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8014e82:	68fb      	ldr	r3, [r7, #12]
 8014e84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014e88:	685b      	ldr	r3, [r3, #4]
 8014e8a:	68fa      	ldr	r2, [r7, #12]
 8014e8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014e94:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014e96:	2300      	movs	r3, #0
}
 8014e98:	4618      	mov	r0, r3
 8014e9a:	3714      	adds	r7, #20
 8014e9c:	46bd      	mov	sp, r7
 8014e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ea2:	4770      	bx	lr
 8014ea4:	fffff800 	.word	0xfffff800

08014ea8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8014ea8:	b480      	push	{r7}
 8014eaa:	b087      	sub	sp, #28
 8014eac:	af00      	add	r7, sp, #0
 8014eae:	60f8      	str	r0, [r7, #12]
 8014eb0:	460b      	mov	r3, r1
 8014eb2:	607a      	str	r2, [r7, #4]
 8014eb4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8014eba:	68fb      	ldr	r3, [r7, #12]
 8014ebc:	333c      	adds	r3, #60	; 0x3c
 8014ebe:	3304      	adds	r3, #4
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8014ec4:	693b      	ldr	r3, [r7, #16]
 8014ec6:	4a26      	ldr	r2, [pc, #152]	; (8014f60 <USB_EP0_OutStart+0xb8>)
 8014ec8:	4293      	cmp	r3, r2
 8014eca:	d90a      	bls.n	8014ee2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014ecc:	697b      	ldr	r3, [r7, #20]
 8014ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014ed8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014edc:	d101      	bne.n	8014ee2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8014ede:	2300      	movs	r3, #0
 8014ee0:	e037      	b.n	8014f52 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8014ee2:	697b      	ldr	r3, [r7, #20]
 8014ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014ee8:	461a      	mov	r2, r3
 8014eea:	2300      	movs	r3, #0
 8014eec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014eee:	697b      	ldr	r3, [r7, #20]
 8014ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014ef4:	691b      	ldr	r3, [r3, #16]
 8014ef6:	697a      	ldr	r2, [r7, #20]
 8014ef8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014efc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014f00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8014f02:	697b      	ldr	r3, [r7, #20]
 8014f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014f08:	691b      	ldr	r3, [r3, #16]
 8014f0a:	697a      	ldr	r2, [r7, #20]
 8014f0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014f10:	f043 0318 	orr.w	r3, r3, #24
 8014f14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8014f16:	697b      	ldr	r3, [r7, #20]
 8014f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014f1c:	691b      	ldr	r3, [r3, #16]
 8014f1e:	697a      	ldr	r2, [r7, #20]
 8014f20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014f24:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8014f28:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8014f2a:	7afb      	ldrb	r3, [r7, #11]
 8014f2c:	2b01      	cmp	r3, #1
 8014f2e:	d10f      	bne.n	8014f50 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8014f30:	697b      	ldr	r3, [r7, #20]
 8014f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014f36:	461a      	mov	r2, r3
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8014f3c:	697b      	ldr	r3, [r7, #20]
 8014f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014f42:	681b      	ldr	r3, [r3, #0]
 8014f44:	697a      	ldr	r2, [r7, #20]
 8014f46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014f4a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8014f4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014f50:	2300      	movs	r3, #0
}
 8014f52:	4618      	mov	r0, r3
 8014f54:	371c      	adds	r7, #28
 8014f56:	46bd      	mov	sp, r7
 8014f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f5c:	4770      	bx	lr
 8014f5e:	bf00      	nop
 8014f60:	4f54300a 	.word	0x4f54300a

08014f64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8014f64:	b480      	push	{r7}
 8014f66:	b085      	sub	sp, #20
 8014f68:	af00      	add	r7, sp, #0
 8014f6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014f6c:	2300      	movs	r3, #0
 8014f6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014f70:	68fb      	ldr	r3, [r7, #12]
 8014f72:	3301      	adds	r3, #1
 8014f74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014f76:	68fb      	ldr	r3, [r7, #12]
 8014f78:	4a13      	ldr	r2, [pc, #76]	; (8014fc8 <USB_CoreReset+0x64>)
 8014f7a:	4293      	cmp	r3, r2
 8014f7c:	d901      	bls.n	8014f82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8014f7e:	2303      	movs	r3, #3
 8014f80:	e01b      	b.n	8014fba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	691b      	ldr	r3, [r3, #16]
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	daf2      	bge.n	8014f70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8014f8a:	2300      	movs	r3, #0
 8014f8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	691b      	ldr	r3, [r3, #16]
 8014f92:	f043 0201 	orr.w	r2, r3, #1
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	3301      	adds	r3, #1
 8014f9e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	4a09      	ldr	r2, [pc, #36]	; (8014fc8 <USB_CoreReset+0x64>)
 8014fa4:	4293      	cmp	r3, r2
 8014fa6:	d901      	bls.n	8014fac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8014fa8:	2303      	movs	r3, #3
 8014faa:	e006      	b.n	8014fba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	691b      	ldr	r3, [r3, #16]
 8014fb0:	f003 0301 	and.w	r3, r3, #1
 8014fb4:	2b01      	cmp	r3, #1
 8014fb6:	d0f0      	beq.n	8014f9a <USB_CoreReset+0x36>

  return HAL_OK;
 8014fb8:	2300      	movs	r3, #0
}
 8014fba:	4618      	mov	r0, r3
 8014fbc:	3714      	adds	r7, #20
 8014fbe:	46bd      	mov	sp, r7
 8014fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fc4:	4770      	bx	lr
 8014fc6:	bf00      	nop
 8014fc8:	00030d40 	.word	0x00030d40

08014fcc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014fcc:	b580      	push	{r7, lr}
 8014fce:	b084      	sub	sp, #16
 8014fd0:	af00      	add	r7, sp, #0
 8014fd2:	6078      	str	r0, [r7, #4]
 8014fd4:	460b      	mov	r3, r1
 8014fd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014fd8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8014fdc:	f002 fc4c 	bl	8017878 <USBD_static_malloc>
 8014fe0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8014fe2:	68fb      	ldr	r3, [r7, #12]
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d109      	bne.n	8014ffc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	32b0      	adds	r2, #176	; 0xb0
 8014ff2:	2100      	movs	r1, #0
 8014ff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8014ff8:	2302      	movs	r3, #2
 8014ffa:	e0d4      	b.n	80151a6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8014ffc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8015000:	2100      	movs	r1, #0
 8015002:	68f8      	ldr	r0, [r7, #12]
 8015004:	f002 fcb4 	bl	8017970 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	32b0      	adds	r2, #176	; 0xb0
 8015012:	68f9      	ldr	r1, [r7, #12]
 8015014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	32b0      	adds	r2, #176	; 0xb0
 8015022:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	7c1b      	ldrb	r3, [r3, #16]
 8015030:	2b00      	cmp	r3, #0
 8015032:	d138      	bne.n	80150a6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015034:	4b5e      	ldr	r3, [pc, #376]	; (80151b0 <USBD_CDC_Init+0x1e4>)
 8015036:	7819      	ldrb	r1, [r3, #0]
 8015038:	f44f 7300 	mov.w	r3, #512	; 0x200
 801503c:	2202      	movs	r2, #2
 801503e:	6878      	ldr	r0, [r7, #4]
 8015040:	f002 faf7 	bl	8017632 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015044:	4b5a      	ldr	r3, [pc, #360]	; (80151b0 <USBD_CDC_Init+0x1e4>)
 8015046:	781b      	ldrb	r3, [r3, #0]
 8015048:	f003 020f 	and.w	r2, r3, #15
 801504c:	6879      	ldr	r1, [r7, #4]
 801504e:	4613      	mov	r3, r2
 8015050:	009b      	lsls	r3, r3, #2
 8015052:	4413      	add	r3, r2
 8015054:	009b      	lsls	r3, r3, #2
 8015056:	440b      	add	r3, r1
 8015058:	3324      	adds	r3, #36	; 0x24
 801505a:	2201      	movs	r2, #1
 801505c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801505e:	4b55      	ldr	r3, [pc, #340]	; (80151b4 <USBD_CDC_Init+0x1e8>)
 8015060:	7819      	ldrb	r1, [r3, #0]
 8015062:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015066:	2202      	movs	r2, #2
 8015068:	6878      	ldr	r0, [r7, #4]
 801506a:	f002 fae2 	bl	8017632 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801506e:	4b51      	ldr	r3, [pc, #324]	; (80151b4 <USBD_CDC_Init+0x1e8>)
 8015070:	781b      	ldrb	r3, [r3, #0]
 8015072:	f003 020f 	and.w	r2, r3, #15
 8015076:	6879      	ldr	r1, [r7, #4]
 8015078:	4613      	mov	r3, r2
 801507a:	009b      	lsls	r3, r3, #2
 801507c:	4413      	add	r3, r2
 801507e:	009b      	lsls	r3, r3, #2
 8015080:	440b      	add	r3, r1
 8015082:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015086:	2201      	movs	r2, #1
 8015088:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801508a:	4b4b      	ldr	r3, [pc, #300]	; (80151b8 <USBD_CDC_Init+0x1ec>)
 801508c:	781b      	ldrb	r3, [r3, #0]
 801508e:	f003 020f 	and.w	r2, r3, #15
 8015092:	6879      	ldr	r1, [r7, #4]
 8015094:	4613      	mov	r3, r2
 8015096:	009b      	lsls	r3, r3, #2
 8015098:	4413      	add	r3, r2
 801509a:	009b      	lsls	r3, r3, #2
 801509c:	440b      	add	r3, r1
 801509e:	3326      	adds	r3, #38	; 0x26
 80150a0:	2210      	movs	r2, #16
 80150a2:	801a      	strh	r2, [r3, #0]
 80150a4:	e035      	b.n	8015112 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80150a6:	4b42      	ldr	r3, [pc, #264]	; (80151b0 <USBD_CDC_Init+0x1e4>)
 80150a8:	7819      	ldrb	r1, [r3, #0]
 80150aa:	2340      	movs	r3, #64	; 0x40
 80150ac:	2202      	movs	r2, #2
 80150ae:	6878      	ldr	r0, [r7, #4]
 80150b0:	f002 fabf 	bl	8017632 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80150b4:	4b3e      	ldr	r3, [pc, #248]	; (80151b0 <USBD_CDC_Init+0x1e4>)
 80150b6:	781b      	ldrb	r3, [r3, #0]
 80150b8:	f003 020f 	and.w	r2, r3, #15
 80150bc:	6879      	ldr	r1, [r7, #4]
 80150be:	4613      	mov	r3, r2
 80150c0:	009b      	lsls	r3, r3, #2
 80150c2:	4413      	add	r3, r2
 80150c4:	009b      	lsls	r3, r3, #2
 80150c6:	440b      	add	r3, r1
 80150c8:	3324      	adds	r3, #36	; 0x24
 80150ca:	2201      	movs	r2, #1
 80150cc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80150ce:	4b39      	ldr	r3, [pc, #228]	; (80151b4 <USBD_CDC_Init+0x1e8>)
 80150d0:	7819      	ldrb	r1, [r3, #0]
 80150d2:	2340      	movs	r3, #64	; 0x40
 80150d4:	2202      	movs	r2, #2
 80150d6:	6878      	ldr	r0, [r7, #4]
 80150d8:	f002 faab 	bl	8017632 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80150dc:	4b35      	ldr	r3, [pc, #212]	; (80151b4 <USBD_CDC_Init+0x1e8>)
 80150de:	781b      	ldrb	r3, [r3, #0]
 80150e0:	f003 020f 	and.w	r2, r3, #15
 80150e4:	6879      	ldr	r1, [r7, #4]
 80150e6:	4613      	mov	r3, r2
 80150e8:	009b      	lsls	r3, r3, #2
 80150ea:	4413      	add	r3, r2
 80150ec:	009b      	lsls	r3, r3, #2
 80150ee:	440b      	add	r3, r1
 80150f0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80150f4:	2201      	movs	r2, #1
 80150f6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80150f8:	4b2f      	ldr	r3, [pc, #188]	; (80151b8 <USBD_CDC_Init+0x1ec>)
 80150fa:	781b      	ldrb	r3, [r3, #0]
 80150fc:	f003 020f 	and.w	r2, r3, #15
 8015100:	6879      	ldr	r1, [r7, #4]
 8015102:	4613      	mov	r3, r2
 8015104:	009b      	lsls	r3, r3, #2
 8015106:	4413      	add	r3, r2
 8015108:	009b      	lsls	r3, r3, #2
 801510a:	440b      	add	r3, r1
 801510c:	3326      	adds	r3, #38	; 0x26
 801510e:	2210      	movs	r2, #16
 8015110:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8015112:	4b29      	ldr	r3, [pc, #164]	; (80151b8 <USBD_CDC_Init+0x1ec>)
 8015114:	7819      	ldrb	r1, [r3, #0]
 8015116:	2308      	movs	r3, #8
 8015118:	2203      	movs	r2, #3
 801511a:	6878      	ldr	r0, [r7, #4]
 801511c:	f002 fa89 	bl	8017632 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8015120:	4b25      	ldr	r3, [pc, #148]	; (80151b8 <USBD_CDC_Init+0x1ec>)
 8015122:	781b      	ldrb	r3, [r3, #0]
 8015124:	f003 020f 	and.w	r2, r3, #15
 8015128:	6879      	ldr	r1, [r7, #4]
 801512a:	4613      	mov	r3, r2
 801512c:	009b      	lsls	r3, r3, #2
 801512e:	4413      	add	r3, r2
 8015130:	009b      	lsls	r3, r3, #2
 8015132:	440b      	add	r3, r1
 8015134:	3324      	adds	r3, #36	; 0x24
 8015136:	2201      	movs	r2, #1
 8015138:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	2200      	movs	r2, #0
 801513e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015148:	687a      	ldr	r2, [r7, #4]
 801514a:	33b0      	adds	r3, #176	; 0xb0
 801514c:	009b      	lsls	r3, r3, #2
 801514e:	4413      	add	r3, r2
 8015150:	685b      	ldr	r3, [r3, #4]
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8015156:	68fb      	ldr	r3, [r7, #12]
 8015158:	2200      	movs	r2, #0
 801515a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	2200      	movs	r2, #0
 8015162:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8015166:	68fb      	ldr	r3, [r7, #12]
 8015168:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 801516c:	2b00      	cmp	r3, #0
 801516e:	d101      	bne.n	8015174 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8015170:	2302      	movs	r3, #2
 8015172:	e018      	b.n	80151a6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	7c1b      	ldrb	r3, [r3, #16]
 8015178:	2b00      	cmp	r3, #0
 801517a:	d10a      	bne.n	8015192 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801517c:	4b0d      	ldr	r3, [pc, #52]	; (80151b4 <USBD_CDC_Init+0x1e8>)
 801517e:	7819      	ldrb	r1, [r3, #0]
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015186:	f44f 7300 	mov.w	r3, #512	; 0x200
 801518a:	6878      	ldr	r0, [r7, #4]
 801518c:	f002 fb40 	bl	8017810 <USBD_LL_PrepareReceive>
 8015190:	e008      	b.n	80151a4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015192:	4b08      	ldr	r3, [pc, #32]	; (80151b4 <USBD_CDC_Init+0x1e8>)
 8015194:	7819      	ldrb	r1, [r3, #0]
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801519c:	2340      	movs	r3, #64	; 0x40
 801519e:	6878      	ldr	r0, [r7, #4]
 80151a0:	f002 fb36 	bl	8017810 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80151a4:	2300      	movs	r3, #0
}
 80151a6:	4618      	mov	r0, r3
 80151a8:	3710      	adds	r7, #16
 80151aa:	46bd      	mov	sp, r7
 80151ac:	bd80      	pop	{r7, pc}
 80151ae:	bf00      	nop
 80151b0:	200000ab 	.word	0x200000ab
 80151b4:	200000ac 	.word	0x200000ac
 80151b8:	200000ad 	.word	0x200000ad

080151bc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80151bc:	b580      	push	{r7, lr}
 80151be:	b082      	sub	sp, #8
 80151c0:	af00      	add	r7, sp, #0
 80151c2:	6078      	str	r0, [r7, #4]
 80151c4:	460b      	mov	r3, r1
 80151c6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80151c8:	4b3a      	ldr	r3, [pc, #232]	; (80152b4 <USBD_CDC_DeInit+0xf8>)
 80151ca:	781b      	ldrb	r3, [r3, #0]
 80151cc:	4619      	mov	r1, r3
 80151ce:	6878      	ldr	r0, [r7, #4]
 80151d0:	f002 fa55 	bl	801767e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80151d4:	4b37      	ldr	r3, [pc, #220]	; (80152b4 <USBD_CDC_DeInit+0xf8>)
 80151d6:	781b      	ldrb	r3, [r3, #0]
 80151d8:	f003 020f 	and.w	r2, r3, #15
 80151dc:	6879      	ldr	r1, [r7, #4]
 80151de:	4613      	mov	r3, r2
 80151e0:	009b      	lsls	r3, r3, #2
 80151e2:	4413      	add	r3, r2
 80151e4:	009b      	lsls	r3, r3, #2
 80151e6:	440b      	add	r3, r1
 80151e8:	3324      	adds	r3, #36	; 0x24
 80151ea:	2200      	movs	r2, #0
 80151ec:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80151ee:	4b32      	ldr	r3, [pc, #200]	; (80152b8 <USBD_CDC_DeInit+0xfc>)
 80151f0:	781b      	ldrb	r3, [r3, #0]
 80151f2:	4619      	mov	r1, r3
 80151f4:	6878      	ldr	r0, [r7, #4]
 80151f6:	f002 fa42 	bl	801767e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80151fa:	4b2f      	ldr	r3, [pc, #188]	; (80152b8 <USBD_CDC_DeInit+0xfc>)
 80151fc:	781b      	ldrb	r3, [r3, #0]
 80151fe:	f003 020f 	and.w	r2, r3, #15
 8015202:	6879      	ldr	r1, [r7, #4]
 8015204:	4613      	mov	r3, r2
 8015206:	009b      	lsls	r3, r3, #2
 8015208:	4413      	add	r3, r2
 801520a:	009b      	lsls	r3, r3, #2
 801520c:	440b      	add	r3, r1
 801520e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015212:	2200      	movs	r2, #0
 8015214:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8015216:	4b29      	ldr	r3, [pc, #164]	; (80152bc <USBD_CDC_DeInit+0x100>)
 8015218:	781b      	ldrb	r3, [r3, #0]
 801521a:	4619      	mov	r1, r3
 801521c:	6878      	ldr	r0, [r7, #4]
 801521e:	f002 fa2e 	bl	801767e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8015222:	4b26      	ldr	r3, [pc, #152]	; (80152bc <USBD_CDC_DeInit+0x100>)
 8015224:	781b      	ldrb	r3, [r3, #0]
 8015226:	f003 020f 	and.w	r2, r3, #15
 801522a:	6879      	ldr	r1, [r7, #4]
 801522c:	4613      	mov	r3, r2
 801522e:	009b      	lsls	r3, r3, #2
 8015230:	4413      	add	r3, r2
 8015232:	009b      	lsls	r3, r3, #2
 8015234:	440b      	add	r3, r1
 8015236:	3324      	adds	r3, #36	; 0x24
 8015238:	2200      	movs	r2, #0
 801523a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 801523c:	4b1f      	ldr	r3, [pc, #124]	; (80152bc <USBD_CDC_DeInit+0x100>)
 801523e:	781b      	ldrb	r3, [r3, #0]
 8015240:	f003 020f 	and.w	r2, r3, #15
 8015244:	6879      	ldr	r1, [r7, #4]
 8015246:	4613      	mov	r3, r2
 8015248:	009b      	lsls	r3, r3, #2
 801524a:	4413      	add	r3, r2
 801524c:	009b      	lsls	r3, r3, #2
 801524e:	440b      	add	r3, r1
 8015250:	3326      	adds	r3, #38	; 0x26
 8015252:	2200      	movs	r2, #0
 8015254:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	32b0      	adds	r2, #176	; 0xb0
 8015260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015264:	2b00      	cmp	r3, #0
 8015266:	d01f      	beq.n	80152a8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801526e:	687a      	ldr	r2, [r7, #4]
 8015270:	33b0      	adds	r3, #176	; 0xb0
 8015272:	009b      	lsls	r3, r3, #2
 8015274:	4413      	add	r3, r2
 8015276:	685b      	ldr	r3, [r3, #4]
 8015278:	685b      	ldr	r3, [r3, #4]
 801527a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	32b0      	adds	r2, #176	; 0xb0
 8015286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801528a:	4618      	mov	r0, r3
 801528c:	f002 fb02 	bl	8017894 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	32b0      	adds	r2, #176	; 0xb0
 801529a:	2100      	movs	r1, #0
 801529c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	2200      	movs	r2, #0
 80152a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80152a8:	2300      	movs	r3, #0
}
 80152aa:	4618      	mov	r0, r3
 80152ac:	3708      	adds	r7, #8
 80152ae:	46bd      	mov	sp, r7
 80152b0:	bd80      	pop	{r7, pc}
 80152b2:	bf00      	nop
 80152b4:	200000ab 	.word	0x200000ab
 80152b8:	200000ac 	.word	0x200000ac
 80152bc:	200000ad 	.word	0x200000ad

080152c0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80152c0:	b580      	push	{r7, lr}
 80152c2:	b086      	sub	sp, #24
 80152c4:	af00      	add	r7, sp, #0
 80152c6:	6078      	str	r0, [r7, #4]
 80152c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	32b0      	adds	r2, #176	; 0xb0
 80152d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152d8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80152da:	2300      	movs	r3, #0
 80152dc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80152de:	2300      	movs	r3, #0
 80152e0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80152e2:	2300      	movs	r3, #0
 80152e4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80152e6:	693b      	ldr	r3, [r7, #16]
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d101      	bne.n	80152f0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80152ec:	2303      	movs	r3, #3
 80152ee:	e0bf      	b.n	8015470 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80152f0:	683b      	ldr	r3, [r7, #0]
 80152f2:	781b      	ldrb	r3, [r3, #0]
 80152f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d050      	beq.n	801539e <USBD_CDC_Setup+0xde>
 80152fc:	2b20      	cmp	r3, #32
 80152fe:	f040 80af 	bne.w	8015460 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8015302:	683b      	ldr	r3, [r7, #0]
 8015304:	88db      	ldrh	r3, [r3, #6]
 8015306:	2b00      	cmp	r3, #0
 8015308:	d03a      	beq.n	8015380 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801530a:	683b      	ldr	r3, [r7, #0]
 801530c:	781b      	ldrb	r3, [r3, #0]
 801530e:	b25b      	sxtb	r3, r3
 8015310:	2b00      	cmp	r3, #0
 8015312:	da1b      	bge.n	801534c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801531a:	687a      	ldr	r2, [r7, #4]
 801531c:	33b0      	adds	r3, #176	; 0xb0
 801531e:	009b      	lsls	r3, r3, #2
 8015320:	4413      	add	r3, r2
 8015322:	685b      	ldr	r3, [r3, #4]
 8015324:	689b      	ldr	r3, [r3, #8]
 8015326:	683a      	ldr	r2, [r7, #0]
 8015328:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801532a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801532c:	683a      	ldr	r2, [r7, #0]
 801532e:	88d2      	ldrh	r2, [r2, #6]
 8015330:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8015332:	683b      	ldr	r3, [r7, #0]
 8015334:	88db      	ldrh	r3, [r3, #6]
 8015336:	2b07      	cmp	r3, #7
 8015338:	bf28      	it	cs
 801533a:	2307      	movcs	r3, #7
 801533c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801533e:	693b      	ldr	r3, [r7, #16]
 8015340:	89fa      	ldrh	r2, [r7, #14]
 8015342:	4619      	mov	r1, r3
 8015344:	6878      	ldr	r0, [r7, #4]
 8015346:	f001 fd43 	bl	8016dd0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801534a:	e090      	b.n	801546e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 801534c:	683b      	ldr	r3, [r7, #0]
 801534e:	785a      	ldrb	r2, [r3, #1]
 8015350:	693b      	ldr	r3, [r7, #16]
 8015352:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8015356:	683b      	ldr	r3, [r7, #0]
 8015358:	88db      	ldrh	r3, [r3, #6]
 801535a:	2b3f      	cmp	r3, #63	; 0x3f
 801535c:	d803      	bhi.n	8015366 <USBD_CDC_Setup+0xa6>
 801535e:	683b      	ldr	r3, [r7, #0]
 8015360:	88db      	ldrh	r3, [r3, #6]
 8015362:	b2da      	uxtb	r2, r3
 8015364:	e000      	b.n	8015368 <USBD_CDC_Setup+0xa8>
 8015366:	2240      	movs	r2, #64	; 0x40
 8015368:	693b      	ldr	r3, [r7, #16]
 801536a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801536e:	6939      	ldr	r1, [r7, #16]
 8015370:	693b      	ldr	r3, [r7, #16]
 8015372:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8015376:	461a      	mov	r2, r3
 8015378:	6878      	ldr	r0, [r7, #4]
 801537a:	f001 fd55 	bl	8016e28 <USBD_CtlPrepareRx>
      break;
 801537e:	e076      	b.n	801546e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015386:	687a      	ldr	r2, [r7, #4]
 8015388:	33b0      	adds	r3, #176	; 0xb0
 801538a:	009b      	lsls	r3, r3, #2
 801538c:	4413      	add	r3, r2
 801538e:	685b      	ldr	r3, [r3, #4]
 8015390:	689b      	ldr	r3, [r3, #8]
 8015392:	683a      	ldr	r2, [r7, #0]
 8015394:	7850      	ldrb	r0, [r2, #1]
 8015396:	2200      	movs	r2, #0
 8015398:	6839      	ldr	r1, [r7, #0]
 801539a:	4798      	blx	r3
      break;
 801539c:	e067      	b.n	801546e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801539e:	683b      	ldr	r3, [r7, #0]
 80153a0:	785b      	ldrb	r3, [r3, #1]
 80153a2:	2b0b      	cmp	r3, #11
 80153a4:	d851      	bhi.n	801544a <USBD_CDC_Setup+0x18a>
 80153a6:	a201      	add	r2, pc, #4	; (adr r2, 80153ac <USBD_CDC_Setup+0xec>)
 80153a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80153ac:	080153dd 	.word	0x080153dd
 80153b0:	08015459 	.word	0x08015459
 80153b4:	0801544b 	.word	0x0801544b
 80153b8:	0801544b 	.word	0x0801544b
 80153bc:	0801544b 	.word	0x0801544b
 80153c0:	0801544b 	.word	0x0801544b
 80153c4:	0801544b 	.word	0x0801544b
 80153c8:	0801544b 	.word	0x0801544b
 80153cc:	0801544b 	.word	0x0801544b
 80153d0:	0801544b 	.word	0x0801544b
 80153d4:	08015407 	.word	0x08015407
 80153d8:	08015431 	.word	0x08015431
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80153e2:	b2db      	uxtb	r3, r3
 80153e4:	2b03      	cmp	r3, #3
 80153e6:	d107      	bne.n	80153f8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80153e8:	f107 030a 	add.w	r3, r7, #10
 80153ec:	2202      	movs	r2, #2
 80153ee:	4619      	mov	r1, r3
 80153f0:	6878      	ldr	r0, [r7, #4]
 80153f2:	f001 fced 	bl	8016dd0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80153f6:	e032      	b.n	801545e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80153f8:	6839      	ldr	r1, [r7, #0]
 80153fa:	6878      	ldr	r0, [r7, #4]
 80153fc:	f001 fc77 	bl	8016cee <USBD_CtlError>
            ret = USBD_FAIL;
 8015400:	2303      	movs	r3, #3
 8015402:	75fb      	strb	r3, [r7, #23]
          break;
 8015404:	e02b      	b.n	801545e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801540c:	b2db      	uxtb	r3, r3
 801540e:	2b03      	cmp	r3, #3
 8015410:	d107      	bne.n	8015422 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8015412:	f107 030d 	add.w	r3, r7, #13
 8015416:	2201      	movs	r2, #1
 8015418:	4619      	mov	r1, r3
 801541a:	6878      	ldr	r0, [r7, #4]
 801541c:	f001 fcd8 	bl	8016dd0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015420:	e01d      	b.n	801545e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015422:	6839      	ldr	r1, [r7, #0]
 8015424:	6878      	ldr	r0, [r7, #4]
 8015426:	f001 fc62 	bl	8016cee <USBD_CtlError>
            ret = USBD_FAIL;
 801542a:	2303      	movs	r3, #3
 801542c:	75fb      	strb	r3, [r7, #23]
          break;
 801542e:	e016      	b.n	801545e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015436:	b2db      	uxtb	r3, r3
 8015438:	2b03      	cmp	r3, #3
 801543a:	d00f      	beq.n	801545c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 801543c:	6839      	ldr	r1, [r7, #0]
 801543e:	6878      	ldr	r0, [r7, #4]
 8015440:	f001 fc55 	bl	8016cee <USBD_CtlError>
            ret = USBD_FAIL;
 8015444:	2303      	movs	r3, #3
 8015446:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8015448:	e008      	b.n	801545c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801544a:	6839      	ldr	r1, [r7, #0]
 801544c:	6878      	ldr	r0, [r7, #4]
 801544e:	f001 fc4e 	bl	8016cee <USBD_CtlError>
          ret = USBD_FAIL;
 8015452:	2303      	movs	r3, #3
 8015454:	75fb      	strb	r3, [r7, #23]
          break;
 8015456:	e002      	b.n	801545e <USBD_CDC_Setup+0x19e>
          break;
 8015458:	bf00      	nop
 801545a:	e008      	b.n	801546e <USBD_CDC_Setup+0x1ae>
          break;
 801545c:	bf00      	nop
      }
      break;
 801545e:	e006      	b.n	801546e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8015460:	6839      	ldr	r1, [r7, #0]
 8015462:	6878      	ldr	r0, [r7, #4]
 8015464:	f001 fc43 	bl	8016cee <USBD_CtlError>
      ret = USBD_FAIL;
 8015468:	2303      	movs	r3, #3
 801546a:	75fb      	strb	r3, [r7, #23]
      break;
 801546c:	bf00      	nop
  }

  return (uint8_t)ret;
 801546e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015470:	4618      	mov	r0, r3
 8015472:	3718      	adds	r7, #24
 8015474:	46bd      	mov	sp, r7
 8015476:	bd80      	pop	{r7, pc}

08015478 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015478:	b580      	push	{r7, lr}
 801547a:	b084      	sub	sp, #16
 801547c:	af00      	add	r7, sp, #0
 801547e:	6078      	str	r0, [r7, #4]
 8015480:	460b      	mov	r3, r1
 8015482:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801548a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	32b0      	adds	r2, #176	; 0xb0
 8015496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801549a:	2b00      	cmp	r3, #0
 801549c:	d101      	bne.n	80154a2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801549e:	2303      	movs	r3, #3
 80154a0:	e065      	b.n	801556e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	32b0      	adds	r2, #176	; 0xb0
 80154ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154b0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80154b2:	78fb      	ldrb	r3, [r7, #3]
 80154b4:	f003 020f 	and.w	r2, r3, #15
 80154b8:	6879      	ldr	r1, [r7, #4]
 80154ba:	4613      	mov	r3, r2
 80154bc:	009b      	lsls	r3, r3, #2
 80154be:	4413      	add	r3, r2
 80154c0:	009b      	lsls	r3, r3, #2
 80154c2:	440b      	add	r3, r1
 80154c4:	3318      	adds	r3, #24
 80154c6:	681b      	ldr	r3, [r3, #0]
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	d02f      	beq.n	801552c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80154cc:	78fb      	ldrb	r3, [r7, #3]
 80154ce:	f003 020f 	and.w	r2, r3, #15
 80154d2:	6879      	ldr	r1, [r7, #4]
 80154d4:	4613      	mov	r3, r2
 80154d6:	009b      	lsls	r3, r3, #2
 80154d8:	4413      	add	r3, r2
 80154da:	009b      	lsls	r3, r3, #2
 80154dc:	440b      	add	r3, r1
 80154de:	3318      	adds	r3, #24
 80154e0:	681a      	ldr	r2, [r3, #0]
 80154e2:	78fb      	ldrb	r3, [r7, #3]
 80154e4:	f003 010f 	and.w	r1, r3, #15
 80154e8:	68f8      	ldr	r0, [r7, #12]
 80154ea:	460b      	mov	r3, r1
 80154ec:	00db      	lsls	r3, r3, #3
 80154ee:	440b      	add	r3, r1
 80154f0:	009b      	lsls	r3, r3, #2
 80154f2:	4403      	add	r3, r0
 80154f4:	3348      	adds	r3, #72	; 0x48
 80154f6:	681b      	ldr	r3, [r3, #0]
 80154f8:	fbb2 f1f3 	udiv	r1, r2, r3
 80154fc:	fb01 f303 	mul.w	r3, r1, r3
 8015500:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015502:	2b00      	cmp	r3, #0
 8015504:	d112      	bne.n	801552c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8015506:	78fb      	ldrb	r3, [r7, #3]
 8015508:	f003 020f 	and.w	r2, r3, #15
 801550c:	6879      	ldr	r1, [r7, #4]
 801550e:	4613      	mov	r3, r2
 8015510:	009b      	lsls	r3, r3, #2
 8015512:	4413      	add	r3, r2
 8015514:	009b      	lsls	r3, r3, #2
 8015516:	440b      	add	r3, r1
 8015518:	3318      	adds	r3, #24
 801551a:	2200      	movs	r2, #0
 801551c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801551e:	78f9      	ldrb	r1, [r7, #3]
 8015520:	2300      	movs	r3, #0
 8015522:	2200      	movs	r2, #0
 8015524:	6878      	ldr	r0, [r7, #4]
 8015526:	f002 f952 	bl	80177ce <USBD_LL_Transmit>
 801552a:	e01f      	b.n	801556c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 801552c:	68bb      	ldr	r3, [r7, #8]
 801552e:	2200      	movs	r2, #0
 8015530:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801553a:	687a      	ldr	r2, [r7, #4]
 801553c:	33b0      	adds	r3, #176	; 0xb0
 801553e:	009b      	lsls	r3, r3, #2
 8015540:	4413      	add	r3, r2
 8015542:	685b      	ldr	r3, [r3, #4]
 8015544:	691b      	ldr	r3, [r3, #16]
 8015546:	2b00      	cmp	r3, #0
 8015548:	d010      	beq.n	801556c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015550:	687a      	ldr	r2, [r7, #4]
 8015552:	33b0      	adds	r3, #176	; 0xb0
 8015554:	009b      	lsls	r3, r3, #2
 8015556:	4413      	add	r3, r2
 8015558:	685b      	ldr	r3, [r3, #4]
 801555a:	691b      	ldr	r3, [r3, #16]
 801555c:	68ba      	ldr	r2, [r7, #8]
 801555e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8015562:	68ba      	ldr	r2, [r7, #8]
 8015564:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8015568:	78fa      	ldrb	r2, [r7, #3]
 801556a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 801556c:	2300      	movs	r3, #0
}
 801556e:	4618      	mov	r0, r3
 8015570:	3710      	adds	r7, #16
 8015572:	46bd      	mov	sp, r7
 8015574:	bd80      	pop	{r7, pc}

08015576 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015576:	b580      	push	{r7, lr}
 8015578:	b084      	sub	sp, #16
 801557a:	af00      	add	r7, sp, #0
 801557c:	6078      	str	r0, [r7, #4]
 801557e:	460b      	mov	r3, r1
 8015580:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	32b0      	adds	r2, #176	; 0xb0
 801558c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015590:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	32b0      	adds	r2, #176	; 0xb0
 801559c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d101      	bne.n	80155a8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80155a4:	2303      	movs	r3, #3
 80155a6:	e01a      	b.n	80155de <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80155a8:	78fb      	ldrb	r3, [r7, #3]
 80155aa:	4619      	mov	r1, r3
 80155ac:	6878      	ldr	r0, [r7, #4]
 80155ae:	f002 f950 	bl	8017852 <USBD_LL_GetRxDataSize>
 80155b2:	4602      	mov	r2, r0
 80155b4:	68fb      	ldr	r3, [r7, #12]
 80155b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80155c0:	687a      	ldr	r2, [r7, #4]
 80155c2:	33b0      	adds	r3, #176	; 0xb0
 80155c4:	009b      	lsls	r3, r3, #2
 80155c6:	4413      	add	r3, r2
 80155c8:	685b      	ldr	r3, [r3, #4]
 80155ca:	68db      	ldr	r3, [r3, #12]
 80155cc:	68fa      	ldr	r2, [r7, #12]
 80155ce:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80155d2:	68fa      	ldr	r2, [r7, #12]
 80155d4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80155d8:	4611      	mov	r1, r2
 80155da:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80155dc:	2300      	movs	r3, #0
}
 80155de:	4618      	mov	r0, r3
 80155e0:	3710      	adds	r7, #16
 80155e2:	46bd      	mov	sp, r7
 80155e4:	bd80      	pop	{r7, pc}

080155e6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80155e6:	b580      	push	{r7, lr}
 80155e8:	b084      	sub	sp, #16
 80155ea:	af00      	add	r7, sp, #0
 80155ec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	32b0      	adds	r2, #176	; 0xb0
 80155f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80155fe:	68fb      	ldr	r3, [r7, #12]
 8015600:	2b00      	cmp	r3, #0
 8015602:	d101      	bne.n	8015608 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8015604:	2303      	movs	r3, #3
 8015606:	e025      	b.n	8015654 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801560e:	687a      	ldr	r2, [r7, #4]
 8015610:	33b0      	adds	r3, #176	; 0xb0
 8015612:	009b      	lsls	r3, r3, #2
 8015614:	4413      	add	r3, r2
 8015616:	685b      	ldr	r3, [r3, #4]
 8015618:	2b00      	cmp	r3, #0
 801561a:	d01a      	beq.n	8015652 <USBD_CDC_EP0_RxReady+0x6c>
 801561c:	68fb      	ldr	r3, [r7, #12]
 801561e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8015622:	2bff      	cmp	r3, #255	; 0xff
 8015624:	d015      	beq.n	8015652 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801562c:	687a      	ldr	r2, [r7, #4]
 801562e:	33b0      	adds	r3, #176	; 0xb0
 8015630:	009b      	lsls	r3, r3, #2
 8015632:	4413      	add	r3, r2
 8015634:	685b      	ldr	r3, [r3, #4]
 8015636:	689b      	ldr	r3, [r3, #8]
 8015638:	68fa      	ldr	r2, [r7, #12]
 801563a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 801563e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8015640:	68fa      	ldr	r2, [r7, #12]
 8015642:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015646:	b292      	uxth	r2, r2
 8015648:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801564a:	68fb      	ldr	r3, [r7, #12]
 801564c:	22ff      	movs	r2, #255	; 0xff
 801564e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8015652:	2300      	movs	r3, #0
}
 8015654:	4618      	mov	r0, r3
 8015656:	3710      	adds	r7, #16
 8015658:	46bd      	mov	sp, r7
 801565a:	bd80      	pop	{r7, pc}

0801565c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801565c:	b580      	push	{r7, lr}
 801565e:	b086      	sub	sp, #24
 8015660:	af00      	add	r7, sp, #0
 8015662:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015664:	2182      	movs	r1, #130	; 0x82
 8015666:	4818      	ldr	r0, [pc, #96]	; (80156c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015668:	f000 fd09 	bl	801607e <USBD_GetEpDesc>
 801566c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801566e:	2101      	movs	r1, #1
 8015670:	4815      	ldr	r0, [pc, #84]	; (80156c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015672:	f000 fd04 	bl	801607e <USBD_GetEpDesc>
 8015676:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015678:	2181      	movs	r1, #129	; 0x81
 801567a:	4813      	ldr	r0, [pc, #76]	; (80156c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801567c:	f000 fcff 	bl	801607e <USBD_GetEpDesc>
 8015680:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015682:	697b      	ldr	r3, [r7, #20]
 8015684:	2b00      	cmp	r3, #0
 8015686:	d002      	beq.n	801568e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015688:	697b      	ldr	r3, [r7, #20]
 801568a:	2210      	movs	r2, #16
 801568c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801568e:	693b      	ldr	r3, [r7, #16]
 8015690:	2b00      	cmp	r3, #0
 8015692:	d006      	beq.n	80156a2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015694:	693b      	ldr	r3, [r7, #16]
 8015696:	2200      	movs	r2, #0
 8015698:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801569c:	711a      	strb	r2, [r3, #4]
 801569e:	2200      	movs	r2, #0
 80156a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d006      	beq.n	80156b6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	2200      	movs	r2, #0
 80156ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80156b0:	711a      	strb	r2, [r3, #4]
 80156b2:	2200      	movs	r2, #0
 80156b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	2243      	movs	r2, #67	; 0x43
 80156ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80156bc:	4b02      	ldr	r3, [pc, #8]	; (80156c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80156be:	4618      	mov	r0, r3
 80156c0:	3718      	adds	r7, #24
 80156c2:	46bd      	mov	sp, r7
 80156c4:	bd80      	pop	{r7, pc}
 80156c6:	bf00      	nop
 80156c8:	20000068 	.word	0x20000068

080156cc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80156cc:	b580      	push	{r7, lr}
 80156ce:	b086      	sub	sp, #24
 80156d0:	af00      	add	r7, sp, #0
 80156d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80156d4:	2182      	movs	r1, #130	; 0x82
 80156d6:	4818      	ldr	r0, [pc, #96]	; (8015738 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80156d8:	f000 fcd1 	bl	801607e <USBD_GetEpDesc>
 80156dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80156de:	2101      	movs	r1, #1
 80156e0:	4815      	ldr	r0, [pc, #84]	; (8015738 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80156e2:	f000 fccc 	bl	801607e <USBD_GetEpDesc>
 80156e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80156e8:	2181      	movs	r1, #129	; 0x81
 80156ea:	4813      	ldr	r0, [pc, #76]	; (8015738 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80156ec:	f000 fcc7 	bl	801607e <USBD_GetEpDesc>
 80156f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80156f2:	697b      	ldr	r3, [r7, #20]
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d002      	beq.n	80156fe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80156f8:	697b      	ldr	r3, [r7, #20]
 80156fa:	2210      	movs	r2, #16
 80156fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80156fe:	693b      	ldr	r3, [r7, #16]
 8015700:	2b00      	cmp	r3, #0
 8015702:	d006      	beq.n	8015712 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015704:	693b      	ldr	r3, [r7, #16]
 8015706:	2200      	movs	r2, #0
 8015708:	711a      	strb	r2, [r3, #4]
 801570a:	2200      	movs	r2, #0
 801570c:	f042 0202 	orr.w	r2, r2, #2
 8015710:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015712:	68fb      	ldr	r3, [r7, #12]
 8015714:	2b00      	cmp	r3, #0
 8015716:	d006      	beq.n	8015726 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015718:	68fb      	ldr	r3, [r7, #12]
 801571a:	2200      	movs	r2, #0
 801571c:	711a      	strb	r2, [r3, #4]
 801571e:	2200      	movs	r2, #0
 8015720:	f042 0202 	orr.w	r2, r2, #2
 8015724:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	2243      	movs	r2, #67	; 0x43
 801572a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801572c:	4b02      	ldr	r3, [pc, #8]	; (8015738 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801572e:	4618      	mov	r0, r3
 8015730:	3718      	adds	r7, #24
 8015732:	46bd      	mov	sp, r7
 8015734:	bd80      	pop	{r7, pc}
 8015736:	bf00      	nop
 8015738:	20000068 	.word	0x20000068

0801573c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801573c:	b580      	push	{r7, lr}
 801573e:	b086      	sub	sp, #24
 8015740:	af00      	add	r7, sp, #0
 8015742:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015744:	2182      	movs	r1, #130	; 0x82
 8015746:	4818      	ldr	r0, [pc, #96]	; (80157a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015748:	f000 fc99 	bl	801607e <USBD_GetEpDesc>
 801574c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801574e:	2101      	movs	r1, #1
 8015750:	4815      	ldr	r0, [pc, #84]	; (80157a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015752:	f000 fc94 	bl	801607e <USBD_GetEpDesc>
 8015756:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015758:	2181      	movs	r1, #129	; 0x81
 801575a:	4813      	ldr	r0, [pc, #76]	; (80157a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801575c:	f000 fc8f 	bl	801607e <USBD_GetEpDesc>
 8015760:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015762:	697b      	ldr	r3, [r7, #20]
 8015764:	2b00      	cmp	r3, #0
 8015766:	d002      	beq.n	801576e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015768:	697b      	ldr	r3, [r7, #20]
 801576a:	2210      	movs	r2, #16
 801576c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801576e:	693b      	ldr	r3, [r7, #16]
 8015770:	2b00      	cmp	r3, #0
 8015772:	d006      	beq.n	8015782 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015774:	693b      	ldr	r3, [r7, #16]
 8015776:	2200      	movs	r2, #0
 8015778:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801577c:	711a      	strb	r2, [r3, #4]
 801577e:	2200      	movs	r2, #0
 8015780:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015782:	68fb      	ldr	r3, [r7, #12]
 8015784:	2b00      	cmp	r3, #0
 8015786:	d006      	beq.n	8015796 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015788:	68fb      	ldr	r3, [r7, #12]
 801578a:	2200      	movs	r2, #0
 801578c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015790:	711a      	strb	r2, [r3, #4]
 8015792:	2200      	movs	r2, #0
 8015794:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	2243      	movs	r2, #67	; 0x43
 801579a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801579c:	4b02      	ldr	r3, [pc, #8]	; (80157a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801579e:	4618      	mov	r0, r3
 80157a0:	3718      	adds	r7, #24
 80157a2:	46bd      	mov	sp, r7
 80157a4:	bd80      	pop	{r7, pc}
 80157a6:	bf00      	nop
 80157a8:	20000068 	.word	0x20000068

080157ac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80157ac:	b480      	push	{r7}
 80157ae:	b083      	sub	sp, #12
 80157b0:	af00      	add	r7, sp, #0
 80157b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	220a      	movs	r2, #10
 80157b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80157ba:	4b03      	ldr	r3, [pc, #12]	; (80157c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80157bc:	4618      	mov	r0, r3
 80157be:	370c      	adds	r7, #12
 80157c0:	46bd      	mov	sp, r7
 80157c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157c6:	4770      	bx	lr
 80157c8:	20000024 	.word	0x20000024

080157cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80157cc:	b480      	push	{r7}
 80157ce:	b083      	sub	sp, #12
 80157d0:	af00      	add	r7, sp, #0
 80157d2:	6078      	str	r0, [r7, #4]
 80157d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80157d6:	683b      	ldr	r3, [r7, #0]
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d101      	bne.n	80157e0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80157dc:	2303      	movs	r3, #3
 80157de:	e009      	b.n	80157f4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80157e6:	687a      	ldr	r2, [r7, #4]
 80157e8:	33b0      	adds	r3, #176	; 0xb0
 80157ea:	009b      	lsls	r3, r3, #2
 80157ec:	4413      	add	r3, r2
 80157ee:	683a      	ldr	r2, [r7, #0]
 80157f0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80157f2:	2300      	movs	r3, #0
}
 80157f4:	4618      	mov	r0, r3
 80157f6:	370c      	adds	r7, #12
 80157f8:	46bd      	mov	sp, r7
 80157fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157fe:	4770      	bx	lr

08015800 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8015800:	b480      	push	{r7}
 8015802:	b087      	sub	sp, #28
 8015804:	af00      	add	r7, sp, #0
 8015806:	60f8      	str	r0, [r7, #12]
 8015808:	60b9      	str	r1, [r7, #8]
 801580a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	32b0      	adds	r2, #176	; 0xb0
 8015816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801581a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 801581c:	697b      	ldr	r3, [r7, #20]
 801581e:	2b00      	cmp	r3, #0
 8015820:	d101      	bne.n	8015826 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8015822:	2303      	movs	r3, #3
 8015824:	e008      	b.n	8015838 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8015826:	697b      	ldr	r3, [r7, #20]
 8015828:	68ba      	ldr	r2, [r7, #8]
 801582a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801582e:	697b      	ldr	r3, [r7, #20]
 8015830:	687a      	ldr	r2, [r7, #4]
 8015832:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8015836:	2300      	movs	r3, #0
}
 8015838:	4618      	mov	r0, r3
 801583a:	371c      	adds	r7, #28
 801583c:	46bd      	mov	sp, r7
 801583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015842:	4770      	bx	lr

08015844 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8015844:	b480      	push	{r7}
 8015846:	b085      	sub	sp, #20
 8015848:	af00      	add	r7, sp, #0
 801584a:	6078      	str	r0, [r7, #4]
 801584c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	32b0      	adds	r2, #176	; 0xb0
 8015858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801585c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801585e:	68fb      	ldr	r3, [r7, #12]
 8015860:	2b00      	cmp	r3, #0
 8015862:	d101      	bne.n	8015868 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8015864:	2303      	movs	r3, #3
 8015866:	e004      	b.n	8015872 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8015868:	68fb      	ldr	r3, [r7, #12]
 801586a:	683a      	ldr	r2, [r7, #0]
 801586c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8015870:	2300      	movs	r3, #0
}
 8015872:	4618      	mov	r0, r3
 8015874:	3714      	adds	r7, #20
 8015876:	46bd      	mov	sp, r7
 8015878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801587c:	4770      	bx	lr
	...

08015880 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8015880:	b580      	push	{r7, lr}
 8015882:	b084      	sub	sp, #16
 8015884:	af00      	add	r7, sp, #0
 8015886:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	32b0      	adds	r2, #176	; 0xb0
 8015892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015896:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	32b0      	adds	r2, #176	; 0xb0
 80158a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d101      	bne.n	80158ae <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80158aa:	2303      	movs	r3, #3
 80158ac:	e018      	b.n	80158e0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	7c1b      	ldrb	r3, [r3, #16]
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d10a      	bne.n	80158cc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80158b6:	4b0c      	ldr	r3, [pc, #48]	; (80158e8 <USBD_CDC_ReceivePacket+0x68>)
 80158b8:	7819      	ldrb	r1, [r3, #0]
 80158ba:	68fb      	ldr	r3, [r7, #12]
 80158bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80158c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80158c4:	6878      	ldr	r0, [r7, #4]
 80158c6:	f001 ffa3 	bl	8017810 <USBD_LL_PrepareReceive>
 80158ca:	e008      	b.n	80158de <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80158cc:	4b06      	ldr	r3, [pc, #24]	; (80158e8 <USBD_CDC_ReceivePacket+0x68>)
 80158ce:	7819      	ldrb	r1, [r3, #0]
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80158d6:	2340      	movs	r3, #64	; 0x40
 80158d8:	6878      	ldr	r0, [r7, #4]
 80158da:	f001 ff99 	bl	8017810 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80158de:	2300      	movs	r3, #0
}
 80158e0:	4618      	mov	r0, r3
 80158e2:	3710      	adds	r7, #16
 80158e4:	46bd      	mov	sp, r7
 80158e6:	bd80      	pop	{r7, pc}
 80158e8:	200000ac 	.word	0x200000ac

080158ec <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80158ec:	b580      	push	{r7, lr}
 80158ee:	b086      	sub	sp, #24
 80158f0:	af00      	add	r7, sp, #0
 80158f2:	60f8      	str	r0, [r7, #12]
 80158f4:	60b9      	str	r1, [r7, #8]
 80158f6:	4613      	mov	r3, r2
 80158f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d101      	bne.n	8015904 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015900:	2303      	movs	r3, #3
 8015902:	e01f      	b.n	8015944 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8015904:	68fb      	ldr	r3, [r7, #12]
 8015906:	2200      	movs	r2, #0
 8015908:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 801590c:	68fb      	ldr	r3, [r7, #12]
 801590e:	2200      	movs	r2, #0
 8015910:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8015914:	68fb      	ldr	r3, [r7, #12]
 8015916:	2200      	movs	r2, #0
 8015918:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801591c:	68bb      	ldr	r3, [r7, #8]
 801591e:	2b00      	cmp	r3, #0
 8015920:	d003      	beq.n	801592a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8015922:	68fb      	ldr	r3, [r7, #12]
 8015924:	68ba      	ldr	r2, [r7, #8]
 8015926:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801592a:	68fb      	ldr	r3, [r7, #12]
 801592c:	2201      	movs	r2, #1
 801592e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8015932:	68fb      	ldr	r3, [r7, #12]
 8015934:	79fa      	ldrb	r2, [r7, #7]
 8015936:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8015938:	68f8      	ldr	r0, [r7, #12]
 801593a:	f001 fe0f 	bl	801755c <USBD_LL_Init>
 801593e:	4603      	mov	r3, r0
 8015940:	75fb      	strb	r3, [r7, #23]

  return ret;
 8015942:	7dfb      	ldrb	r3, [r7, #23]
}
 8015944:	4618      	mov	r0, r3
 8015946:	3718      	adds	r7, #24
 8015948:	46bd      	mov	sp, r7
 801594a:	bd80      	pop	{r7, pc}

0801594c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801594c:	b580      	push	{r7, lr}
 801594e:	b084      	sub	sp, #16
 8015950:	af00      	add	r7, sp, #0
 8015952:	6078      	str	r0, [r7, #4]
 8015954:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015956:	2300      	movs	r3, #0
 8015958:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801595a:	683b      	ldr	r3, [r7, #0]
 801595c:	2b00      	cmp	r3, #0
 801595e:	d101      	bne.n	8015964 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015960:	2303      	movs	r3, #3
 8015962:	e025      	b.n	80159b0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	683a      	ldr	r2, [r7, #0]
 8015968:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	32ae      	adds	r2, #174	; 0xae
 8015976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801597a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801597c:	2b00      	cmp	r3, #0
 801597e:	d00f      	beq.n	80159a0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	32ae      	adds	r2, #174	; 0xae
 801598a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801598e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015990:	f107 020e 	add.w	r2, r7, #14
 8015994:	4610      	mov	r0, r2
 8015996:	4798      	blx	r3
 8015998:	4602      	mov	r2, r0
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80159a6:	1c5a      	adds	r2, r3, #1
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80159ae:	2300      	movs	r3, #0
}
 80159b0:	4618      	mov	r0, r3
 80159b2:	3710      	adds	r7, #16
 80159b4:	46bd      	mov	sp, r7
 80159b6:	bd80      	pop	{r7, pc}

080159b8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80159b8:	b580      	push	{r7, lr}
 80159ba:	b082      	sub	sp, #8
 80159bc:	af00      	add	r7, sp, #0
 80159be:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80159c0:	6878      	ldr	r0, [r7, #4]
 80159c2:	f001 fe1b 	bl	80175fc <USBD_LL_Start>
 80159c6:	4603      	mov	r3, r0
}
 80159c8:	4618      	mov	r0, r3
 80159ca:	3708      	adds	r7, #8
 80159cc:	46bd      	mov	sp, r7
 80159ce:	bd80      	pop	{r7, pc}

080159d0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80159d0:	b480      	push	{r7}
 80159d2:	b083      	sub	sp, #12
 80159d4:	af00      	add	r7, sp, #0
 80159d6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80159d8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80159da:	4618      	mov	r0, r3
 80159dc:	370c      	adds	r7, #12
 80159de:	46bd      	mov	sp, r7
 80159e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159e4:	4770      	bx	lr

080159e6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80159e6:	b580      	push	{r7, lr}
 80159e8:	b084      	sub	sp, #16
 80159ea:	af00      	add	r7, sp, #0
 80159ec:	6078      	str	r0, [r7, #4]
 80159ee:	460b      	mov	r3, r1
 80159f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80159f2:	2300      	movs	r3, #0
 80159f4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d009      	beq.n	8015a14 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a06:	681b      	ldr	r3, [r3, #0]
 8015a08:	78fa      	ldrb	r2, [r7, #3]
 8015a0a:	4611      	mov	r1, r2
 8015a0c:	6878      	ldr	r0, [r7, #4]
 8015a0e:	4798      	blx	r3
 8015a10:	4603      	mov	r3, r0
 8015a12:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8015a16:	4618      	mov	r0, r3
 8015a18:	3710      	adds	r7, #16
 8015a1a:	46bd      	mov	sp, r7
 8015a1c:	bd80      	pop	{r7, pc}

08015a1e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015a1e:	b580      	push	{r7, lr}
 8015a20:	b084      	sub	sp, #16
 8015a22:	af00      	add	r7, sp, #0
 8015a24:	6078      	str	r0, [r7, #4]
 8015a26:	460b      	mov	r3, r1
 8015a28:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015a2a:	2300      	movs	r3, #0
 8015a2c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a34:	685b      	ldr	r3, [r3, #4]
 8015a36:	78fa      	ldrb	r2, [r7, #3]
 8015a38:	4611      	mov	r1, r2
 8015a3a:	6878      	ldr	r0, [r7, #4]
 8015a3c:	4798      	blx	r3
 8015a3e:	4603      	mov	r3, r0
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d001      	beq.n	8015a48 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8015a44:	2303      	movs	r3, #3
 8015a46:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8015a4a:	4618      	mov	r0, r3
 8015a4c:	3710      	adds	r7, #16
 8015a4e:	46bd      	mov	sp, r7
 8015a50:	bd80      	pop	{r7, pc}

08015a52 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015a52:	b580      	push	{r7, lr}
 8015a54:	b084      	sub	sp, #16
 8015a56:	af00      	add	r7, sp, #0
 8015a58:	6078      	str	r0, [r7, #4]
 8015a5a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015a62:	6839      	ldr	r1, [r7, #0]
 8015a64:	4618      	mov	r0, r3
 8015a66:	f001 f908 	bl	8016c7a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	2201      	movs	r2, #1
 8015a6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8015a78:	461a      	mov	r2, r3
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015a86:	f003 031f 	and.w	r3, r3, #31
 8015a8a:	2b02      	cmp	r3, #2
 8015a8c:	d01a      	beq.n	8015ac4 <USBD_LL_SetupStage+0x72>
 8015a8e:	2b02      	cmp	r3, #2
 8015a90:	d822      	bhi.n	8015ad8 <USBD_LL_SetupStage+0x86>
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d002      	beq.n	8015a9c <USBD_LL_SetupStage+0x4a>
 8015a96:	2b01      	cmp	r3, #1
 8015a98:	d00a      	beq.n	8015ab0 <USBD_LL_SetupStage+0x5e>
 8015a9a:	e01d      	b.n	8015ad8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015aa2:	4619      	mov	r1, r3
 8015aa4:	6878      	ldr	r0, [r7, #4]
 8015aa6:	f000 fb5f 	bl	8016168 <USBD_StdDevReq>
 8015aaa:	4603      	mov	r3, r0
 8015aac:	73fb      	strb	r3, [r7, #15]
      break;
 8015aae:	e020      	b.n	8015af2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015ab6:	4619      	mov	r1, r3
 8015ab8:	6878      	ldr	r0, [r7, #4]
 8015aba:	f000 fbc7 	bl	801624c <USBD_StdItfReq>
 8015abe:	4603      	mov	r3, r0
 8015ac0:	73fb      	strb	r3, [r7, #15]
      break;
 8015ac2:	e016      	b.n	8015af2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015aca:	4619      	mov	r1, r3
 8015acc:	6878      	ldr	r0, [r7, #4]
 8015ace:	f000 fc29 	bl	8016324 <USBD_StdEPReq>
 8015ad2:	4603      	mov	r3, r0
 8015ad4:	73fb      	strb	r3, [r7, #15]
      break;
 8015ad6:	e00c      	b.n	8015af2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015ade:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015ae2:	b2db      	uxtb	r3, r3
 8015ae4:	4619      	mov	r1, r3
 8015ae6:	6878      	ldr	r0, [r7, #4]
 8015ae8:	f001 fde8 	bl	80176bc <USBD_LL_StallEP>
 8015aec:	4603      	mov	r3, r0
 8015aee:	73fb      	strb	r3, [r7, #15]
      break;
 8015af0:	bf00      	nop
  }

  return ret;
 8015af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8015af4:	4618      	mov	r0, r3
 8015af6:	3710      	adds	r7, #16
 8015af8:	46bd      	mov	sp, r7
 8015afa:	bd80      	pop	{r7, pc}

08015afc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015afc:	b580      	push	{r7, lr}
 8015afe:	b086      	sub	sp, #24
 8015b00:	af00      	add	r7, sp, #0
 8015b02:	60f8      	str	r0, [r7, #12]
 8015b04:	460b      	mov	r3, r1
 8015b06:	607a      	str	r2, [r7, #4]
 8015b08:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8015b0a:	2300      	movs	r3, #0
 8015b0c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8015b0e:	7afb      	ldrb	r3, [r7, #11]
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	d16e      	bne.n	8015bf2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8015b14:	68fb      	ldr	r3, [r7, #12]
 8015b16:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015b1a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015b1c:	68fb      	ldr	r3, [r7, #12]
 8015b1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015b22:	2b03      	cmp	r3, #3
 8015b24:	f040 8098 	bne.w	8015c58 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8015b28:	693b      	ldr	r3, [r7, #16]
 8015b2a:	689a      	ldr	r2, [r3, #8]
 8015b2c:	693b      	ldr	r3, [r7, #16]
 8015b2e:	68db      	ldr	r3, [r3, #12]
 8015b30:	429a      	cmp	r2, r3
 8015b32:	d913      	bls.n	8015b5c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8015b34:	693b      	ldr	r3, [r7, #16]
 8015b36:	689a      	ldr	r2, [r3, #8]
 8015b38:	693b      	ldr	r3, [r7, #16]
 8015b3a:	68db      	ldr	r3, [r3, #12]
 8015b3c:	1ad2      	subs	r2, r2, r3
 8015b3e:	693b      	ldr	r3, [r7, #16]
 8015b40:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8015b42:	693b      	ldr	r3, [r7, #16]
 8015b44:	68da      	ldr	r2, [r3, #12]
 8015b46:	693b      	ldr	r3, [r7, #16]
 8015b48:	689b      	ldr	r3, [r3, #8]
 8015b4a:	4293      	cmp	r3, r2
 8015b4c:	bf28      	it	cs
 8015b4e:	4613      	movcs	r3, r2
 8015b50:	461a      	mov	r2, r3
 8015b52:	6879      	ldr	r1, [r7, #4]
 8015b54:	68f8      	ldr	r0, [r7, #12]
 8015b56:	f001 f984 	bl	8016e62 <USBD_CtlContinueRx>
 8015b5a:	e07d      	b.n	8015c58 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8015b5c:	68fb      	ldr	r3, [r7, #12]
 8015b5e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015b62:	f003 031f 	and.w	r3, r3, #31
 8015b66:	2b02      	cmp	r3, #2
 8015b68:	d014      	beq.n	8015b94 <USBD_LL_DataOutStage+0x98>
 8015b6a:	2b02      	cmp	r3, #2
 8015b6c:	d81d      	bhi.n	8015baa <USBD_LL_DataOutStage+0xae>
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d002      	beq.n	8015b78 <USBD_LL_DataOutStage+0x7c>
 8015b72:	2b01      	cmp	r3, #1
 8015b74:	d003      	beq.n	8015b7e <USBD_LL_DataOutStage+0x82>
 8015b76:	e018      	b.n	8015baa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8015b78:	2300      	movs	r3, #0
 8015b7a:	75bb      	strb	r3, [r7, #22]
            break;
 8015b7c:	e018      	b.n	8015bb0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015b84:	b2db      	uxtb	r3, r3
 8015b86:	4619      	mov	r1, r3
 8015b88:	68f8      	ldr	r0, [r7, #12]
 8015b8a:	f000 fa5e 	bl	801604a <USBD_CoreFindIF>
 8015b8e:	4603      	mov	r3, r0
 8015b90:	75bb      	strb	r3, [r7, #22]
            break;
 8015b92:	e00d      	b.n	8015bb0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8015b94:	68fb      	ldr	r3, [r7, #12]
 8015b96:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015b9a:	b2db      	uxtb	r3, r3
 8015b9c:	4619      	mov	r1, r3
 8015b9e:	68f8      	ldr	r0, [r7, #12]
 8015ba0:	f000 fa60 	bl	8016064 <USBD_CoreFindEP>
 8015ba4:	4603      	mov	r3, r0
 8015ba6:	75bb      	strb	r3, [r7, #22]
            break;
 8015ba8:	e002      	b.n	8015bb0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8015baa:	2300      	movs	r3, #0
 8015bac:	75bb      	strb	r3, [r7, #22]
            break;
 8015bae:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8015bb0:	7dbb      	ldrb	r3, [r7, #22]
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d119      	bne.n	8015bea <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015bb6:	68fb      	ldr	r3, [r7, #12]
 8015bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015bbc:	b2db      	uxtb	r3, r3
 8015bbe:	2b03      	cmp	r3, #3
 8015bc0:	d113      	bne.n	8015bea <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8015bc2:	7dba      	ldrb	r2, [r7, #22]
 8015bc4:	68fb      	ldr	r3, [r7, #12]
 8015bc6:	32ae      	adds	r2, #174	; 0xae
 8015bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015bcc:	691b      	ldr	r3, [r3, #16]
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d00b      	beq.n	8015bea <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8015bd2:	7dba      	ldrb	r2, [r7, #22]
 8015bd4:	68fb      	ldr	r3, [r7, #12]
 8015bd6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8015bda:	7dba      	ldrb	r2, [r7, #22]
 8015bdc:	68fb      	ldr	r3, [r7, #12]
 8015bde:	32ae      	adds	r2, #174	; 0xae
 8015be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015be4:	691b      	ldr	r3, [r3, #16]
 8015be6:	68f8      	ldr	r0, [r7, #12]
 8015be8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8015bea:	68f8      	ldr	r0, [r7, #12]
 8015bec:	f001 f94a 	bl	8016e84 <USBD_CtlSendStatus>
 8015bf0:	e032      	b.n	8015c58 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8015bf2:	7afb      	ldrb	r3, [r7, #11]
 8015bf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015bf8:	b2db      	uxtb	r3, r3
 8015bfa:	4619      	mov	r1, r3
 8015bfc:	68f8      	ldr	r0, [r7, #12]
 8015bfe:	f000 fa31 	bl	8016064 <USBD_CoreFindEP>
 8015c02:	4603      	mov	r3, r0
 8015c04:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015c06:	7dbb      	ldrb	r3, [r7, #22]
 8015c08:	2bff      	cmp	r3, #255	; 0xff
 8015c0a:	d025      	beq.n	8015c58 <USBD_LL_DataOutStage+0x15c>
 8015c0c:	7dbb      	ldrb	r3, [r7, #22]
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d122      	bne.n	8015c58 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015c12:	68fb      	ldr	r3, [r7, #12]
 8015c14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015c18:	b2db      	uxtb	r3, r3
 8015c1a:	2b03      	cmp	r3, #3
 8015c1c:	d117      	bne.n	8015c4e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8015c1e:	7dba      	ldrb	r2, [r7, #22]
 8015c20:	68fb      	ldr	r3, [r7, #12]
 8015c22:	32ae      	adds	r2, #174	; 0xae
 8015c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c28:	699b      	ldr	r3, [r3, #24]
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d00f      	beq.n	8015c4e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8015c2e:	7dba      	ldrb	r2, [r7, #22]
 8015c30:	68fb      	ldr	r3, [r7, #12]
 8015c32:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8015c36:	7dba      	ldrb	r2, [r7, #22]
 8015c38:	68fb      	ldr	r3, [r7, #12]
 8015c3a:	32ae      	adds	r2, #174	; 0xae
 8015c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c40:	699b      	ldr	r3, [r3, #24]
 8015c42:	7afa      	ldrb	r2, [r7, #11]
 8015c44:	4611      	mov	r1, r2
 8015c46:	68f8      	ldr	r0, [r7, #12]
 8015c48:	4798      	blx	r3
 8015c4a:	4603      	mov	r3, r0
 8015c4c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8015c4e:	7dfb      	ldrb	r3, [r7, #23]
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d001      	beq.n	8015c58 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8015c54:	7dfb      	ldrb	r3, [r7, #23]
 8015c56:	e000      	b.n	8015c5a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8015c58:	2300      	movs	r3, #0
}
 8015c5a:	4618      	mov	r0, r3
 8015c5c:	3718      	adds	r7, #24
 8015c5e:	46bd      	mov	sp, r7
 8015c60:	bd80      	pop	{r7, pc}

08015c62 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8015c62:	b580      	push	{r7, lr}
 8015c64:	b086      	sub	sp, #24
 8015c66:	af00      	add	r7, sp, #0
 8015c68:	60f8      	str	r0, [r7, #12]
 8015c6a:	460b      	mov	r3, r1
 8015c6c:	607a      	str	r2, [r7, #4]
 8015c6e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8015c70:	7afb      	ldrb	r3, [r7, #11]
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d16f      	bne.n	8015d56 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8015c76:	68fb      	ldr	r3, [r7, #12]
 8015c78:	3314      	adds	r3, #20
 8015c7a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015c7c:	68fb      	ldr	r3, [r7, #12]
 8015c7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015c82:	2b02      	cmp	r3, #2
 8015c84:	d15a      	bne.n	8015d3c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8015c86:	693b      	ldr	r3, [r7, #16]
 8015c88:	689a      	ldr	r2, [r3, #8]
 8015c8a:	693b      	ldr	r3, [r7, #16]
 8015c8c:	68db      	ldr	r3, [r3, #12]
 8015c8e:	429a      	cmp	r2, r3
 8015c90:	d914      	bls.n	8015cbc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015c92:	693b      	ldr	r3, [r7, #16]
 8015c94:	689a      	ldr	r2, [r3, #8]
 8015c96:	693b      	ldr	r3, [r7, #16]
 8015c98:	68db      	ldr	r3, [r3, #12]
 8015c9a:	1ad2      	subs	r2, r2, r3
 8015c9c:	693b      	ldr	r3, [r7, #16]
 8015c9e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015ca0:	693b      	ldr	r3, [r7, #16]
 8015ca2:	689b      	ldr	r3, [r3, #8]
 8015ca4:	461a      	mov	r2, r3
 8015ca6:	6879      	ldr	r1, [r7, #4]
 8015ca8:	68f8      	ldr	r0, [r7, #12]
 8015caa:	f001 f8ac 	bl	8016e06 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015cae:	2300      	movs	r3, #0
 8015cb0:	2200      	movs	r2, #0
 8015cb2:	2100      	movs	r1, #0
 8015cb4:	68f8      	ldr	r0, [r7, #12]
 8015cb6:	f001 fdab 	bl	8017810 <USBD_LL_PrepareReceive>
 8015cba:	e03f      	b.n	8015d3c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8015cbc:	693b      	ldr	r3, [r7, #16]
 8015cbe:	68da      	ldr	r2, [r3, #12]
 8015cc0:	693b      	ldr	r3, [r7, #16]
 8015cc2:	689b      	ldr	r3, [r3, #8]
 8015cc4:	429a      	cmp	r2, r3
 8015cc6:	d11c      	bne.n	8015d02 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8015cc8:	693b      	ldr	r3, [r7, #16]
 8015cca:	685a      	ldr	r2, [r3, #4]
 8015ccc:	693b      	ldr	r3, [r7, #16]
 8015cce:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8015cd0:	429a      	cmp	r2, r3
 8015cd2:	d316      	bcc.n	8015d02 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8015cd4:	693b      	ldr	r3, [r7, #16]
 8015cd6:	685a      	ldr	r2, [r3, #4]
 8015cd8:	68fb      	ldr	r3, [r7, #12]
 8015cda:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8015cde:	429a      	cmp	r2, r3
 8015ce0:	d20f      	bcs.n	8015d02 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015ce2:	2200      	movs	r2, #0
 8015ce4:	2100      	movs	r1, #0
 8015ce6:	68f8      	ldr	r0, [r7, #12]
 8015ce8:	f001 f88d 	bl	8016e06 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8015cec:	68fb      	ldr	r3, [r7, #12]
 8015cee:	2200      	movs	r2, #0
 8015cf0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015cf4:	2300      	movs	r3, #0
 8015cf6:	2200      	movs	r2, #0
 8015cf8:	2100      	movs	r1, #0
 8015cfa:	68f8      	ldr	r0, [r7, #12]
 8015cfc:	f001 fd88 	bl	8017810 <USBD_LL_PrepareReceive>
 8015d00:	e01c      	b.n	8015d3c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015d08:	b2db      	uxtb	r3, r3
 8015d0a:	2b03      	cmp	r3, #3
 8015d0c:	d10f      	bne.n	8015d2e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d14:	68db      	ldr	r3, [r3, #12]
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d009      	beq.n	8015d2e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	2200      	movs	r2, #0
 8015d1e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8015d22:	68fb      	ldr	r3, [r7, #12]
 8015d24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d28:	68db      	ldr	r3, [r3, #12]
 8015d2a:	68f8      	ldr	r0, [r7, #12]
 8015d2c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015d2e:	2180      	movs	r1, #128	; 0x80
 8015d30:	68f8      	ldr	r0, [r7, #12]
 8015d32:	f001 fcc3 	bl	80176bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015d36:	68f8      	ldr	r0, [r7, #12]
 8015d38:	f001 f8b7 	bl	8016eaa <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8015d3c:	68fb      	ldr	r3, [r7, #12]
 8015d3e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d03a      	beq.n	8015dbc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8015d46:	68f8      	ldr	r0, [r7, #12]
 8015d48:	f7ff fe42 	bl	80159d0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015d4c:	68fb      	ldr	r3, [r7, #12]
 8015d4e:	2200      	movs	r2, #0
 8015d50:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8015d54:	e032      	b.n	8015dbc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8015d56:	7afb      	ldrb	r3, [r7, #11]
 8015d58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015d5c:	b2db      	uxtb	r3, r3
 8015d5e:	4619      	mov	r1, r3
 8015d60:	68f8      	ldr	r0, [r7, #12]
 8015d62:	f000 f97f 	bl	8016064 <USBD_CoreFindEP>
 8015d66:	4603      	mov	r3, r0
 8015d68:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015d6a:	7dfb      	ldrb	r3, [r7, #23]
 8015d6c:	2bff      	cmp	r3, #255	; 0xff
 8015d6e:	d025      	beq.n	8015dbc <USBD_LL_DataInStage+0x15a>
 8015d70:	7dfb      	ldrb	r3, [r7, #23]
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d122      	bne.n	8015dbc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015d76:	68fb      	ldr	r3, [r7, #12]
 8015d78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015d7c:	b2db      	uxtb	r3, r3
 8015d7e:	2b03      	cmp	r3, #3
 8015d80:	d11c      	bne.n	8015dbc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8015d82:	7dfa      	ldrb	r2, [r7, #23]
 8015d84:	68fb      	ldr	r3, [r7, #12]
 8015d86:	32ae      	adds	r2, #174	; 0xae
 8015d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d8c:	695b      	ldr	r3, [r3, #20]
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	d014      	beq.n	8015dbc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8015d92:	7dfa      	ldrb	r2, [r7, #23]
 8015d94:	68fb      	ldr	r3, [r7, #12]
 8015d96:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8015d9a:	7dfa      	ldrb	r2, [r7, #23]
 8015d9c:	68fb      	ldr	r3, [r7, #12]
 8015d9e:	32ae      	adds	r2, #174	; 0xae
 8015da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015da4:	695b      	ldr	r3, [r3, #20]
 8015da6:	7afa      	ldrb	r2, [r7, #11]
 8015da8:	4611      	mov	r1, r2
 8015daa:	68f8      	ldr	r0, [r7, #12]
 8015dac:	4798      	blx	r3
 8015dae:	4603      	mov	r3, r0
 8015db0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8015db2:	7dbb      	ldrb	r3, [r7, #22]
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d001      	beq.n	8015dbc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8015db8:	7dbb      	ldrb	r3, [r7, #22]
 8015dba:	e000      	b.n	8015dbe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8015dbc:	2300      	movs	r3, #0
}
 8015dbe:	4618      	mov	r0, r3
 8015dc0:	3718      	adds	r7, #24
 8015dc2:	46bd      	mov	sp, r7
 8015dc4:	bd80      	pop	{r7, pc}

08015dc6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015dc6:	b580      	push	{r7, lr}
 8015dc8:	b084      	sub	sp, #16
 8015dca:	af00      	add	r7, sp, #0
 8015dcc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8015dce:	2300      	movs	r3, #0
 8015dd0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	2201      	movs	r2, #1
 8015dd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	2200      	movs	r2, #0
 8015dde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	2200      	movs	r2, #0
 8015de6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	2200      	movs	r2, #0
 8015dec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	2200      	movs	r2, #0
 8015df4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d014      	beq.n	8015e2c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e08:	685b      	ldr	r3, [r3, #4]
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d00e      	beq.n	8015e2c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e14:	685b      	ldr	r3, [r3, #4]
 8015e16:	687a      	ldr	r2, [r7, #4]
 8015e18:	6852      	ldr	r2, [r2, #4]
 8015e1a:	b2d2      	uxtb	r2, r2
 8015e1c:	4611      	mov	r1, r2
 8015e1e:	6878      	ldr	r0, [r7, #4]
 8015e20:	4798      	blx	r3
 8015e22:	4603      	mov	r3, r0
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d001      	beq.n	8015e2c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8015e28:	2303      	movs	r3, #3
 8015e2a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015e2c:	2340      	movs	r3, #64	; 0x40
 8015e2e:	2200      	movs	r2, #0
 8015e30:	2100      	movs	r1, #0
 8015e32:	6878      	ldr	r0, [r7, #4]
 8015e34:	f001 fbfd 	bl	8017632 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	2201      	movs	r2, #1
 8015e3c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	2240      	movs	r2, #64	; 0x40
 8015e44:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015e48:	2340      	movs	r3, #64	; 0x40
 8015e4a:	2200      	movs	r2, #0
 8015e4c:	2180      	movs	r1, #128	; 0x80
 8015e4e:	6878      	ldr	r0, [r7, #4]
 8015e50:	f001 fbef 	bl	8017632 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	2201      	movs	r2, #1
 8015e58:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	2240      	movs	r2, #64	; 0x40
 8015e5e:	621a      	str	r2, [r3, #32]

  return ret;
 8015e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8015e62:	4618      	mov	r0, r3
 8015e64:	3710      	adds	r7, #16
 8015e66:	46bd      	mov	sp, r7
 8015e68:	bd80      	pop	{r7, pc}

08015e6a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015e6a:	b480      	push	{r7}
 8015e6c:	b083      	sub	sp, #12
 8015e6e:	af00      	add	r7, sp, #0
 8015e70:	6078      	str	r0, [r7, #4]
 8015e72:	460b      	mov	r3, r1
 8015e74:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	78fa      	ldrb	r2, [r7, #3]
 8015e7a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015e7c:	2300      	movs	r3, #0
}
 8015e7e:	4618      	mov	r0, r3
 8015e80:	370c      	adds	r7, #12
 8015e82:	46bd      	mov	sp, r7
 8015e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e88:	4770      	bx	lr

08015e8a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015e8a:	b480      	push	{r7}
 8015e8c:	b083      	sub	sp, #12
 8015e8e:	af00      	add	r7, sp, #0
 8015e90:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015e98:	b2da      	uxtb	r2, r3
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	2204      	movs	r2, #4
 8015ea4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8015ea8:	2300      	movs	r3, #0
}
 8015eaa:	4618      	mov	r0, r3
 8015eac:	370c      	adds	r7, #12
 8015eae:	46bd      	mov	sp, r7
 8015eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eb4:	4770      	bx	lr

08015eb6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015eb6:	b480      	push	{r7}
 8015eb8:	b083      	sub	sp, #12
 8015eba:	af00      	add	r7, sp, #0
 8015ebc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ec4:	b2db      	uxtb	r3, r3
 8015ec6:	2b04      	cmp	r3, #4
 8015ec8:	d106      	bne.n	8015ed8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8015ed0:	b2da      	uxtb	r2, r3
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8015ed8:	2300      	movs	r3, #0
}
 8015eda:	4618      	mov	r0, r3
 8015edc:	370c      	adds	r7, #12
 8015ede:	46bd      	mov	sp, r7
 8015ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ee4:	4770      	bx	lr

08015ee6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015ee6:	b580      	push	{r7, lr}
 8015ee8:	b082      	sub	sp, #8
 8015eea:	af00      	add	r7, sp, #0
 8015eec:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ef4:	b2db      	uxtb	r3, r3
 8015ef6:	2b03      	cmp	r3, #3
 8015ef8:	d110      	bne.n	8015f1c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d00b      	beq.n	8015f1c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f0a:	69db      	ldr	r3, [r3, #28]
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	d005      	beq.n	8015f1c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f16:	69db      	ldr	r3, [r3, #28]
 8015f18:	6878      	ldr	r0, [r7, #4]
 8015f1a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8015f1c:	2300      	movs	r3, #0
}
 8015f1e:	4618      	mov	r0, r3
 8015f20:	3708      	adds	r7, #8
 8015f22:	46bd      	mov	sp, r7
 8015f24:	bd80      	pop	{r7, pc}

08015f26 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8015f26:	b580      	push	{r7, lr}
 8015f28:	b082      	sub	sp, #8
 8015f2a:	af00      	add	r7, sp, #0
 8015f2c:	6078      	str	r0, [r7, #4]
 8015f2e:	460b      	mov	r3, r1
 8015f30:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	32ae      	adds	r2, #174	; 0xae
 8015f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d101      	bne.n	8015f48 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8015f44:	2303      	movs	r3, #3
 8015f46:	e01c      	b.n	8015f82 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015f4e:	b2db      	uxtb	r3, r3
 8015f50:	2b03      	cmp	r3, #3
 8015f52:	d115      	bne.n	8015f80 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	32ae      	adds	r2, #174	; 0xae
 8015f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f62:	6a1b      	ldr	r3, [r3, #32]
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d00b      	beq.n	8015f80 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	32ae      	adds	r2, #174	; 0xae
 8015f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f76:	6a1b      	ldr	r3, [r3, #32]
 8015f78:	78fa      	ldrb	r2, [r7, #3]
 8015f7a:	4611      	mov	r1, r2
 8015f7c:	6878      	ldr	r0, [r7, #4]
 8015f7e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015f80:	2300      	movs	r3, #0
}
 8015f82:	4618      	mov	r0, r3
 8015f84:	3708      	adds	r7, #8
 8015f86:	46bd      	mov	sp, r7
 8015f88:	bd80      	pop	{r7, pc}

08015f8a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015f8a:	b580      	push	{r7, lr}
 8015f8c:	b082      	sub	sp, #8
 8015f8e:	af00      	add	r7, sp, #0
 8015f90:	6078      	str	r0, [r7, #4]
 8015f92:	460b      	mov	r3, r1
 8015f94:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	32ae      	adds	r2, #174	; 0xae
 8015fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d101      	bne.n	8015fac <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8015fa8:	2303      	movs	r3, #3
 8015faa:	e01c      	b.n	8015fe6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015fb2:	b2db      	uxtb	r3, r3
 8015fb4:	2b03      	cmp	r3, #3
 8015fb6:	d115      	bne.n	8015fe4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	32ae      	adds	r2, #174	; 0xae
 8015fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	d00b      	beq.n	8015fe4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	32ae      	adds	r2, #174	; 0xae
 8015fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fdc:	78fa      	ldrb	r2, [r7, #3]
 8015fde:	4611      	mov	r1, r2
 8015fe0:	6878      	ldr	r0, [r7, #4]
 8015fe2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015fe4:	2300      	movs	r3, #0
}
 8015fe6:	4618      	mov	r0, r3
 8015fe8:	3708      	adds	r7, #8
 8015fea:	46bd      	mov	sp, r7
 8015fec:	bd80      	pop	{r7, pc}

08015fee <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8015fee:	b480      	push	{r7}
 8015ff0:	b083      	sub	sp, #12
 8015ff2:	af00      	add	r7, sp, #0
 8015ff4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015ff6:	2300      	movs	r3, #0
}
 8015ff8:	4618      	mov	r0, r3
 8015ffa:	370c      	adds	r7, #12
 8015ffc:	46bd      	mov	sp, r7
 8015ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016002:	4770      	bx	lr

08016004 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8016004:	b580      	push	{r7, lr}
 8016006:	b084      	sub	sp, #16
 8016008:	af00      	add	r7, sp, #0
 801600a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801600c:	2300      	movs	r3, #0
 801600e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	2201      	movs	r2, #1
 8016014:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801601e:	2b00      	cmp	r3, #0
 8016020:	d00e      	beq.n	8016040 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016028:	685b      	ldr	r3, [r3, #4]
 801602a:	687a      	ldr	r2, [r7, #4]
 801602c:	6852      	ldr	r2, [r2, #4]
 801602e:	b2d2      	uxtb	r2, r2
 8016030:	4611      	mov	r1, r2
 8016032:	6878      	ldr	r0, [r7, #4]
 8016034:	4798      	blx	r3
 8016036:	4603      	mov	r3, r0
 8016038:	2b00      	cmp	r3, #0
 801603a:	d001      	beq.n	8016040 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801603c:	2303      	movs	r3, #3
 801603e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016040:	7bfb      	ldrb	r3, [r7, #15]
}
 8016042:	4618      	mov	r0, r3
 8016044:	3710      	adds	r7, #16
 8016046:	46bd      	mov	sp, r7
 8016048:	bd80      	pop	{r7, pc}

0801604a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801604a:	b480      	push	{r7}
 801604c:	b083      	sub	sp, #12
 801604e:	af00      	add	r7, sp, #0
 8016050:	6078      	str	r0, [r7, #4]
 8016052:	460b      	mov	r3, r1
 8016054:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016056:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016058:	4618      	mov	r0, r3
 801605a:	370c      	adds	r7, #12
 801605c:	46bd      	mov	sp, r7
 801605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016062:	4770      	bx	lr

08016064 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016064:	b480      	push	{r7}
 8016066:	b083      	sub	sp, #12
 8016068:	af00      	add	r7, sp, #0
 801606a:	6078      	str	r0, [r7, #4]
 801606c:	460b      	mov	r3, r1
 801606e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016070:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016072:	4618      	mov	r0, r3
 8016074:	370c      	adds	r7, #12
 8016076:	46bd      	mov	sp, r7
 8016078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801607c:	4770      	bx	lr

0801607e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801607e:	b580      	push	{r7, lr}
 8016080:	b086      	sub	sp, #24
 8016082:	af00      	add	r7, sp, #0
 8016084:	6078      	str	r0, [r7, #4]
 8016086:	460b      	mov	r3, r1
 8016088:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8016092:	2300      	movs	r3, #0
 8016094:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	885b      	ldrh	r3, [r3, #2]
 801609a:	b29a      	uxth	r2, r3
 801609c:	68fb      	ldr	r3, [r7, #12]
 801609e:	781b      	ldrb	r3, [r3, #0]
 80160a0:	b29b      	uxth	r3, r3
 80160a2:	429a      	cmp	r2, r3
 80160a4:	d920      	bls.n	80160e8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80160a6:	68fb      	ldr	r3, [r7, #12]
 80160a8:	781b      	ldrb	r3, [r3, #0]
 80160aa:	b29b      	uxth	r3, r3
 80160ac:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80160ae:	e013      	b.n	80160d8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80160b0:	f107 030a 	add.w	r3, r7, #10
 80160b4:	4619      	mov	r1, r3
 80160b6:	6978      	ldr	r0, [r7, #20]
 80160b8:	f000 f81b 	bl	80160f2 <USBD_GetNextDesc>
 80160bc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80160be:	697b      	ldr	r3, [r7, #20]
 80160c0:	785b      	ldrb	r3, [r3, #1]
 80160c2:	2b05      	cmp	r3, #5
 80160c4:	d108      	bne.n	80160d8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80160c6:	697b      	ldr	r3, [r7, #20]
 80160c8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80160ca:	693b      	ldr	r3, [r7, #16]
 80160cc:	789b      	ldrb	r3, [r3, #2]
 80160ce:	78fa      	ldrb	r2, [r7, #3]
 80160d0:	429a      	cmp	r2, r3
 80160d2:	d008      	beq.n	80160e6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80160d4:	2300      	movs	r3, #0
 80160d6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	885b      	ldrh	r3, [r3, #2]
 80160dc:	b29a      	uxth	r2, r3
 80160de:	897b      	ldrh	r3, [r7, #10]
 80160e0:	429a      	cmp	r2, r3
 80160e2:	d8e5      	bhi.n	80160b0 <USBD_GetEpDesc+0x32>
 80160e4:	e000      	b.n	80160e8 <USBD_GetEpDesc+0x6a>
          break;
 80160e6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80160e8:	693b      	ldr	r3, [r7, #16]
}
 80160ea:	4618      	mov	r0, r3
 80160ec:	3718      	adds	r7, #24
 80160ee:	46bd      	mov	sp, r7
 80160f0:	bd80      	pop	{r7, pc}

080160f2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80160f2:	b480      	push	{r7}
 80160f4:	b085      	sub	sp, #20
 80160f6:	af00      	add	r7, sp, #0
 80160f8:	6078      	str	r0, [r7, #4]
 80160fa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8016100:	683b      	ldr	r3, [r7, #0]
 8016102:	881a      	ldrh	r2, [r3, #0]
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	781b      	ldrb	r3, [r3, #0]
 8016108:	b29b      	uxth	r3, r3
 801610a:	4413      	add	r3, r2
 801610c:	b29a      	uxth	r2, r3
 801610e:	683b      	ldr	r3, [r7, #0]
 8016110:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8016112:	68fb      	ldr	r3, [r7, #12]
 8016114:	781b      	ldrb	r3, [r3, #0]
 8016116:	461a      	mov	r2, r3
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	4413      	add	r3, r2
 801611c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801611e:	68fb      	ldr	r3, [r7, #12]
}
 8016120:	4618      	mov	r0, r3
 8016122:	3714      	adds	r7, #20
 8016124:	46bd      	mov	sp, r7
 8016126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801612a:	4770      	bx	lr

0801612c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801612c:	b480      	push	{r7}
 801612e:	b087      	sub	sp, #28
 8016130:	af00      	add	r7, sp, #0
 8016132:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8016138:	697b      	ldr	r3, [r7, #20]
 801613a:	781b      	ldrb	r3, [r3, #0]
 801613c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801613e:	697b      	ldr	r3, [r7, #20]
 8016140:	3301      	adds	r3, #1
 8016142:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8016144:	697b      	ldr	r3, [r7, #20]
 8016146:	781b      	ldrb	r3, [r3, #0]
 8016148:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801614a:	8a3b      	ldrh	r3, [r7, #16]
 801614c:	021b      	lsls	r3, r3, #8
 801614e:	b21a      	sxth	r2, r3
 8016150:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016154:	4313      	orrs	r3, r2
 8016156:	b21b      	sxth	r3, r3
 8016158:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801615a:	89fb      	ldrh	r3, [r7, #14]
}
 801615c:	4618      	mov	r0, r3
 801615e:	371c      	adds	r7, #28
 8016160:	46bd      	mov	sp, r7
 8016162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016166:	4770      	bx	lr

08016168 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016168:	b580      	push	{r7, lr}
 801616a:	b084      	sub	sp, #16
 801616c:	af00      	add	r7, sp, #0
 801616e:	6078      	str	r0, [r7, #4]
 8016170:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016172:	2300      	movs	r3, #0
 8016174:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016176:	683b      	ldr	r3, [r7, #0]
 8016178:	781b      	ldrb	r3, [r3, #0]
 801617a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801617e:	2b40      	cmp	r3, #64	; 0x40
 8016180:	d005      	beq.n	801618e <USBD_StdDevReq+0x26>
 8016182:	2b40      	cmp	r3, #64	; 0x40
 8016184:	d857      	bhi.n	8016236 <USBD_StdDevReq+0xce>
 8016186:	2b00      	cmp	r3, #0
 8016188:	d00f      	beq.n	80161aa <USBD_StdDevReq+0x42>
 801618a:	2b20      	cmp	r3, #32
 801618c:	d153      	bne.n	8016236 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	32ae      	adds	r2, #174	; 0xae
 8016198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801619c:	689b      	ldr	r3, [r3, #8]
 801619e:	6839      	ldr	r1, [r7, #0]
 80161a0:	6878      	ldr	r0, [r7, #4]
 80161a2:	4798      	blx	r3
 80161a4:	4603      	mov	r3, r0
 80161a6:	73fb      	strb	r3, [r7, #15]
      break;
 80161a8:	e04a      	b.n	8016240 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80161aa:	683b      	ldr	r3, [r7, #0]
 80161ac:	785b      	ldrb	r3, [r3, #1]
 80161ae:	2b09      	cmp	r3, #9
 80161b0:	d83b      	bhi.n	801622a <USBD_StdDevReq+0xc2>
 80161b2:	a201      	add	r2, pc, #4	; (adr r2, 80161b8 <USBD_StdDevReq+0x50>)
 80161b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80161b8:	0801620d 	.word	0x0801620d
 80161bc:	08016221 	.word	0x08016221
 80161c0:	0801622b 	.word	0x0801622b
 80161c4:	08016217 	.word	0x08016217
 80161c8:	0801622b 	.word	0x0801622b
 80161cc:	080161eb 	.word	0x080161eb
 80161d0:	080161e1 	.word	0x080161e1
 80161d4:	0801622b 	.word	0x0801622b
 80161d8:	08016203 	.word	0x08016203
 80161dc:	080161f5 	.word	0x080161f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80161e0:	6839      	ldr	r1, [r7, #0]
 80161e2:	6878      	ldr	r0, [r7, #4]
 80161e4:	f000 fa3c 	bl	8016660 <USBD_GetDescriptor>
          break;
 80161e8:	e024      	b.n	8016234 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80161ea:	6839      	ldr	r1, [r7, #0]
 80161ec:	6878      	ldr	r0, [r7, #4]
 80161ee:	f000 fba1 	bl	8016934 <USBD_SetAddress>
          break;
 80161f2:	e01f      	b.n	8016234 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80161f4:	6839      	ldr	r1, [r7, #0]
 80161f6:	6878      	ldr	r0, [r7, #4]
 80161f8:	f000 fbe0 	bl	80169bc <USBD_SetConfig>
 80161fc:	4603      	mov	r3, r0
 80161fe:	73fb      	strb	r3, [r7, #15]
          break;
 8016200:	e018      	b.n	8016234 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8016202:	6839      	ldr	r1, [r7, #0]
 8016204:	6878      	ldr	r0, [r7, #4]
 8016206:	f000 fc83 	bl	8016b10 <USBD_GetConfig>
          break;
 801620a:	e013      	b.n	8016234 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801620c:	6839      	ldr	r1, [r7, #0]
 801620e:	6878      	ldr	r0, [r7, #4]
 8016210:	f000 fcb4 	bl	8016b7c <USBD_GetStatus>
          break;
 8016214:	e00e      	b.n	8016234 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8016216:	6839      	ldr	r1, [r7, #0]
 8016218:	6878      	ldr	r0, [r7, #4]
 801621a:	f000 fce3 	bl	8016be4 <USBD_SetFeature>
          break;
 801621e:	e009      	b.n	8016234 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8016220:	6839      	ldr	r1, [r7, #0]
 8016222:	6878      	ldr	r0, [r7, #4]
 8016224:	f000 fd07 	bl	8016c36 <USBD_ClrFeature>
          break;
 8016228:	e004      	b.n	8016234 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801622a:	6839      	ldr	r1, [r7, #0]
 801622c:	6878      	ldr	r0, [r7, #4]
 801622e:	f000 fd5e 	bl	8016cee <USBD_CtlError>
          break;
 8016232:	bf00      	nop
      }
      break;
 8016234:	e004      	b.n	8016240 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8016236:	6839      	ldr	r1, [r7, #0]
 8016238:	6878      	ldr	r0, [r7, #4]
 801623a:	f000 fd58 	bl	8016cee <USBD_CtlError>
      break;
 801623e:	bf00      	nop
  }

  return ret;
 8016240:	7bfb      	ldrb	r3, [r7, #15]
}
 8016242:	4618      	mov	r0, r3
 8016244:	3710      	adds	r7, #16
 8016246:	46bd      	mov	sp, r7
 8016248:	bd80      	pop	{r7, pc}
 801624a:	bf00      	nop

0801624c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801624c:	b580      	push	{r7, lr}
 801624e:	b084      	sub	sp, #16
 8016250:	af00      	add	r7, sp, #0
 8016252:	6078      	str	r0, [r7, #4]
 8016254:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016256:	2300      	movs	r3, #0
 8016258:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801625a:	683b      	ldr	r3, [r7, #0]
 801625c:	781b      	ldrb	r3, [r3, #0]
 801625e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016262:	2b40      	cmp	r3, #64	; 0x40
 8016264:	d005      	beq.n	8016272 <USBD_StdItfReq+0x26>
 8016266:	2b40      	cmp	r3, #64	; 0x40
 8016268:	d852      	bhi.n	8016310 <USBD_StdItfReq+0xc4>
 801626a:	2b00      	cmp	r3, #0
 801626c:	d001      	beq.n	8016272 <USBD_StdItfReq+0x26>
 801626e:	2b20      	cmp	r3, #32
 8016270:	d14e      	bne.n	8016310 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016278:	b2db      	uxtb	r3, r3
 801627a:	3b01      	subs	r3, #1
 801627c:	2b02      	cmp	r3, #2
 801627e:	d840      	bhi.n	8016302 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8016280:	683b      	ldr	r3, [r7, #0]
 8016282:	889b      	ldrh	r3, [r3, #4]
 8016284:	b2db      	uxtb	r3, r3
 8016286:	2b01      	cmp	r3, #1
 8016288:	d836      	bhi.n	80162f8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801628a:	683b      	ldr	r3, [r7, #0]
 801628c:	889b      	ldrh	r3, [r3, #4]
 801628e:	b2db      	uxtb	r3, r3
 8016290:	4619      	mov	r1, r3
 8016292:	6878      	ldr	r0, [r7, #4]
 8016294:	f7ff fed9 	bl	801604a <USBD_CoreFindIF>
 8016298:	4603      	mov	r3, r0
 801629a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801629c:	7bbb      	ldrb	r3, [r7, #14]
 801629e:	2bff      	cmp	r3, #255	; 0xff
 80162a0:	d01d      	beq.n	80162de <USBD_StdItfReq+0x92>
 80162a2:	7bbb      	ldrb	r3, [r7, #14]
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d11a      	bne.n	80162de <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80162a8:	7bba      	ldrb	r2, [r7, #14]
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	32ae      	adds	r2, #174	; 0xae
 80162ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80162b2:	689b      	ldr	r3, [r3, #8]
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	d00f      	beq.n	80162d8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80162b8:	7bba      	ldrb	r2, [r7, #14]
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80162c0:	7bba      	ldrb	r2, [r7, #14]
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	32ae      	adds	r2, #174	; 0xae
 80162c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80162ca:	689b      	ldr	r3, [r3, #8]
 80162cc:	6839      	ldr	r1, [r7, #0]
 80162ce:	6878      	ldr	r0, [r7, #4]
 80162d0:	4798      	blx	r3
 80162d2:	4603      	mov	r3, r0
 80162d4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80162d6:	e004      	b.n	80162e2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80162d8:	2303      	movs	r3, #3
 80162da:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80162dc:	e001      	b.n	80162e2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80162de:	2303      	movs	r3, #3
 80162e0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80162e2:	683b      	ldr	r3, [r7, #0]
 80162e4:	88db      	ldrh	r3, [r3, #6]
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d110      	bne.n	801630c <USBD_StdItfReq+0xc0>
 80162ea:	7bfb      	ldrb	r3, [r7, #15]
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d10d      	bne.n	801630c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80162f0:	6878      	ldr	r0, [r7, #4]
 80162f2:	f000 fdc7 	bl	8016e84 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80162f6:	e009      	b.n	801630c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80162f8:	6839      	ldr	r1, [r7, #0]
 80162fa:	6878      	ldr	r0, [r7, #4]
 80162fc:	f000 fcf7 	bl	8016cee <USBD_CtlError>
          break;
 8016300:	e004      	b.n	801630c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8016302:	6839      	ldr	r1, [r7, #0]
 8016304:	6878      	ldr	r0, [r7, #4]
 8016306:	f000 fcf2 	bl	8016cee <USBD_CtlError>
          break;
 801630a:	e000      	b.n	801630e <USBD_StdItfReq+0xc2>
          break;
 801630c:	bf00      	nop
      }
      break;
 801630e:	e004      	b.n	801631a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8016310:	6839      	ldr	r1, [r7, #0]
 8016312:	6878      	ldr	r0, [r7, #4]
 8016314:	f000 fceb 	bl	8016cee <USBD_CtlError>
      break;
 8016318:	bf00      	nop
  }

  return ret;
 801631a:	7bfb      	ldrb	r3, [r7, #15]
}
 801631c:	4618      	mov	r0, r3
 801631e:	3710      	adds	r7, #16
 8016320:	46bd      	mov	sp, r7
 8016322:	bd80      	pop	{r7, pc}

08016324 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016324:	b580      	push	{r7, lr}
 8016326:	b084      	sub	sp, #16
 8016328:	af00      	add	r7, sp, #0
 801632a:	6078      	str	r0, [r7, #4]
 801632c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801632e:	2300      	movs	r3, #0
 8016330:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8016332:	683b      	ldr	r3, [r7, #0]
 8016334:	889b      	ldrh	r3, [r3, #4]
 8016336:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016338:	683b      	ldr	r3, [r7, #0]
 801633a:	781b      	ldrb	r3, [r3, #0]
 801633c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016340:	2b40      	cmp	r3, #64	; 0x40
 8016342:	d007      	beq.n	8016354 <USBD_StdEPReq+0x30>
 8016344:	2b40      	cmp	r3, #64	; 0x40
 8016346:	f200 817f 	bhi.w	8016648 <USBD_StdEPReq+0x324>
 801634a:	2b00      	cmp	r3, #0
 801634c:	d02a      	beq.n	80163a4 <USBD_StdEPReq+0x80>
 801634e:	2b20      	cmp	r3, #32
 8016350:	f040 817a 	bne.w	8016648 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8016354:	7bbb      	ldrb	r3, [r7, #14]
 8016356:	4619      	mov	r1, r3
 8016358:	6878      	ldr	r0, [r7, #4]
 801635a:	f7ff fe83 	bl	8016064 <USBD_CoreFindEP>
 801635e:	4603      	mov	r3, r0
 8016360:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016362:	7b7b      	ldrb	r3, [r7, #13]
 8016364:	2bff      	cmp	r3, #255	; 0xff
 8016366:	f000 8174 	beq.w	8016652 <USBD_StdEPReq+0x32e>
 801636a:	7b7b      	ldrb	r3, [r7, #13]
 801636c:	2b00      	cmp	r3, #0
 801636e:	f040 8170 	bne.w	8016652 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8016372:	7b7a      	ldrb	r2, [r7, #13]
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801637a:	7b7a      	ldrb	r2, [r7, #13]
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	32ae      	adds	r2, #174	; 0xae
 8016380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016384:	689b      	ldr	r3, [r3, #8]
 8016386:	2b00      	cmp	r3, #0
 8016388:	f000 8163 	beq.w	8016652 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 801638c:	7b7a      	ldrb	r2, [r7, #13]
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	32ae      	adds	r2, #174	; 0xae
 8016392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016396:	689b      	ldr	r3, [r3, #8]
 8016398:	6839      	ldr	r1, [r7, #0]
 801639a:	6878      	ldr	r0, [r7, #4]
 801639c:	4798      	blx	r3
 801639e:	4603      	mov	r3, r0
 80163a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80163a2:	e156      	b.n	8016652 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80163a4:	683b      	ldr	r3, [r7, #0]
 80163a6:	785b      	ldrb	r3, [r3, #1]
 80163a8:	2b03      	cmp	r3, #3
 80163aa:	d008      	beq.n	80163be <USBD_StdEPReq+0x9a>
 80163ac:	2b03      	cmp	r3, #3
 80163ae:	f300 8145 	bgt.w	801663c <USBD_StdEPReq+0x318>
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	f000 809b 	beq.w	80164ee <USBD_StdEPReq+0x1ca>
 80163b8:	2b01      	cmp	r3, #1
 80163ba:	d03c      	beq.n	8016436 <USBD_StdEPReq+0x112>
 80163bc:	e13e      	b.n	801663c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80163c4:	b2db      	uxtb	r3, r3
 80163c6:	2b02      	cmp	r3, #2
 80163c8:	d002      	beq.n	80163d0 <USBD_StdEPReq+0xac>
 80163ca:	2b03      	cmp	r3, #3
 80163cc:	d016      	beq.n	80163fc <USBD_StdEPReq+0xd8>
 80163ce:	e02c      	b.n	801642a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80163d0:	7bbb      	ldrb	r3, [r7, #14]
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	d00d      	beq.n	80163f2 <USBD_StdEPReq+0xce>
 80163d6:	7bbb      	ldrb	r3, [r7, #14]
 80163d8:	2b80      	cmp	r3, #128	; 0x80
 80163da:	d00a      	beq.n	80163f2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80163dc:	7bbb      	ldrb	r3, [r7, #14]
 80163de:	4619      	mov	r1, r3
 80163e0:	6878      	ldr	r0, [r7, #4]
 80163e2:	f001 f96b 	bl	80176bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80163e6:	2180      	movs	r1, #128	; 0x80
 80163e8:	6878      	ldr	r0, [r7, #4]
 80163ea:	f001 f967 	bl	80176bc <USBD_LL_StallEP>
 80163ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80163f0:	e020      	b.n	8016434 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80163f2:	6839      	ldr	r1, [r7, #0]
 80163f4:	6878      	ldr	r0, [r7, #4]
 80163f6:	f000 fc7a 	bl	8016cee <USBD_CtlError>
              break;
 80163fa:	e01b      	b.n	8016434 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80163fc:	683b      	ldr	r3, [r7, #0]
 80163fe:	885b      	ldrh	r3, [r3, #2]
 8016400:	2b00      	cmp	r3, #0
 8016402:	d10e      	bne.n	8016422 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016404:	7bbb      	ldrb	r3, [r7, #14]
 8016406:	2b00      	cmp	r3, #0
 8016408:	d00b      	beq.n	8016422 <USBD_StdEPReq+0xfe>
 801640a:	7bbb      	ldrb	r3, [r7, #14]
 801640c:	2b80      	cmp	r3, #128	; 0x80
 801640e:	d008      	beq.n	8016422 <USBD_StdEPReq+0xfe>
 8016410:	683b      	ldr	r3, [r7, #0]
 8016412:	88db      	ldrh	r3, [r3, #6]
 8016414:	2b00      	cmp	r3, #0
 8016416:	d104      	bne.n	8016422 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8016418:	7bbb      	ldrb	r3, [r7, #14]
 801641a:	4619      	mov	r1, r3
 801641c:	6878      	ldr	r0, [r7, #4]
 801641e:	f001 f94d 	bl	80176bc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8016422:	6878      	ldr	r0, [r7, #4]
 8016424:	f000 fd2e 	bl	8016e84 <USBD_CtlSendStatus>

              break;
 8016428:	e004      	b.n	8016434 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801642a:	6839      	ldr	r1, [r7, #0]
 801642c:	6878      	ldr	r0, [r7, #4]
 801642e:	f000 fc5e 	bl	8016cee <USBD_CtlError>
              break;
 8016432:	bf00      	nop
          }
          break;
 8016434:	e107      	b.n	8016646 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801643c:	b2db      	uxtb	r3, r3
 801643e:	2b02      	cmp	r3, #2
 8016440:	d002      	beq.n	8016448 <USBD_StdEPReq+0x124>
 8016442:	2b03      	cmp	r3, #3
 8016444:	d016      	beq.n	8016474 <USBD_StdEPReq+0x150>
 8016446:	e04b      	b.n	80164e0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016448:	7bbb      	ldrb	r3, [r7, #14]
 801644a:	2b00      	cmp	r3, #0
 801644c:	d00d      	beq.n	801646a <USBD_StdEPReq+0x146>
 801644e:	7bbb      	ldrb	r3, [r7, #14]
 8016450:	2b80      	cmp	r3, #128	; 0x80
 8016452:	d00a      	beq.n	801646a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016454:	7bbb      	ldrb	r3, [r7, #14]
 8016456:	4619      	mov	r1, r3
 8016458:	6878      	ldr	r0, [r7, #4]
 801645a:	f001 f92f 	bl	80176bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801645e:	2180      	movs	r1, #128	; 0x80
 8016460:	6878      	ldr	r0, [r7, #4]
 8016462:	f001 f92b 	bl	80176bc <USBD_LL_StallEP>
 8016466:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016468:	e040      	b.n	80164ec <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801646a:	6839      	ldr	r1, [r7, #0]
 801646c:	6878      	ldr	r0, [r7, #4]
 801646e:	f000 fc3e 	bl	8016cee <USBD_CtlError>
              break;
 8016472:	e03b      	b.n	80164ec <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016474:	683b      	ldr	r3, [r7, #0]
 8016476:	885b      	ldrh	r3, [r3, #2]
 8016478:	2b00      	cmp	r3, #0
 801647a:	d136      	bne.n	80164ea <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801647c:	7bbb      	ldrb	r3, [r7, #14]
 801647e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016482:	2b00      	cmp	r3, #0
 8016484:	d004      	beq.n	8016490 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8016486:	7bbb      	ldrb	r3, [r7, #14]
 8016488:	4619      	mov	r1, r3
 801648a:	6878      	ldr	r0, [r7, #4]
 801648c:	f001 f935 	bl	80176fa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8016490:	6878      	ldr	r0, [r7, #4]
 8016492:	f000 fcf7 	bl	8016e84 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8016496:	7bbb      	ldrb	r3, [r7, #14]
 8016498:	4619      	mov	r1, r3
 801649a:	6878      	ldr	r0, [r7, #4]
 801649c:	f7ff fde2 	bl	8016064 <USBD_CoreFindEP>
 80164a0:	4603      	mov	r3, r0
 80164a2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80164a4:	7b7b      	ldrb	r3, [r7, #13]
 80164a6:	2bff      	cmp	r3, #255	; 0xff
 80164a8:	d01f      	beq.n	80164ea <USBD_StdEPReq+0x1c6>
 80164aa:	7b7b      	ldrb	r3, [r7, #13]
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	d11c      	bne.n	80164ea <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80164b0:	7b7a      	ldrb	r2, [r7, #13]
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80164b8:	7b7a      	ldrb	r2, [r7, #13]
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	32ae      	adds	r2, #174	; 0xae
 80164be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80164c2:	689b      	ldr	r3, [r3, #8]
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	d010      	beq.n	80164ea <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80164c8:	7b7a      	ldrb	r2, [r7, #13]
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	32ae      	adds	r2, #174	; 0xae
 80164ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80164d2:	689b      	ldr	r3, [r3, #8]
 80164d4:	6839      	ldr	r1, [r7, #0]
 80164d6:	6878      	ldr	r0, [r7, #4]
 80164d8:	4798      	blx	r3
 80164da:	4603      	mov	r3, r0
 80164dc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80164de:	e004      	b.n	80164ea <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80164e0:	6839      	ldr	r1, [r7, #0]
 80164e2:	6878      	ldr	r0, [r7, #4]
 80164e4:	f000 fc03 	bl	8016cee <USBD_CtlError>
              break;
 80164e8:	e000      	b.n	80164ec <USBD_StdEPReq+0x1c8>
              break;
 80164ea:	bf00      	nop
          }
          break;
 80164ec:	e0ab      	b.n	8016646 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80164f4:	b2db      	uxtb	r3, r3
 80164f6:	2b02      	cmp	r3, #2
 80164f8:	d002      	beq.n	8016500 <USBD_StdEPReq+0x1dc>
 80164fa:	2b03      	cmp	r3, #3
 80164fc:	d032      	beq.n	8016564 <USBD_StdEPReq+0x240>
 80164fe:	e097      	b.n	8016630 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016500:	7bbb      	ldrb	r3, [r7, #14]
 8016502:	2b00      	cmp	r3, #0
 8016504:	d007      	beq.n	8016516 <USBD_StdEPReq+0x1f2>
 8016506:	7bbb      	ldrb	r3, [r7, #14]
 8016508:	2b80      	cmp	r3, #128	; 0x80
 801650a:	d004      	beq.n	8016516 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 801650c:	6839      	ldr	r1, [r7, #0]
 801650e:	6878      	ldr	r0, [r7, #4]
 8016510:	f000 fbed 	bl	8016cee <USBD_CtlError>
                break;
 8016514:	e091      	b.n	801663a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016516:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801651a:	2b00      	cmp	r3, #0
 801651c:	da0b      	bge.n	8016536 <USBD_StdEPReq+0x212>
 801651e:	7bbb      	ldrb	r3, [r7, #14]
 8016520:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016524:	4613      	mov	r3, r2
 8016526:	009b      	lsls	r3, r3, #2
 8016528:	4413      	add	r3, r2
 801652a:	009b      	lsls	r3, r3, #2
 801652c:	3310      	adds	r3, #16
 801652e:	687a      	ldr	r2, [r7, #4]
 8016530:	4413      	add	r3, r2
 8016532:	3304      	adds	r3, #4
 8016534:	e00b      	b.n	801654e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016536:	7bbb      	ldrb	r3, [r7, #14]
 8016538:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801653c:	4613      	mov	r3, r2
 801653e:	009b      	lsls	r3, r3, #2
 8016540:	4413      	add	r3, r2
 8016542:	009b      	lsls	r3, r3, #2
 8016544:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016548:	687a      	ldr	r2, [r7, #4]
 801654a:	4413      	add	r3, r2
 801654c:	3304      	adds	r3, #4
 801654e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8016550:	68bb      	ldr	r3, [r7, #8]
 8016552:	2200      	movs	r2, #0
 8016554:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016556:	68bb      	ldr	r3, [r7, #8]
 8016558:	2202      	movs	r2, #2
 801655a:	4619      	mov	r1, r3
 801655c:	6878      	ldr	r0, [r7, #4]
 801655e:	f000 fc37 	bl	8016dd0 <USBD_CtlSendData>
              break;
 8016562:	e06a      	b.n	801663a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016564:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016568:	2b00      	cmp	r3, #0
 801656a:	da11      	bge.n	8016590 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801656c:	7bbb      	ldrb	r3, [r7, #14]
 801656e:	f003 020f 	and.w	r2, r3, #15
 8016572:	6879      	ldr	r1, [r7, #4]
 8016574:	4613      	mov	r3, r2
 8016576:	009b      	lsls	r3, r3, #2
 8016578:	4413      	add	r3, r2
 801657a:	009b      	lsls	r3, r3, #2
 801657c:	440b      	add	r3, r1
 801657e:	3324      	adds	r3, #36	; 0x24
 8016580:	881b      	ldrh	r3, [r3, #0]
 8016582:	2b00      	cmp	r3, #0
 8016584:	d117      	bne.n	80165b6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016586:	6839      	ldr	r1, [r7, #0]
 8016588:	6878      	ldr	r0, [r7, #4]
 801658a:	f000 fbb0 	bl	8016cee <USBD_CtlError>
                  break;
 801658e:	e054      	b.n	801663a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8016590:	7bbb      	ldrb	r3, [r7, #14]
 8016592:	f003 020f 	and.w	r2, r3, #15
 8016596:	6879      	ldr	r1, [r7, #4]
 8016598:	4613      	mov	r3, r2
 801659a:	009b      	lsls	r3, r3, #2
 801659c:	4413      	add	r3, r2
 801659e:	009b      	lsls	r3, r3, #2
 80165a0:	440b      	add	r3, r1
 80165a2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80165a6:	881b      	ldrh	r3, [r3, #0]
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d104      	bne.n	80165b6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80165ac:	6839      	ldr	r1, [r7, #0]
 80165ae:	6878      	ldr	r0, [r7, #4]
 80165b0:	f000 fb9d 	bl	8016cee <USBD_CtlError>
                  break;
 80165b4:	e041      	b.n	801663a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80165b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	da0b      	bge.n	80165d6 <USBD_StdEPReq+0x2b2>
 80165be:	7bbb      	ldrb	r3, [r7, #14]
 80165c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80165c4:	4613      	mov	r3, r2
 80165c6:	009b      	lsls	r3, r3, #2
 80165c8:	4413      	add	r3, r2
 80165ca:	009b      	lsls	r3, r3, #2
 80165cc:	3310      	adds	r3, #16
 80165ce:	687a      	ldr	r2, [r7, #4]
 80165d0:	4413      	add	r3, r2
 80165d2:	3304      	adds	r3, #4
 80165d4:	e00b      	b.n	80165ee <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80165d6:	7bbb      	ldrb	r3, [r7, #14]
 80165d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80165dc:	4613      	mov	r3, r2
 80165de:	009b      	lsls	r3, r3, #2
 80165e0:	4413      	add	r3, r2
 80165e2:	009b      	lsls	r3, r3, #2
 80165e4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80165e8:	687a      	ldr	r2, [r7, #4]
 80165ea:	4413      	add	r3, r2
 80165ec:	3304      	adds	r3, #4
 80165ee:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80165f0:	7bbb      	ldrb	r3, [r7, #14]
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	d002      	beq.n	80165fc <USBD_StdEPReq+0x2d8>
 80165f6:	7bbb      	ldrb	r3, [r7, #14]
 80165f8:	2b80      	cmp	r3, #128	; 0x80
 80165fa:	d103      	bne.n	8016604 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80165fc:	68bb      	ldr	r3, [r7, #8]
 80165fe:	2200      	movs	r2, #0
 8016600:	601a      	str	r2, [r3, #0]
 8016602:	e00e      	b.n	8016622 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8016604:	7bbb      	ldrb	r3, [r7, #14]
 8016606:	4619      	mov	r1, r3
 8016608:	6878      	ldr	r0, [r7, #4]
 801660a:	f001 f895 	bl	8017738 <USBD_LL_IsStallEP>
 801660e:	4603      	mov	r3, r0
 8016610:	2b00      	cmp	r3, #0
 8016612:	d003      	beq.n	801661c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8016614:	68bb      	ldr	r3, [r7, #8]
 8016616:	2201      	movs	r2, #1
 8016618:	601a      	str	r2, [r3, #0]
 801661a:	e002      	b.n	8016622 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 801661c:	68bb      	ldr	r3, [r7, #8]
 801661e:	2200      	movs	r2, #0
 8016620:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016622:	68bb      	ldr	r3, [r7, #8]
 8016624:	2202      	movs	r2, #2
 8016626:	4619      	mov	r1, r3
 8016628:	6878      	ldr	r0, [r7, #4]
 801662a:	f000 fbd1 	bl	8016dd0 <USBD_CtlSendData>
              break;
 801662e:	e004      	b.n	801663a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8016630:	6839      	ldr	r1, [r7, #0]
 8016632:	6878      	ldr	r0, [r7, #4]
 8016634:	f000 fb5b 	bl	8016cee <USBD_CtlError>
              break;
 8016638:	bf00      	nop
          }
          break;
 801663a:	e004      	b.n	8016646 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 801663c:	6839      	ldr	r1, [r7, #0]
 801663e:	6878      	ldr	r0, [r7, #4]
 8016640:	f000 fb55 	bl	8016cee <USBD_CtlError>
          break;
 8016644:	bf00      	nop
      }
      break;
 8016646:	e005      	b.n	8016654 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8016648:	6839      	ldr	r1, [r7, #0]
 801664a:	6878      	ldr	r0, [r7, #4]
 801664c:	f000 fb4f 	bl	8016cee <USBD_CtlError>
      break;
 8016650:	e000      	b.n	8016654 <USBD_StdEPReq+0x330>
      break;
 8016652:	bf00      	nop
  }

  return ret;
 8016654:	7bfb      	ldrb	r3, [r7, #15]
}
 8016656:	4618      	mov	r0, r3
 8016658:	3710      	adds	r7, #16
 801665a:	46bd      	mov	sp, r7
 801665c:	bd80      	pop	{r7, pc}
	...

08016660 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016660:	b580      	push	{r7, lr}
 8016662:	b084      	sub	sp, #16
 8016664:	af00      	add	r7, sp, #0
 8016666:	6078      	str	r0, [r7, #4]
 8016668:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801666a:	2300      	movs	r3, #0
 801666c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801666e:	2300      	movs	r3, #0
 8016670:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8016672:	2300      	movs	r3, #0
 8016674:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8016676:	683b      	ldr	r3, [r7, #0]
 8016678:	885b      	ldrh	r3, [r3, #2]
 801667a:	0a1b      	lsrs	r3, r3, #8
 801667c:	b29b      	uxth	r3, r3
 801667e:	3b01      	subs	r3, #1
 8016680:	2b06      	cmp	r3, #6
 8016682:	f200 8128 	bhi.w	80168d6 <USBD_GetDescriptor+0x276>
 8016686:	a201      	add	r2, pc, #4	; (adr r2, 801668c <USBD_GetDescriptor+0x2c>)
 8016688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801668c:	080166a9 	.word	0x080166a9
 8016690:	080166c1 	.word	0x080166c1
 8016694:	08016701 	.word	0x08016701
 8016698:	080168d7 	.word	0x080168d7
 801669c:	080168d7 	.word	0x080168d7
 80166a0:	08016877 	.word	0x08016877
 80166a4:	080168a3 	.word	0x080168a3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80166ae:	681b      	ldr	r3, [r3, #0]
 80166b0:	687a      	ldr	r2, [r7, #4]
 80166b2:	7c12      	ldrb	r2, [r2, #16]
 80166b4:	f107 0108 	add.w	r1, r7, #8
 80166b8:	4610      	mov	r0, r2
 80166ba:	4798      	blx	r3
 80166bc:	60f8      	str	r0, [r7, #12]
      break;
 80166be:	e112      	b.n	80168e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	7c1b      	ldrb	r3, [r3, #16]
 80166c4:	2b00      	cmp	r3, #0
 80166c6:	d10d      	bne.n	80166e4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80166ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80166d0:	f107 0208 	add.w	r2, r7, #8
 80166d4:	4610      	mov	r0, r2
 80166d6:	4798      	blx	r3
 80166d8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80166da:	68fb      	ldr	r3, [r7, #12]
 80166dc:	3301      	adds	r3, #1
 80166de:	2202      	movs	r2, #2
 80166e0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80166e2:	e100      	b.n	80168e6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80166ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80166ec:	f107 0208 	add.w	r2, r7, #8
 80166f0:	4610      	mov	r0, r2
 80166f2:	4798      	blx	r3
 80166f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80166f6:	68fb      	ldr	r3, [r7, #12]
 80166f8:	3301      	adds	r3, #1
 80166fa:	2202      	movs	r2, #2
 80166fc:	701a      	strb	r2, [r3, #0]
      break;
 80166fe:	e0f2      	b.n	80168e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8016700:	683b      	ldr	r3, [r7, #0]
 8016702:	885b      	ldrh	r3, [r3, #2]
 8016704:	b2db      	uxtb	r3, r3
 8016706:	2b05      	cmp	r3, #5
 8016708:	f200 80ac 	bhi.w	8016864 <USBD_GetDescriptor+0x204>
 801670c:	a201      	add	r2, pc, #4	; (adr r2, 8016714 <USBD_GetDescriptor+0xb4>)
 801670e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016712:	bf00      	nop
 8016714:	0801672d 	.word	0x0801672d
 8016718:	08016761 	.word	0x08016761
 801671c:	08016795 	.word	0x08016795
 8016720:	080167c9 	.word	0x080167c9
 8016724:	080167fd 	.word	0x080167fd
 8016728:	08016831 	.word	0x08016831
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016732:	685b      	ldr	r3, [r3, #4]
 8016734:	2b00      	cmp	r3, #0
 8016736:	d00b      	beq.n	8016750 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801673e:	685b      	ldr	r3, [r3, #4]
 8016740:	687a      	ldr	r2, [r7, #4]
 8016742:	7c12      	ldrb	r2, [r2, #16]
 8016744:	f107 0108 	add.w	r1, r7, #8
 8016748:	4610      	mov	r0, r2
 801674a:	4798      	blx	r3
 801674c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801674e:	e091      	b.n	8016874 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016750:	6839      	ldr	r1, [r7, #0]
 8016752:	6878      	ldr	r0, [r7, #4]
 8016754:	f000 facb 	bl	8016cee <USBD_CtlError>
            err++;
 8016758:	7afb      	ldrb	r3, [r7, #11]
 801675a:	3301      	adds	r3, #1
 801675c:	72fb      	strb	r3, [r7, #11]
          break;
 801675e:	e089      	b.n	8016874 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016766:	689b      	ldr	r3, [r3, #8]
 8016768:	2b00      	cmp	r3, #0
 801676a:	d00b      	beq.n	8016784 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016772:	689b      	ldr	r3, [r3, #8]
 8016774:	687a      	ldr	r2, [r7, #4]
 8016776:	7c12      	ldrb	r2, [r2, #16]
 8016778:	f107 0108 	add.w	r1, r7, #8
 801677c:	4610      	mov	r0, r2
 801677e:	4798      	blx	r3
 8016780:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016782:	e077      	b.n	8016874 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016784:	6839      	ldr	r1, [r7, #0]
 8016786:	6878      	ldr	r0, [r7, #4]
 8016788:	f000 fab1 	bl	8016cee <USBD_CtlError>
            err++;
 801678c:	7afb      	ldrb	r3, [r7, #11]
 801678e:	3301      	adds	r3, #1
 8016790:	72fb      	strb	r3, [r7, #11]
          break;
 8016792:	e06f      	b.n	8016874 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801679a:	68db      	ldr	r3, [r3, #12]
 801679c:	2b00      	cmp	r3, #0
 801679e:	d00b      	beq.n	80167b8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80167a6:	68db      	ldr	r3, [r3, #12]
 80167a8:	687a      	ldr	r2, [r7, #4]
 80167aa:	7c12      	ldrb	r2, [r2, #16]
 80167ac:	f107 0108 	add.w	r1, r7, #8
 80167b0:	4610      	mov	r0, r2
 80167b2:	4798      	blx	r3
 80167b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80167b6:	e05d      	b.n	8016874 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80167b8:	6839      	ldr	r1, [r7, #0]
 80167ba:	6878      	ldr	r0, [r7, #4]
 80167bc:	f000 fa97 	bl	8016cee <USBD_CtlError>
            err++;
 80167c0:	7afb      	ldrb	r3, [r7, #11]
 80167c2:	3301      	adds	r3, #1
 80167c4:	72fb      	strb	r3, [r7, #11]
          break;
 80167c6:	e055      	b.n	8016874 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80167ce:	691b      	ldr	r3, [r3, #16]
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	d00b      	beq.n	80167ec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80167da:	691b      	ldr	r3, [r3, #16]
 80167dc:	687a      	ldr	r2, [r7, #4]
 80167de:	7c12      	ldrb	r2, [r2, #16]
 80167e0:	f107 0108 	add.w	r1, r7, #8
 80167e4:	4610      	mov	r0, r2
 80167e6:	4798      	blx	r3
 80167e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80167ea:	e043      	b.n	8016874 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80167ec:	6839      	ldr	r1, [r7, #0]
 80167ee:	6878      	ldr	r0, [r7, #4]
 80167f0:	f000 fa7d 	bl	8016cee <USBD_CtlError>
            err++;
 80167f4:	7afb      	ldrb	r3, [r7, #11]
 80167f6:	3301      	adds	r3, #1
 80167f8:	72fb      	strb	r3, [r7, #11]
          break;
 80167fa:	e03b      	b.n	8016874 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016802:	695b      	ldr	r3, [r3, #20]
 8016804:	2b00      	cmp	r3, #0
 8016806:	d00b      	beq.n	8016820 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801680e:	695b      	ldr	r3, [r3, #20]
 8016810:	687a      	ldr	r2, [r7, #4]
 8016812:	7c12      	ldrb	r2, [r2, #16]
 8016814:	f107 0108 	add.w	r1, r7, #8
 8016818:	4610      	mov	r0, r2
 801681a:	4798      	blx	r3
 801681c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801681e:	e029      	b.n	8016874 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016820:	6839      	ldr	r1, [r7, #0]
 8016822:	6878      	ldr	r0, [r7, #4]
 8016824:	f000 fa63 	bl	8016cee <USBD_CtlError>
            err++;
 8016828:	7afb      	ldrb	r3, [r7, #11]
 801682a:	3301      	adds	r3, #1
 801682c:	72fb      	strb	r3, [r7, #11]
          break;
 801682e:	e021      	b.n	8016874 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016836:	699b      	ldr	r3, [r3, #24]
 8016838:	2b00      	cmp	r3, #0
 801683a:	d00b      	beq.n	8016854 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016842:	699b      	ldr	r3, [r3, #24]
 8016844:	687a      	ldr	r2, [r7, #4]
 8016846:	7c12      	ldrb	r2, [r2, #16]
 8016848:	f107 0108 	add.w	r1, r7, #8
 801684c:	4610      	mov	r0, r2
 801684e:	4798      	blx	r3
 8016850:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016852:	e00f      	b.n	8016874 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016854:	6839      	ldr	r1, [r7, #0]
 8016856:	6878      	ldr	r0, [r7, #4]
 8016858:	f000 fa49 	bl	8016cee <USBD_CtlError>
            err++;
 801685c:	7afb      	ldrb	r3, [r7, #11]
 801685e:	3301      	adds	r3, #1
 8016860:	72fb      	strb	r3, [r7, #11]
          break;
 8016862:	e007      	b.n	8016874 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8016864:	6839      	ldr	r1, [r7, #0]
 8016866:	6878      	ldr	r0, [r7, #4]
 8016868:	f000 fa41 	bl	8016cee <USBD_CtlError>
          err++;
 801686c:	7afb      	ldrb	r3, [r7, #11]
 801686e:	3301      	adds	r3, #1
 8016870:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8016872:	bf00      	nop
      }
      break;
 8016874:	e037      	b.n	80168e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	7c1b      	ldrb	r3, [r3, #16]
 801687a:	2b00      	cmp	r3, #0
 801687c:	d109      	bne.n	8016892 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016886:	f107 0208 	add.w	r2, r7, #8
 801688a:	4610      	mov	r0, r2
 801688c:	4798      	blx	r3
 801688e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016890:	e029      	b.n	80168e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8016892:	6839      	ldr	r1, [r7, #0]
 8016894:	6878      	ldr	r0, [r7, #4]
 8016896:	f000 fa2a 	bl	8016cee <USBD_CtlError>
        err++;
 801689a:	7afb      	ldrb	r3, [r7, #11]
 801689c:	3301      	adds	r3, #1
 801689e:	72fb      	strb	r3, [r7, #11]
      break;
 80168a0:	e021      	b.n	80168e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	7c1b      	ldrb	r3, [r3, #16]
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	d10d      	bne.n	80168c6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80168b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80168b2:	f107 0208 	add.w	r2, r7, #8
 80168b6:	4610      	mov	r0, r2
 80168b8:	4798      	blx	r3
 80168ba:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80168bc:	68fb      	ldr	r3, [r7, #12]
 80168be:	3301      	adds	r3, #1
 80168c0:	2207      	movs	r2, #7
 80168c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80168c4:	e00f      	b.n	80168e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80168c6:	6839      	ldr	r1, [r7, #0]
 80168c8:	6878      	ldr	r0, [r7, #4]
 80168ca:	f000 fa10 	bl	8016cee <USBD_CtlError>
        err++;
 80168ce:	7afb      	ldrb	r3, [r7, #11]
 80168d0:	3301      	adds	r3, #1
 80168d2:	72fb      	strb	r3, [r7, #11]
      break;
 80168d4:	e007      	b.n	80168e6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80168d6:	6839      	ldr	r1, [r7, #0]
 80168d8:	6878      	ldr	r0, [r7, #4]
 80168da:	f000 fa08 	bl	8016cee <USBD_CtlError>
      err++;
 80168de:	7afb      	ldrb	r3, [r7, #11]
 80168e0:	3301      	adds	r3, #1
 80168e2:	72fb      	strb	r3, [r7, #11]
      break;
 80168e4:	bf00      	nop
  }

  if (err != 0U)
 80168e6:	7afb      	ldrb	r3, [r7, #11]
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d11e      	bne.n	801692a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80168ec:	683b      	ldr	r3, [r7, #0]
 80168ee:	88db      	ldrh	r3, [r3, #6]
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	d016      	beq.n	8016922 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80168f4:	893b      	ldrh	r3, [r7, #8]
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	d00e      	beq.n	8016918 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80168fa:	683b      	ldr	r3, [r7, #0]
 80168fc:	88da      	ldrh	r2, [r3, #6]
 80168fe:	893b      	ldrh	r3, [r7, #8]
 8016900:	4293      	cmp	r3, r2
 8016902:	bf28      	it	cs
 8016904:	4613      	movcs	r3, r2
 8016906:	b29b      	uxth	r3, r3
 8016908:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801690a:	893b      	ldrh	r3, [r7, #8]
 801690c:	461a      	mov	r2, r3
 801690e:	68f9      	ldr	r1, [r7, #12]
 8016910:	6878      	ldr	r0, [r7, #4]
 8016912:	f000 fa5d 	bl	8016dd0 <USBD_CtlSendData>
 8016916:	e009      	b.n	801692c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8016918:	6839      	ldr	r1, [r7, #0]
 801691a:	6878      	ldr	r0, [r7, #4]
 801691c:	f000 f9e7 	bl	8016cee <USBD_CtlError>
 8016920:	e004      	b.n	801692c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8016922:	6878      	ldr	r0, [r7, #4]
 8016924:	f000 faae 	bl	8016e84 <USBD_CtlSendStatus>
 8016928:	e000      	b.n	801692c <USBD_GetDescriptor+0x2cc>
    return;
 801692a:	bf00      	nop
  }
}
 801692c:	3710      	adds	r7, #16
 801692e:	46bd      	mov	sp, r7
 8016930:	bd80      	pop	{r7, pc}
 8016932:	bf00      	nop

08016934 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016934:	b580      	push	{r7, lr}
 8016936:	b084      	sub	sp, #16
 8016938:	af00      	add	r7, sp, #0
 801693a:	6078      	str	r0, [r7, #4]
 801693c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801693e:	683b      	ldr	r3, [r7, #0]
 8016940:	889b      	ldrh	r3, [r3, #4]
 8016942:	2b00      	cmp	r3, #0
 8016944:	d131      	bne.n	80169aa <USBD_SetAddress+0x76>
 8016946:	683b      	ldr	r3, [r7, #0]
 8016948:	88db      	ldrh	r3, [r3, #6]
 801694a:	2b00      	cmp	r3, #0
 801694c:	d12d      	bne.n	80169aa <USBD_SetAddress+0x76>
 801694e:	683b      	ldr	r3, [r7, #0]
 8016950:	885b      	ldrh	r3, [r3, #2]
 8016952:	2b7f      	cmp	r3, #127	; 0x7f
 8016954:	d829      	bhi.n	80169aa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8016956:	683b      	ldr	r3, [r7, #0]
 8016958:	885b      	ldrh	r3, [r3, #2]
 801695a:	b2db      	uxtb	r3, r3
 801695c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016960:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016968:	b2db      	uxtb	r3, r3
 801696a:	2b03      	cmp	r3, #3
 801696c:	d104      	bne.n	8016978 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801696e:	6839      	ldr	r1, [r7, #0]
 8016970:	6878      	ldr	r0, [r7, #4]
 8016972:	f000 f9bc 	bl	8016cee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016976:	e01d      	b.n	80169b4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	7bfa      	ldrb	r2, [r7, #15]
 801697c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016980:	7bfb      	ldrb	r3, [r7, #15]
 8016982:	4619      	mov	r1, r3
 8016984:	6878      	ldr	r0, [r7, #4]
 8016986:	f000 ff03 	bl	8017790 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801698a:	6878      	ldr	r0, [r7, #4]
 801698c:	f000 fa7a 	bl	8016e84 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8016990:	7bfb      	ldrb	r3, [r7, #15]
 8016992:	2b00      	cmp	r3, #0
 8016994:	d004      	beq.n	80169a0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	2202      	movs	r2, #2
 801699a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801699e:	e009      	b.n	80169b4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	2201      	movs	r2, #1
 80169a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80169a8:	e004      	b.n	80169b4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80169aa:	6839      	ldr	r1, [r7, #0]
 80169ac:	6878      	ldr	r0, [r7, #4]
 80169ae:	f000 f99e 	bl	8016cee <USBD_CtlError>
  }
}
 80169b2:	bf00      	nop
 80169b4:	bf00      	nop
 80169b6:	3710      	adds	r7, #16
 80169b8:	46bd      	mov	sp, r7
 80169ba:	bd80      	pop	{r7, pc}

080169bc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80169bc:	b580      	push	{r7, lr}
 80169be:	b084      	sub	sp, #16
 80169c0:	af00      	add	r7, sp, #0
 80169c2:	6078      	str	r0, [r7, #4]
 80169c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80169c6:	2300      	movs	r3, #0
 80169c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80169ca:	683b      	ldr	r3, [r7, #0]
 80169cc:	885b      	ldrh	r3, [r3, #2]
 80169ce:	b2da      	uxtb	r2, r3
 80169d0:	4b4e      	ldr	r3, [pc, #312]	; (8016b0c <USBD_SetConfig+0x150>)
 80169d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80169d4:	4b4d      	ldr	r3, [pc, #308]	; (8016b0c <USBD_SetConfig+0x150>)
 80169d6:	781b      	ldrb	r3, [r3, #0]
 80169d8:	2b01      	cmp	r3, #1
 80169da:	d905      	bls.n	80169e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80169dc:	6839      	ldr	r1, [r7, #0]
 80169de:	6878      	ldr	r0, [r7, #4]
 80169e0:	f000 f985 	bl	8016cee <USBD_CtlError>
    return USBD_FAIL;
 80169e4:	2303      	movs	r3, #3
 80169e6:	e08c      	b.n	8016b02 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80169ee:	b2db      	uxtb	r3, r3
 80169f0:	2b02      	cmp	r3, #2
 80169f2:	d002      	beq.n	80169fa <USBD_SetConfig+0x3e>
 80169f4:	2b03      	cmp	r3, #3
 80169f6:	d029      	beq.n	8016a4c <USBD_SetConfig+0x90>
 80169f8:	e075      	b.n	8016ae6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80169fa:	4b44      	ldr	r3, [pc, #272]	; (8016b0c <USBD_SetConfig+0x150>)
 80169fc:	781b      	ldrb	r3, [r3, #0]
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	d020      	beq.n	8016a44 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8016a02:	4b42      	ldr	r3, [pc, #264]	; (8016b0c <USBD_SetConfig+0x150>)
 8016a04:	781b      	ldrb	r3, [r3, #0]
 8016a06:	461a      	mov	r2, r3
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016a0c:	4b3f      	ldr	r3, [pc, #252]	; (8016b0c <USBD_SetConfig+0x150>)
 8016a0e:	781b      	ldrb	r3, [r3, #0]
 8016a10:	4619      	mov	r1, r3
 8016a12:	6878      	ldr	r0, [r7, #4]
 8016a14:	f7fe ffe7 	bl	80159e6 <USBD_SetClassConfig>
 8016a18:	4603      	mov	r3, r0
 8016a1a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8016a1c:	7bfb      	ldrb	r3, [r7, #15]
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	d008      	beq.n	8016a34 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8016a22:	6839      	ldr	r1, [r7, #0]
 8016a24:	6878      	ldr	r0, [r7, #4]
 8016a26:	f000 f962 	bl	8016cee <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	2202      	movs	r2, #2
 8016a2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016a32:	e065      	b.n	8016b00 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016a34:	6878      	ldr	r0, [r7, #4]
 8016a36:	f000 fa25 	bl	8016e84 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	2203      	movs	r2, #3
 8016a3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016a42:	e05d      	b.n	8016b00 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016a44:	6878      	ldr	r0, [r7, #4]
 8016a46:	f000 fa1d 	bl	8016e84 <USBD_CtlSendStatus>
      break;
 8016a4a:	e059      	b.n	8016b00 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8016a4c:	4b2f      	ldr	r3, [pc, #188]	; (8016b0c <USBD_SetConfig+0x150>)
 8016a4e:	781b      	ldrb	r3, [r3, #0]
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d112      	bne.n	8016a7a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	2202      	movs	r2, #2
 8016a58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8016a5c:	4b2b      	ldr	r3, [pc, #172]	; (8016b0c <USBD_SetConfig+0x150>)
 8016a5e:	781b      	ldrb	r3, [r3, #0]
 8016a60:	461a      	mov	r2, r3
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016a66:	4b29      	ldr	r3, [pc, #164]	; (8016b0c <USBD_SetConfig+0x150>)
 8016a68:	781b      	ldrb	r3, [r3, #0]
 8016a6a:	4619      	mov	r1, r3
 8016a6c:	6878      	ldr	r0, [r7, #4]
 8016a6e:	f7fe ffd6 	bl	8015a1e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8016a72:	6878      	ldr	r0, [r7, #4]
 8016a74:	f000 fa06 	bl	8016e84 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016a78:	e042      	b.n	8016b00 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8016a7a:	4b24      	ldr	r3, [pc, #144]	; (8016b0c <USBD_SetConfig+0x150>)
 8016a7c:	781b      	ldrb	r3, [r3, #0]
 8016a7e:	461a      	mov	r2, r3
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	685b      	ldr	r3, [r3, #4]
 8016a84:	429a      	cmp	r2, r3
 8016a86:	d02a      	beq.n	8016ade <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	685b      	ldr	r3, [r3, #4]
 8016a8c:	b2db      	uxtb	r3, r3
 8016a8e:	4619      	mov	r1, r3
 8016a90:	6878      	ldr	r0, [r7, #4]
 8016a92:	f7fe ffc4 	bl	8015a1e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8016a96:	4b1d      	ldr	r3, [pc, #116]	; (8016b0c <USBD_SetConfig+0x150>)
 8016a98:	781b      	ldrb	r3, [r3, #0]
 8016a9a:	461a      	mov	r2, r3
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016aa0:	4b1a      	ldr	r3, [pc, #104]	; (8016b0c <USBD_SetConfig+0x150>)
 8016aa2:	781b      	ldrb	r3, [r3, #0]
 8016aa4:	4619      	mov	r1, r3
 8016aa6:	6878      	ldr	r0, [r7, #4]
 8016aa8:	f7fe ff9d 	bl	80159e6 <USBD_SetClassConfig>
 8016aac:	4603      	mov	r3, r0
 8016aae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8016ab0:	7bfb      	ldrb	r3, [r7, #15]
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d00f      	beq.n	8016ad6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8016ab6:	6839      	ldr	r1, [r7, #0]
 8016ab8:	6878      	ldr	r0, [r7, #4]
 8016aba:	f000 f918 	bl	8016cee <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	685b      	ldr	r3, [r3, #4]
 8016ac2:	b2db      	uxtb	r3, r3
 8016ac4:	4619      	mov	r1, r3
 8016ac6:	6878      	ldr	r0, [r7, #4]
 8016ac8:	f7fe ffa9 	bl	8015a1e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	2202      	movs	r2, #2
 8016ad0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016ad4:	e014      	b.n	8016b00 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016ad6:	6878      	ldr	r0, [r7, #4]
 8016ad8:	f000 f9d4 	bl	8016e84 <USBD_CtlSendStatus>
      break;
 8016adc:	e010      	b.n	8016b00 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016ade:	6878      	ldr	r0, [r7, #4]
 8016ae0:	f000 f9d0 	bl	8016e84 <USBD_CtlSendStatus>
      break;
 8016ae4:	e00c      	b.n	8016b00 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8016ae6:	6839      	ldr	r1, [r7, #0]
 8016ae8:	6878      	ldr	r0, [r7, #4]
 8016aea:	f000 f900 	bl	8016cee <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016aee:	4b07      	ldr	r3, [pc, #28]	; (8016b0c <USBD_SetConfig+0x150>)
 8016af0:	781b      	ldrb	r3, [r3, #0]
 8016af2:	4619      	mov	r1, r3
 8016af4:	6878      	ldr	r0, [r7, #4]
 8016af6:	f7fe ff92 	bl	8015a1e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8016afa:	2303      	movs	r3, #3
 8016afc:	73fb      	strb	r3, [r7, #15]
      break;
 8016afe:	bf00      	nop
  }

  return ret;
 8016b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b02:	4618      	mov	r0, r3
 8016b04:	3710      	adds	r7, #16
 8016b06:	46bd      	mov	sp, r7
 8016b08:	bd80      	pop	{r7, pc}
 8016b0a:	bf00      	nop
 8016b0c:	2000105c 	.word	0x2000105c

08016b10 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016b10:	b580      	push	{r7, lr}
 8016b12:	b082      	sub	sp, #8
 8016b14:	af00      	add	r7, sp, #0
 8016b16:	6078      	str	r0, [r7, #4]
 8016b18:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8016b1a:	683b      	ldr	r3, [r7, #0]
 8016b1c:	88db      	ldrh	r3, [r3, #6]
 8016b1e:	2b01      	cmp	r3, #1
 8016b20:	d004      	beq.n	8016b2c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8016b22:	6839      	ldr	r1, [r7, #0]
 8016b24:	6878      	ldr	r0, [r7, #4]
 8016b26:	f000 f8e2 	bl	8016cee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8016b2a:	e023      	b.n	8016b74 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016b32:	b2db      	uxtb	r3, r3
 8016b34:	2b02      	cmp	r3, #2
 8016b36:	dc02      	bgt.n	8016b3e <USBD_GetConfig+0x2e>
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	dc03      	bgt.n	8016b44 <USBD_GetConfig+0x34>
 8016b3c:	e015      	b.n	8016b6a <USBD_GetConfig+0x5a>
 8016b3e:	2b03      	cmp	r3, #3
 8016b40:	d00b      	beq.n	8016b5a <USBD_GetConfig+0x4a>
 8016b42:	e012      	b.n	8016b6a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	2200      	movs	r2, #0
 8016b48:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	3308      	adds	r3, #8
 8016b4e:	2201      	movs	r2, #1
 8016b50:	4619      	mov	r1, r3
 8016b52:	6878      	ldr	r0, [r7, #4]
 8016b54:	f000 f93c 	bl	8016dd0 <USBD_CtlSendData>
        break;
 8016b58:	e00c      	b.n	8016b74 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	3304      	adds	r3, #4
 8016b5e:	2201      	movs	r2, #1
 8016b60:	4619      	mov	r1, r3
 8016b62:	6878      	ldr	r0, [r7, #4]
 8016b64:	f000 f934 	bl	8016dd0 <USBD_CtlSendData>
        break;
 8016b68:	e004      	b.n	8016b74 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8016b6a:	6839      	ldr	r1, [r7, #0]
 8016b6c:	6878      	ldr	r0, [r7, #4]
 8016b6e:	f000 f8be 	bl	8016cee <USBD_CtlError>
        break;
 8016b72:	bf00      	nop
}
 8016b74:	bf00      	nop
 8016b76:	3708      	adds	r7, #8
 8016b78:	46bd      	mov	sp, r7
 8016b7a:	bd80      	pop	{r7, pc}

08016b7c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016b7c:	b580      	push	{r7, lr}
 8016b7e:	b082      	sub	sp, #8
 8016b80:	af00      	add	r7, sp, #0
 8016b82:	6078      	str	r0, [r7, #4]
 8016b84:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016b8c:	b2db      	uxtb	r3, r3
 8016b8e:	3b01      	subs	r3, #1
 8016b90:	2b02      	cmp	r3, #2
 8016b92:	d81e      	bhi.n	8016bd2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8016b94:	683b      	ldr	r3, [r7, #0]
 8016b96:	88db      	ldrh	r3, [r3, #6]
 8016b98:	2b02      	cmp	r3, #2
 8016b9a:	d004      	beq.n	8016ba6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8016b9c:	6839      	ldr	r1, [r7, #0]
 8016b9e:	6878      	ldr	r0, [r7, #4]
 8016ba0:	f000 f8a5 	bl	8016cee <USBD_CtlError>
        break;
 8016ba4:	e01a      	b.n	8016bdc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	2201      	movs	r2, #1
 8016baa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d005      	beq.n	8016bc2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	68db      	ldr	r3, [r3, #12]
 8016bba:	f043 0202 	orr.w	r2, r3, #2
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	330c      	adds	r3, #12
 8016bc6:	2202      	movs	r2, #2
 8016bc8:	4619      	mov	r1, r3
 8016bca:	6878      	ldr	r0, [r7, #4]
 8016bcc:	f000 f900 	bl	8016dd0 <USBD_CtlSendData>
      break;
 8016bd0:	e004      	b.n	8016bdc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8016bd2:	6839      	ldr	r1, [r7, #0]
 8016bd4:	6878      	ldr	r0, [r7, #4]
 8016bd6:	f000 f88a 	bl	8016cee <USBD_CtlError>
      break;
 8016bda:	bf00      	nop
  }
}
 8016bdc:	bf00      	nop
 8016bde:	3708      	adds	r7, #8
 8016be0:	46bd      	mov	sp, r7
 8016be2:	bd80      	pop	{r7, pc}

08016be4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016be4:	b580      	push	{r7, lr}
 8016be6:	b082      	sub	sp, #8
 8016be8:	af00      	add	r7, sp, #0
 8016bea:	6078      	str	r0, [r7, #4]
 8016bec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016bee:	683b      	ldr	r3, [r7, #0]
 8016bf0:	885b      	ldrh	r3, [r3, #2]
 8016bf2:	2b01      	cmp	r3, #1
 8016bf4:	d107      	bne.n	8016c06 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	2201      	movs	r2, #1
 8016bfa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8016bfe:	6878      	ldr	r0, [r7, #4]
 8016c00:	f000 f940 	bl	8016e84 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8016c04:	e013      	b.n	8016c2e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8016c06:	683b      	ldr	r3, [r7, #0]
 8016c08:	885b      	ldrh	r3, [r3, #2]
 8016c0a:	2b02      	cmp	r3, #2
 8016c0c:	d10b      	bne.n	8016c26 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8016c0e:	683b      	ldr	r3, [r7, #0]
 8016c10:	889b      	ldrh	r3, [r3, #4]
 8016c12:	0a1b      	lsrs	r3, r3, #8
 8016c14:	b29b      	uxth	r3, r3
 8016c16:	b2da      	uxtb	r2, r3
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8016c1e:	6878      	ldr	r0, [r7, #4]
 8016c20:	f000 f930 	bl	8016e84 <USBD_CtlSendStatus>
}
 8016c24:	e003      	b.n	8016c2e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8016c26:	6839      	ldr	r1, [r7, #0]
 8016c28:	6878      	ldr	r0, [r7, #4]
 8016c2a:	f000 f860 	bl	8016cee <USBD_CtlError>
}
 8016c2e:	bf00      	nop
 8016c30:	3708      	adds	r7, #8
 8016c32:	46bd      	mov	sp, r7
 8016c34:	bd80      	pop	{r7, pc}

08016c36 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016c36:	b580      	push	{r7, lr}
 8016c38:	b082      	sub	sp, #8
 8016c3a:	af00      	add	r7, sp, #0
 8016c3c:	6078      	str	r0, [r7, #4]
 8016c3e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016c46:	b2db      	uxtb	r3, r3
 8016c48:	3b01      	subs	r3, #1
 8016c4a:	2b02      	cmp	r3, #2
 8016c4c:	d80b      	bhi.n	8016c66 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016c4e:	683b      	ldr	r3, [r7, #0]
 8016c50:	885b      	ldrh	r3, [r3, #2]
 8016c52:	2b01      	cmp	r3, #1
 8016c54:	d10c      	bne.n	8016c70 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	2200      	movs	r2, #0
 8016c5a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8016c5e:	6878      	ldr	r0, [r7, #4]
 8016c60:	f000 f910 	bl	8016e84 <USBD_CtlSendStatus>
      }
      break;
 8016c64:	e004      	b.n	8016c70 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8016c66:	6839      	ldr	r1, [r7, #0]
 8016c68:	6878      	ldr	r0, [r7, #4]
 8016c6a:	f000 f840 	bl	8016cee <USBD_CtlError>
      break;
 8016c6e:	e000      	b.n	8016c72 <USBD_ClrFeature+0x3c>
      break;
 8016c70:	bf00      	nop
  }
}
 8016c72:	bf00      	nop
 8016c74:	3708      	adds	r7, #8
 8016c76:	46bd      	mov	sp, r7
 8016c78:	bd80      	pop	{r7, pc}

08016c7a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8016c7a:	b580      	push	{r7, lr}
 8016c7c:	b084      	sub	sp, #16
 8016c7e:	af00      	add	r7, sp, #0
 8016c80:	6078      	str	r0, [r7, #4]
 8016c82:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8016c84:	683b      	ldr	r3, [r7, #0]
 8016c86:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016c88:	68fb      	ldr	r3, [r7, #12]
 8016c8a:	781a      	ldrb	r2, [r3, #0]
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8016c90:	68fb      	ldr	r3, [r7, #12]
 8016c92:	3301      	adds	r3, #1
 8016c94:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8016c96:	68fb      	ldr	r3, [r7, #12]
 8016c98:	781a      	ldrb	r2, [r3, #0]
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8016c9e:	68fb      	ldr	r3, [r7, #12]
 8016ca0:	3301      	adds	r3, #1
 8016ca2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8016ca4:	68f8      	ldr	r0, [r7, #12]
 8016ca6:	f7ff fa41 	bl	801612c <SWAPBYTE>
 8016caa:	4603      	mov	r3, r0
 8016cac:	461a      	mov	r2, r3
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8016cb2:	68fb      	ldr	r3, [r7, #12]
 8016cb4:	3301      	adds	r3, #1
 8016cb6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016cb8:	68fb      	ldr	r3, [r7, #12]
 8016cba:	3301      	adds	r3, #1
 8016cbc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8016cbe:	68f8      	ldr	r0, [r7, #12]
 8016cc0:	f7ff fa34 	bl	801612c <SWAPBYTE>
 8016cc4:	4603      	mov	r3, r0
 8016cc6:	461a      	mov	r2, r3
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8016ccc:	68fb      	ldr	r3, [r7, #12]
 8016cce:	3301      	adds	r3, #1
 8016cd0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016cd2:	68fb      	ldr	r3, [r7, #12]
 8016cd4:	3301      	adds	r3, #1
 8016cd6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8016cd8:	68f8      	ldr	r0, [r7, #12]
 8016cda:	f7ff fa27 	bl	801612c <SWAPBYTE>
 8016cde:	4603      	mov	r3, r0
 8016ce0:	461a      	mov	r2, r3
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	80da      	strh	r2, [r3, #6]
}
 8016ce6:	bf00      	nop
 8016ce8:	3710      	adds	r7, #16
 8016cea:	46bd      	mov	sp, r7
 8016cec:	bd80      	pop	{r7, pc}

08016cee <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016cee:	b580      	push	{r7, lr}
 8016cf0:	b082      	sub	sp, #8
 8016cf2:	af00      	add	r7, sp, #0
 8016cf4:	6078      	str	r0, [r7, #4]
 8016cf6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016cf8:	2180      	movs	r1, #128	; 0x80
 8016cfa:	6878      	ldr	r0, [r7, #4]
 8016cfc:	f000 fcde 	bl	80176bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016d00:	2100      	movs	r1, #0
 8016d02:	6878      	ldr	r0, [r7, #4]
 8016d04:	f000 fcda 	bl	80176bc <USBD_LL_StallEP>
}
 8016d08:	bf00      	nop
 8016d0a:	3708      	adds	r7, #8
 8016d0c:	46bd      	mov	sp, r7
 8016d0e:	bd80      	pop	{r7, pc}

08016d10 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016d10:	b580      	push	{r7, lr}
 8016d12:	b086      	sub	sp, #24
 8016d14:	af00      	add	r7, sp, #0
 8016d16:	60f8      	str	r0, [r7, #12]
 8016d18:	60b9      	str	r1, [r7, #8]
 8016d1a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016d1c:	2300      	movs	r3, #0
 8016d1e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016d20:	68fb      	ldr	r3, [r7, #12]
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d036      	beq.n	8016d94 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8016d26:	68fb      	ldr	r3, [r7, #12]
 8016d28:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8016d2a:	6938      	ldr	r0, [r7, #16]
 8016d2c:	f000 f836 	bl	8016d9c <USBD_GetLen>
 8016d30:	4603      	mov	r3, r0
 8016d32:	3301      	adds	r3, #1
 8016d34:	b29b      	uxth	r3, r3
 8016d36:	005b      	lsls	r3, r3, #1
 8016d38:	b29a      	uxth	r2, r3
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8016d3e:	7dfb      	ldrb	r3, [r7, #23]
 8016d40:	68ba      	ldr	r2, [r7, #8]
 8016d42:	4413      	add	r3, r2
 8016d44:	687a      	ldr	r2, [r7, #4]
 8016d46:	7812      	ldrb	r2, [r2, #0]
 8016d48:	701a      	strb	r2, [r3, #0]
  idx++;
 8016d4a:	7dfb      	ldrb	r3, [r7, #23]
 8016d4c:	3301      	adds	r3, #1
 8016d4e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016d50:	7dfb      	ldrb	r3, [r7, #23]
 8016d52:	68ba      	ldr	r2, [r7, #8]
 8016d54:	4413      	add	r3, r2
 8016d56:	2203      	movs	r2, #3
 8016d58:	701a      	strb	r2, [r3, #0]
  idx++;
 8016d5a:	7dfb      	ldrb	r3, [r7, #23]
 8016d5c:	3301      	adds	r3, #1
 8016d5e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016d60:	e013      	b.n	8016d8a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8016d62:	7dfb      	ldrb	r3, [r7, #23]
 8016d64:	68ba      	ldr	r2, [r7, #8]
 8016d66:	4413      	add	r3, r2
 8016d68:	693a      	ldr	r2, [r7, #16]
 8016d6a:	7812      	ldrb	r2, [r2, #0]
 8016d6c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016d6e:	693b      	ldr	r3, [r7, #16]
 8016d70:	3301      	adds	r3, #1
 8016d72:	613b      	str	r3, [r7, #16]
    idx++;
 8016d74:	7dfb      	ldrb	r3, [r7, #23]
 8016d76:	3301      	adds	r3, #1
 8016d78:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8016d7a:	7dfb      	ldrb	r3, [r7, #23]
 8016d7c:	68ba      	ldr	r2, [r7, #8]
 8016d7e:	4413      	add	r3, r2
 8016d80:	2200      	movs	r2, #0
 8016d82:	701a      	strb	r2, [r3, #0]
    idx++;
 8016d84:	7dfb      	ldrb	r3, [r7, #23]
 8016d86:	3301      	adds	r3, #1
 8016d88:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016d8a:	693b      	ldr	r3, [r7, #16]
 8016d8c:	781b      	ldrb	r3, [r3, #0]
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d1e7      	bne.n	8016d62 <USBD_GetString+0x52>
 8016d92:	e000      	b.n	8016d96 <USBD_GetString+0x86>
    return;
 8016d94:	bf00      	nop
  }
}
 8016d96:	3718      	adds	r7, #24
 8016d98:	46bd      	mov	sp, r7
 8016d9a:	bd80      	pop	{r7, pc}

08016d9c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016d9c:	b480      	push	{r7}
 8016d9e:	b085      	sub	sp, #20
 8016da0:	af00      	add	r7, sp, #0
 8016da2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016da4:	2300      	movs	r3, #0
 8016da6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016dac:	e005      	b.n	8016dba <USBD_GetLen+0x1e>
  {
    len++;
 8016dae:	7bfb      	ldrb	r3, [r7, #15]
 8016db0:	3301      	adds	r3, #1
 8016db2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8016db4:	68bb      	ldr	r3, [r7, #8]
 8016db6:	3301      	adds	r3, #1
 8016db8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016dba:	68bb      	ldr	r3, [r7, #8]
 8016dbc:	781b      	ldrb	r3, [r3, #0]
 8016dbe:	2b00      	cmp	r3, #0
 8016dc0:	d1f5      	bne.n	8016dae <USBD_GetLen+0x12>
  }

  return len;
 8016dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8016dc4:	4618      	mov	r0, r3
 8016dc6:	3714      	adds	r7, #20
 8016dc8:	46bd      	mov	sp, r7
 8016dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dce:	4770      	bx	lr

08016dd0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8016dd0:	b580      	push	{r7, lr}
 8016dd2:	b084      	sub	sp, #16
 8016dd4:	af00      	add	r7, sp, #0
 8016dd6:	60f8      	str	r0, [r7, #12]
 8016dd8:	60b9      	str	r1, [r7, #8]
 8016dda:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016ddc:	68fb      	ldr	r3, [r7, #12]
 8016dde:	2202      	movs	r2, #2
 8016de0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8016de4:	68fb      	ldr	r3, [r7, #12]
 8016de6:	687a      	ldr	r2, [r7, #4]
 8016de8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8016dea:	68fb      	ldr	r3, [r7, #12]
 8016dec:	687a      	ldr	r2, [r7, #4]
 8016dee:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	68ba      	ldr	r2, [r7, #8]
 8016df4:	2100      	movs	r1, #0
 8016df6:	68f8      	ldr	r0, [r7, #12]
 8016df8:	f000 fce9 	bl	80177ce <USBD_LL_Transmit>

  return USBD_OK;
 8016dfc:	2300      	movs	r3, #0
}
 8016dfe:	4618      	mov	r0, r3
 8016e00:	3710      	adds	r7, #16
 8016e02:	46bd      	mov	sp, r7
 8016e04:	bd80      	pop	{r7, pc}

08016e06 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8016e06:	b580      	push	{r7, lr}
 8016e08:	b084      	sub	sp, #16
 8016e0a:	af00      	add	r7, sp, #0
 8016e0c:	60f8      	str	r0, [r7, #12]
 8016e0e:	60b9      	str	r1, [r7, #8]
 8016e10:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	68ba      	ldr	r2, [r7, #8]
 8016e16:	2100      	movs	r1, #0
 8016e18:	68f8      	ldr	r0, [r7, #12]
 8016e1a:	f000 fcd8 	bl	80177ce <USBD_LL_Transmit>

  return USBD_OK;
 8016e1e:	2300      	movs	r3, #0
}
 8016e20:	4618      	mov	r0, r3
 8016e22:	3710      	adds	r7, #16
 8016e24:	46bd      	mov	sp, r7
 8016e26:	bd80      	pop	{r7, pc}

08016e28 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8016e28:	b580      	push	{r7, lr}
 8016e2a:	b084      	sub	sp, #16
 8016e2c:	af00      	add	r7, sp, #0
 8016e2e:	60f8      	str	r0, [r7, #12]
 8016e30:	60b9      	str	r1, [r7, #8]
 8016e32:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8016e34:	68fb      	ldr	r3, [r7, #12]
 8016e36:	2203      	movs	r2, #3
 8016e38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8016e3c:	68fb      	ldr	r3, [r7, #12]
 8016e3e:	687a      	ldr	r2, [r7, #4]
 8016e40:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8016e44:	68fb      	ldr	r3, [r7, #12]
 8016e46:	687a      	ldr	r2, [r7, #4]
 8016e48:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	68ba      	ldr	r2, [r7, #8]
 8016e50:	2100      	movs	r1, #0
 8016e52:	68f8      	ldr	r0, [r7, #12]
 8016e54:	f000 fcdc 	bl	8017810 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016e58:	2300      	movs	r3, #0
}
 8016e5a:	4618      	mov	r0, r3
 8016e5c:	3710      	adds	r7, #16
 8016e5e:	46bd      	mov	sp, r7
 8016e60:	bd80      	pop	{r7, pc}

08016e62 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016e62:	b580      	push	{r7, lr}
 8016e64:	b084      	sub	sp, #16
 8016e66:	af00      	add	r7, sp, #0
 8016e68:	60f8      	str	r0, [r7, #12]
 8016e6a:	60b9      	str	r1, [r7, #8]
 8016e6c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	68ba      	ldr	r2, [r7, #8]
 8016e72:	2100      	movs	r1, #0
 8016e74:	68f8      	ldr	r0, [r7, #12]
 8016e76:	f000 fccb 	bl	8017810 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016e7a:	2300      	movs	r3, #0
}
 8016e7c:	4618      	mov	r0, r3
 8016e7e:	3710      	adds	r7, #16
 8016e80:	46bd      	mov	sp, r7
 8016e82:	bd80      	pop	{r7, pc}

08016e84 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016e84:	b580      	push	{r7, lr}
 8016e86:	b082      	sub	sp, #8
 8016e88:	af00      	add	r7, sp, #0
 8016e8a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	2204      	movs	r2, #4
 8016e90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016e94:	2300      	movs	r3, #0
 8016e96:	2200      	movs	r2, #0
 8016e98:	2100      	movs	r1, #0
 8016e9a:	6878      	ldr	r0, [r7, #4]
 8016e9c:	f000 fc97 	bl	80177ce <USBD_LL_Transmit>

  return USBD_OK;
 8016ea0:	2300      	movs	r3, #0
}
 8016ea2:	4618      	mov	r0, r3
 8016ea4:	3708      	adds	r7, #8
 8016ea6:	46bd      	mov	sp, r7
 8016ea8:	bd80      	pop	{r7, pc}

08016eaa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016eaa:	b580      	push	{r7, lr}
 8016eac:	b082      	sub	sp, #8
 8016eae:	af00      	add	r7, sp, #0
 8016eb0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	2205      	movs	r2, #5
 8016eb6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016eba:	2300      	movs	r3, #0
 8016ebc:	2200      	movs	r2, #0
 8016ebe:	2100      	movs	r1, #0
 8016ec0:	6878      	ldr	r0, [r7, #4]
 8016ec2:	f000 fca5 	bl	8017810 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016ec6:	2300      	movs	r3, #0
}
 8016ec8:	4618      	mov	r0, r3
 8016eca:	3708      	adds	r7, #8
 8016ecc:	46bd      	mov	sp, r7
 8016ece:	bd80      	pop	{r7, pc}

08016ed0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016ed0:	b580      	push	{r7, lr}
 8016ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8016ed4:	2200      	movs	r2, #0
 8016ed6:	4913      	ldr	r1, [pc, #76]	; (8016f24 <MX_USB_DEVICE_Init+0x54>)
 8016ed8:	4813      	ldr	r0, [pc, #76]	; (8016f28 <MX_USB_DEVICE_Init+0x58>)
 8016eda:	f7fe fd07 	bl	80158ec <USBD_Init>
 8016ede:	4603      	mov	r3, r0
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	d001      	beq.n	8016ee8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016ee4:	f7ec fd94 	bl	8003a10 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8016ee8:	4910      	ldr	r1, [pc, #64]	; (8016f2c <MX_USB_DEVICE_Init+0x5c>)
 8016eea:	480f      	ldr	r0, [pc, #60]	; (8016f28 <MX_USB_DEVICE_Init+0x58>)
 8016eec:	f7fe fd2e 	bl	801594c <USBD_RegisterClass>
 8016ef0:	4603      	mov	r3, r0
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	d001      	beq.n	8016efa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8016ef6:	f7ec fd8b 	bl	8003a10 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8016efa:	490d      	ldr	r1, [pc, #52]	; (8016f30 <MX_USB_DEVICE_Init+0x60>)
 8016efc:	480a      	ldr	r0, [pc, #40]	; (8016f28 <MX_USB_DEVICE_Init+0x58>)
 8016efe:	f7fe fc65 	bl	80157cc <USBD_CDC_RegisterInterface>
 8016f02:	4603      	mov	r3, r0
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	d001      	beq.n	8016f0c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016f08:	f7ec fd82 	bl	8003a10 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8016f0c:	4806      	ldr	r0, [pc, #24]	; (8016f28 <MX_USB_DEVICE_Init+0x58>)
 8016f0e:	f7fe fd53 	bl	80159b8 <USBD_Start>
 8016f12:	4603      	mov	r3, r0
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d001      	beq.n	8016f1c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016f18:	f7ec fd7a 	bl	8003a10 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8016f1c:	f7f4 fb9e 	bl	800b65c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016f20:	bf00      	nop
 8016f22:	bd80      	pop	{r7, pc}
 8016f24:	200000c4 	.word	0x200000c4
 8016f28:	20001060 	.word	0x20001060
 8016f2c:	20000030 	.word	0x20000030
 8016f30:	200000b0 	.word	0x200000b0

08016f34 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8016f34:	b580      	push	{r7, lr}
 8016f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8016f38:	2200      	movs	r2, #0
 8016f3a:	4905      	ldr	r1, [pc, #20]	; (8016f50 <CDC_Init_FS+0x1c>)
 8016f3c:	4805      	ldr	r0, [pc, #20]	; (8016f54 <CDC_Init_FS+0x20>)
 8016f3e:	f7fe fc5f 	bl	8015800 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8016f42:	4905      	ldr	r1, [pc, #20]	; (8016f58 <CDC_Init_FS+0x24>)
 8016f44:	4803      	ldr	r0, [pc, #12]	; (8016f54 <CDC_Init_FS+0x20>)
 8016f46:	f7fe fc7d 	bl	8015844 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016f4a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8016f4c:	4618      	mov	r0, r3
 8016f4e:	bd80      	pop	{r7, pc}
 8016f50:	20001b3c 	.word	0x20001b3c
 8016f54:	20001060 	.word	0x20001060
 8016f58:	2000133c 	.word	0x2000133c

08016f5c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8016f5c:	b480      	push	{r7}
 8016f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8016f60:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8016f62:	4618      	mov	r0, r3
 8016f64:	46bd      	mov	sp, r7
 8016f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f6a:	4770      	bx	lr

08016f6c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016f6c:	b480      	push	{r7}
 8016f6e:	b083      	sub	sp, #12
 8016f70:	af00      	add	r7, sp, #0
 8016f72:	4603      	mov	r3, r0
 8016f74:	6039      	str	r1, [r7, #0]
 8016f76:	71fb      	strb	r3, [r7, #7]
 8016f78:	4613      	mov	r3, r2
 8016f7a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8016f7c:	79fb      	ldrb	r3, [r7, #7]
 8016f7e:	2b23      	cmp	r3, #35	; 0x23
 8016f80:	d84a      	bhi.n	8017018 <CDC_Control_FS+0xac>
 8016f82:	a201      	add	r2, pc, #4	; (adr r2, 8016f88 <CDC_Control_FS+0x1c>)
 8016f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f88:	08017019 	.word	0x08017019
 8016f8c:	08017019 	.word	0x08017019
 8016f90:	08017019 	.word	0x08017019
 8016f94:	08017019 	.word	0x08017019
 8016f98:	08017019 	.word	0x08017019
 8016f9c:	08017019 	.word	0x08017019
 8016fa0:	08017019 	.word	0x08017019
 8016fa4:	08017019 	.word	0x08017019
 8016fa8:	08017019 	.word	0x08017019
 8016fac:	08017019 	.word	0x08017019
 8016fb0:	08017019 	.word	0x08017019
 8016fb4:	08017019 	.word	0x08017019
 8016fb8:	08017019 	.word	0x08017019
 8016fbc:	08017019 	.word	0x08017019
 8016fc0:	08017019 	.word	0x08017019
 8016fc4:	08017019 	.word	0x08017019
 8016fc8:	08017019 	.word	0x08017019
 8016fcc:	08017019 	.word	0x08017019
 8016fd0:	08017019 	.word	0x08017019
 8016fd4:	08017019 	.word	0x08017019
 8016fd8:	08017019 	.word	0x08017019
 8016fdc:	08017019 	.word	0x08017019
 8016fe0:	08017019 	.word	0x08017019
 8016fe4:	08017019 	.word	0x08017019
 8016fe8:	08017019 	.word	0x08017019
 8016fec:	08017019 	.word	0x08017019
 8016ff0:	08017019 	.word	0x08017019
 8016ff4:	08017019 	.word	0x08017019
 8016ff8:	08017019 	.word	0x08017019
 8016ffc:	08017019 	.word	0x08017019
 8017000:	08017019 	.word	0x08017019
 8017004:	08017019 	.word	0x08017019
 8017008:	08017019 	.word	0x08017019
 801700c:	08017019 	.word	0x08017019
 8017010:	08017019 	.word	0x08017019
 8017014:	08017019 	.word	0x08017019
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8017018:	bf00      	nop
  }

  return (USBD_OK);
 801701a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801701c:	4618      	mov	r0, r3
 801701e:	370c      	adds	r7, #12
 8017020:	46bd      	mov	sp, r7
 8017022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017026:	4770      	bx	lr

08017028 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8017028:	b580      	push	{r7, lr}
 801702a:	b082      	sub	sp, #8
 801702c:	af00      	add	r7, sp, #0
 801702e:	6078      	str	r0, [r7, #4]
 8017030:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8017032:	6879      	ldr	r1, [r7, #4]
 8017034:	4805      	ldr	r0, [pc, #20]	; (801704c <CDC_Receive_FS+0x24>)
 8017036:	f7fe fc05 	bl	8015844 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801703a:	4804      	ldr	r0, [pc, #16]	; (801704c <CDC_Receive_FS+0x24>)
 801703c:	f7fe fc20 	bl	8015880 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8017040:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8017042:	4618      	mov	r0, r3
 8017044:	3708      	adds	r7, #8
 8017046:	46bd      	mov	sp, r7
 8017048:	bd80      	pop	{r7, pc}
 801704a:	bf00      	nop
 801704c:	20001060 	.word	0x20001060

08017050 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8017050:	b480      	push	{r7}
 8017052:	b087      	sub	sp, #28
 8017054:	af00      	add	r7, sp, #0
 8017056:	60f8      	str	r0, [r7, #12]
 8017058:	60b9      	str	r1, [r7, #8]
 801705a:	4613      	mov	r3, r2
 801705c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801705e:	2300      	movs	r3, #0
 8017060:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8017062:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017066:	4618      	mov	r0, r3
 8017068:	371c      	adds	r7, #28
 801706a:	46bd      	mov	sp, r7
 801706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017070:	4770      	bx	lr
	...

08017074 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017074:	b480      	push	{r7}
 8017076:	b083      	sub	sp, #12
 8017078:	af00      	add	r7, sp, #0
 801707a:	4603      	mov	r3, r0
 801707c:	6039      	str	r1, [r7, #0]
 801707e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8017080:	683b      	ldr	r3, [r7, #0]
 8017082:	2212      	movs	r2, #18
 8017084:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8017086:	4b03      	ldr	r3, [pc, #12]	; (8017094 <USBD_FS_DeviceDescriptor+0x20>)
}
 8017088:	4618      	mov	r0, r3
 801708a:	370c      	adds	r7, #12
 801708c:	46bd      	mov	sp, r7
 801708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017092:	4770      	bx	lr
 8017094:	200000e0 	.word	0x200000e0

08017098 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017098:	b480      	push	{r7}
 801709a:	b083      	sub	sp, #12
 801709c:	af00      	add	r7, sp, #0
 801709e:	4603      	mov	r3, r0
 80170a0:	6039      	str	r1, [r7, #0]
 80170a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80170a4:	683b      	ldr	r3, [r7, #0]
 80170a6:	2204      	movs	r2, #4
 80170a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80170aa:	4b03      	ldr	r3, [pc, #12]	; (80170b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80170ac:	4618      	mov	r0, r3
 80170ae:	370c      	adds	r7, #12
 80170b0:	46bd      	mov	sp, r7
 80170b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170b6:	4770      	bx	lr
 80170b8:	200000f4 	.word	0x200000f4

080170bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80170bc:	b580      	push	{r7, lr}
 80170be:	b082      	sub	sp, #8
 80170c0:	af00      	add	r7, sp, #0
 80170c2:	4603      	mov	r3, r0
 80170c4:	6039      	str	r1, [r7, #0]
 80170c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80170c8:	79fb      	ldrb	r3, [r7, #7]
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	d105      	bne.n	80170da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80170ce:	683a      	ldr	r2, [r7, #0]
 80170d0:	4907      	ldr	r1, [pc, #28]	; (80170f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80170d2:	4808      	ldr	r0, [pc, #32]	; (80170f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80170d4:	f7ff fe1c 	bl	8016d10 <USBD_GetString>
 80170d8:	e004      	b.n	80170e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80170da:	683a      	ldr	r2, [r7, #0]
 80170dc:	4904      	ldr	r1, [pc, #16]	; (80170f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80170de:	4805      	ldr	r0, [pc, #20]	; (80170f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80170e0:	f7ff fe16 	bl	8016d10 <USBD_GetString>
  }
  return USBD_StrDesc;
 80170e4:	4b02      	ldr	r3, [pc, #8]	; (80170f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80170e6:	4618      	mov	r0, r3
 80170e8:	3708      	adds	r7, #8
 80170ea:	46bd      	mov	sp, r7
 80170ec:	bd80      	pop	{r7, pc}
 80170ee:	bf00      	nop
 80170f0:	2000233c 	.word	0x2000233c
 80170f4:	0801a844 	.word	0x0801a844

080170f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80170f8:	b580      	push	{r7, lr}
 80170fa:	b082      	sub	sp, #8
 80170fc:	af00      	add	r7, sp, #0
 80170fe:	4603      	mov	r3, r0
 8017100:	6039      	str	r1, [r7, #0]
 8017102:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017104:	683a      	ldr	r2, [r7, #0]
 8017106:	4904      	ldr	r1, [pc, #16]	; (8017118 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8017108:	4804      	ldr	r0, [pc, #16]	; (801711c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801710a:	f7ff fe01 	bl	8016d10 <USBD_GetString>
  return USBD_StrDesc;
 801710e:	4b02      	ldr	r3, [pc, #8]	; (8017118 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8017110:	4618      	mov	r0, r3
 8017112:	3708      	adds	r7, #8
 8017114:	46bd      	mov	sp, r7
 8017116:	bd80      	pop	{r7, pc}
 8017118:	2000233c 	.word	0x2000233c
 801711c:	0801a85c 	.word	0x0801a85c

08017120 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017120:	b580      	push	{r7, lr}
 8017122:	b082      	sub	sp, #8
 8017124:	af00      	add	r7, sp, #0
 8017126:	4603      	mov	r3, r0
 8017128:	6039      	str	r1, [r7, #0]
 801712a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801712c:	683b      	ldr	r3, [r7, #0]
 801712e:	221a      	movs	r2, #26
 8017130:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8017132:	f000 f843 	bl	80171bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8017136:	4b02      	ldr	r3, [pc, #8]	; (8017140 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8017138:	4618      	mov	r0, r3
 801713a:	3708      	adds	r7, #8
 801713c:	46bd      	mov	sp, r7
 801713e:	bd80      	pop	{r7, pc}
 8017140:	200000f8 	.word	0x200000f8

08017144 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017144:	b580      	push	{r7, lr}
 8017146:	b082      	sub	sp, #8
 8017148:	af00      	add	r7, sp, #0
 801714a:	4603      	mov	r3, r0
 801714c:	6039      	str	r1, [r7, #0]
 801714e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017150:	79fb      	ldrb	r3, [r7, #7]
 8017152:	2b00      	cmp	r3, #0
 8017154:	d105      	bne.n	8017162 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017156:	683a      	ldr	r2, [r7, #0]
 8017158:	4907      	ldr	r1, [pc, #28]	; (8017178 <USBD_FS_ConfigStrDescriptor+0x34>)
 801715a:	4808      	ldr	r0, [pc, #32]	; (801717c <USBD_FS_ConfigStrDescriptor+0x38>)
 801715c:	f7ff fdd8 	bl	8016d10 <USBD_GetString>
 8017160:	e004      	b.n	801716c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017162:	683a      	ldr	r2, [r7, #0]
 8017164:	4904      	ldr	r1, [pc, #16]	; (8017178 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017166:	4805      	ldr	r0, [pc, #20]	; (801717c <USBD_FS_ConfigStrDescriptor+0x38>)
 8017168:	f7ff fdd2 	bl	8016d10 <USBD_GetString>
  }
  return USBD_StrDesc;
 801716c:	4b02      	ldr	r3, [pc, #8]	; (8017178 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801716e:	4618      	mov	r0, r3
 8017170:	3708      	adds	r7, #8
 8017172:	46bd      	mov	sp, r7
 8017174:	bd80      	pop	{r7, pc}
 8017176:	bf00      	nop
 8017178:	2000233c 	.word	0x2000233c
 801717c:	0801a870 	.word	0x0801a870

08017180 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017180:	b580      	push	{r7, lr}
 8017182:	b082      	sub	sp, #8
 8017184:	af00      	add	r7, sp, #0
 8017186:	4603      	mov	r3, r0
 8017188:	6039      	str	r1, [r7, #0]
 801718a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801718c:	79fb      	ldrb	r3, [r7, #7]
 801718e:	2b00      	cmp	r3, #0
 8017190:	d105      	bne.n	801719e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017192:	683a      	ldr	r2, [r7, #0]
 8017194:	4907      	ldr	r1, [pc, #28]	; (80171b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017196:	4808      	ldr	r0, [pc, #32]	; (80171b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017198:	f7ff fdba 	bl	8016d10 <USBD_GetString>
 801719c:	e004      	b.n	80171a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801719e:	683a      	ldr	r2, [r7, #0]
 80171a0:	4904      	ldr	r1, [pc, #16]	; (80171b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80171a2:	4805      	ldr	r0, [pc, #20]	; (80171b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80171a4:	f7ff fdb4 	bl	8016d10 <USBD_GetString>
  }
  return USBD_StrDesc;
 80171a8:	4b02      	ldr	r3, [pc, #8]	; (80171b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80171aa:	4618      	mov	r0, r3
 80171ac:	3708      	adds	r7, #8
 80171ae:	46bd      	mov	sp, r7
 80171b0:	bd80      	pop	{r7, pc}
 80171b2:	bf00      	nop
 80171b4:	2000233c 	.word	0x2000233c
 80171b8:	0801a87c 	.word	0x0801a87c

080171bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80171bc:	b580      	push	{r7, lr}
 80171be:	b084      	sub	sp, #16
 80171c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80171c2:	4b0f      	ldr	r3, [pc, #60]	; (8017200 <Get_SerialNum+0x44>)
 80171c4:	681b      	ldr	r3, [r3, #0]
 80171c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80171c8:	4b0e      	ldr	r3, [pc, #56]	; (8017204 <Get_SerialNum+0x48>)
 80171ca:	681b      	ldr	r3, [r3, #0]
 80171cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80171ce:	4b0e      	ldr	r3, [pc, #56]	; (8017208 <Get_SerialNum+0x4c>)
 80171d0:	681b      	ldr	r3, [r3, #0]
 80171d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80171d4:	68fa      	ldr	r2, [r7, #12]
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	4413      	add	r3, r2
 80171da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80171dc:	68fb      	ldr	r3, [r7, #12]
 80171de:	2b00      	cmp	r3, #0
 80171e0:	d009      	beq.n	80171f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80171e2:	2208      	movs	r2, #8
 80171e4:	4909      	ldr	r1, [pc, #36]	; (801720c <Get_SerialNum+0x50>)
 80171e6:	68f8      	ldr	r0, [r7, #12]
 80171e8:	f000 f814 	bl	8017214 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80171ec:	2204      	movs	r2, #4
 80171ee:	4908      	ldr	r1, [pc, #32]	; (8017210 <Get_SerialNum+0x54>)
 80171f0:	68b8      	ldr	r0, [r7, #8]
 80171f2:	f000 f80f 	bl	8017214 <IntToUnicode>
  }
}
 80171f6:	bf00      	nop
 80171f8:	3710      	adds	r7, #16
 80171fa:	46bd      	mov	sp, r7
 80171fc:	bd80      	pop	{r7, pc}
 80171fe:	bf00      	nop
 8017200:	1ff1e800 	.word	0x1ff1e800
 8017204:	1ff1e804 	.word	0x1ff1e804
 8017208:	1ff1e808 	.word	0x1ff1e808
 801720c:	200000fa 	.word	0x200000fa
 8017210:	2000010a 	.word	0x2000010a

08017214 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017214:	b480      	push	{r7}
 8017216:	b087      	sub	sp, #28
 8017218:	af00      	add	r7, sp, #0
 801721a:	60f8      	str	r0, [r7, #12]
 801721c:	60b9      	str	r1, [r7, #8]
 801721e:	4613      	mov	r3, r2
 8017220:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8017222:	2300      	movs	r3, #0
 8017224:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017226:	2300      	movs	r3, #0
 8017228:	75fb      	strb	r3, [r7, #23]
 801722a:	e027      	b.n	801727c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801722c:	68fb      	ldr	r3, [r7, #12]
 801722e:	0f1b      	lsrs	r3, r3, #28
 8017230:	2b09      	cmp	r3, #9
 8017232:	d80b      	bhi.n	801724c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017234:	68fb      	ldr	r3, [r7, #12]
 8017236:	0f1b      	lsrs	r3, r3, #28
 8017238:	b2da      	uxtb	r2, r3
 801723a:	7dfb      	ldrb	r3, [r7, #23]
 801723c:	005b      	lsls	r3, r3, #1
 801723e:	4619      	mov	r1, r3
 8017240:	68bb      	ldr	r3, [r7, #8]
 8017242:	440b      	add	r3, r1
 8017244:	3230      	adds	r2, #48	; 0x30
 8017246:	b2d2      	uxtb	r2, r2
 8017248:	701a      	strb	r2, [r3, #0]
 801724a:	e00a      	b.n	8017262 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801724c:	68fb      	ldr	r3, [r7, #12]
 801724e:	0f1b      	lsrs	r3, r3, #28
 8017250:	b2da      	uxtb	r2, r3
 8017252:	7dfb      	ldrb	r3, [r7, #23]
 8017254:	005b      	lsls	r3, r3, #1
 8017256:	4619      	mov	r1, r3
 8017258:	68bb      	ldr	r3, [r7, #8]
 801725a:	440b      	add	r3, r1
 801725c:	3237      	adds	r2, #55	; 0x37
 801725e:	b2d2      	uxtb	r2, r2
 8017260:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017262:	68fb      	ldr	r3, [r7, #12]
 8017264:	011b      	lsls	r3, r3, #4
 8017266:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017268:	7dfb      	ldrb	r3, [r7, #23]
 801726a:	005b      	lsls	r3, r3, #1
 801726c:	3301      	adds	r3, #1
 801726e:	68ba      	ldr	r2, [r7, #8]
 8017270:	4413      	add	r3, r2
 8017272:	2200      	movs	r2, #0
 8017274:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017276:	7dfb      	ldrb	r3, [r7, #23]
 8017278:	3301      	adds	r3, #1
 801727a:	75fb      	strb	r3, [r7, #23]
 801727c:	7dfa      	ldrb	r2, [r7, #23]
 801727e:	79fb      	ldrb	r3, [r7, #7]
 8017280:	429a      	cmp	r2, r3
 8017282:	d3d3      	bcc.n	801722c <IntToUnicode+0x18>
  }
}
 8017284:	bf00      	nop
 8017286:	bf00      	nop
 8017288:	371c      	adds	r7, #28
 801728a:	46bd      	mov	sp, r7
 801728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017290:	4770      	bx	lr
	...

08017294 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017294:	b580      	push	{r7, lr}
 8017296:	b0b8      	sub	sp, #224	; 0xe0
 8017298:	af00      	add	r7, sp, #0
 801729a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801729c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80172a0:	2200      	movs	r2, #0
 80172a2:	601a      	str	r2, [r3, #0]
 80172a4:	605a      	str	r2, [r3, #4]
 80172a6:	609a      	str	r2, [r3, #8]
 80172a8:	60da      	str	r2, [r3, #12]
 80172aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80172ac:	f107 0310 	add.w	r3, r7, #16
 80172b0:	22bc      	movs	r2, #188	; 0xbc
 80172b2:	2100      	movs	r1, #0
 80172b4:	4618      	mov	r0, r3
 80172b6:	f000 fb5b 	bl	8017970 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80172ba:	687b      	ldr	r3, [r7, #4]
 80172bc:	681b      	ldr	r3, [r3, #0]
 80172be:	4a2b      	ldr	r2, [pc, #172]	; (801736c <HAL_PCD_MspInit+0xd8>)
 80172c0:	4293      	cmp	r3, r2
 80172c2:	d14e      	bne.n	8017362 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80172c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80172c8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80172ca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80172ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80172d2:	f107 0310 	add.w	r3, r7, #16
 80172d6:	4618      	mov	r0, r3
 80172d8:	f7f5 f98a 	bl	800c5f0 <HAL_RCCEx_PeriphCLKConfig>
 80172dc:	4603      	mov	r3, r0
 80172de:	2b00      	cmp	r3, #0
 80172e0:	d001      	beq.n	80172e6 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 80172e2:	f7ec fb95 	bl	8003a10 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80172e6:	f7f4 f9b9 	bl	800b65c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80172ea:	4b21      	ldr	r3, [pc, #132]	; (8017370 <HAL_PCD_MspInit+0xdc>)
 80172ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80172f0:	4a1f      	ldr	r2, [pc, #124]	; (8017370 <HAL_PCD_MspInit+0xdc>)
 80172f2:	f043 0301 	orr.w	r3, r3, #1
 80172f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80172fa:	4b1d      	ldr	r3, [pc, #116]	; (8017370 <HAL_PCD_MspInit+0xdc>)
 80172fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8017300:	f003 0301 	and.w	r3, r3, #1
 8017304:	60fb      	str	r3, [r7, #12]
 8017306:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8017308:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801730c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017310:	2302      	movs	r3, #2
 8017312:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017316:	2300      	movs	r3, #0
 8017318:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801731c:	2300      	movs	r3, #0
 801731e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8017322:	230a      	movs	r3, #10
 8017324:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017328:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801732c:	4619      	mov	r1, r3
 801732e:	4811      	ldr	r0, [pc, #68]	; (8017374 <HAL_PCD_MspInit+0xe0>)
 8017330:	f7f2 fcbc 	bl	8009cac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017334:	4b0e      	ldr	r3, [pc, #56]	; (8017370 <HAL_PCD_MspInit+0xdc>)
 8017336:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801733a:	4a0d      	ldr	r2, [pc, #52]	; (8017370 <HAL_PCD_MspInit+0xdc>)
 801733c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8017340:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8017344:	4b0a      	ldr	r3, [pc, #40]	; (8017370 <HAL_PCD_MspInit+0xdc>)
 8017346:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801734a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801734e:	60bb      	str	r3, [r7, #8]
 8017350:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8017352:	2200      	movs	r2, #0
 8017354:	2100      	movs	r1, #0
 8017356:	2065      	movs	r0, #101	; 0x65
 8017358:	f7ef f881 	bl	800645e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801735c:	2065      	movs	r0, #101	; 0x65
 801735e:	f7ef f898 	bl	8006492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8017362:	bf00      	nop
 8017364:	37e0      	adds	r7, #224	; 0xe0
 8017366:	46bd      	mov	sp, r7
 8017368:	bd80      	pop	{r7, pc}
 801736a:	bf00      	nop
 801736c:	40080000 	.word	0x40080000
 8017370:	58024400 	.word	0x58024400
 8017374:	58020000 	.word	0x58020000

08017378 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017378:	b580      	push	{r7, lr}
 801737a:	b082      	sub	sp, #8
 801737c:	af00      	add	r7, sp, #0
 801737e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801738c:	4619      	mov	r1, r3
 801738e:	4610      	mov	r0, r2
 8017390:	f7fe fb5f 	bl	8015a52 <USBD_LL_SetupStage>
}
 8017394:	bf00      	nop
 8017396:	3708      	adds	r7, #8
 8017398:	46bd      	mov	sp, r7
 801739a:	bd80      	pop	{r7, pc}

0801739c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801739c:	b580      	push	{r7, lr}
 801739e:	b082      	sub	sp, #8
 80173a0:	af00      	add	r7, sp, #0
 80173a2:	6078      	str	r0, [r7, #4]
 80173a4:	460b      	mov	r3, r1
 80173a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80173ae:	78fa      	ldrb	r2, [r7, #3]
 80173b0:	6879      	ldr	r1, [r7, #4]
 80173b2:	4613      	mov	r3, r2
 80173b4:	00db      	lsls	r3, r3, #3
 80173b6:	4413      	add	r3, r2
 80173b8:	009b      	lsls	r3, r3, #2
 80173ba:	440b      	add	r3, r1
 80173bc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80173c0:	681a      	ldr	r2, [r3, #0]
 80173c2:	78fb      	ldrb	r3, [r7, #3]
 80173c4:	4619      	mov	r1, r3
 80173c6:	f7fe fb99 	bl	8015afc <USBD_LL_DataOutStage>
}
 80173ca:	bf00      	nop
 80173cc:	3708      	adds	r7, #8
 80173ce:	46bd      	mov	sp, r7
 80173d0:	bd80      	pop	{r7, pc}

080173d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80173d2:	b580      	push	{r7, lr}
 80173d4:	b082      	sub	sp, #8
 80173d6:	af00      	add	r7, sp, #0
 80173d8:	6078      	str	r0, [r7, #4]
 80173da:	460b      	mov	r3, r1
 80173dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80173e4:	78fa      	ldrb	r2, [r7, #3]
 80173e6:	6879      	ldr	r1, [r7, #4]
 80173e8:	4613      	mov	r3, r2
 80173ea:	00db      	lsls	r3, r3, #3
 80173ec:	4413      	add	r3, r2
 80173ee:	009b      	lsls	r3, r3, #2
 80173f0:	440b      	add	r3, r1
 80173f2:	334c      	adds	r3, #76	; 0x4c
 80173f4:	681a      	ldr	r2, [r3, #0]
 80173f6:	78fb      	ldrb	r3, [r7, #3]
 80173f8:	4619      	mov	r1, r3
 80173fa:	f7fe fc32 	bl	8015c62 <USBD_LL_DataInStage>
}
 80173fe:	bf00      	nop
 8017400:	3708      	adds	r7, #8
 8017402:	46bd      	mov	sp, r7
 8017404:	bd80      	pop	{r7, pc}

08017406 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017406:	b580      	push	{r7, lr}
 8017408:	b082      	sub	sp, #8
 801740a:	af00      	add	r7, sp, #0
 801740c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017414:	4618      	mov	r0, r3
 8017416:	f7fe fd66 	bl	8015ee6 <USBD_LL_SOF>
}
 801741a:	bf00      	nop
 801741c:	3708      	adds	r7, #8
 801741e:	46bd      	mov	sp, r7
 8017420:	bd80      	pop	{r7, pc}

08017422 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017422:	b580      	push	{r7, lr}
 8017424:	b084      	sub	sp, #16
 8017426:	af00      	add	r7, sp, #0
 8017428:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801742a:	2301      	movs	r3, #1
 801742c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	68db      	ldr	r3, [r3, #12]
 8017432:	2b00      	cmp	r3, #0
 8017434:	d102      	bne.n	801743c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8017436:	2300      	movs	r3, #0
 8017438:	73fb      	strb	r3, [r7, #15]
 801743a:	e008      	b.n	801744e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	68db      	ldr	r3, [r3, #12]
 8017440:	2b02      	cmp	r3, #2
 8017442:	d102      	bne.n	801744a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8017444:	2301      	movs	r3, #1
 8017446:	73fb      	strb	r3, [r7, #15]
 8017448:	e001      	b.n	801744e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801744a:	f7ec fae1 	bl	8003a10 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017454:	7bfa      	ldrb	r2, [r7, #15]
 8017456:	4611      	mov	r1, r2
 8017458:	4618      	mov	r0, r3
 801745a:	f7fe fd06 	bl	8015e6a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801745e:	687b      	ldr	r3, [r7, #4]
 8017460:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017464:	4618      	mov	r0, r3
 8017466:	f7fe fcae 	bl	8015dc6 <USBD_LL_Reset>
}
 801746a:	bf00      	nop
 801746c:	3710      	adds	r7, #16
 801746e:	46bd      	mov	sp, r7
 8017470:	bd80      	pop	{r7, pc}
	...

08017474 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017474:	b580      	push	{r7, lr}
 8017476:	b082      	sub	sp, #8
 8017478:	af00      	add	r7, sp, #0
 801747a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017482:	4618      	mov	r0, r3
 8017484:	f7fe fd01 	bl	8015e8a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	681b      	ldr	r3, [r3, #0]
 801748c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017490:	681b      	ldr	r3, [r3, #0]
 8017492:	687a      	ldr	r2, [r7, #4]
 8017494:	6812      	ldr	r2, [r2, #0]
 8017496:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801749a:	f043 0301 	orr.w	r3, r3, #1
 801749e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	6a1b      	ldr	r3, [r3, #32]
 80174a4:	2b00      	cmp	r3, #0
 80174a6:	d005      	beq.n	80174b4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80174a8:	4b04      	ldr	r3, [pc, #16]	; (80174bc <HAL_PCD_SuspendCallback+0x48>)
 80174aa:	691b      	ldr	r3, [r3, #16]
 80174ac:	4a03      	ldr	r2, [pc, #12]	; (80174bc <HAL_PCD_SuspendCallback+0x48>)
 80174ae:	f043 0306 	orr.w	r3, r3, #6
 80174b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80174b4:	bf00      	nop
 80174b6:	3708      	adds	r7, #8
 80174b8:	46bd      	mov	sp, r7
 80174ba:	bd80      	pop	{r7, pc}
 80174bc:	e000ed00 	.word	0xe000ed00

080174c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80174c0:	b580      	push	{r7, lr}
 80174c2:	b082      	sub	sp, #8
 80174c4:	af00      	add	r7, sp, #0
 80174c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80174ce:	4618      	mov	r0, r3
 80174d0:	f7fe fcf1 	bl	8015eb6 <USBD_LL_Resume>
}
 80174d4:	bf00      	nop
 80174d6:	3708      	adds	r7, #8
 80174d8:	46bd      	mov	sp, r7
 80174da:	bd80      	pop	{r7, pc}

080174dc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80174dc:	b580      	push	{r7, lr}
 80174de:	b082      	sub	sp, #8
 80174e0:	af00      	add	r7, sp, #0
 80174e2:	6078      	str	r0, [r7, #4]
 80174e4:	460b      	mov	r3, r1
 80174e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80174ee:	78fa      	ldrb	r2, [r7, #3]
 80174f0:	4611      	mov	r1, r2
 80174f2:	4618      	mov	r0, r3
 80174f4:	f7fe fd49 	bl	8015f8a <USBD_LL_IsoOUTIncomplete>
}
 80174f8:	bf00      	nop
 80174fa:	3708      	adds	r7, #8
 80174fc:	46bd      	mov	sp, r7
 80174fe:	bd80      	pop	{r7, pc}

08017500 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017500:	b580      	push	{r7, lr}
 8017502:	b082      	sub	sp, #8
 8017504:	af00      	add	r7, sp, #0
 8017506:	6078      	str	r0, [r7, #4]
 8017508:	460b      	mov	r3, r1
 801750a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017512:	78fa      	ldrb	r2, [r7, #3]
 8017514:	4611      	mov	r1, r2
 8017516:	4618      	mov	r0, r3
 8017518:	f7fe fd05 	bl	8015f26 <USBD_LL_IsoINIncomplete>
}
 801751c:	bf00      	nop
 801751e:	3708      	adds	r7, #8
 8017520:	46bd      	mov	sp, r7
 8017522:	bd80      	pop	{r7, pc}

08017524 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017524:	b580      	push	{r7, lr}
 8017526:	b082      	sub	sp, #8
 8017528:	af00      	add	r7, sp, #0
 801752a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017532:	4618      	mov	r0, r3
 8017534:	f7fe fd5b 	bl	8015fee <USBD_LL_DevConnected>
}
 8017538:	bf00      	nop
 801753a:	3708      	adds	r7, #8
 801753c:	46bd      	mov	sp, r7
 801753e:	bd80      	pop	{r7, pc}

08017540 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017540:	b580      	push	{r7, lr}
 8017542:	b082      	sub	sp, #8
 8017544:	af00      	add	r7, sp, #0
 8017546:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801754e:	4618      	mov	r0, r3
 8017550:	f7fe fd58 	bl	8016004 <USBD_LL_DevDisconnected>
}
 8017554:	bf00      	nop
 8017556:	3708      	adds	r7, #8
 8017558:	46bd      	mov	sp, r7
 801755a:	bd80      	pop	{r7, pc}

0801755c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801755c:	b580      	push	{r7, lr}
 801755e:	b082      	sub	sp, #8
 8017560:	af00      	add	r7, sp, #0
 8017562:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	781b      	ldrb	r3, [r3, #0]
 8017568:	2b00      	cmp	r3, #0
 801756a:	d13e      	bne.n	80175ea <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801756c:	4a21      	ldr	r2, [pc, #132]	; (80175f4 <USBD_LL_Init+0x98>)
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	4a1f      	ldr	r2, [pc, #124]	; (80175f4 <USBD_LL_Init+0x98>)
 8017578:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801757c:	4b1d      	ldr	r3, [pc, #116]	; (80175f4 <USBD_LL_Init+0x98>)
 801757e:	4a1e      	ldr	r2, [pc, #120]	; (80175f8 <USBD_LL_Init+0x9c>)
 8017580:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8017582:	4b1c      	ldr	r3, [pc, #112]	; (80175f4 <USBD_LL_Init+0x98>)
 8017584:	2209      	movs	r2, #9
 8017586:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8017588:	4b1a      	ldr	r3, [pc, #104]	; (80175f4 <USBD_LL_Init+0x98>)
 801758a:	2202      	movs	r2, #2
 801758c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801758e:	4b19      	ldr	r3, [pc, #100]	; (80175f4 <USBD_LL_Init+0x98>)
 8017590:	2200      	movs	r2, #0
 8017592:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8017594:	4b17      	ldr	r3, [pc, #92]	; (80175f4 <USBD_LL_Init+0x98>)
 8017596:	2202      	movs	r2, #2
 8017598:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801759a:	4b16      	ldr	r3, [pc, #88]	; (80175f4 <USBD_LL_Init+0x98>)
 801759c:	2200      	movs	r2, #0
 801759e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80175a0:	4b14      	ldr	r3, [pc, #80]	; (80175f4 <USBD_LL_Init+0x98>)
 80175a2:	2200      	movs	r2, #0
 80175a4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80175a6:	4b13      	ldr	r3, [pc, #76]	; (80175f4 <USBD_LL_Init+0x98>)
 80175a8:	2200      	movs	r2, #0
 80175aa:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80175ac:	4b11      	ldr	r3, [pc, #68]	; (80175f4 <USBD_LL_Init+0x98>)
 80175ae:	2200      	movs	r2, #0
 80175b0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80175b2:	4b10      	ldr	r3, [pc, #64]	; (80175f4 <USBD_LL_Init+0x98>)
 80175b4:	2200      	movs	r2, #0
 80175b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80175b8:	4b0e      	ldr	r3, [pc, #56]	; (80175f4 <USBD_LL_Init+0x98>)
 80175ba:	2200      	movs	r2, #0
 80175bc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80175be:	480d      	ldr	r0, [pc, #52]	; (80175f4 <USBD_LL_Init+0x98>)
 80175c0:	f7f2 fd3d 	bl	800a03e <HAL_PCD_Init>
 80175c4:	4603      	mov	r3, r0
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d001      	beq.n	80175ce <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80175ca:	f7ec fa21 	bl	8003a10 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80175ce:	2180      	movs	r1, #128	; 0x80
 80175d0:	4808      	ldr	r0, [pc, #32]	; (80175f4 <USBD_LL_Init+0x98>)
 80175d2:	f7f3 ffc8 	bl	800b566 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80175d6:	2240      	movs	r2, #64	; 0x40
 80175d8:	2100      	movs	r1, #0
 80175da:	4806      	ldr	r0, [pc, #24]	; (80175f4 <USBD_LL_Init+0x98>)
 80175dc:	f7f3 ff7c 	bl	800b4d8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80175e0:	2280      	movs	r2, #128	; 0x80
 80175e2:	2101      	movs	r1, #1
 80175e4:	4803      	ldr	r0, [pc, #12]	; (80175f4 <USBD_LL_Init+0x98>)
 80175e6:	f7f3 ff77 	bl	800b4d8 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 80175ea:	2300      	movs	r3, #0
}
 80175ec:	4618      	mov	r0, r3
 80175ee:	3708      	adds	r7, #8
 80175f0:	46bd      	mov	sp, r7
 80175f2:	bd80      	pop	{r7, pc}
 80175f4:	2000253c 	.word	0x2000253c
 80175f8:	40080000 	.word	0x40080000

080175fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80175fc:	b580      	push	{r7, lr}
 80175fe:	b084      	sub	sp, #16
 8017600:	af00      	add	r7, sp, #0
 8017602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017604:	2300      	movs	r3, #0
 8017606:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017608:	2300      	movs	r3, #0
 801760a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017612:	4618      	mov	r0, r3
 8017614:	f7f2 fe37 	bl	800a286 <HAL_PCD_Start>
 8017618:	4603      	mov	r3, r0
 801761a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801761c:	7bfb      	ldrb	r3, [r7, #15]
 801761e:	4618      	mov	r0, r3
 8017620:	f000 f942 	bl	80178a8 <USBD_Get_USB_Status>
 8017624:	4603      	mov	r3, r0
 8017626:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017628:	7bbb      	ldrb	r3, [r7, #14]
}
 801762a:	4618      	mov	r0, r3
 801762c:	3710      	adds	r7, #16
 801762e:	46bd      	mov	sp, r7
 8017630:	bd80      	pop	{r7, pc}

08017632 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017632:	b580      	push	{r7, lr}
 8017634:	b084      	sub	sp, #16
 8017636:	af00      	add	r7, sp, #0
 8017638:	6078      	str	r0, [r7, #4]
 801763a:	4608      	mov	r0, r1
 801763c:	4611      	mov	r1, r2
 801763e:	461a      	mov	r2, r3
 8017640:	4603      	mov	r3, r0
 8017642:	70fb      	strb	r3, [r7, #3]
 8017644:	460b      	mov	r3, r1
 8017646:	70bb      	strb	r3, [r7, #2]
 8017648:	4613      	mov	r3, r2
 801764a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801764c:	2300      	movs	r3, #0
 801764e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017650:	2300      	movs	r3, #0
 8017652:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801765a:	78bb      	ldrb	r3, [r7, #2]
 801765c:	883a      	ldrh	r2, [r7, #0]
 801765e:	78f9      	ldrb	r1, [r7, #3]
 8017660:	f7f3 fb35 	bl	800acce <HAL_PCD_EP_Open>
 8017664:	4603      	mov	r3, r0
 8017666:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017668:	7bfb      	ldrb	r3, [r7, #15]
 801766a:	4618      	mov	r0, r3
 801766c:	f000 f91c 	bl	80178a8 <USBD_Get_USB_Status>
 8017670:	4603      	mov	r3, r0
 8017672:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017674:	7bbb      	ldrb	r3, [r7, #14]
}
 8017676:	4618      	mov	r0, r3
 8017678:	3710      	adds	r7, #16
 801767a:	46bd      	mov	sp, r7
 801767c:	bd80      	pop	{r7, pc}

0801767e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801767e:	b580      	push	{r7, lr}
 8017680:	b084      	sub	sp, #16
 8017682:	af00      	add	r7, sp, #0
 8017684:	6078      	str	r0, [r7, #4]
 8017686:	460b      	mov	r3, r1
 8017688:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801768a:	2300      	movs	r3, #0
 801768c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801768e:	2300      	movs	r3, #0
 8017690:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017698:	78fa      	ldrb	r2, [r7, #3]
 801769a:	4611      	mov	r1, r2
 801769c:	4618      	mov	r0, r3
 801769e:	f7f3 fb7e 	bl	800ad9e <HAL_PCD_EP_Close>
 80176a2:	4603      	mov	r3, r0
 80176a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80176a6:	7bfb      	ldrb	r3, [r7, #15]
 80176a8:	4618      	mov	r0, r3
 80176aa:	f000 f8fd 	bl	80178a8 <USBD_Get_USB_Status>
 80176ae:	4603      	mov	r3, r0
 80176b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80176b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80176b4:	4618      	mov	r0, r3
 80176b6:	3710      	adds	r7, #16
 80176b8:	46bd      	mov	sp, r7
 80176ba:	bd80      	pop	{r7, pc}

080176bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80176bc:	b580      	push	{r7, lr}
 80176be:	b084      	sub	sp, #16
 80176c0:	af00      	add	r7, sp, #0
 80176c2:	6078      	str	r0, [r7, #4]
 80176c4:	460b      	mov	r3, r1
 80176c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80176c8:	2300      	movs	r3, #0
 80176ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80176cc:	2300      	movs	r3, #0
 80176ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80176d6:	78fa      	ldrb	r2, [r7, #3]
 80176d8:	4611      	mov	r1, r2
 80176da:	4618      	mov	r0, r3
 80176dc:	f7f3 fc56 	bl	800af8c <HAL_PCD_EP_SetStall>
 80176e0:	4603      	mov	r3, r0
 80176e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80176e4:	7bfb      	ldrb	r3, [r7, #15]
 80176e6:	4618      	mov	r0, r3
 80176e8:	f000 f8de 	bl	80178a8 <USBD_Get_USB_Status>
 80176ec:	4603      	mov	r3, r0
 80176ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80176f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80176f2:	4618      	mov	r0, r3
 80176f4:	3710      	adds	r7, #16
 80176f6:	46bd      	mov	sp, r7
 80176f8:	bd80      	pop	{r7, pc}

080176fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80176fa:	b580      	push	{r7, lr}
 80176fc:	b084      	sub	sp, #16
 80176fe:	af00      	add	r7, sp, #0
 8017700:	6078      	str	r0, [r7, #4]
 8017702:	460b      	mov	r3, r1
 8017704:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017706:	2300      	movs	r3, #0
 8017708:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801770a:	2300      	movs	r3, #0
 801770c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017714:	78fa      	ldrb	r2, [r7, #3]
 8017716:	4611      	mov	r1, r2
 8017718:	4618      	mov	r0, r3
 801771a:	f7f3 fc9b 	bl	800b054 <HAL_PCD_EP_ClrStall>
 801771e:	4603      	mov	r3, r0
 8017720:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017722:	7bfb      	ldrb	r3, [r7, #15]
 8017724:	4618      	mov	r0, r3
 8017726:	f000 f8bf 	bl	80178a8 <USBD_Get_USB_Status>
 801772a:	4603      	mov	r3, r0
 801772c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801772e:	7bbb      	ldrb	r3, [r7, #14]
}
 8017730:	4618      	mov	r0, r3
 8017732:	3710      	adds	r7, #16
 8017734:	46bd      	mov	sp, r7
 8017736:	bd80      	pop	{r7, pc}

08017738 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017738:	b480      	push	{r7}
 801773a:	b085      	sub	sp, #20
 801773c:	af00      	add	r7, sp, #0
 801773e:	6078      	str	r0, [r7, #4]
 8017740:	460b      	mov	r3, r1
 8017742:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801774a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801774c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017750:	2b00      	cmp	r3, #0
 8017752:	da0b      	bge.n	801776c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017754:	78fb      	ldrb	r3, [r7, #3]
 8017756:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801775a:	68f9      	ldr	r1, [r7, #12]
 801775c:	4613      	mov	r3, r2
 801775e:	00db      	lsls	r3, r3, #3
 8017760:	4413      	add	r3, r2
 8017762:	009b      	lsls	r3, r3, #2
 8017764:	440b      	add	r3, r1
 8017766:	333e      	adds	r3, #62	; 0x3e
 8017768:	781b      	ldrb	r3, [r3, #0]
 801776a:	e00b      	b.n	8017784 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801776c:	78fb      	ldrb	r3, [r7, #3]
 801776e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017772:	68f9      	ldr	r1, [r7, #12]
 8017774:	4613      	mov	r3, r2
 8017776:	00db      	lsls	r3, r3, #3
 8017778:	4413      	add	r3, r2
 801777a:	009b      	lsls	r3, r3, #2
 801777c:	440b      	add	r3, r1
 801777e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8017782:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017784:	4618      	mov	r0, r3
 8017786:	3714      	adds	r7, #20
 8017788:	46bd      	mov	sp, r7
 801778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801778e:	4770      	bx	lr

08017790 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017790:	b580      	push	{r7, lr}
 8017792:	b084      	sub	sp, #16
 8017794:	af00      	add	r7, sp, #0
 8017796:	6078      	str	r0, [r7, #4]
 8017798:	460b      	mov	r3, r1
 801779a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801779c:	2300      	movs	r3, #0
 801779e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80177a0:	2300      	movs	r3, #0
 80177a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80177aa:	78fa      	ldrb	r2, [r7, #3]
 80177ac:	4611      	mov	r1, r2
 80177ae:	4618      	mov	r0, r3
 80177b0:	f7f3 fa68 	bl	800ac84 <HAL_PCD_SetAddress>
 80177b4:	4603      	mov	r3, r0
 80177b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80177b8:	7bfb      	ldrb	r3, [r7, #15]
 80177ba:	4618      	mov	r0, r3
 80177bc:	f000 f874 	bl	80178a8 <USBD_Get_USB_Status>
 80177c0:	4603      	mov	r3, r0
 80177c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80177c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80177c6:	4618      	mov	r0, r3
 80177c8:	3710      	adds	r7, #16
 80177ca:	46bd      	mov	sp, r7
 80177cc:	bd80      	pop	{r7, pc}

080177ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80177ce:	b580      	push	{r7, lr}
 80177d0:	b086      	sub	sp, #24
 80177d2:	af00      	add	r7, sp, #0
 80177d4:	60f8      	str	r0, [r7, #12]
 80177d6:	607a      	str	r2, [r7, #4]
 80177d8:	603b      	str	r3, [r7, #0]
 80177da:	460b      	mov	r3, r1
 80177dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80177de:	2300      	movs	r3, #0
 80177e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80177e2:	2300      	movs	r3, #0
 80177e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80177e6:	68fb      	ldr	r3, [r7, #12]
 80177e8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80177ec:	7af9      	ldrb	r1, [r7, #11]
 80177ee:	683b      	ldr	r3, [r7, #0]
 80177f0:	687a      	ldr	r2, [r7, #4]
 80177f2:	f7f3 fb81 	bl	800aef8 <HAL_PCD_EP_Transmit>
 80177f6:	4603      	mov	r3, r0
 80177f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80177fa:	7dfb      	ldrb	r3, [r7, #23]
 80177fc:	4618      	mov	r0, r3
 80177fe:	f000 f853 	bl	80178a8 <USBD_Get_USB_Status>
 8017802:	4603      	mov	r3, r0
 8017804:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017806:	7dbb      	ldrb	r3, [r7, #22]
}
 8017808:	4618      	mov	r0, r3
 801780a:	3718      	adds	r7, #24
 801780c:	46bd      	mov	sp, r7
 801780e:	bd80      	pop	{r7, pc}

08017810 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017810:	b580      	push	{r7, lr}
 8017812:	b086      	sub	sp, #24
 8017814:	af00      	add	r7, sp, #0
 8017816:	60f8      	str	r0, [r7, #12]
 8017818:	607a      	str	r2, [r7, #4]
 801781a:	603b      	str	r3, [r7, #0]
 801781c:	460b      	mov	r3, r1
 801781e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017820:	2300      	movs	r3, #0
 8017822:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017824:	2300      	movs	r3, #0
 8017826:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017828:	68fb      	ldr	r3, [r7, #12]
 801782a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801782e:	7af9      	ldrb	r1, [r7, #11]
 8017830:	683b      	ldr	r3, [r7, #0]
 8017832:	687a      	ldr	r2, [r7, #4]
 8017834:	f7f3 fafd 	bl	800ae32 <HAL_PCD_EP_Receive>
 8017838:	4603      	mov	r3, r0
 801783a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801783c:	7dfb      	ldrb	r3, [r7, #23]
 801783e:	4618      	mov	r0, r3
 8017840:	f000 f832 	bl	80178a8 <USBD_Get_USB_Status>
 8017844:	4603      	mov	r3, r0
 8017846:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017848:	7dbb      	ldrb	r3, [r7, #22]
}
 801784a:	4618      	mov	r0, r3
 801784c:	3718      	adds	r7, #24
 801784e:	46bd      	mov	sp, r7
 8017850:	bd80      	pop	{r7, pc}

08017852 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017852:	b580      	push	{r7, lr}
 8017854:	b082      	sub	sp, #8
 8017856:	af00      	add	r7, sp, #0
 8017858:	6078      	str	r0, [r7, #4]
 801785a:	460b      	mov	r3, r1
 801785c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017864:	78fa      	ldrb	r2, [r7, #3]
 8017866:	4611      	mov	r1, r2
 8017868:	4618      	mov	r0, r3
 801786a:	f7f3 fb2d 	bl	800aec8 <HAL_PCD_EP_GetRxCount>
 801786e:	4603      	mov	r3, r0
}
 8017870:	4618      	mov	r0, r3
 8017872:	3708      	adds	r7, #8
 8017874:	46bd      	mov	sp, r7
 8017876:	bd80      	pop	{r7, pc}

08017878 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8017878:	b480      	push	{r7}
 801787a:	b083      	sub	sp, #12
 801787c:	af00      	add	r7, sp, #0
 801787e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8017880:	4b03      	ldr	r3, [pc, #12]	; (8017890 <USBD_static_malloc+0x18>)
}
 8017882:	4618      	mov	r0, r3
 8017884:	370c      	adds	r7, #12
 8017886:	46bd      	mov	sp, r7
 8017888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801788c:	4770      	bx	lr
 801788e:	bf00      	nop
 8017890:	20002a48 	.word	0x20002a48

08017894 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017894:	b480      	push	{r7}
 8017896:	b083      	sub	sp, #12
 8017898:	af00      	add	r7, sp, #0
 801789a:	6078      	str	r0, [r7, #4]

}
 801789c:	bf00      	nop
 801789e:	370c      	adds	r7, #12
 80178a0:	46bd      	mov	sp, r7
 80178a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178a6:	4770      	bx	lr

080178a8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80178a8:	b480      	push	{r7}
 80178aa:	b085      	sub	sp, #20
 80178ac:	af00      	add	r7, sp, #0
 80178ae:	4603      	mov	r3, r0
 80178b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80178b2:	2300      	movs	r3, #0
 80178b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80178b6:	79fb      	ldrb	r3, [r7, #7]
 80178b8:	2b03      	cmp	r3, #3
 80178ba:	d817      	bhi.n	80178ec <USBD_Get_USB_Status+0x44>
 80178bc:	a201      	add	r2, pc, #4	; (adr r2, 80178c4 <USBD_Get_USB_Status+0x1c>)
 80178be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80178c2:	bf00      	nop
 80178c4:	080178d5 	.word	0x080178d5
 80178c8:	080178db 	.word	0x080178db
 80178cc:	080178e1 	.word	0x080178e1
 80178d0:	080178e7 	.word	0x080178e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80178d4:	2300      	movs	r3, #0
 80178d6:	73fb      	strb	r3, [r7, #15]
    break;
 80178d8:	e00b      	b.n	80178f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80178da:	2303      	movs	r3, #3
 80178dc:	73fb      	strb	r3, [r7, #15]
    break;
 80178de:	e008      	b.n	80178f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80178e0:	2301      	movs	r3, #1
 80178e2:	73fb      	strb	r3, [r7, #15]
    break;
 80178e4:	e005      	b.n	80178f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80178e6:	2303      	movs	r3, #3
 80178e8:	73fb      	strb	r3, [r7, #15]
    break;
 80178ea:	e002      	b.n	80178f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80178ec:	2303      	movs	r3, #3
 80178ee:	73fb      	strb	r3, [r7, #15]
    break;
 80178f0:	bf00      	nop
  }
  return usb_status;
 80178f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80178f4:	4618      	mov	r0, r3
 80178f6:	3714      	adds	r7, #20
 80178f8:	46bd      	mov	sp, r7
 80178fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178fe:	4770      	bx	lr

08017900 <__errno>:
 8017900:	4b01      	ldr	r3, [pc, #4]	; (8017908 <__errno+0x8>)
 8017902:	6818      	ldr	r0, [r3, #0]
 8017904:	4770      	bx	lr
 8017906:	bf00      	nop
 8017908:	20000114 	.word	0x20000114

0801790c <__libc_init_array>:
 801790c:	b570      	push	{r4, r5, r6, lr}
 801790e:	4d0d      	ldr	r5, [pc, #52]	; (8017944 <__libc_init_array+0x38>)
 8017910:	4c0d      	ldr	r4, [pc, #52]	; (8017948 <__libc_init_array+0x3c>)
 8017912:	1b64      	subs	r4, r4, r5
 8017914:	10a4      	asrs	r4, r4, #2
 8017916:	2600      	movs	r6, #0
 8017918:	42a6      	cmp	r6, r4
 801791a:	d109      	bne.n	8017930 <__libc_init_array+0x24>
 801791c:	4d0b      	ldr	r5, [pc, #44]	; (801794c <__libc_init_array+0x40>)
 801791e:	4c0c      	ldr	r4, [pc, #48]	; (8017950 <__libc_init_array+0x44>)
 8017920:	f002 ff5e 	bl	801a7e0 <_init>
 8017924:	1b64      	subs	r4, r4, r5
 8017926:	10a4      	asrs	r4, r4, #2
 8017928:	2600      	movs	r6, #0
 801792a:	42a6      	cmp	r6, r4
 801792c:	d105      	bne.n	801793a <__libc_init_array+0x2e>
 801792e:	bd70      	pop	{r4, r5, r6, pc}
 8017930:	f855 3b04 	ldr.w	r3, [r5], #4
 8017934:	4798      	blx	r3
 8017936:	3601      	adds	r6, #1
 8017938:	e7ee      	b.n	8017918 <__libc_init_array+0xc>
 801793a:	f855 3b04 	ldr.w	r3, [r5], #4
 801793e:	4798      	blx	r3
 8017940:	3601      	adds	r6, #1
 8017942:	e7f2      	b.n	801792a <__libc_init_array+0x1e>
 8017944:	0801b0bc 	.word	0x0801b0bc
 8017948:	0801b0bc 	.word	0x0801b0bc
 801794c:	0801b0bc 	.word	0x0801b0bc
 8017950:	0801b0c0 	.word	0x0801b0c0

08017954 <memcpy>:
 8017954:	440a      	add	r2, r1
 8017956:	4291      	cmp	r1, r2
 8017958:	f100 33ff 	add.w	r3, r0, #4294967295
 801795c:	d100      	bne.n	8017960 <memcpy+0xc>
 801795e:	4770      	bx	lr
 8017960:	b510      	push	{r4, lr}
 8017962:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017966:	f803 4f01 	strb.w	r4, [r3, #1]!
 801796a:	4291      	cmp	r1, r2
 801796c:	d1f9      	bne.n	8017962 <memcpy+0xe>
 801796e:	bd10      	pop	{r4, pc}

08017970 <memset>:
 8017970:	4402      	add	r2, r0
 8017972:	4603      	mov	r3, r0
 8017974:	4293      	cmp	r3, r2
 8017976:	d100      	bne.n	801797a <memset+0xa>
 8017978:	4770      	bx	lr
 801797a:	f803 1b01 	strb.w	r1, [r3], #1
 801797e:	e7f9      	b.n	8017974 <memset+0x4>

08017980 <__cvt>:
 8017980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017982:	ed2d 8b02 	vpush	{d8}
 8017986:	eeb0 8b40 	vmov.f64	d8, d0
 801798a:	b085      	sub	sp, #20
 801798c:	4617      	mov	r7, r2
 801798e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8017990:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8017992:	ee18 2a90 	vmov	r2, s17
 8017996:	f025 0520 	bic.w	r5, r5, #32
 801799a:	2a00      	cmp	r2, #0
 801799c:	bfb6      	itet	lt
 801799e:	222d      	movlt	r2, #45	; 0x2d
 80179a0:	2200      	movge	r2, #0
 80179a2:	eeb1 8b40 	vneglt.f64	d8, d0
 80179a6:	2d46      	cmp	r5, #70	; 0x46
 80179a8:	460c      	mov	r4, r1
 80179aa:	701a      	strb	r2, [r3, #0]
 80179ac:	d004      	beq.n	80179b8 <__cvt+0x38>
 80179ae:	2d45      	cmp	r5, #69	; 0x45
 80179b0:	d100      	bne.n	80179b4 <__cvt+0x34>
 80179b2:	3401      	adds	r4, #1
 80179b4:	2102      	movs	r1, #2
 80179b6:	e000      	b.n	80179ba <__cvt+0x3a>
 80179b8:	2103      	movs	r1, #3
 80179ba:	ab03      	add	r3, sp, #12
 80179bc:	9301      	str	r3, [sp, #4]
 80179be:	ab02      	add	r3, sp, #8
 80179c0:	9300      	str	r3, [sp, #0]
 80179c2:	4622      	mov	r2, r4
 80179c4:	4633      	mov	r3, r6
 80179c6:	eeb0 0b48 	vmov.f64	d0, d8
 80179ca:	f000 fca9 	bl	8018320 <_dtoa_r>
 80179ce:	2d47      	cmp	r5, #71	; 0x47
 80179d0:	d101      	bne.n	80179d6 <__cvt+0x56>
 80179d2:	07fb      	lsls	r3, r7, #31
 80179d4:	d51a      	bpl.n	8017a0c <__cvt+0x8c>
 80179d6:	2d46      	cmp	r5, #70	; 0x46
 80179d8:	eb00 0204 	add.w	r2, r0, r4
 80179dc:	d10c      	bne.n	80179f8 <__cvt+0x78>
 80179de:	7803      	ldrb	r3, [r0, #0]
 80179e0:	2b30      	cmp	r3, #48	; 0x30
 80179e2:	d107      	bne.n	80179f4 <__cvt+0x74>
 80179e4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80179e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179ec:	bf1c      	itt	ne
 80179ee:	f1c4 0401 	rsbne	r4, r4, #1
 80179f2:	6034      	strne	r4, [r6, #0]
 80179f4:	6833      	ldr	r3, [r6, #0]
 80179f6:	441a      	add	r2, r3
 80179f8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80179fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a00:	bf08      	it	eq
 8017a02:	9203      	streq	r2, [sp, #12]
 8017a04:	2130      	movs	r1, #48	; 0x30
 8017a06:	9b03      	ldr	r3, [sp, #12]
 8017a08:	4293      	cmp	r3, r2
 8017a0a:	d307      	bcc.n	8017a1c <__cvt+0x9c>
 8017a0c:	9b03      	ldr	r3, [sp, #12]
 8017a0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017a10:	1a1b      	subs	r3, r3, r0
 8017a12:	6013      	str	r3, [r2, #0]
 8017a14:	b005      	add	sp, #20
 8017a16:	ecbd 8b02 	vpop	{d8}
 8017a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a1c:	1c5c      	adds	r4, r3, #1
 8017a1e:	9403      	str	r4, [sp, #12]
 8017a20:	7019      	strb	r1, [r3, #0]
 8017a22:	e7f0      	b.n	8017a06 <__cvt+0x86>

08017a24 <__exponent>:
 8017a24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017a26:	4603      	mov	r3, r0
 8017a28:	2900      	cmp	r1, #0
 8017a2a:	bfb8      	it	lt
 8017a2c:	4249      	neglt	r1, r1
 8017a2e:	f803 2b02 	strb.w	r2, [r3], #2
 8017a32:	bfb4      	ite	lt
 8017a34:	222d      	movlt	r2, #45	; 0x2d
 8017a36:	222b      	movge	r2, #43	; 0x2b
 8017a38:	2909      	cmp	r1, #9
 8017a3a:	7042      	strb	r2, [r0, #1]
 8017a3c:	dd2a      	ble.n	8017a94 <__exponent+0x70>
 8017a3e:	f10d 0407 	add.w	r4, sp, #7
 8017a42:	46a4      	mov	ip, r4
 8017a44:	270a      	movs	r7, #10
 8017a46:	46a6      	mov	lr, r4
 8017a48:	460a      	mov	r2, r1
 8017a4a:	fb91 f6f7 	sdiv	r6, r1, r7
 8017a4e:	fb07 1516 	mls	r5, r7, r6, r1
 8017a52:	3530      	adds	r5, #48	; 0x30
 8017a54:	2a63      	cmp	r2, #99	; 0x63
 8017a56:	f104 34ff 	add.w	r4, r4, #4294967295
 8017a5a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8017a5e:	4631      	mov	r1, r6
 8017a60:	dcf1      	bgt.n	8017a46 <__exponent+0x22>
 8017a62:	3130      	adds	r1, #48	; 0x30
 8017a64:	f1ae 0502 	sub.w	r5, lr, #2
 8017a68:	f804 1c01 	strb.w	r1, [r4, #-1]
 8017a6c:	1c44      	adds	r4, r0, #1
 8017a6e:	4629      	mov	r1, r5
 8017a70:	4561      	cmp	r1, ip
 8017a72:	d30a      	bcc.n	8017a8a <__exponent+0x66>
 8017a74:	f10d 0209 	add.w	r2, sp, #9
 8017a78:	eba2 020e 	sub.w	r2, r2, lr
 8017a7c:	4565      	cmp	r5, ip
 8017a7e:	bf88      	it	hi
 8017a80:	2200      	movhi	r2, #0
 8017a82:	4413      	add	r3, r2
 8017a84:	1a18      	subs	r0, r3, r0
 8017a86:	b003      	add	sp, #12
 8017a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017a8e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8017a92:	e7ed      	b.n	8017a70 <__exponent+0x4c>
 8017a94:	2330      	movs	r3, #48	; 0x30
 8017a96:	3130      	adds	r1, #48	; 0x30
 8017a98:	7083      	strb	r3, [r0, #2]
 8017a9a:	70c1      	strb	r1, [r0, #3]
 8017a9c:	1d03      	adds	r3, r0, #4
 8017a9e:	e7f1      	b.n	8017a84 <__exponent+0x60>

08017aa0 <_printf_float>:
 8017aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017aa4:	b08b      	sub	sp, #44	; 0x2c
 8017aa6:	460c      	mov	r4, r1
 8017aa8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8017aac:	4616      	mov	r6, r2
 8017aae:	461f      	mov	r7, r3
 8017ab0:	4605      	mov	r5, r0
 8017ab2:	f001 f9a3 	bl	8018dfc <_localeconv_r>
 8017ab6:	f8d0 b000 	ldr.w	fp, [r0]
 8017aba:	4658      	mov	r0, fp
 8017abc:	f7e8 fc10 	bl	80002e0 <strlen>
 8017ac0:	2300      	movs	r3, #0
 8017ac2:	9308      	str	r3, [sp, #32]
 8017ac4:	f8d8 3000 	ldr.w	r3, [r8]
 8017ac8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8017acc:	6822      	ldr	r2, [r4, #0]
 8017ace:	3307      	adds	r3, #7
 8017ad0:	f023 0307 	bic.w	r3, r3, #7
 8017ad4:	f103 0108 	add.w	r1, r3, #8
 8017ad8:	f8c8 1000 	str.w	r1, [r8]
 8017adc:	4682      	mov	sl, r0
 8017ade:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017ae2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8017ae6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8017d48 <_printf_float+0x2a8>
 8017aea:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8017aee:	eeb0 6bc0 	vabs.f64	d6, d0
 8017af2:	eeb4 6b47 	vcmp.f64	d6, d7
 8017af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017afa:	dd24      	ble.n	8017b46 <_printf_float+0xa6>
 8017afc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8017b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b04:	d502      	bpl.n	8017b0c <_printf_float+0x6c>
 8017b06:	232d      	movs	r3, #45	; 0x2d
 8017b08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017b0c:	4b90      	ldr	r3, [pc, #576]	; (8017d50 <_printf_float+0x2b0>)
 8017b0e:	4891      	ldr	r0, [pc, #580]	; (8017d54 <_printf_float+0x2b4>)
 8017b10:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8017b14:	bf94      	ite	ls
 8017b16:	4698      	movls	r8, r3
 8017b18:	4680      	movhi	r8, r0
 8017b1a:	2303      	movs	r3, #3
 8017b1c:	6123      	str	r3, [r4, #16]
 8017b1e:	f022 0204 	bic.w	r2, r2, #4
 8017b22:	2300      	movs	r3, #0
 8017b24:	6022      	str	r2, [r4, #0]
 8017b26:	9304      	str	r3, [sp, #16]
 8017b28:	9700      	str	r7, [sp, #0]
 8017b2a:	4633      	mov	r3, r6
 8017b2c:	aa09      	add	r2, sp, #36	; 0x24
 8017b2e:	4621      	mov	r1, r4
 8017b30:	4628      	mov	r0, r5
 8017b32:	f000 f9d3 	bl	8017edc <_printf_common>
 8017b36:	3001      	adds	r0, #1
 8017b38:	f040 808a 	bne.w	8017c50 <_printf_float+0x1b0>
 8017b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8017b40:	b00b      	add	sp, #44	; 0x2c
 8017b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b46:	eeb4 0b40 	vcmp.f64	d0, d0
 8017b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b4e:	d709      	bvc.n	8017b64 <_printf_float+0xc4>
 8017b50:	ee10 3a90 	vmov	r3, s1
 8017b54:	2b00      	cmp	r3, #0
 8017b56:	bfbc      	itt	lt
 8017b58:	232d      	movlt	r3, #45	; 0x2d
 8017b5a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8017b5e:	487e      	ldr	r0, [pc, #504]	; (8017d58 <_printf_float+0x2b8>)
 8017b60:	4b7e      	ldr	r3, [pc, #504]	; (8017d5c <_printf_float+0x2bc>)
 8017b62:	e7d5      	b.n	8017b10 <_printf_float+0x70>
 8017b64:	6863      	ldr	r3, [r4, #4]
 8017b66:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8017b6a:	9104      	str	r1, [sp, #16]
 8017b6c:	1c59      	adds	r1, r3, #1
 8017b6e:	d13c      	bne.n	8017bea <_printf_float+0x14a>
 8017b70:	2306      	movs	r3, #6
 8017b72:	6063      	str	r3, [r4, #4]
 8017b74:	2300      	movs	r3, #0
 8017b76:	9303      	str	r3, [sp, #12]
 8017b78:	ab08      	add	r3, sp, #32
 8017b7a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8017b7e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8017b82:	ab07      	add	r3, sp, #28
 8017b84:	6861      	ldr	r1, [r4, #4]
 8017b86:	9300      	str	r3, [sp, #0]
 8017b88:	6022      	str	r2, [r4, #0]
 8017b8a:	f10d 031b 	add.w	r3, sp, #27
 8017b8e:	4628      	mov	r0, r5
 8017b90:	f7ff fef6 	bl	8017980 <__cvt>
 8017b94:	9b04      	ldr	r3, [sp, #16]
 8017b96:	9907      	ldr	r1, [sp, #28]
 8017b98:	2b47      	cmp	r3, #71	; 0x47
 8017b9a:	4680      	mov	r8, r0
 8017b9c:	d108      	bne.n	8017bb0 <_printf_float+0x110>
 8017b9e:	1cc8      	adds	r0, r1, #3
 8017ba0:	db02      	blt.n	8017ba8 <_printf_float+0x108>
 8017ba2:	6863      	ldr	r3, [r4, #4]
 8017ba4:	4299      	cmp	r1, r3
 8017ba6:	dd41      	ble.n	8017c2c <_printf_float+0x18c>
 8017ba8:	f1a9 0902 	sub.w	r9, r9, #2
 8017bac:	fa5f f989 	uxtb.w	r9, r9
 8017bb0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8017bb4:	d820      	bhi.n	8017bf8 <_printf_float+0x158>
 8017bb6:	3901      	subs	r1, #1
 8017bb8:	464a      	mov	r2, r9
 8017bba:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8017bbe:	9107      	str	r1, [sp, #28]
 8017bc0:	f7ff ff30 	bl	8017a24 <__exponent>
 8017bc4:	9a08      	ldr	r2, [sp, #32]
 8017bc6:	9004      	str	r0, [sp, #16]
 8017bc8:	1813      	adds	r3, r2, r0
 8017bca:	2a01      	cmp	r2, #1
 8017bcc:	6123      	str	r3, [r4, #16]
 8017bce:	dc02      	bgt.n	8017bd6 <_printf_float+0x136>
 8017bd0:	6822      	ldr	r2, [r4, #0]
 8017bd2:	07d2      	lsls	r2, r2, #31
 8017bd4:	d501      	bpl.n	8017bda <_printf_float+0x13a>
 8017bd6:	3301      	adds	r3, #1
 8017bd8:	6123      	str	r3, [r4, #16]
 8017bda:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	d0a2      	beq.n	8017b28 <_printf_float+0x88>
 8017be2:	232d      	movs	r3, #45	; 0x2d
 8017be4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017be8:	e79e      	b.n	8017b28 <_printf_float+0x88>
 8017bea:	9904      	ldr	r1, [sp, #16]
 8017bec:	2947      	cmp	r1, #71	; 0x47
 8017bee:	d1c1      	bne.n	8017b74 <_printf_float+0xd4>
 8017bf0:	2b00      	cmp	r3, #0
 8017bf2:	d1bf      	bne.n	8017b74 <_printf_float+0xd4>
 8017bf4:	2301      	movs	r3, #1
 8017bf6:	e7bc      	b.n	8017b72 <_printf_float+0xd2>
 8017bf8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8017bfc:	d118      	bne.n	8017c30 <_printf_float+0x190>
 8017bfe:	2900      	cmp	r1, #0
 8017c00:	6863      	ldr	r3, [r4, #4]
 8017c02:	dd0b      	ble.n	8017c1c <_printf_float+0x17c>
 8017c04:	6121      	str	r1, [r4, #16]
 8017c06:	b913      	cbnz	r3, 8017c0e <_printf_float+0x16e>
 8017c08:	6822      	ldr	r2, [r4, #0]
 8017c0a:	07d0      	lsls	r0, r2, #31
 8017c0c:	d502      	bpl.n	8017c14 <_printf_float+0x174>
 8017c0e:	3301      	adds	r3, #1
 8017c10:	440b      	add	r3, r1
 8017c12:	6123      	str	r3, [r4, #16]
 8017c14:	2300      	movs	r3, #0
 8017c16:	65a1      	str	r1, [r4, #88]	; 0x58
 8017c18:	9304      	str	r3, [sp, #16]
 8017c1a:	e7de      	b.n	8017bda <_printf_float+0x13a>
 8017c1c:	b913      	cbnz	r3, 8017c24 <_printf_float+0x184>
 8017c1e:	6822      	ldr	r2, [r4, #0]
 8017c20:	07d2      	lsls	r2, r2, #31
 8017c22:	d501      	bpl.n	8017c28 <_printf_float+0x188>
 8017c24:	3302      	adds	r3, #2
 8017c26:	e7f4      	b.n	8017c12 <_printf_float+0x172>
 8017c28:	2301      	movs	r3, #1
 8017c2a:	e7f2      	b.n	8017c12 <_printf_float+0x172>
 8017c2c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8017c30:	9b08      	ldr	r3, [sp, #32]
 8017c32:	4299      	cmp	r1, r3
 8017c34:	db05      	blt.n	8017c42 <_printf_float+0x1a2>
 8017c36:	6823      	ldr	r3, [r4, #0]
 8017c38:	6121      	str	r1, [r4, #16]
 8017c3a:	07d8      	lsls	r0, r3, #31
 8017c3c:	d5ea      	bpl.n	8017c14 <_printf_float+0x174>
 8017c3e:	1c4b      	adds	r3, r1, #1
 8017c40:	e7e7      	b.n	8017c12 <_printf_float+0x172>
 8017c42:	2900      	cmp	r1, #0
 8017c44:	bfd4      	ite	le
 8017c46:	f1c1 0202 	rsble	r2, r1, #2
 8017c4a:	2201      	movgt	r2, #1
 8017c4c:	4413      	add	r3, r2
 8017c4e:	e7e0      	b.n	8017c12 <_printf_float+0x172>
 8017c50:	6823      	ldr	r3, [r4, #0]
 8017c52:	055a      	lsls	r2, r3, #21
 8017c54:	d407      	bmi.n	8017c66 <_printf_float+0x1c6>
 8017c56:	6923      	ldr	r3, [r4, #16]
 8017c58:	4642      	mov	r2, r8
 8017c5a:	4631      	mov	r1, r6
 8017c5c:	4628      	mov	r0, r5
 8017c5e:	47b8      	blx	r7
 8017c60:	3001      	adds	r0, #1
 8017c62:	d12a      	bne.n	8017cba <_printf_float+0x21a>
 8017c64:	e76a      	b.n	8017b3c <_printf_float+0x9c>
 8017c66:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8017c6a:	f240 80e2 	bls.w	8017e32 <_printf_float+0x392>
 8017c6e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8017c72:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c7a:	d133      	bne.n	8017ce4 <_printf_float+0x244>
 8017c7c:	4a38      	ldr	r2, [pc, #224]	; (8017d60 <_printf_float+0x2c0>)
 8017c7e:	2301      	movs	r3, #1
 8017c80:	4631      	mov	r1, r6
 8017c82:	4628      	mov	r0, r5
 8017c84:	47b8      	blx	r7
 8017c86:	3001      	adds	r0, #1
 8017c88:	f43f af58 	beq.w	8017b3c <_printf_float+0x9c>
 8017c8c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8017c90:	429a      	cmp	r2, r3
 8017c92:	db02      	blt.n	8017c9a <_printf_float+0x1fa>
 8017c94:	6823      	ldr	r3, [r4, #0]
 8017c96:	07d8      	lsls	r0, r3, #31
 8017c98:	d50f      	bpl.n	8017cba <_printf_float+0x21a>
 8017c9a:	4653      	mov	r3, sl
 8017c9c:	465a      	mov	r2, fp
 8017c9e:	4631      	mov	r1, r6
 8017ca0:	4628      	mov	r0, r5
 8017ca2:	47b8      	blx	r7
 8017ca4:	3001      	adds	r0, #1
 8017ca6:	f43f af49 	beq.w	8017b3c <_printf_float+0x9c>
 8017caa:	f04f 0800 	mov.w	r8, #0
 8017cae:	f104 091a 	add.w	r9, r4, #26
 8017cb2:	9b08      	ldr	r3, [sp, #32]
 8017cb4:	3b01      	subs	r3, #1
 8017cb6:	4543      	cmp	r3, r8
 8017cb8:	dc09      	bgt.n	8017cce <_printf_float+0x22e>
 8017cba:	6823      	ldr	r3, [r4, #0]
 8017cbc:	079b      	lsls	r3, r3, #30
 8017cbe:	f100 8108 	bmi.w	8017ed2 <_printf_float+0x432>
 8017cc2:	68e0      	ldr	r0, [r4, #12]
 8017cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017cc6:	4298      	cmp	r0, r3
 8017cc8:	bfb8      	it	lt
 8017cca:	4618      	movlt	r0, r3
 8017ccc:	e738      	b.n	8017b40 <_printf_float+0xa0>
 8017cce:	2301      	movs	r3, #1
 8017cd0:	464a      	mov	r2, r9
 8017cd2:	4631      	mov	r1, r6
 8017cd4:	4628      	mov	r0, r5
 8017cd6:	47b8      	blx	r7
 8017cd8:	3001      	adds	r0, #1
 8017cda:	f43f af2f 	beq.w	8017b3c <_printf_float+0x9c>
 8017cde:	f108 0801 	add.w	r8, r8, #1
 8017ce2:	e7e6      	b.n	8017cb2 <_printf_float+0x212>
 8017ce4:	9b07      	ldr	r3, [sp, #28]
 8017ce6:	2b00      	cmp	r3, #0
 8017ce8:	dc3c      	bgt.n	8017d64 <_printf_float+0x2c4>
 8017cea:	4a1d      	ldr	r2, [pc, #116]	; (8017d60 <_printf_float+0x2c0>)
 8017cec:	2301      	movs	r3, #1
 8017cee:	4631      	mov	r1, r6
 8017cf0:	4628      	mov	r0, r5
 8017cf2:	47b8      	blx	r7
 8017cf4:	3001      	adds	r0, #1
 8017cf6:	f43f af21 	beq.w	8017b3c <_printf_float+0x9c>
 8017cfa:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8017cfe:	4313      	orrs	r3, r2
 8017d00:	d102      	bne.n	8017d08 <_printf_float+0x268>
 8017d02:	6823      	ldr	r3, [r4, #0]
 8017d04:	07d9      	lsls	r1, r3, #31
 8017d06:	d5d8      	bpl.n	8017cba <_printf_float+0x21a>
 8017d08:	4653      	mov	r3, sl
 8017d0a:	465a      	mov	r2, fp
 8017d0c:	4631      	mov	r1, r6
 8017d0e:	4628      	mov	r0, r5
 8017d10:	47b8      	blx	r7
 8017d12:	3001      	adds	r0, #1
 8017d14:	f43f af12 	beq.w	8017b3c <_printf_float+0x9c>
 8017d18:	f04f 0900 	mov.w	r9, #0
 8017d1c:	f104 0a1a 	add.w	sl, r4, #26
 8017d20:	9b07      	ldr	r3, [sp, #28]
 8017d22:	425b      	negs	r3, r3
 8017d24:	454b      	cmp	r3, r9
 8017d26:	dc01      	bgt.n	8017d2c <_printf_float+0x28c>
 8017d28:	9b08      	ldr	r3, [sp, #32]
 8017d2a:	e795      	b.n	8017c58 <_printf_float+0x1b8>
 8017d2c:	2301      	movs	r3, #1
 8017d2e:	4652      	mov	r2, sl
 8017d30:	4631      	mov	r1, r6
 8017d32:	4628      	mov	r0, r5
 8017d34:	47b8      	blx	r7
 8017d36:	3001      	adds	r0, #1
 8017d38:	f43f af00 	beq.w	8017b3c <_printf_float+0x9c>
 8017d3c:	f109 0901 	add.w	r9, r9, #1
 8017d40:	e7ee      	b.n	8017d20 <_printf_float+0x280>
 8017d42:	bf00      	nop
 8017d44:	f3af 8000 	nop.w
 8017d48:	ffffffff 	.word	0xffffffff
 8017d4c:	7fefffff 	.word	0x7fefffff
 8017d50:	0801ace0 	.word	0x0801ace0
 8017d54:	0801ace4 	.word	0x0801ace4
 8017d58:	0801acec 	.word	0x0801acec
 8017d5c:	0801ace8 	.word	0x0801ace8
 8017d60:	0801acf0 	.word	0x0801acf0
 8017d64:	9a08      	ldr	r2, [sp, #32]
 8017d66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017d68:	429a      	cmp	r2, r3
 8017d6a:	bfa8      	it	ge
 8017d6c:	461a      	movge	r2, r3
 8017d6e:	2a00      	cmp	r2, #0
 8017d70:	4691      	mov	r9, r2
 8017d72:	dc38      	bgt.n	8017de6 <_printf_float+0x346>
 8017d74:	2300      	movs	r3, #0
 8017d76:	9305      	str	r3, [sp, #20]
 8017d78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017d7c:	f104 021a 	add.w	r2, r4, #26
 8017d80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017d82:	9905      	ldr	r1, [sp, #20]
 8017d84:	9304      	str	r3, [sp, #16]
 8017d86:	eba3 0309 	sub.w	r3, r3, r9
 8017d8a:	428b      	cmp	r3, r1
 8017d8c:	dc33      	bgt.n	8017df6 <_printf_float+0x356>
 8017d8e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8017d92:	429a      	cmp	r2, r3
 8017d94:	db3c      	blt.n	8017e10 <_printf_float+0x370>
 8017d96:	6823      	ldr	r3, [r4, #0]
 8017d98:	07da      	lsls	r2, r3, #31
 8017d9a:	d439      	bmi.n	8017e10 <_printf_float+0x370>
 8017d9c:	9b08      	ldr	r3, [sp, #32]
 8017d9e:	9a04      	ldr	r2, [sp, #16]
 8017da0:	9907      	ldr	r1, [sp, #28]
 8017da2:	1a9a      	subs	r2, r3, r2
 8017da4:	eba3 0901 	sub.w	r9, r3, r1
 8017da8:	4591      	cmp	r9, r2
 8017daa:	bfa8      	it	ge
 8017dac:	4691      	movge	r9, r2
 8017dae:	f1b9 0f00 	cmp.w	r9, #0
 8017db2:	dc35      	bgt.n	8017e20 <_printf_float+0x380>
 8017db4:	f04f 0800 	mov.w	r8, #0
 8017db8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017dbc:	f104 0a1a 	add.w	sl, r4, #26
 8017dc0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8017dc4:	1a9b      	subs	r3, r3, r2
 8017dc6:	eba3 0309 	sub.w	r3, r3, r9
 8017dca:	4543      	cmp	r3, r8
 8017dcc:	f77f af75 	ble.w	8017cba <_printf_float+0x21a>
 8017dd0:	2301      	movs	r3, #1
 8017dd2:	4652      	mov	r2, sl
 8017dd4:	4631      	mov	r1, r6
 8017dd6:	4628      	mov	r0, r5
 8017dd8:	47b8      	blx	r7
 8017dda:	3001      	adds	r0, #1
 8017ddc:	f43f aeae 	beq.w	8017b3c <_printf_float+0x9c>
 8017de0:	f108 0801 	add.w	r8, r8, #1
 8017de4:	e7ec      	b.n	8017dc0 <_printf_float+0x320>
 8017de6:	4613      	mov	r3, r2
 8017de8:	4631      	mov	r1, r6
 8017dea:	4642      	mov	r2, r8
 8017dec:	4628      	mov	r0, r5
 8017dee:	47b8      	blx	r7
 8017df0:	3001      	adds	r0, #1
 8017df2:	d1bf      	bne.n	8017d74 <_printf_float+0x2d4>
 8017df4:	e6a2      	b.n	8017b3c <_printf_float+0x9c>
 8017df6:	2301      	movs	r3, #1
 8017df8:	4631      	mov	r1, r6
 8017dfa:	4628      	mov	r0, r5
 8017dfc:	9204      	str	r2, [sp, #16]
 8017dfe:	47b8      	blx	r7
 8017e00:	3001      	adds	r0, #1
 8017e02:	f43f ae9b 	beq.w	8017b3c <_printf_float+0x9c>
 8017e06:	9b05      	ldr	r3, [sp, #20]
 8017e08:	9a04      	ldr	r2, [sp, #16]
 8017e0a:	3301      	adds	r3, #1
 8017e0c:	9305      	str	r3, [sp, #20]
 8017e0e:	e7b7      	b.n	8017d80 <_printf_float+0x2e0>
 8017e10:	4653      	mov	r3, sl
 8017e12:	465a      	mov	r2, fp
 8017e14:	4631      	mov	r1, r6
 8017e16:	4628      	mov	r0, r5
 8017e18:	47b8      	blx	r7
 8017e1a:	3001      	adds	r0, #1
 8017e1c:	d1be      	bne.n	8017d9c <_printf_float+0x2fc>
 8017e1e:	e68d      	b.n	8017b3c <_printf_float+0x9c>
 8017e20:	9a04      	ldr	r2, [sp, #16]
 8017e22:	464b      	mov	r3, r9
 8017e24:	4442      	add	r2, r8
 8017e26:	4631      	mov	r1, r6
 8017e28:	4628      	mov	r0, r5
 8017e2a:	47b8      	blx	r7
 8017e2c:	3001      	adds	r0, #1
 8017e2e:	d1c1      	bne.n	8017db4 <_printf_float+0x314>
 8017e30:	e684      	b.n	8017b3c <_printf_float+0x9c>
 8017e32:	9a08      	ldr	r2, [sp, #32]
 8017e34:	2a01      	cmp	r2, #1
 8017e36:	dc01      	bgt.n	8017e3c <_printf_float+0x39c>
 8017e38:	07db      	lsls	r3, r3, #31
 8017e3a:	d537      	bpl.n	8017eac <_printf_float+0x40c>
 8017e3c:	2301      	movs	r3, #1
 8017e3e:	4642      	mov	r2, r8
 8017e40:	4631      	mov	r1, r6
 8017e42:	4628      	mov	r0, r5
 8017e44:	47b8      	blx	r7
 8017e46:	3001      	adds	r0, #1
 8017e48:	f43f ae78 	beq.w	8017b3c <_printf_float+0x9c>
 8017e4c:	4653      	mov	r3, sl
 8017e4e:	465a      	mov	r2, fp
 8017e50:	4631      	mov	r1, r6
 8017e52:	4628      	mov	r0, r5
 8017e54:	47b8      	blx	r7
 8017e56:	3001      	adds	r0, #1
 8017e58:	f43f ae70 	beq.w	8017b3c <_printf_float+0x9c>
 8017e5c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8017e60:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e68:	d01b      	beq.n	8017ea2 <_printf_float+0x402>
 8017e6a:	9b08      	ldr	r3, [sp, #32]
 8017e6c:	f108 0201 	add.w	r2, r8, #1
 8017e70:	3b01      	subs	r3, #1
 8017e72:	4631      	mov	r1, r6
 8017e74:	4628      	mov	r0, r5
 8017e76:	47b8      	blx	r7
 8017e78:	3001      	adds	r0, #1
 8017e7a:	d10e      	bne.n	8017e9a <_printf_float+0x3fa>
 8017e7c:	e65e      	b.n	8017b3c <_printf_float+0x9c>
 8017e7e:	2301      	movs	r3, #1
 8017e80:	464a      	mov	r2, r9
 8017e82:	4631      	mov	r1, r6
 8017e84:	4628      	mov	r0, r5
 8017e86:	47b8      	blx	r7
 8017e88:	3001      	adds	r0, #1
 8017e8a:	f43f ae57 	beq.w	8017b3c <_printf_float+0x9c>
 8017e8e:	f108 0801 	add.w	r8, r8, #1
 8017e92:	9b08      	ldr	r3, [sp, #32]
 8017e94:	3b01      	subs	r3, #1
 8017e96:	4543      	cmp	r3, r8
 8017e98:	dcf1      	bgt.n	8017e7e <_printf_float+0x3de>
 8017e9a:	9b04      	ldr	r3, [sp, #16]
 8017e9c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8017ea0:	e6db      	b.n	8017c5a <_printf_float+0x1ba>
 8017ea2:	f04f 0800 	mov.w	r8, #0
 8017ea6:	f104 091a 	add.w	r9, r4, #26
 8017eaa:	e7f2      	b.n	8017e92 <_printf_float+0x3f2>
 8017eac:	2301      	movs	r3, #1
 8017eae:	4642      	mov	r2, r8
 8017eb0:	e7df      	b.n	8017e72 <_printf_float+0x3d2>
 8017eb2:	2301      	movs	r3, #1
 8017eb4:	464a      	mov	r2, r9
 8017eb6:	4631      	mov	r1, r6
 8017eb8:	4628      	mov	r0, r5
 8017eba:	47b8      	blx	r7
 8017ebc:	3001      	adds	r0, #1
 8017ebe:	f43f ae3d 	beq.w	8017b3c <_printf_float+0x9c>
 8017ec2:	f108 0801 	add.w	r8, r8, #1
 8017ec6:	68e3      	ldr	r3, [r4, #12]
 8017ec8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017eca:	1a5b      	subs	r3, r3, r1
 8017ecc:	4543      	cmp	r3, r8
 8017ece:	dcf0      	bgt.n	8017eb2 <_printf_float+0x412>
 8017ed0:	e6f7      	b.n	8017cc2 <_printf_float+0x222>
 8017ed2:	f04f 0800 	mov.w	r8, #0
 8017ed6:	f104 0919 	add.w	r9, r4, #25
 8017eda:	e7f4      	b.n	8017ec6 <_printf_float+0x426>

08017edc <_printf_common>:
 8017edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017ee0:	4616      	mov	r6, r2
 8017ee2:	4699      	mov	r9, r3
 8017ee4:	688a      	ldr	r2, [r1, #8]
 8017ee6:	690b      	ldr	r3, [r1, #16]
 8017ee8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017eec:	4293      	cmp	r3, r2
 8017eee:	bfb8      	it	lt
 8017ef0:	4613      	movlt	r3, r2
 8017ef2:	6033      	str	r3, [r6, #0]
 8017ef4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017ef8:	4607      	mov	r7, r0
 8017efa:	460c      	mov	r4, r1
 8017efc:	b10a      	cbz	r2, 8017f02 <_printf_common+0x26>
 8017efe:	3301      	adds	r3, #1
 8017f00:	6033      	str	r3, [r6, #0]
 8017f02:	6823      	ldr	r3, [r4, #0]
 8017f04:	0699      	lsls	r1, r3, #26
 8017f06:	bf42      	ittt	mi
 8017f08:	6833      	ldrmi	r3, [r6, #0]
 8017f0a:	3302      	addmi	r3, #2
 8017f0c:	6033      	strmi	r3, [r6, #0]
 8017f0e:	6825      	ldr	r5, [r4, #0]
 8017f10:	f015 0506 	ands.w	r5, r5, #6
 8017f14:	d106      	bne.n	8017f24 <_printf_common+0x48>
 8017f16:	f104 0a19 	add.w	sl, r4, #25
 8017f1a:	68e3      	ldr	r3, [r4, #12]
 8017f1c:	6832      	ldr	r2, [r6, #0]
 8017f1e:	1a9b      	subs	r3, r3, r2
 8017f20:	42ab      	cmp	r3, r5
 8017f22:	dc26      	bgt.n	8017f72 <_printf_common+0x96>
 8017f24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017f28:	1e13      	subs	r3, r2, #0
 8017f2a:	6822      	ldr	r2, [r4, #0]
 8017f2c:	bf18      	it	ne
 8017f2e:	2301      	movne	r3, #1
 8017f30:	0692      	lsls	r2, r2, #26
 8017f32:	d42b      	bmi.n	8017f8c <_printf_common+0xb0>
 8017f34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017f38:	4649      	mov	r1, r9
 8017f3a:	4638      	mov	r0, r7
 8017f3c:	47c0      	blx	r8
 8017f3e:	3001      	adds	r0, #1
 8017f40:	d01e      	beq.n	8017f80 <_printf_common+0xa4>
 8017f42:	6823      	ldr	r3, [r4, #0]
 8017f44:	68e5      	ldr	r5, [r4, #12]
 8017f46:	6832      	ldr	r2, [r6, #0]
 8017f48:	f003 0306 	and.w	r3, r3, #6
 8017f4c:	2b04      	cmp	r3, #4
 8017f4e:	bf08      	it	eq
 8017f50:	1aad      	subeq	r5, r5, r2
 8017f52:	68a3      	ldr	r3, [r4, #8]
 8017f54:	6922      	ldr	r2, [r4, #16]
 8017f56:	bf0c      	ite	eq
 8017f58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017f5c:	2500      	movne	r5, #0
 8017f5e:	4293      	cmp	r3, r2
 8017f60:	bfc4      	itt	gt
 8017f62:	1a9b      	subgt	r3, r3, r2
 8017f64:	18ed      	addgt	r5, r5, r3
 8017f66:	2600      	movs	r6, #0
 8017f68:	341a      	adds	r4, #26
 8017f6a:	42b5      	cmp	r5, r6
 8017f6c:	d11a      	bne.n	8017fa4 <_printf_common+0xc8>
 8017f6e:	2000      	movs	r0, #0
 8017f70:	e008      	b.n	8017f84 <_printf_common+0xa8>
 8017f72:	2301      	movs	r3, #1
 8017f74:	4652      	mov	r2, sl
 8017f76:	4649      	mov	r1, r9
 8017f78:	4638      	mov	r0, r7
 8017f7a:	47c0      	blx	r8
 8017f7c:	3001      	adds	r0, #1
 8017f7e:	d103      	bne.n	8017f88 <_printf_common+0xac>
 8017f80:	f04f 30ff 	mov.w	r0, #4294967295
 8017f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f88:	3501      	adds	r5, #1
 8017f8a:	e7c6      	b.n	8017f1a <_printf_common+0x3e>
 8017f8c:	18e1      	adds	r1, r4, r3
 8017f8e:	1c5a      	adds	r2, r3, #1
 8017f90:	2030      	movs	r0, #48	; 0x30
 8017f92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017f96:	4422      	add	r2, r4
 8017f98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017f9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017fa0:	3302      	adds	r3, #2
 8017fa2:	e7c7      	b.n	8017f34 <_printf_common+0x58>
 8017fa4:	2301      	movs	r3, #1
 8017fa6:	4622      	mov	r2, r4
 8017fa8:	4649      	mov	r1, r9
 8017faa:	4638      	mov	r0, r7
 8017fac:	47c0      	blx	r8
 8017fae:	3001      	adds	r0, #1
 8017fb0:	d0e6      	beq.n	8017f80 <_printf_common+0xa4>
 8017fb2:	3601      	adds	r6, #1
 8017fb4:	e7d9      	b.n	8017f6a <_printf_common+0x8e>
	...

08017fb8 <_printf_i>:
 8017fb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017fbc:	7e0f      	ldrb	r7, [r1, #24]
 8017fbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017fc0:	2f78      	cmp	r7, #120	; 0x78
 8017fc2:	4691      	mov	r9, r2
 8017fc4:	4680      	mov	r8, r0
 8017fc6:	460c      	mov	r4, r1
 8017fc8:	469a      	mov	sl, r3
 8017fca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017fce:	d807      	bhi.n	8017fe0 <_printf_i+0x28>
 8017fd0:	2f62      	cmp	r7, #98	; 0x62
 8017fd2:	d80a      	bhi.n	8017fea <_printf_i+0x32>
 8017fd4:	2f00      	cmp	r7, #0
 8017fd6:	f000 80d8 	beq.w	801818a <_printf_i+0x1d2>
 8017fda:	2f58      	cmp	r7, #88	; 0x58
 8017fdc:	f000 80a3 	beq.w	8018126 <_printf_i+0x16e>
 8017fe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017fe4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017fe8:	e03a      	b.n	8018060 <_printf_i+0xa8>
 8017fea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017fee:	2b15      	cmp	r3, #21
 8017ff0:	d8f6      	bhi.n	8017fe0 <_printf_i+0x28>
 8017ff2:	a101      	add	r1, pc, #4	; (adr r1, 8017ff8 <_printf_i+0x40>)
 8017ff4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017ff8:	08018051 	.word	0x08018051
 8017ffc:	08018065 	.word	0x08018065
 8018000:	08017fe1 	.word	0x08017fe1
 8018004:	08017fe1 	.word	0x08017fe1
 8018008:	08017fe1 	.word	0x08017fe1
 801800c:	08017fe1 	.word	0x08017fe1
 8018010:	08018065 	.word	0x08018065
 8018014:	08017fe1 	.word	0x08017fe1
 8018018:	08017fe1 	.word	0x08017fe1
 801801c:	08017fe1 	.word	0x08017fe1
 8018020:	08017fe1 	.word	0x08017fe1
 8018024:	08018171 	.word	0x08018171
 8018028:	08018095 	.word	0x08018095
 801802c:	08018153 	.word	0x08018153
 8018030:	08017fe1 	.word	0x08017fe1
 8018034:	08017fe1 	.word	0x08017fe1
 8018038:	08018193 	.word	0x08018193
 801803c:	08017fe1 	.word	0x08017fe1
 8018040:	08018095 	.word	0x08018095
 8018044:	08017fe1 	.word	0x08017fe1
 8018048:	08017fe1 	.word	0x08017fe1
 801804c:	0801815b 	.word	0x0801815b
 8018050:	682b      	ldr	r3, [r5, #0]
 8018052:	1d1a      	adds	r2, r3, #4
 8018054:	681b      	ldr	r3, [r3, #0]
 8018056:	602a      	str	r2, [r5, #0]
 8018058:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801805c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018060:	2301      	movs	r3, #1
 8018062:	e0a3      	b.n	80181ac <_printf_i+0x1f4>
 8018064:	6820      	ldr	r0, [r4, #0]
 8018066:	6829      	ldr	r1, [r5, #0]
 8018068:	0606      	lsls	r6, r0, #24
 801806a:	f101 0304 	add.w	r3, r1, #4
 801806e:	d50a      	bpl.n	8018086 <_printf_i+0xce>
 8018070:	680e      	ldr	r6, [r1, #0]
 8018072:	602b      	str	r3, [r5, #0]
 8018074:	2e00      	cmp	r6, #0
 8018076:	da03      	bge.n	8018080 <_printf_i+0xc8>
 8018078:	232d      	movs	r3, #45	; 0x2d
 801807a:	4276      	negs	r6, r6
 801807c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018080:	485e      	ldr	r0, [pc, #376]	; (80181fc <_printf_i+0x244>)
 8018082:	230a      	movs	r3, #10
 8018084:	e019      	b.n	80180ba <_printf_i+0x102>
 8018086:	680e      	ldr	r6, [r1, #0]
 8018088:	602b      	str	r3, [r5, #0]
 801808a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801808e:	bf18      	it	ne
 8018090:	b236      	sxthne	r6, r6
 8018092:	e7ef      	b.n	8018074 <_printf_i+0xbc>
 8018094:	682b      	ldr	r3, [r5, #0]
 8018096:	6820      	ldr	r0, [r4, #0]
 8018098:	1d19      	adds	r1, r3, #4
 801809a:	6029      	str	r1, [r5, #0]
 801809c:	0601      	lsls	r1, r0, #24
 801809e:	d501      	bpl.n	80180a4 <_printf_i+0xec>
 80180a0:	681e      	ldr	r6, [r3, #0]
 80180a2:	e002      	b.n	80180aa <_printf_i+0xf2>
 80180a4:	0646      	lsls	r6, r0, #25
 80180a6:	d5fb      	bpl.n	80180a0 <_printf_i+0xe8>
 80180a8:	881e      	ldrh	r6, [r3, #0]
 80180aa:	4854      	ldr	r0, [pc, #336]	; (80181fc <_printf_i+0x244>)
 80180ac:	2f6f      	cmp	r7, #111	; 0x6f
 80180ae:	bf0c      	ite	eq
 80180b0:	2308      	moveq	r3, #8
 80180b2:	230a      	movne	r3, #10
 80180b4:	2100      	movs	r1, #0
 80180b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80180ba:	6865      	ldr	r5, [r4, #4]
 80180bc:	60a5      	str	r5, [r4, #8]
 80180be:	2d00      	cmp	r5, #0
 80180c0:	bfa2      	ittt	ge
 80180c2:	6821      	ldrge	r1, [r4, #0]
 80180c4:	f021 0104 	bicge.w	r1, r1, #4
 80180c8:	6021      	strge	r1, [r4, #0]
 80180ca:	b90e      	cbnz	r6, 80180d0 <_printf_i+0x118>
 80180cc:	2d00      	cmp	r5, #0
 80180ce:	d04d      	beq.n	801816c <_printf_i+0x1b4>
 80180d0:	4615      	mov	r5, r2
 80180d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80180d6:	fb03 6711 	mls	r7, r3, r1, r6
 80180da:	5dc7      	ldrb	r7, [r0, r7]
 80180dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80180e0:	4637      	mov	r7, r6
 80180e2:	42bb      	cmp	r3, r7
 80180e4:	460e      	mov	r6, r1
 80180e6:	d9f4      	bls.n	80180d2 <_printf_i+0x11a>
 80180e8:	2b08      	cmp	r3, #8
 80180ea:	d10b      	bne.n	8018104 <_printf_i+0x14c>
 80180ec:	6823      	ldr	r3, [r4, #0]
 80180ee:	07de      	lsls	r6, r3, #31
 80180f0:	d508      	bpl.n	8018104 <_printf_i+0x14c>
 80180f2:	6923      	ldr	r3, [r4, #16]
 80180f4:	6861      	ldr	r1, [r4, #4]
 80180f6:	4299      	cmp	r1, r3
 80180f8:	bfde      	ittt	le
 80180fa:	2330      	movle	r3, #48	; 0x30
 80180fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018100:	f105 35ff 	addle.w	r5, r5, #4294967295
 8018104:	1b52      	subs	r2, r2, r5
 8018106:	6122      	str	r2, [r4, #16]
 8018108:	f8cd a000 	str.w	sl, [sp]
 801810c:	464b      	mov	r3, r9
 801810e:	aa03      	add	r2, sp, #12
 8018110:	4621      	mov	r1, r4
 8018112:	4640      	mov	r0, r8
 8018114:	f7ff fee2 	bl	8017edc <_printf_common>
 8018118:	3001      	adds	r0, #1
 801811a:	d14c      	bne.n	80181b6 <_printf_i+0x1fe>
 801811c:	f04f 30ff 	mov.w	r0, #4294967295
 8018120:	b004      	add	sp, #16
 8018122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018126:	4835      	ldr	r0, [pc, #212]	; (80181fc <_printf_i+0x244>)
 8018128:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801812c:	6829      	ldr	r1, [r5, #0]
 801812e:	6823      	ldr	r3, [r4, #0]
 8018130:	f851 6b04 	ldr.w	r6, [r1], #4
 8018134:	6029      	str	r1, [r5, #0]
 8018136:	061d      	lsls	r5, r3, #24
 8018138:	d514      	bpl.n	8018164 <_printf_i+0x1ac>
 801813a:	07df      	lsls	r7, r3, #31
 801813c:	bf44      	itt	mi
 801813e:	f043 0320 	orrmi.w	r3, r3, #32
 8018142:	6023      	strmi	r3, [r4, #0]
 8018144:	b91e      	cbnz	r6, 801814e <_printf_i+0x196>
 8018146:	6823      	ldr	r3, [r4, #0]
 8018148:	f023 0320 	bic.w	r3, r3, #32
 801814c:	6023      	str	r3, [r4, #0]
 801814e:	2310      	movs	r3, #16
 8018150:	e7b0      	b.n	80180b4 <_printf_i+0xfc>
 8018152:	6823      	ldr	r3, [r4, #0]
 8018154:	f043 0320 	orr.w	r3, r3, #32
 8018158:	6023      	str	r3, [r4, #0]
 801815a:	2378      	movs	r3, #120	; 0x78
 801815c:	4828      	ldr	r0, [pc, #160]	; (8018200 <_printf_i+0x248>)
 801815e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018162:	e7e3      	b.n	801812c <_printf_i+0x174>
 8018164:	0659      	lsls	r1, r3, #25
 8018166:	bf48      	it	mi
 8018168:	b2b6      	uxthmi	r6, r6
 801816a:	e7e6      	b.n	801813a <_printf_i+0x182>
 801816c:	4615      	mov	r5, r2
 801816e:	e7bb      	b.n	80180e8 <_printf_i+0x130>
 8018170:	682b      	ldr	r3, [r5, #0]
 8018172:	6826      	ldr	r6, [r4, #0]
 8018174:	6961      	ldr	r1, [r4, #20]
 8018176:	1d18      	adds	r0, r3, #4
 8018178:	6028      	str	r0, [r5, #0]
 801817a:	0635      	lsls	r5, r6, #24
 801817c:	681b      	ldr	r3, [r3, #0]
 801817e:	d501      	bpl.n	8018184 <_printf_i+0x1cc>
 8018180:	6019      	str	r1, [r3, #0]
 8018182:	e002      	b.n	801818a <_printf_i+0x1d2>
 8018184:	0670      	lsls	r0, r6, #25
 8018186:	d5fb      	bpl.n	8018180 <_printf_i+0x1c8>
 8018188:	8019      	strh	r1, [r3, #0]
 801818a:	2300      	movs	r3, #0
 801818c:	6123      	str	r3, [r4, #16]
 801818e:	4615      	mov	r5, r2
 8018190:	e7ba      	b.n	8018108 <_printf_i+0x150>
 8018192:	682b      	ldr	r3, [r5, #0]
 8018194:	1d1a      	adds	r2, r3, #4
 8018196:	602a      	str	r2, [r5, #0]
 8018198:	681d      	ldr	r5, [r3, #0]
 801819a:	6862      	ldr	r2, [r4, #4]
 801819c:	2100      	movs	r1, #0
 801819e:	4628      	mov	r0, r5
 80181a0:	f7e8 f8a6 	bl	80002f0 <memchr>
 80181a4:	b108      	cbz	r0, 80181aa <_printf_i+0x1f2>
 80181a6:	1b40      	subs	r0, r0, r5
 80181a8:	6060      	str	r0, [r4, #4]
 80181aa:	6863      	ldr	r3, [r4, #4]
 80181ac:	6123      	str	r3, [r4, #16]
 80181ae:	2300      	movs	r3, #0
 80181b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80181b4:	e7a8      	b.n	8018108 <_printf_i+0x150>
 80181b6:	6923      	ldr	r3, [r4, #16]
 80181b8:	462a      	mov	r2, r5
 80181ba:	4649      	mov	r1, r9
 80181bc:	4640      	mov	r0, r8
 80181be:	47d0      	blx	sl
 80181c0:	3001      	adds	r0, #1
 80181c2:	d0ab      	beq.n	801811c <_printf_i+0x164>
 80181c4:	6823      	ldr	r3, [r4, #0]
 80181c6:	079b      	lsls	r3, r3, #30
 80181c8:	d413      	bmi.n	80181f2 <_printf_i+0x23a>
 80181ca:	68e0      	ldr	r0, [r4, #12]
 80181cc:	9b03      	ldr	r3, [sp, #12]
 80181ce:	4298      	cmp	r0, r3
 80181d0:	bfb8      	it	lt
 80181d2:	4618      	movlt	r0, r3
 80181d4:	e7a4      	b.n	8018120 <_printf_i+0x168>
 80181d6:	2301      	movs	r3, #1
 80181d8:	4632      	mov	r2, r6
 80181da:	4649      	mov	r1, r9
 80181dc:	4640      	mov	r0, r8
 80181de:	47d0      	blx	sl
 80181e0:	3001      	adds	r0, #1
 80181e2:	d09b      	beq.n	801811c <_printf_i+0x164>
 80181e4:	3501      	adds	r5, #1
 80181e6:	68e3      	ldr	r3, [r4, #12]
 80181e8:	9903      	ldr	r1, [sp, #12]
 80181ea:	1a5b      	subs	r3, r3, r1
 80181ec:	42ab      	cmp	r3, r5
 80181ee:	dcf2      	bgt.n	80181d6 <_printf_i+0x21e>
 80181f0:	e7eb      	b.n	80181ca <_printf_i+0x212>
 80181f2:	2500      	movs	r5, #0
 80181f4:	f104 0619 	add.w	r6, r4, #25
 80181f8:	e7f5      	b.n	80181e6 <_printf_i+0x22e>
 80181fa:	bf00      	nop
 80181fc:	0801acf2 	.word	0x0801acf2
 8018200:	0801ad03 	.word	0x0801ad03

08018204 <quorem>:
 8018204:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018208:	6903      	ldr	r3, [r0, #16]
 801820a:	690c      	ldr	r4, [r1, #16]
 801820c:	42a3      	cmp	r3, r4
 801820e:	4607      	mov	r7, r0
 8018210:	f2c0 8081 	blt.w	8018316 <quorem+0x112>
 8018214:	3c01      	subs	r4, #1
 8018216:	f101 0814 	add.w	r8, r1, #20
 801821a:	f100 0514 	add.w	r5, r0, #20
 801821e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018222:	9301      	str	r3, [sp, #4]
 8018224:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8018228:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801822c:	3301      	adds	r3, #1
 801822e:	429a      	cmp	r2, r3
 8018230:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8018234:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8018238:	fbb2 f6f3 	udiv	r6, r2, r3
 801823c:	d331      	bcc.n	80182a2 <quorem+0x9e>
 801823e:	f04f 0e00 	mov.w	lr, #0
 8018242:	4640      	mov	r0, r8
 8018244:	46ac      	mov	ip, r5
 8018246:	46f2      	mov	sl, lr
 8018248:	f850 2b04 	ldr.w	r2, [r0], #4
 801824c:	b293      	uxth	r3, r2
 801824e:	fb06 e303 	mla	r3, r6, r3, lr
 8018252:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8018256:	b29b      	uxth	r3, r3
 8018258:	ebaa 0303 	sub.w	r3, sl, r3
 801825c:	f8dc a000 	ldr.w	sl, [ip]
 8018260:	0c12      	lsrs	r2, r2, #16
 8018262:	fa13 f38a 	uxtah	r3, r3, sl
 8018266:	fb06 e202 	mla	r2, r6, r2, lr
 801826a:	9300      	str	r3, [sp, #0]
 801826c:	9b00      	ldr	r3, [sp, #0]
 801826e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8018272:	b292      	uxth	r2, r2
 8018274:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8018278:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801827c:	f8bd 3000 	ldrh.w	r3, [sp]
 8018280:	4581      	cmp	r9, r0
 8018282:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018286:	f84c 3b04 	str.w	r3, [ip], #4
 801828a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801828e:	d2db      	bcs.n	8018248 <quorem+0x44>
 8018290:	f855 300b 	ldr.w	r3, [r5, fp]
 8018294:	b92b      	cbnz	r3, 80182a2 <quorem+0x9e>
 8018296:	9b01      	ldr	r3, [sp, #4]
 8018298:	3b04      	subs	r3, #4
 801829a:	429d      	cmp	r5, r3
 801829c:	461a      	mov	r2, r3
 801829e:	d32e      	bcc.n	80182fe <quorem+0xfa>
 80182a0:	613c      	str	r4, [r7, #16]
 80182a2:	4638      	mov	r0, r7
 80182a4:	f001 f838 	bl	8019318 <__mcmp>
 80182a8:	2800      	cmp	r0, #0
 80182aa:	db24      	blt.n	80182f6 <quorem+0xf2>
 80182ac:	3601      	adds	r6, #1
 80182ae:	4628      	mov	r0, r5
 80182b0:	f04f 0c00 	mov.w	ip, #0
 80182b4:	f858 2b04 	ldr.w	r2, [r8], #4
 80182b8:	f8d0 e000 	ldr.w	lr, [r0]
 80182bc:	b293      	uxth	r3, r2
 80182be:	ebac 0303 	sub.w	r3, ip, r3
 80182c2:	0c12      	lsrs	r2, r2, #16
 80182c4:	fa13 f38e 	uxtah	r3, r3, lr
 80182c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80182cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80182d0:	b29b      	uxth	r3, r3
 80182d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80182d6:	45c1      	cmp	r9, r8
 80182d8:	f840 3b04 	str.w	r3, [r0], #4
 80182dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80182e0:	d2e8      	bcs.n	80182b4 <quorem+0xb0>
 80182e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80182e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80182ea:	b922      	cbnz	r2, 80182f6 <quorem+0xf2>
 80182ec:	3b04      	subs	r3, #4
 80182ee:	429d      	cmp	r5, r3
 80182f0:	461a      	mov	r2, r3
 80182f2:	d30a      	bcc.n	801830a <quorem+0x106>
 80182f4:	613c      	str	r4, [r7, #16]
 80182f6:	4630      	mov	r0, r6
 80182f8:	b003      	add	sp, #12
 80182fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182fe:	6812      	ldr	r2, [r2, #0]
 8018300:	3b04      	subs	r3, #4
 8018302:	2a00      	cmp	r2, #0
 8018304:	d1cc      	bne.n	80182a0 <quorem+0x9c>
 8018306:	3c01      	subs	r4, #1
 8018308:	e7c7      	b.n	801829a <quorem+0x96>
 801830a:	6812      	ldr	r2, [r2, #0]
 801830c:	3b04      	subs	r3, #4
 801830e:	2a00      	cmp	r2, #0
 8018310:	d1f0      	bne.n	80182f4 <quorem+0xf0>
 8018312:	3c01      	subs	r4, #1
 8018314:	e7eb      	b.n	80182ee <quorem+0xea>
 8018316:	2000      	movs	r0, #0
 8018318:	e7ee      	b.n	80182f8 <quorem+0xf4>
 801831a:	0000      	movs	r0, r0
 801831c:	0000      	movs	r0, r0
	...

08018320 <_dtoa_r>:
 8018320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018324:	ed2d 8b02 	vpush	{d8}
 8018328:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801832a:	b091      	sub	sp, #68	; 0x44
 801832c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8018330:	ec59 8b10 	vmov	r8, r9, d0
 8018334:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8018336:	9106      	str	r1, [sp, #24]
 8018338:	4606      	mov	r6, r0
 801833a:	9208      	str	r2, [sp, #32]
 801833c:	930c      	str	r3, [sp, #48]	; 0x30
 801833e:	b975      	cbnz	r5, 801835e <_dtoa_r+0x3e>
 8018340:	2010      	movs	r0, #16
 8018342:	f000 fd5f 	bl	8018e04 <malloc>
 8018346:	4602      	mov	r2, r0
 8018348:	6270      	str	r0, [r6, #36]	; 0x24
 801834a:	b920      	cbnz	r0, 8018356 <_dtoa_r+0x36>
 801834c:	4baa      	ldr	r3, [pc, #680]	; (80185f8 <_dtoa_r+0x2d8>)
 801834e:	21ea      	movs	r1, #234	; 0xea
 8018350:	48aa      	ldr	r0, [pc, #680]	; (80185fc <_dtoa_r+0x2dc>)
 8018352:	f001 f9e9 	bl	8019728 <__assert_func>
 8018356:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801835a:	6005      	str	r5, [r0, #0]
 801835c:	60c5      	str	r5, [r0, #12]
 801835e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018360:	6819      	ldr	r1, [r3, #0]
 8018362:	b151      	cbz	r1, 801837a <_dtoa_r+0x5a>
 8018364:	685a      	ldr	r2, [r3, #4]
 8018366:	604a      	str	r2, [r1, #4]
 8018368:	2301      	movs	r3, #1
 801836a:	4093      	lsls	r3, r2
 801836c:	608b      	str	r3, [r1, #8]
 801836e:	4630      	mov	r0, r6
 8018370:	f000 fd90 	bl	8018e94 <_Bfree>
 8018374:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018376:	2200      	movs	r2, #0
 8018378:	601a      	str	r2, [r3, #0]
 801837a:	f1b9 0300 	subs.w	r3, r9, #0
 801837e:	bfbb      	ittet	lt
 8018380:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8018384:	9303      	strlt	r3, [sp, #12]
 8018386:	2300      	movge	r3, #0
 8018388:	2201      	movlt	r2, #1
 801838a:	bfac      	ite	ge
 801838c:	6023      	strge	r3, [r4, #0]
 801838e:	6022      	strlt	r2, [r4, #0]
 8018390:	4b9b      	ldr	r3, [pc, #620]	; (8018600 <_dtoa_r+0x2e0>)
 8018392:	9c03      	ldr	r4, [sp, #12]
 8018394:	43a3      	bics	r3, r4
 8018396:	d11c      	bne.n	80183d2 <_dtoa_r+0xb2>
 8018398:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801839a:	f242 730f 	movw	r3, #9999	; 0x270f
 801839e:	6013      	str	r3, [r2, #0]
 80183a0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80183a4:	ea53 0308 	orrs.w	r3, r3, r8
 80183a8:	f000 84fd 	beq.w	8018da6 <_dtoa_r+0xa86>
 80183ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80183ae:	b963      	cbnz	r3, 80183ca <_dtoa_r+0xaa>
 80183b0:	4b94      	ldr	r3, [pc, #592]	; (8018604 <_dtoa_r+0x2e4>)
 80183b2:	e01f      	b.n	80183f4 <_dtoa_r+0xd4>
 80183b4:	4b94      	ldr	r3, [pc, #592]	; (8018608 <_dtoa_r+0x2e8>)
 80183b6:	9301      	str	r3, [sp, #4]
 80183b8:	3308      	adds	r3, #8
 80183ba:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80183bc:	6013      	str	r3, [r2, #0]
 80183be:	9801      	ldr	r0, [sp, #4]
 80183c0:	b011      	add	sp, #68	; 0x44
 80183c2:	ecbd 8b02 	vpop	{d8}
 80183c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183ca:	4b8e      	ldr	r3, [pc, #568]	; (8018604 <_dtoa_r+0x2e4>)
 80183cc:	9301      	str	r3, [sp, #4]
 80183ce:	3303      	adds	r3, #3
 80183d0:	e7f3      	b.n	80183ba <_dtoa_r+0x9a>
 80183d2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80183d6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80183da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183de:	d10b      	bne.n	80183f8 <_dtoa_r+0xd8>
 80183e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80183e2:	2301      	movs	r3, #1
 80183e4:	6013      	str	r3, [r2, #0]
 80183e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80183e8:	2b00      	cmp	r3, #0
 80183ea:	f000 84d9 	beq.w	8018da0 <_dtoa_r+0xa80>
 80183ee:	4887      	ldr	r0, [pc, #540]	; (801860c <_dtoa_r+0x2ec>)
 80183f0:	6018      	str	r0, [r3, #0]
 80183f2:	1e43      	subs	r3, r0, #1
 80183f4:	9301      	str	r3, [sp, #4]
 80183f6:	e7e2      	b.n	80183be <_dtoa_r+0x9e>
 80183f8:	a90f      	add	r1, sp, #60	; 0x3c
 80183fa:	aa0e      	add	r2, sp, #56	; 0x38
 80183fc:	4630      	mov	r0, r6
 80183fe:	eeb0 0b48 	vmov.f64	d0, d8
 8018402:	f001 f82f 	bl	8019464 <__d2b>
 8018406:	f3c4 510a 	ubfx	r1, r4, #20, #11
 801840a:	4605      	mov	r5, r0
 801840c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801840e:	2900      	cmp	r1, #0
 8018410:	d046      	beq.n	80184a0 <_dtoa_r+0x180>
 8018412:	ee18 4a90 	vmov	r4, s17
 8018416:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801841a:	ec53 2b18 	vmov	r2, r3, d8
 801841e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8018422:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8018426:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801842a:	2400      	movs	r4, #0
 801842c:	ec43 2b16 	vmov	d6, r2, r3
 8018430:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8018434:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80185e0 <_dtoa_r+0x2c0>
 8018438:	ee36 7b47 	vsub.f64	d7, d6, d7
 801843c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80185e8 <_dtoa_r+0x2c8>
 8018440:	eea7 6b05 	vfma.f64	d6, d7, d5
 8018444:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80185f0 <_dtoa_r+0x2d0>
 8018448:	ee07 1a90 	vmov	s15, r1
 801844c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8018450:	eeb0 7b46 	vmov.f64	d7, d6
 8018454:	eea4 7b05 	vfma.f64	d7, d4, d5
 8018458:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801845c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8018460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018464:	ee16 ba90 	vmov	fp, s13
 8018468:	940a      	str	r4, [sp, #40]	; 0x28
 801846a:	d508      	bpl.n	801847e <_dtoa_r+0x15e>
 801846c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8018470:	eeb4 6b47 	vcmp.f64	d6, d7
 8018474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018478:	bf18      	it	ne
 801847a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801847e:	f1bb 0f16 	cmp.w	fp, #22
 8018482:	d82f      	bhi.n	80184e4 <_dtoa_r+0x1c4>
 8018484:	4b62      	ldr	r3, [pc, #392]	; (8018610 <_dtoa_r+0x2f0>)
 8018486:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801848a:	ed93 7b00 	vldr	d7, [r3]
 801848e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8018492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018496:	d501      	bpl.n	801849c <_dtoa_r+0x17c>
 8018498:	f10b 3bff 	add.w	fp, fp, #4294967295
 801849c:	2300      	movs	r3, #0
 801849e:	e022      	b.n	80184e6 <_dtoa_r+0x1c6>
 80184a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80184a2:	4401      	add	r1, r0
 80184a4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80184a8:	2b20      	cmp	r3, #32
 80184aa:	bfc1      	itttt	gt
 80184ac:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80184b0:	fa04 f303 	lslgt.w	r3, r4, r3
 80184b4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80184b8:	fa28 f804 	lsrgt.w	r8, r8, r4
 80184bc:	bfd6      	itet	le
 80184be:	f1c3 0320 	rsble	r3, r3, #32
 80184c2:	ea43 0808 	orrgt.w	r8, r3, r8
 80184c6:	fa08 f803 	lslle.w	r8, r8, r3
 80184ca:	ee07 8a90 	vmov	s15, r8
 80184ce:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80184d2:	3901      	subs	r1, #1
 80184d4:	ee17 4a90 	vmov	r4, s15
 80184d8:	ec53 2b17 	vmov	r2, r3, d7
 80184dc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80184e0:	2401      	movs	r4, #1
 80184e2:	e7a3      	b.n	801842c <_dtoa_r+0x10c>
 80184e4:	2301      	movs	r3, #1
 80184e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80184e8:	1a43      	subs	r3, r0, r1
 80184ea:	1e5a      	subs	r2, r3, #1
 80184ec:	bf45      	ittet	mi
 80184ee:	f1c3 0301 	rsbmi	r3, r3, #1
 80184f2:	9304      	strmi	r3, [sp, #16]
 80184f4:	2300      	movpl	r3, #0
 80184f6:	2300      	movmi	r3, #0
 80184f8:	9205      	str	r2, [sp, #20]
 80184fa:	bf54      	ite	pl
 80184fc:	9304      	strpl	r3, [sp, #16]
 80184fe:	9305      	strmi	r3, [sp, #20]
 8018500:	f1bb 0f00 	cmp.w	fp, #0
 8018504:	db18      	blt.n	8018538 <_dtoa_r+0x218>
 8018506:	9b05      	ldr	r3, [sp, #20]
 8018508:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801850c:	445b      	add	r3, fp
 801850e:	9305      	str	r3, [sp, #20]
 8018510:	2300      	movs	r3, #0
 8018512:	9a06      	ldr	r2, [sp, #24]
 8018514:	2a09      	cmp	r2, #9
 8018516:	d849      	bhi.n	80185ac <_dtoa_r+0x28c>
 8018518:	2a05      	cmp	r2, #5
 801851a:	bfc4      	itt	gt
 801851c:	3a04      	subgt	r2, #4
 801851e:	9206      	strgt	r2, [sp, #24]
 8018520:	9a06      	ldr	r2, [sp, #24]
 8018522:	f1a2 0202 	sub.w	r2, r2, #2
 8018526:	bfcc      	ite	gt
 8018528:	2400      	movgt	r4, #0
 801852a:	2401      	movle	r4, #1
 801852c:	2a03      	cmp	r2, #3
 801852e:	d848      	bhi.n	80185c2 <_dtoa_r+0x2a2>
 8018530:	e8df f002 	tbb	[pc, r2]
 8018534:	3a2c2e0b 	.word	0x3a2c2e0b
 8018538:	9b04      	ldr	r3, [sp, #16]
 801853a:	2200      	movs	r2, #0
 801853c:	eba3 030b 	sub.w	r3, r3, fp
 8018540:	9304      	str	r3, [sp, #16]
 8018542:	9209      	str	r2, [sp, #36]	; 0x24
 8018544:	f1cb 0300 	rsb	r3, fp, #0
 8018548:	e7e3      	b.n	8018512 <_dtoa_r+0x1f2>
 801854a:	2200      	movs	r2, #0
 801854c:	9207      	str	r2, [sp, #28]
 801854e:	9a08      	ldr	r2, [sp, #32]
 8018550:	2a00      	cmp	r2, #0
 8018552:	dc39      	bgt.n	80185c8 <_dtoa_r+0x2a8>
 8018554:	f04f 0a01 	mov.w	sl, #1
 8018558:	46d1      	mov	r9, sl
 801855a:	4652      	mov	r2, sl
 801855c:	f8cd a020 	str.w	sl, [sp, #32]
 8018560:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8018562:	2100      	movs	r1, #0
 8018564:	6079      	str	r1, [r7, #4]
 8018566:	2004      	movs	r0, #4
 8018568:	f100 0c14 	add.w	ip, r0, #20
 801856c:	4594      	cmp	ip, r2
 801856e:	6879      	ldr	r1, [r7, #4]
 8018570:	d92f      	bls.n	80185d2 <_dtoa_r+0x2b2>
 8018572:	4630      	mov	r0, r6
 8018574:	930d      	str	r3, [sp, #52]	; 0x34
 8018576:	f000 fc4d 	bl	8018e14 <_Balloc>
 801857a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801857c:	9001      	str	r0, [sp, #4]
 801857e:	4602      	mov	r2, r0
 8018580:	2800      	cmp	r0, #0
 8018582:	d149      	bne.n	8018618 <_dtoa_r+0x2f8>
 8018584:	4b23      	ldr	r3, [pc, #140]	; (8018614 <_dtoa_r+0x2f4>)
 8018586:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801858a:	e6e1      	b.n	8018350 <_dtoa_r+0x30>
 801858c:	2201      	movs	r2, #1
 801858e:	e7dd      	b.n	801854c <_dtoa_r+0x22c>
 8018590:	2200      	movs	r2, #0
 8018592:	9207      	str	r2, [sp, #28]
 8018594:	9a08      	ldr	r2, [sp, #32]
 8018596:	eb0b 0a02 	add.w	sl, fp, r2
 801859a:	f10a 0901 	add.w	r9, sl, #1
 801859e:	464a      	mov	r2, r9
 80185a0:	2a01      	cmp	r2, #1
 80185a2:	bfb8      	it	lt
 80185a4:	2201      	movlt	r2, #1
 80185a6:	e7db      	b.n	8018560 <_dtoa_r+0x240>
 80185a8:	2201      	movs	r2, #1
 80185aa:	e7f2      	b.n	8018592 <_dtoa_r+0x272>
 80185ac:	2401      	movs	r4, #1
 80185ae:	2200      	movs	r2, #0
 80185b0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80185b4:	f04f 3aff 	mov.w	sl, #4294967295
 80185b8:	2100      	movs	r1, #0
 80185ba:	46d1      	mov	r9, sl
 80185bc:	2212      	movs	r2, #18
 80185be:	9108      	str	r1, [sp, #32]
 80185c0:	e7ce      	b.n	8018560 <_dtoa_r+0x240>
 80185c2:	2201      	movs	r2, #1
 80185c4:	9207      	str	r2, [sp, #28]
 80185c6:	e7f5      	b.n	80185b4 <_dtoa_r+0x294>
 80185c8:	f8dd a020 	ldr.w	sl, [sp, #32]
 80185cc:	46d1      	mov	r9, sl
 80185ce:	4652      	mov	r2, sl
 80185d0:	e7c6      	b.n	8018560 <_dtoa_r+0x240>
 80185d2:	3101      	adds	r1, #1
 80185d4:	6079      	str	r1, [r7, #4]
 80185d6:	0040      	lsls	r0, r0, #1
 80185d8:	e7c6      	b.n	8018568 <_dtoa_r+0x248>
 80185da:	bf00      	nop
 80185dc:	f3af 8000 	nop.w
 80185e0:	636f4361 	.word	0x636f4361
 80185e4:	3fd287a7 	.word	0x3fd287a7
 80185e8:	8b60c8b3 	.word	0x8b60c8b3
 80185ec:	3fc68a28 	.word	0x3fc68a28
 80185f0:	509f79fb 	.word	0x509f79fb
 80185f4:	3fd34413 	.word	0x3fd34413
 80185f8:	0801ad21 	.word	0x0801ad21
 80185fc:	0801ad38 	.word	0x0801ad38
 8018600:	7ff00000 	.word	0x7ff00000
 8018604:	0801ad1d 	.word	0x0801ad1d
 8018608:	0801ad14 	.word	0x0801ad14
 801860c:	0801acf1 	.word	0x0801acf1
 8018610:	0801ae28 	.word	0x0801ae28
 8018614:	0801ad93 	.word	0x0801ad93
 8018618:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801861a:	9901      	ldr	r1, [sp, #4]
 801861c:	6011      	str	r1, [r2, #0]
 801861e:	f1b9 0f0e 	cmp.w	r9, #14
 8018622:	d86c      	bhi.n	80186fe <_dtoa_r+0x3de>
 8018624:	2c00      	cmp	r4, #0
 8018626:	d06a      	beq.n	80186fe <_dtoa_r+0x3de>
 8018628:	f1bb 0f00 	cmp.w	fp, #0
 801862c:	f340 80a0 	ble.w	8018770 <_dtoa_r+0x450>
 8018630:	49c1      	ldr	r1, [pc, #772]	; (8018938 <_dtoa_r+0x618>)
 8018632:	f00b 020f 	and.w	r2, fp, #15
 8018636:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801863a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801863e:	ed92 7b00 	vldr	d7, [r2]
 8018642:	ea4f 112b 	mov.w	r1, fp, asr #4
 8018646:	f000 8087 	beq.w	8018758 <_dtoa_r+0x438>
 801864a:	4abc      	ldr	r2, [pc, #752]	; (801893c <_dtoa_r+0x61c>)
 801864c:	ed92 6b08 	vldr	d6, [r2, #32]
 8018650:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8018654:	ed8d 6b02 	vstr	d6, [sp, #8]
 8018658:	f001 010f 	and.w	r1, r1, #15
 801865c:	2203      	movs	r2, #3
 801865e:	48b7      	ldr	r0, [pc, #732]	; (801893c <_dtoa_r+0x61c>)
 8018660:	2900      	cmp	r1, #0
 8018662:	d17b      	bne.n	801875c <_dtoa_r+0x43c>
 8018664:	ed9d 6b02 	vldr	d6, [sp, #8]
 8018668:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801866c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018670:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018672:	2900      	cmp	r1, #0
 8018674:	f000 80a2 	beq.w	80187bc <_dtoa_r+0x49c>
 8018678:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801867c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018680:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8018684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018688:	f140 8098 	bpl.w	80187bc <_dtoa_r+0x49c>
 801868c:	f1b9 0f00 	cmp.w	r9, #0
 8018690:	f000 8094 	beq.w	80187bc <_dtoa_r+0x49c>
 8018694:	f1ba 0f00 	cmp.w	sl, #0
 8018698:	dd2f      	ble.n	80186fa <_dtoa_r+0x3da>
 801869a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801869e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80186a2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80186a6:	f10b 37ff 	add.w	r7, fp, #4294967295
 80186aa:	3201      	adds	r2, #1
 80186ac:	4650      	mov	r0, sl
 80186ae:	ed9d 6b02 	vldr	d6, [sp, #8]
 80186b2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80186b6:	ee07 2a90 	vmov	s15, r2
 80186ba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80186be:	eea7 5b06 	vfma.f64	d5, d7, d6
 80186c2:	ee15 4a90 	vmov	r4, s11
 80186c6:	ec52 1b15 	vmov	r1, r2, d5
 80186ca:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80186ce:	2800      	cmp	r0, #0
 80186d0:	d177      	bne.n	80187c2 <_dtoa_r+0x4a2>
 80186d2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80186d6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80186da:	ec42 1b17 	vmov	d7, r1, r2
 80186de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80186e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186e6:	f300 8263 	bgt.w	8018bb0 <_dtoa_r+0x890>
 80186ea:	eeb1 7b47 	vneg.f64	d7, d7
 80186ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80186f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186f6:	f100 8258 	bmi.w	8018baa <_dtoa_r+0x88a>
 80186fa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80186fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018700:	2a00      	cmp	r2, #0
 8018702:	f2c0 811d 	blt.w	8018940 <_dtoa_r+0x620>
 8018706:	f1bb 0f0e 	cmp.w	fp, #14
 801870a:	f300 8119 	bgt.w	8018940 <_dtoa_r+0x620>
 801870e:	4b8a      	ldr	r3, [pc, #552]	; (8018938 <_dtoa_r+0x618>)
 8018710:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8018714:	ed93 6b00 	vldr	d6, [r3]
 8018718:	9b08      	ldr	r3, [sp, #32]
 801871a:	2b00      	cmp	r3, #0
 801871c:	f280 80b7 	bge.w	801888e <_dtoa_r+0x56e>
 8018720:	f1b9 0f00 	cmp.w	r9, #0
 8018724:	f300 80b3 	bgt.w	801888e <_dtoa_r+0x56e>
 8018728:	f040 823f 	bne.w	8018baa <_dtoa_r+0x88a>
 801872c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8018730:	ee26 6b07 	vmul.f64	d6, d6, d7
 8018734:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018738:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801873c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018740:	464c      	mov	r4, r9
 8018742:	464f      	mov	r7, r9
 8018744:	f280 8215 	bge.w	8018b72 <_dtoa_r+0x852>
 8018748:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801874c:	2331      	movs	r3, #49	; 0x31
 801874e:	f808 3b01 	strb.w	r3, [r8], #1
 8018752:	f10b 0b01 	add.w	fp, fp, #1
 8018756:	e211      	b.n	8018b7c <_dtoa_r+0x85c>
 8018758:	2202      	movs	r2, #2
 801875a:	e780      	b.n	801865e <_dtoa_r+0x33e>
 801875c:	07cc      	lsls	r4, r1, #31
 801875e:	d504      	bpl.n	801876a <_dtoa_r+0x44a>
 8018760:	ed90 6b00 	vldr	d6, [r0]
 8018764:	3201      	adds	r2, #1
 8018766:	ee27 7b06 	vmul.f64	d7, d7, d6
 801876a:	1049      	asrs	r1, r1, #1
 801876c:	3008      	adds	r0, #8
 801876e:	e777      	b.n	8018660 <_dtoa_r+0x340>
 8018770:	d022      	beq.n	80187b8 <_dtoa_r+0x498>
 8018772:	f1cb 0100 	rsb	r1, fp, #0
 8018776:	4a70      	ldr	r2, [pc, #448]	; (8018938 <_dtoa_r+0x618>)
 8018778:	f001 000f 	and.w	r0, r1, #15
 801877c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8018780:	ed92 7b00 	vldr	d7, [r2]
 8018784:	ee28 7b07 	vmul.f64	d7, d8, d7
 8018788:	ed8d 7b02 	vstr	d7, [sp, #8]
 801878c:	486b      	ldr	r0, [pc, #428]	; (801893c <_dtoa_r+0x61c>)
 801878e:	1109      	asrs	r1, r1, #4
 8018790:	2400      	movs	r4, #0
 8018792:	2202      	movs	r2, #2
 8018794:	b929      	cbnz	r1, 80187a2 <_dtoa_r+0x482>
 8018796:	2c00      	cmp	r4, #0
 8018798:	f43f af6a 	beq.w	8018670 <_dtoa_r+0x350>
 801879c:	ed8d 7b02 	vstr	d7, [sp, #8]
 80187a0:	e766      	b.n	8018670 <_dtoa_r+0x350>
 80187a2:	07cf      	lsls	r7, r1, #31
 80187a4:	d505      	bpl.n	80187b2 <_dtoa_r+0x492>
 80187a6:	ed90 6b00 	vldr	d6, [r0]
 80187aa:	3201      	adds	r2, #1
 80187ac:	2401      	movs	r4, #1
 80187ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80187b2:	1049      	asrs	r1, r1, #1
 80187b4:	3008      	adds	r0, #8
 80187b6:	e7ed      	b.n	8018794 <_dtoa_r+0x474>
 80187b8:	2202      	movs	r2, #2
 80187ba:	e759      	b.n	8018670 <_dtoa_r+0x350>
 80187bc:	465f      	mov	r7, fp
 80187be:	4648      	mov	r0, r9
 80187c0:	e775      	b.n	80186ae <_dtoa_r+0x38e>
 80187c2:	ec42 1b17 	vmov	d7, r1, r2
 80187c6:	4a5c      	ldr	r2, [pc, #368]	; (8018938 <_dtoa_r+0x618>)
 80187c8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80187cc:	ed12 4b02 	vldr	d4, [r2, #-8]
 80187d0:	9a01      	ldr	r2, [sp, #4]
 80187d2:	1814      	adds	r4, r2, r0
 80187d4:	9a07      	ldr	r2, [sp, #28]
 80187d6:	b352      	cbz	r2, 801882e <_dtoa_r+0x50e>
 80187d8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80187dc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80187e0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80187e4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80187e8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80187ec:	ee35 7b47 	vsub.f64	d7, d5, d7
 80187f0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80187f4:	ee14 2a90 	vmov	r2, s9
 80187f8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80187fc:	3230      	adds	r2, #48	; 0x30
 80187fe:	ee36 6b45 	vsub.f64	d6, d6, d5
 8018802:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801880a:	f808 2b01 	strb.w	r2, [r8], #1
 801880e:	d439      	bmi.n	8018884 <_dtoa_r+0x564>
 8018810:	ee32 5b46 	vsub.f64	d5, d2, d6
 8018814:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8018818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801881c:	d472      	bmi.n	8018904 <_dtoa_r+0x5e4>
 801881e:	45a0      	cmp	r8, r4
 8018820:	f43f af6b 	beq.w	80186fa <_dtoa_r+0x3da>
 8018824:	ee27 7b03 	vmul.f64	d7, d7, d3
 8018828:	ee26 6b03 	vmul.f64	d6, d6, d3
 801882c:	e7e0      	b.n	80187f0 <_dtoa_r+0x4d0>
 801882e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018832:	ee27 7b04 	vmul.f64	d7, d7, d4
 8018836:	4621      	mov	r1, r4
 8018838:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801883c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8018840:	ee14 2a90 	vmov	r2, s9
 8018844:	3230      	adds	r2, #48	; 0x30
 8018846:	f808 2b01 	strb.w	r2, [r8], #1
 801884a:	45a0      	cmp	r8, r4
 801884c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8018850:	ee36 6b45 	vsub.f64	d6, d6, d5
 8018854:	d118      	bne.n	8018888 <_dtoa_r+0x568>
 8018856:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801885a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801885e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8018862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018866:	dc4d      	bgt.n	8018904 <_dtoa_r+0x5e4>
 8018868:	ee35 7b47 	vsub.f64	d7, d5, d7
 801886c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018874:	f57f af41 	bpl.w	80186fa <_dtoa_r+0x3da>
 8018878:	4688      	mov	r8, r1
 801887a:	3901      	subs	r1, #1
 801887c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8018880:	2b30      	cmp	r3, #48	; 0x30
 8018882:	d0f9      	beq.n	8018878 <_dtoa_r+0x558>
 8018884:	46bb      	mov	fp, r7
 8018886:	e02a      	b.n	80188de <_dtoa_r+0x5be>
 8018888:	ee26 6b03 	vmul.f64	d6, d6, d3
 801888c:	e7d6      	b.n	801883c <_dtoa_r+0x51c>
 801888e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018892:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8018896:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801889a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801889e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80188a2:	ee15 3a10 	vmov	r3, s10
 80188a6:	3330      	adds	r3, #48	; 0x30
 80188a8:	f808 3b01 	strb.w	r3, [r8], #1
 80188ac:	9b01      	ldr	r3, [sp, #4]
 80188ae:	eba8 0303 	sub.w	r3, r8, r3
 80188b2:	4599      	cmp	r9, r3
 80188b4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80188b8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80188bc:	d133      	bne.n	8018926 <_dtoa_r+0x606>
 80188be:	ee37 7b07 	vadd.f64	d7, d7, d7
 80188c2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80188c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188ca:	dc1a      	bgt.n	8018902 <_dtoa_r+0x5e2>
 80188cc:	eeb4 7b46 	vcmp.f64	d7, d6
 80188d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188d4:	d103      	bne.n	80188de <_dtoa_r+0x5be>
 80188d6:	ee15 3a10 	vmov	r3, s10
 80188da:	07d9      	lsls	r1, r3, #31
 80188dc:	d411      	bmi.n	8018902 <_dtoa_r+0x5e2>
 80188de:	4629      	mov	r1, r5
 80188e0:	4630      	mov	r0, r6
 80188e2:	f000 fad7 	bl	8018e94 <_Bfree>
 80188e6:	2300      	movs	r3, #0
 80188e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80188ea:	f888 3000 	strb.w	r3, [r8]
 80188ee:	f10b 0301 	add.w	r3, fp, #1
 80188f2:	6013      	str	r3, [r2, #0]
 80188f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80188f6:	2b00      	cmp	r3, #0
 80188f8:	f43f ad61 	beq.w	80183be <_dtoa_r+0x9e>
 80188fc:	f8c3 8000 	str.w	r8, [r3]
 8018900:	e55d      	b.n	80183be <_dtoa_r+0x9e>
 8018902:	465f      	mov	r7, fp
 8018904:	4643      	mov	r3, r8
 8018906:	4698      	mov	r8, r3
 8018908:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801890c:	2a39      	cmp	r2, #57	; 0x39
 801890e:	d106      	bne.n	801891e <_dtoa_r+0x5fe>
 8018910:	9a01      	ldr	r2, [sp, #4]
 8018912:	429a      	cmp	r2, r3
 8018914:	d1f7      	bne.n	8018906 <_dtoa_r+0x5e6>
 8018916:	9901      	ldr	r1, [sp, #4]
 8018918:	2230      	movs	r2, #48	; 0x30
 801891a:	3701      	adds	r7, #1
 801891c:	700a      	strb	r2, [r1, #0]
 801891e:	781a      	ldrb	r2, [r3, #0]
 8018920:	3201      	adds	r2, #1
 8018922:	701a      	strb	r2, [r3, #0]
 8018924:	e7ae      	b.n	8018884 <_dtoa_r+0x564>
 8018926:	ee27 7b04 	vmul.f64	d7, d7, d4
 801892a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801892e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018932:	d1b2      	bne.n	801889a <_dtoa_r+0x57a>
 8018934:	e7d3      	b.n	80188de <_dtoa_r+0x5be>
 8018936:	bf00      	nop
 8018938:	0801ae28 	.word	0x0801ae28
 801893c:	0801ae00 	.word	0x0801ae00
 8018940:	9907      	ldr	r1, [sp, #28]
 8018942:	2900      	cmp	r1, #0
 8018944:	f000 80d0 	beq.w	8018ae8 <_dtoa_r+0x7c8>
 8018948:	9906      	ldr	r1, [sp, #24]
 801894a:	2901      	cmp	r1, #1
 801894c:	f300 80b4 	bgt.w	8018ab8 <_dtoa_r+0x798>
 8018950:	990a      	ldr	r1, [sp, #40]	; 0x28
 8018952:	2900      	cmp	r1, #0
 8018954:	f000 80ac 	beq.w	8018ab0 <_dtoa_r+0x790>
 8018958:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801895c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8018960:	461c      	mov	r4, r3
 8018962:	930a      	str	r3, [sp, #40]	; 0x28
 8018964:	9b04      	ldr	r3, [sp, #16]
 8018966:	4413      	add	r3, r2
 8018968:	9304      	str	r3, [sp, #16]
 801896a:	9b05      	ldr	r3, [sp, #20]
 801896c:	2101      	movs	r1, #1
 801896e:	4413      	add	r3, r2
 8018970:	4630      	mov	r0, r6
 8018972:	9305      	str	r3, [sp, #20]
 8018974:	f000 fb46 	bl	8019004 <__i2b>
 8018978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801897a:	4607      	mov	r7, r0
 801897c:	f1b8 0f00 	cmp.w	r8, #0
 8018980:	dd0d      	ble.n	801899e <_dtoa_r+0x67e>
 8018982:	9a05      	ldr	r2, [sp, #20]
 8018984:	2a00      	cmp	r2, #0
 8018986:	dd0a      	ble.n	801899e <_dtoa_r+0x67e>
 8018988:	4542      	cmp	r2, r8
 801898a:	9904      	ldr	r1, [sp, #16]
 801898c:	bfa8      	it	ge
 801898e:	4642      	movge	r2, r8
 8018990:	1a89      	subs	r1, r1, r2
 8018992:	9104      	str	r1, [sp, #16]
 8018994:	9905      	ldr	r1, [sp, #20]
 8018996:	eba8 0802 	sub.w	r8, r8, r2
 801899a:	1a8a      	subs	r2, r1, r2
 801899c:	9205      	str	r2, [sp, #20]
 801899e:	b303      	cbz	r3, 80189e2 <_dtoa_r+0x6c2>
 80189a0:	9a07      	ldr	r2, [sp, #28]
 80189a2:	2a00      	cmp	r2, #0
 80189a4:	f000 80a5 	beq.w	8018af2 <_dtoa_r+0x7d2>
 80189a8:	2c00      	cmp	r4, #0
 80189aa:	dd13      	ble.n	80189d4 <_dtoa_r+0x6b4>
 80189ac:	4639      	mov	r1, r7
 80189ae:	4622      	mov	r2, r4
 80189b0:	4630      	mov	r0, r6
 80189b2:	930d      	str	r3, [sp, #52]	; 0x34
 80189b4:	f000 fbe6 	bl	8019184 <__pow5mult>
 80189b8:	462a      	mov	r2, r5
 80189ba:	4601      	mov	r1, r0
 80189bc:	4607      	mov	r7, r0
 80189be:	4630      	mov	r0, r6
 80189c0:	f000 fb36 	bl	8019030 <__multiply>
 80189c4:	4629      	mov	r1, r5
 80189c6:	900a      	str	r0, [sp, #40]	; 0x28
 80189c8:	4630      	mov	r0, r6
 80189ca:	f000 fa63 	bl	8018e94 <_Bfree>
 80189ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80189d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80189d2:	4615      	mov	r5, r2
 80189d4:	1b1a      	subs	r2, r3, r4
 80189d6:	d004      	beq.n	80189e2 <_dtoa_r+0x6c2>
 80189d8:	4629      	mov	r1, r5
 80189da:	4630      	mov	r0, r6
 80189dc:	f000 fbd2 	bl	8019184 <__pow5mult>
 80189e0:	4605      	mov	r5, r0
 80189e2:	2101      	movs	r1, #1
 80189e4:	4630      	mov	r0, r6
 80189e6:	f000 fb0d 	bl	8019004 <__i2b>
 80189ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80189ec:	2b00      	cmp	r3, #0
 80189ee:	4604      	mov	r4, r0
 80189f0:	f340 8081 	ble.w	8018af6 <_dtoa_r+0x7d6>
 80189f4:	461a      	mov	r2, r3
 80189f6:	4601      	mov	r1, r0
 80189f8:	4630      	mov	r0, r6
 80189fa:	f000 fbc3 	bl	8019184 <__pow5mult>
 80189fe:	9b06      	ldr	r3, [sp, #24]
 8018a00:	2b01      	cmp	r3, #1
 8018a02:	4604      	mov	r4, r0
 8018a04:	dd7a      	ble.n	8018afc <_dtoa_r+0x7dc>
 8018a06:	2300      	movs	r3, #0
 8018a08:	930a      	str	r3, [sp, #40]	; 0x28
 8018a0a:	6922      	ldr	r2, [r4, #16]
 8018a0c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8018a10:	6910      	ldr	r0, [r2, #16]
 8018a12:	f000 faa7 	bl	8018f64 <__hi0bits>
 8018a16:	f1c0 0020 	rsb	r0, r0, #32
 8018a1a:	9b05      	ldr	r3, [sp, #20]
 8018a1c:	4418      	add	r0, r3
 8018a1e:	f010 001f 	ands.w	r0, r0, #31
 8018a22:	f000 808c 	beq.w	8018b3e <_dtoa_r+0x81e>
 8018a26:	f1c0 0220 	rsb	r2, r0, #32
 8018a2a:	2a04      	cmp	r2, #4
 8018a2c:	f340 8085 	ble.w	8018b3a <_dtoa_r+0x81a>
 8018a30:	f1c0 001c 	rsb	r0, r0, #28
 8018a34:	9b04      	ldr	r3, [sp, #16]
 8018a36:	4403      	add	r3, r0
 8018a38:	9304      	str	r3, [sp, #16]
 8018a3a:	9b05      	ldr	r3, [sp, #20]
 8018a3c:	4403      	add	r3, r0
 8018a3e:	4480      	add	r8, r0
 8018a40:	9305      	str	r3, [sp, #20]
 8018a42:	9b04      	ldr	r3, [sp, #16]
 8018a44:	2b00      	cmp	r3, #0
 8018a46:	dd05      	ble.n	8018a54 <_dtoa_r+0x734>
 8018a48:	4629      	mov	r1, r5
 8018a4a:	461a      	mov	r2, r3
 8018a4c:	4630      	mov	r0, r6
 8018a4e:	f000 fbf3 	bl	8019238 <__lshift>
 8018a52:	4605      	mov	r5, r0
 8018a54:	9b05      	ldr	r3, [sp, #20]
 8018a56:	2b00      	cmp	r3, #0
 8018a58:	dd05      	ble.n	8018a66 <_dtoa_r+0x746>
 8018a5a:	4621      	mov	r1, r4
 8018a5c:	461a      	mov	r2, r3
 8018a5e:	4630      	mov	r0, r6
 8018a60:	f000 fbea 	bl	8019238 <__lshift>
 8018a64:	4604      	mov	r4, r0
 8018a66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018a68:	2b00      	cmp	r3, #0
 8018a6a:	d06a      	beq.n	8018b42 <_dtoa_r+0x822>
 8018a6c:	4621      	mov	r1, r4
 8018a6e:	4628      	mov	r0, r5
 8018a70:	f000 fc52 	bl	8019318 <__mcmp>
 8018a74:	2800      	cmp	r0, #0
 8018a76:	da64      	bge.n	8018b42 <_dtoa_r+0x822>
 8018a78:	2300      	movs	r3, #0
 8018a7a:	4629      	mov	r1, r5
 8018a7c:	220a      	movs	r2, #10
 8018a7e:	4630      	mov	r0, r6
 8018a80:	f000 fa2a 	bl	8018ed8 <__multadd>
 8018a84:	9b07      	ldr	r3, [sp, #28]
 8018a86:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018a8a:	4605      	mov	r5, r0
 8018a8c:	2b00      	cmp	r3, #0
 8018a8e:	f000 8191 	beq.w	8018db4 <_dtoa_r+0xa94>
 8018a92:	4639      	mov	r1, r7
 8018a94:	2300      	movs	r3, #0
 8018a96:	220a      	movs	r2, #10
 8018a98:	4630      	mov	r0, r6
 8018a9a:	f000 fa1d 	bl	8018ed8 <__multadd>
 8018a9e:	f1ba 0f00 	cmp.w	sl, #0
 8018aa2:	4607      	mov	r7, r0
 8018aa4:	f300 808d 	bgt.w	8018bc2 <_dtoa_r+0x8a2>
 8018aa8:	9b06      	ldr	r3, [sp, #24]
 8018aaa:	2b02      	cmp	r3, #2
 8018aac:	dc50      	bgt.n	8018b50 <_dtoa_r+0x830>
 8018aae:	e088      	b.n	8018bc2 <_dtoa_r+0x8a2>
 8018ab0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018ab2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8018ab6:	e751      	b.n	801895c <_dtoa_r+0x63c>
 8018ab8:	f109 34ff 	add.w	r4, r9, #4294967295
 8018abc:	42a3      	cmp	r3, r4
 8018abe:	bfbf      	itttt	lt
 8018ac0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8018ac2:	1ae3      	sublt	r3, r4, r3
 8018ac4:	18d2      	addlt	r2, r2, r3
 8018ac6:	9209      	strlt	r2, [sp, #36]	; 0x24
 8018ac8:	bfb6      	itet	lt
 8018aca:	4623      	movlt	r3, r4
 8018acc:	1b1c      	subge	r4, r3, r4
 8018ace:	2400      	movlt	r4, #0
 8018ad0:	f1b9 0f00 	cmp.w	r9, #0
 8018ad4:	bfb5      	itete	lt
 8018ad6:	9a04      	ldrlt	r2, [sp, #16]
 8018ad8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8018adc:	eba2 0809 	sublt.w	r8, r2, r9
 8018ae0:	464a      	movge	r2, r9
 8018ae2:	bfb8      	it	lt
 8018ae4:	2200      	movlt	r2, #0
 8018ae6:	e73c      	b.n	8018962 <_dtoa_r+0x642>
 8018ae8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8018aec:	9f07      	ldr	r7, [sp, #28]
 8018aee:	461c      	mov	r4, r3
 8018af0:	e744      	b.n	801897c <_dtoa_r+0x65c>
 8018af2:	461a      	mov	r2, r3
 8018af4:	e770      	b.n	80189d8 <_dtoa_r+0x6b8>
 8018af6:	9b06      	ldr	r3, [sp, #24]
 8018af8:	2b01      	cmp	r3, #1
 8018afa:	dc18      	bgt.n	8018b2e <_dtoa_r+0x80e>
 8018afc:	9b02      	ldr	r3, [sp, #8]
 8018afe:	b9b3      	cbnz	r3, 8018b2e <_dtoa_r+0x80e>
 8018b00:	9b03      	ldr	r3, [sp, #12]
 8018b02:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8018b06:	b9a2      	cbnz	r2, 8018b32 <_dtoa_r+0x812>
 8018b08:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8018b0c:	0d12      	lsrs	r2, r2, #20
 8018b0e:	0512      	lsls	r2, r2, #20
 8018b10:	b18a      	cbz	r2, 8018b36 <_dtoa_r+0x816>
 8018b12:	9b04      	ldr	r3, [sp, #16]
 8018b14:	3301      	adds	r3, #1
 8018b16:	9304      	str	r3, [sp, #16]
 8018b18:	9b05      	ldr	r3, [sp, #20]
 8018b1a:	3301      	adds	r3, #1
 8018b1c:	9305      	str	r3, [sp, #20]
 8018b1e:	2301      	movs	r3, #1
 8018b20:	930a      	str	r3, [sp, #40]	; 0x28
 8018b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b24:	2b00      	cmp	r3, #0
 8018b26:	f47f af70 	bne.w	8018a0a <_dtoa_r+0x6ea>
 8018b2a:	2001      	movs	r0, #1
 8018b2c:	e775      	b.n	8018a1a <_dtoa_r+0x6fa>
 8018b2e:	2300      	movs	r3, #0
 8018b30:	e7f6      	b.n	8018b20 <_dtoa_r+0x800>
 8018b32:	9b02      	ldr	r3, [sp, #8]
 8018b34:	e7f4      	b.n	8018b20 <_dtoa_r+0x800>
 8018b36:	920a      	str	r2, [sp, #40]	; 0x28
 8018b38:	e7f3      	b.n	8018b22 <_dtoa_r+0x802>
 8018b3a:	d082      	beq.n	8018a42 <_dtoa_r+0x722>
 8018b3c:	4610      	mov	r0, r2
 8018b3e:	301c      	adds	r0, #28
 8018b40:	e778      	b.n	8018a34 <_dtoa_r+0x714>
 8018b42:	f1b9 0f00 	cmp.w	r9, #0
 8018b46:	dc37      	bgt.n	8018bb8 <_dtoa_r+0x898>
 8018b48:	9b06      	ldr	r3, [sp, #24]
 8018b4a:	2b02      	cmp	r3, #2
 8018b4c:	dd34      	ble.n	8018bb8 <_dtoa_r+0x898>
 8018b4e:	46ca      	mov	sl, r9
 8018b50:	f1ba 0f00 	cmp.w	sl, #0
 8018b54:	d10d      	bne.n	8018b72 <_dtoa_r+0x852>
 8018b56:	4621      	mov	r1, r4
 8018b58:	4653      	mov	r3, sl
 8018b5a:	2205      	movs	r2, #5
 8018b5c:	4630      	mov	r0, r6
 8018b5e:	f000 f9bb 	bl	8018ed8 <__multadd>
 8018b62:	4601      	mov	r1, r0
 8018b64:	4604      	mov	r4, r0
 8018b66:	4628      	mov	r0, r5
 8018b68:	f000 fbd6 	bl	8019318 <__mcmp>
 8018b6c:	2800      	cmp	r0, #0
 8018b6e:	f73f adeb 	bgt.w	8018748 <_dtoa_r+0x428>
 8018b72:	9b08      	ldr	r3, [sp, #32]
 8018b74:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018b78:	ea6f 0b03 	mvn.w	fp, r3
 8018b7c:	f04f 0900 	mov.w	r9, #0
 8018b80:	4621      	mov	r1, r4
 8018b82:	4630      	mov	r0, r6
 8018b84:	f000 f986 	bl	8018e94 <_Bfree>
 8018b88:	2f00      	cmp	r7, #0
 8018b8a:	f43f aea8 	beq.w	80188de <_dtoa_r+0x5be>
 8018b8e:	f1b9 0f00 	cmp.w	r9, #0
 8018b92:	d005      	beq.n	8018ba0 <_dtoa_r+0x880>
 8018b94:	45b9      	cmp	r9, r7
 8018b96:	d003      	beq.n	8018ba0 <_dtoa_r+0x880>
 8018b98:	4649      	mov	r1, r9
 8018b9a:	4630      	mov	r0, r6
 8018b9c:	f000 f97a 	bl	8018e94 <_Bfree>
 8018ba0:	4639      	mov	r1, r7
 8018ba2:	4630      	mov	r0, r6
 8018ba4:	f000 f976 	bl	8018e94 <_Bfree>
 8018ba8:	e699      	b.n	80188de <_dtoa_r+0x5be>
 8018baa:	2400      	movs	r4, #0
 8018bac:	4627      	mov	r7, r4
 8018bae:	e7e0      	b.n	8018b72 <_dtoa_r+0x852>
 8018bb0:	46bb      	mov	fp, r7
 8018bb2:	4604      	mov	r4, r0
 8018bb4:	4607      	mov	r7, r0
 8018bb6:	e5c7      	b.n	8018748 <_dtoa_r+0x428>
 8018bb8:	9b07      	ldr	r3, [sp, #28]
 8018bba:	46ca      	mov	sl, r9
 8018bbc:	2b00      	cmp	r3, #0
 8018bbe:	f000 8100 	beq.w	8018dc2 <_dtoa_r+0xaa2>
 8018bc2:	f1b8 0f00 	cmp.w	r8, #0
 8018bc6:	dd05      	ble.n	8018bd4 <_dtoa_r+0x8b4>
 8018bc8:	4639      	mov	r1, r7
 8018bca:	4642      	mov	r2, r8
 8018bcc:	4630      	mov	r0, r6
 8018bce:	f000 fb33 	bl	8019238 <__lshift>
 8018bd2:	4607      	mov	r7, r0
 8018bd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018bd6:	2b00      	cmp	r3, #0
 8018bd8:	d05d      	beq.n	8018c96 <_dtoa_r+0x976>
 8018bda:	6879      	ldr	r1, [r7, #4]
 8018bdc:	4630      	mov	r0, r6
 8018bde:	f000 f919 	bl	8018e14 <_Balloc>
 8018be2:	4680      	mov	r8, r0
 8018be4:	b928      	cbnz	r0, 8018bf2 <_dtoa_r+0x8d2>
 8018be6:	4b82      	ldr	r3, [pc, #520]	; (8018df0 <_dtoa_r+0xad0>)
 8018be8:	4602      	mov	r2, r0
 8018bea:	f240 21ea 	movw	r1, #746	; 0x2ea
 8018bee:	f7ff bbaf 	b.w	8018350 <_dtoa_r+0x30>
 8018bf2:	693a      	ldr	r2, [r7, #16]
 8018bf4:	3202      	adds	r2, #2
 8018bf6:	0092      	lsls	r2, r2, #2
 8018bf8:	f107 010c 	add.w	r1, r7, #12
 8018bfc:	300c      	adds	r0, #12
 8018bfe:	f7fe fea9 	bl	8017954 <memcpy>
 8018c02:	2201      	movs	r2, #1
 8018c04:	4641      	mov	r1, r8
 8018c06:	4630      	mov	r0, r6
 8018c08:	f000 fb16 	bl	8019238 <__lshift>
 8018c0c:	9b01      	ldr	r3, [sp, #4]
 8018c0e:	3301      	adds	r3, #1
 8018c10:	9304      	str	r3, [sp, #16]
 8018c12:	9b01      	ldr	r3, [sp, #4]
 8018c14:	4453      	add	r3, sl
 8018c16:	9308      	str	r3, [sp, #32]
 8018c18:	9b02      	ldr	r3, [sp, #8]
 8018c1a:	f003 0301 	and.w	r3, r3, #1
 8018c1e:	46b9      	mov	r9, r7
 8018c20:	9307      	str	r3, [sp, #28]
 8018c22:	4607      	mov	r7, r0
 8018c24:	9b04      	ldr	r3, [sp, #16]
 8018c26:	4621      	mov	r1, r4
 8018c28:	3b01      	subs	r3, #1
 8018c2a:	4628      	mov	r0, r5
 8018c2c:	9302      	str	r3, [sp, #8]
 8018c2e:	f7ff fae9 	bl	8018204 <quorem>
 8018c32:	4603      	mov	r3, r0
 8018c34:	3330      	adds	r3, #48	; 0x30
 8018c36:	9005      	str	r0, [sp, #20]
 8018c38:	4649      	mov	r1, r9
 8018c3a:	4628      	mov	r0, r5
 8018c3c:	9309      	str	r3, [sp, #36]	; 0x24
 8018c3e:	f000 fb6b 	bl	8019318 <__mcmp>
 8018c42:	463a      	mov	r2, r7
 8018c44:	4682      	mov	sl, r0
 8018c46:	4621      	mov	r1, r4
 8018c48:	4630      	mov	r0, r6
 8018c4a:	f000 fb81 	bl	8019350 <__mdiff>
 8018c4e:	68c2      	ldr	r2, [r0, #12]
 8018c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c52:	4680      	mov	r8, r0
 8018c54:	bb0a      	cbnz	r2, 8018c9a <_dtoa_r+0x97a>
 8018c56:	4601      	mov	r1, r0
 8018c58:	4628      	mov	r0, r5
 8018c5a:	f000 fb5d 	bl	8019318 <__mcmp>
 8018c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c60:	4602      	mov	r2, r0
 8018c62:	4641      	mov	r1, r8
 8018c64:	4630      	mov	r0, r6
 8018c66:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8018c6a:	f000 f913 	bl	8018e94 <_Bfree>
 8018c6e:	9b06      	ldr	r3, [sp, #24]
 8018c70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018c72:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8018c76:	ea43 0102 	orr.w	r1, r3, r2
 8018c7a:	9b07      	ldr	r3, [sp, #28]
 8018c7c:	430b      	orrs	r3, r1
 8018c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c80:	d10d      	bne.n	8018c9e <_dtoa_r+0x97e>
 8018c82:	2b39      	cmp	r3, #57	; 0x39
 8018c84:	d029      	beq.n	8018cda <_dtoa_r+0x9ba>
 8018c86:	f1ba 0f00 	cmp.w	sl, #0
 8018c8a:	dd01      	ble.n	8018c90 <_dtoa_r+0x970>
 8018c8c:	9b05      	ldr	r3, [sp, #20]
 8018c8e:	3331      	adds	r3, #49	; 0x31
 8018c90:	9a02      	ldr	r2, [sp, #8]
 8018c92:	7013      	strb	r3, [r2, #0]
 8018c94:	e774      	b.n	8018b80 <_dtoa_r+0x860>
 8018c96:	4638      	mov	r0, r7
 8018c98:	e7b8      	b.n	8018c0c <_dtoa_r+0x8ec>
 8018c9a:	2201      	movs	r2, #1
 8018c9c:	e7e1      	b.n	8018c62 <_dtoa_r+0x942>
 8018c9e:	f1ba 0f00 	cmp.w	sl, #0
 8018ca2:	db06      	blt.n	8018cb2 <_dtoa_r+0x992>
 8018ca4:	9906      	ldr	r1, [sp, #24]
 8018ca6:	ea41 0a0a 	orr.w	sl, r1, sl
 8018caa:	9907      	ldr	r1, [sp, #28]
 8018cac:	ea5a 0101 	orrs.w	r1, sl, r1
 8018cb0:	d120      	bne.n	8018cf4 <_dtoa_r+0x9d4>
 8018cb2:	2a00      	cmp	r2, #0
 8018cb4:	ddec      	ble.n	8018c90 <_dtoa_r+0x970>
 8018cb6:	4629      	mov	r1, r5
 8018cb8:	2201      	movs	r2, #1
 8018cba:	4630      	mov	r0, r6
 8018cbc:	9304      	str	r3, [sp, #16]
 8018cbe:	f000 fabb 	bl	8019238 <__lshift>
 8018cc2:	4621      	mov	r1, r4
 8018cc4:	4605      	mov	r5, r0
 8018cc6:	f000 fb27 	bl	8019318 <__mcmp>
 8018cca:	2800      	cmp	r0, #0
 8018ccc:	9b04      	ldr	r3, [sp, #16]
 8018cce:	dc02      	bgt.n	8018cd6 <_dtoa_r+0x9b6>
 8018cd0:	d1de      	bne.n	8018c90 <_dtoa_r+0x970>
 8018cd2:	07da      	lsls	r2, r3, #31
 8018cd4:	d5dc      	bpl.n	8018c90 <_dtoa_r+0x970>
 8018cd6:	2b39      	cmp	r3, #57	; 0x39
 8018cd8:	d1d8      	bne.n	8018c8c <_dtoa_r+0x96c>
 8018cda:	9a02      	ldr	r2, [sp, #8]
 8018cdc:	2339      	movs	r3, #57	; 0x39
 8018cde:	7013      	strb	r3, [r2, #0]
 8018ce0:	4643      	mov	r3, r8
 8018ce2:	4698      	mov	r8, r3
 8018ce4:	3b01      	subs	r3, #1
 8018ce6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8018cea:	2a39      	cmp	r2, #57	; 0x39
 8018cec:	d051      	beq.n	8018d92 <_dtoa_r+0xa72>
 8018cee:	3201      	adds	r2, #1
 8018cf0:	701a      	strb	r2, [r3, #0]
 8018cf2:	e745      	b.n	8018b80 <_dtoa_r+0x860>
 8018cf4:	2a00      	cmp	r2, #0
 8018cf6:	dd03      	ble.n	8018d00 <_dtoa_r+0x9e0>
 8018cf8:	2b39      	cmp	r3, #57	; 0x39
 8018cfa:	d0ee      	beq.n	8018cda <_dtoa_r+0x9ba>
 8018cfc:	3301      	adds	r3, #1
 8018cfe:	e7c7      	b.n	8018c90 <_dtoa_r+0x970>
 8018d00:	9a04      	ldr	r2, [sp, #16]
 8018d02:	9908      	ldr	r1, [sp, #32]
 8018d04:	f802 3c01 	strb.w	r3, [r2, #-1]
 8018d08:	428a      	cmp	r2, r1
 8018d0a:	d02b      	beq.n	8018d64 <_dtoa_r+0xa44>
 8018d0c:	4629      	mov	r1, r5
 8018d0e:	2300      	movs	r3, #0
 8018d10:	220a      	movs	r2, #10
 8018d12:	4630      	mov	r0, r6
 8018d14:	f000 f8e0 	bl	8018ed8 <__multadd>
 8018d18:	45b9      	cmp	r9, r7
 8018d1a:	4605      	mov	r5, r0
 8018d1c:	f04f 0300 	mov.w	r3, #0
 8018d20:	f04f 020a 	mov.w	r2, #10
 8018d24:	4649      	mov	r1, r9
 8018d26:	4630      	mov	r0, r6
 8018d28:	d107      	bne.n	8018d3a <_dtoa_r+0xa1a>
 8018d2a:	f000 f8d5 	bl	8018ed8 <__multadd>
 8018d2e:	4681      	mov	r9, r0
 8018d30:	4607      	mov	r7, r0
 8018d32:	9b04      	ldr	r3, [sp, #16]
 8018d34:	3301      	adds	r3, #1
 8018d36:	9304      	str	r3, [sp, #16]
 8018d38:	e774      	b.n	8018c24 <_dtoa_r+0x904>
 8018d3a:	f000 f8cd 	bl	8018ed8 <__multadd>
 8018d3e:	4639      	mov	r1, r7
 8018d40:	4681      	mov	r9, r0
 8018d42:	2300      	movs	r3, #0
 8018d44:	220a      	movs	r2, #10
 8018d46:	4630      	mov	r0, r6
 8018d48:	f000 f8c6 	bl	8018ed8 <__multadd>
 8018d4c:	4607      	mov	r7, r0
 8018d4e:	e7f0      	b.n	8018d32 <_dtoa_r+0xa12>
 8018d50:	f1ba 0f00 	cmp.w	sl, #0
 8018d54:	9a01      	ldr	r2, [sp, #4]
 8018d56:	bfcc      	ite	gt
 8018d58:	46d0      	movgt	r8, sl
 8018d5a:	f04f 0801 	movle.w	r8, #1
 8018d5e:	4490      	add	r8, r2
 8018d60:	f04f 0900 	mov.w	r9, #0
 8018d64:	4629      	mov	r1, r5
 8018d66:	2201      	movs	r2, #1
 8018d68:	4630      	mov	r0, r6
 8018d6a:	9302      	str	r3, [sp, #8]
 8018d6c:	f000 fa64 	bl	8019238 <__lshift>
 8018d70:	4621      	mov	r1, r4
 8018d72:	4605      	mov	r5, r0
 8018d74:	f000 fad0 	bl	8019318 <__mcmp>
 8018d78:	2800      	cmp	r0, #0
 8018d7a:	dcb1      	bgt.n	8018ce0 <_dtoa_r+0x9c0>
 8018d7c:	d102      	bne.n	8018d84 <_dtoa_r+0xa64>
 8018d7e:	9b02      	ldr	r3, [sp, #8]
 8018d80:	07db      	lsls	r3, r3, #31
 8018d82:	d4ad      	bmi.n	8018ce0 <_dtoa_r+0x9c0>
 8018d84:	4643      	mov	r3, r8
 8018d86:	4698      	mov	r8, r3
 8018d88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018d8c:	2a30      	cmp	r2, #48	; 0x30
 8018d8e:	d0fa      	beq.n	8018d86 <_dtoa_r+0xa66>
 8018d90:	e6f6      	b.n	8018b80 <_dtoa_r+0x860>
 8018d92:	9a01      	ldr	r2, [sp, #4]
 8018d94:	429a      	cmp	r2, r3
 8018d96:	d1a4      	bne.n	8018ce2 <_dtoa_r+0x9c2>
 8018d98:	f10b 0b01 	add.w	fp, fp, #1
 8018d9c:	2331      	movs	r3, #49	; 0x31
 8018d9e:	e778      	b.n	8018c92 <_dtoa_r+0x972>
 8018da0:	4b14      	ldr	r3, [pc, #80]	; (8018df4 <_dtoa_r+0xad4>)
 8018da2:	f7ff bb27 	b.w	80183f4 <_dtoa_r+0xd4>
 8018da6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018da8:	2b00      	cmp	r3, #0
 8018daa:	f47f ab03 	bne.w	80183b4 <_dtoa_r+0x94>
 8018dae:	4b12      	ldr	r3, [pc, #72]	; (8018df8 <_dtoa_r+0xad8>)
 8018db0:	f7ff bb20 	b.w	80183f4 <_dtoa_r+0xd4>
 8018db4:	f1ba 0f00 	cmp.w	sl, #0
 8018db8:	dc03      	bgt.n	8018dc2 <_dtoa_r+0xaa2>
 8018dba:	9b06      	ldr	r3, [sp, #24]
 8018dbc:	2b02      	cmp	r3, #2
 8018dbe:	f73f aec7 	bgt.w	8018b50 <_dtoa_r+0x830>
 8018dc2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018dc6:	4621      	mov	r1, r4
 8018dc8:	4628      	mov	r0, r5
 8018dca:	f7ff fa1b 	bl	8018204 <quorem>
 8018dce:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8018dd2:	f808 3b01 	strb.w	r3, [r8], #1
 8018dd6:	9a01      	ldr	r2, [sp, #4]
 8018dd8:	eba8 0202 	sub.w	r2, r8, r2
 8018ddc:	4592      	cmp	sl, r2
 8018dde:	ddb7      	ble.n	8018d50 <_dtoa_r+0xa30>
 8018de0:	4629      	mov	r1, r5
 8018de2:	2300      	movs	r3, #0
 8018de4:	220a      	movs	r2, #10
 8018de6:	4630      	mov	r0, r6
 8018de8:	f000 f876 	bl	8018ed8 <__multadd>
 8018dec:	4605      	mov	r5, r0
 8018dee:	e7ea      	b.n	8018dc6 <_dtoa_r+0xaa6>
 8018df0:	0801ad93 	.word	0x0801ad93
 8018df4:	0801acf0 	.word	0x0801acf0
 8018df8:	0801ad14 	.word	0x0801ad14

08018dfc <_localeconv_r>:
 8018dfc:	4800      	ldr	r0, [pc, #0]	; (8018e00 <_localeconv_r+0x4>)
 8018dfe:	4770      	bx	lr
 8018e00:	20000268 	.word	0x20000268

08018e04 <malloc>:
 8018e04:	4b02      	ldr	r3, [pc, #8]	; (8018e10 <malloc+0xc>)
 8018e06:	4601      	mov	r1, r0
 8018e08:	6818      	ldr	r0, [r3, #0]
 8018e0a:	f000 bc09 	b.w	8019620 <_malloc_r>
 8018e0e:	bf00      	nop
 8018e10:	20000114 	.word	0x20000114

08018e14 <_Balloc>:
 8018e14:	b570      	push	{r4, r5, r6, lr}
 8018e16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018e18:	4604      	mov	r4, r0
 8018e1a:	460d      	mov	r5, r1
 8018e1c:	b976      	cbnz	r6, 8018e3c <_Balloc+0x28>
 8018e1e:	2010      	movs	r0, #16
 8018e20:	f7ff fff0 	bl	8018e04 <malloc>
 8018e24:	4602      	mov	r2, r0
 8018e26:	6260      	str	r0, [r4, #36]	; 0x24
 8018e28:	b920      	cbnz	r0, 8018e34 <_Balloc+0x20>
 8018e2a:	4b18      	ldr	r3, [pc, #96]	; (8018e8c <_Balloc+0x78>)
 8018e2c:	4818      	ldr	r0, [pc, #96]	; (8018e90 <_Balloc+0x7c>)
 8018e2e:	2166      	movs	r1, #102	; 0x66
 8018e30:	f000 fc7a 	bl	8019728 <__assert_func>
 8018e34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018e38:	6006      	str	r6, [r0, #0]
 8018e3a:	60c6      	str	r6, [r0, #12]
 8018e3c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8018e3e:	68f3      	ldr	r3, [r6, #12]
 8018e40:	b183      	cbz	r3, 8018e64 <_Balloc+0x50>
 8018e42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018e44:	68db      	ldr	r3, [r3, #12]
 8018e46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018e4a:	b9b8      	cbnz	r0, 8018e7c <_Balloc+0x68>
 8018e4c:	2101      	movs	r1, #1
 8018e4e:	fa01 f605 	lsl.w	r6, r1, r5
 8018e52:	1d72      	adds	r2, r6, #5
 8018e54:	0092      	lsls	r2, r2, #2
 8018e56:	4620      	mov	r0, r4
 8018e58:	f000 fb60 	bl	801951c <_calloc_r>
 8018e5c:	b160      	cbz	r0, 8018e78 <_Balloc+0x64>
 8018e5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018e62:	e00e      	b.n	8018e82 <_Balloc+0x6e>
 8018e64:	2221      	movs	r2, #33	; 0x21
 8018e66:	2104      	movs	r1, #4
 8018e68:	4620      	mov	r0, r4
 8018e6a:	f000 fb57 	bl	801951c <_calloc_r>
 8018e6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018e70:	60f0      	str	r0, [r6, #12]
 8018e72:	68db      	ldr	r3, [r3, #12]
 8018e74:	2b00      	cmp	r3, #0
 8018e76:	d1e4      	bne.n	8018e42 <_Balloc+0x2e>
 8018e78:	2000      	movs	r0, #0
 8018e7a:	bd70      	pop	{r4, r5, r6, pc}
 8018e7c:	6802      	ldr	r2, [r0, #0]
 8018e7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018e82:	2300      	movs	r3, #0
 8018e84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018e88:	e7f7      	b.n	8018e7a <_Balloc+0x66>
 8018e8a:	bf00      	nop
 8018e8c:	0801ad21 	.word	0x0801ad21
 8018e90:	0801ada4 	.word	0x0801ada4

08018e94 <_Bfree>:
 8018e94:	b570      	push	{r4, r5, r6, lr}
 8018e96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018e98:	4605      	mov	r5, r0
 8018e9a:	460c      	mov	r4, r1
 8018e9c:	b976      	cbnz	r6, 8018ebc <_Bfree+0x28>
 8018e9e:	2010      	movs	r0, #16
 8018ea0:	f7ff ffb0 	bl	8018e04 <malloc>
 8018ea4:	4602      	mov	r2, r0
 8018ea6:	6268      	str	r0, [r5, #36]	; 0x24
 8018ea8:	b920      	cbnz	r0, 8018eb4 <_Bfree+0x20>
 8018eaa:	4b09      	ldr	r3, [pc, #36]	; (8018ed0 <_Bfree+0x3c>)
 8018eac:	4809      	ldr	r0, [pc, #36]	; (8018ed4 <_Bfree+0x40>)
 8018eae:	218a      	movs	r1, #138	; 0x8a
 8018eb0:	f000 fc3a 	bl	8019728 <__assert_func>
 8018eb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018eb8:	6006      	str	r6, [r0, #0]
 8018eba:	60c6      	str	r6, [r0, #12]
 8018ebc:	b13c      	cbz	r4, 8018ece <_Bfree+0x3a>
 8018ebe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018ec0:	6862      	ldr	r2, [r4, #4]
 8018ec2:	68db      	ldr	r3, [r3, #12]
 8018ec4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018ec8:	6021      	str	r1, [r4, #0]
 8018eca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018ece:	bd70      	pop	{r4, r5, r6, pc}
 8018ed0:	0801ad21 	.word	0x0801ad21
 8018ed4:	0801ada4 	.word	0x0801ada4

08018ed8 <__multadd>:
 8018ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018edc:	690d      	ldr	r5, [r1, #16]
 8018ede:	4607      	mov	r7, r0
 8018ee0:	460c      	mov	r4, r1
 8018ee2:	461e      	mov	r6, r3
 8018ee4:	f101 0c14 	add.w	ip, r1, #20
 8018ee8:	2000      	movs	r0, #0
 8018eea:	f8dc 3000 	ldr.w	r3, [ip]
 8018eee:	b299      	uxth	r1, r3
 8018ef0:	fb02 6101 	mla	r1, r2, r1, r6
 8018ef4:	0c1e      	lsrs	r6, r3, #16
 8018ef6:	0c0b      	lsrs	r3, r1, #16
 8018ef8:	fb02 3306 	mla	r3, r2, r6, r3
 8018efc:	b289      	uxth	r1, r1
 8018efe:	3001      	adds	r0, #1
 8018f00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018f04:	4285      	cmp	r5, r0
 8018f06:	f84c 1b04 	str.w	r1, [ip], #4
 8018f0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8018f0e:	dcec      	bgt.n	8018eea <__multadd+0x12>
 8018f10:	b30e      	cbz	r6, 8018f56 <__multadd+0x7e>
 8018f12:	68a3      	ldr	r3, [r4, #8]
 8018f14:	42ab      	cmp	r3, r5
 8018f16:	dc19      	bgt.n	8018f4c <__multadd+0x74>
 8018f18:	6861      	ldr	r1, [r4, #4]
 8018f1a:	4638      	mov	r0, r7
 8018f1c:	3101      	adds	r1, #1
 8018f1e:	f7ff ff79 	bl	8018e14 <_Balloc>
 8018f22:	4680      	mov	r8, r0
 8018f24:	b928      	cbnz	r0, 8018f32 <__multadd+0x5a>
 8018f26:	4602      	mov	r2, r0
 8018f28:	4b0c      	ldr	r3, [pc, #48]	; (8018f5c <__multadd+0x84>)
 8018f2a:	480d      	ldr	r0, [pc, #52]	; (8018f60 <__multadd+0x88>)
 8018f2c:	21b5      	movs	r1, #181	; 0xb5
 8018f2e:	f000 fbfb 	bl	8019728 <__assert_func>
 8018f32:	6922      	ldr	r2, [r4, #16]
 8018f34:	3202      	adds	r2, #2
 8018f36:	f104 010c 	add.w	r1, r4, #12
 8018f3a:	0092      	lsls	r2, r2, #2
 8018f3c:	300c      	adds	r0, #12
 8018f3e:	f7fe fd09 	bl	8017954 <memcpy>
 8018f42:	4621      	mov	r1, r4
 8018f44:	4638      	mov	r0, r7
 8018f46:	f7ff ffa5 	bl	8018e94 <_Bfree>
 8018f4a:	4644      	mov	r4, r8
 8018f4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018f50:	3501      	adds	r5, #1
 8018f52:	615e      	str	r6, [r3, #20]
 8018f54:	6125      	str	r5, [r4, #16]
 8018f56:	4620      	mov	r0, r4
 8018f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f5c:	0801ad93 	.word	0x0801ad93
 8018f60:	0801ada4 	.word	0x0801ada4

08018f64 <__hi0bits>:
 8018f64:	0c03      	lsrs	r3, r0, #16
 8018f66:	041b      	lsls	r3, r3, #16
 8018f68:	b9d3      	cbnz	r3, 8018fa0 <__hi0bits+0x3c>
 8018f6a:	0400      	lsls	r0, r0, #16
 8018f6c:	2310      	movs	r3, #16
 8018f6e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8018f72:	bf04      	itt	eq
 8018f74:	0200      	lsleq	r0, r0, #8
 8018f76:	3308      	addeq	r3, #8
 8018f78:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018f7c:	bf04      	itt	eq
 8018f7e:	0100      	lsleq	r0, r0, #4
 8018f80:	3304      	addeq	r3, #4
 8018f82:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8018f86:	bf04      	itt	eq
 8018f88:	0080      	lsleq	r0, r0, #2
 8018f8a:	3302      	addeq	r3, #2
 8018f8c:	2800      	cmp	r0, #0
 8018f8e:	db05      	blt.n	8018f9c <__hi0bits+0x38>
 8018f90:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8018f94:	f103 0301 	add.w	r3, r3, #1
 8018f98:	bf08      	it	eq
 8018f9a:	2320      	moveq	r3, #32
 8018f9c:	4618      	mov	r0, r3
 8018f9e:	4770      	bx	lr
 8018fa0:	2300      	movs	r3, #0
 8018fa2:	e7e4      	b.n	8018f6e <__hi0bits+0xa>

08018fa4 <__lo0bits>:
 8018fa4:	6803      	ldr	r3, [r0, #0]
 8018fa6:	f013 0207 	ands.w	r2, r3, #7
 8018faa:	4601      	mov	r1, r0
 8018fac:	d00b      	beq.n	8018fc6 <__lo0bits+0x22>
 8018fae:	07da      	lsls	r2, r3, #31
 8018fb0:	d423      	bmi.n	8018ffa <__lo0bits+0x56>
 8018fb2:	0798      	lsls	r0, r3, #30
 8018fb4:	bf49      	itett	mi
 8018fb6:	085b      	lsrmi	r3, r3, #1
 8018fb8:	089b      	lsrpl	r3, r3, #2
 8018fba:	2001      	movmi	r0, #1
 8018fbc:	600b      	strmi	r3, [r1, #0]
 8018fbe:	bf5c      	itt	pl
 8018fc0:	600b      	strpl	r3, [r1, #0]
 8018fc2:	2002      	movpl	r0, #2
 8018fc4:	4770      	bx	lr
 8018fc6:	b298      	uxth	r0, r3
 8018fc8:	b9a8      	cbnz	r0, 8018ff6 <__lo0bits+0x52>
 8018fca:	0c1b      	lsrs	r3, r3, #16
 8018fcc:	2010      	movs	r0, #16
 8018fce:	b2da      	uxtb	r2, r3
 8018fd0:	b90a      	cbnz	r2, 8018fd6 <__lo0bits+0x32>
 8018fd2:	3008      	adds	r0, #8
 8018fd4:	0a1b      	lsrs	r3, r3, #8
 8018fd6:	071a      	lsls	r2, r3, #28
 8018fd8:	bf04      	itt	eq
 8018fda:	091b      	lsreq	r3, r3, #4
 8018fdc:	3004      	addeq	r0, #4
 8018fde:	079a      	lsls	r2, r3, #30
 8018fe0:	bf04      	itt	eq
 8018fe2:	089b      	lsreq	r3, r3, #2
 8018fe4:	3002      	addeq	r0, #2
 8018fe6:	07da      	lsls	r2, r3, #31
 8018fe8:	d403      	bmi.n	8018ff2 <__lo0bits+0x4e>
 8018fea:	085b      	lsrs	r3, r3, #1
 8018fec:	f100 0001 	add.w	r0, r0, #1
 8018ff0:	d005      	beq.n	8018ffe <__lo0bits+0x5a>
 8018ff2:	600b      	str	r3, [r1, #0]
 8018ff4:	4770      	bx	lr
 8018ff6:	4610      	mov	r0, r2
 8018ff8:	e7e9      	b.n	8018fce <__lo0bits+0x2a>
 8018ffa:	2000      	movs	r0, #0
 8018ffc:	4770      	bx	lr
 8018ffe:	2020      	movs	r0, #32
 8019000:	4770      	bx	lr
	...

08019004 <__i2b>:
 8019004:	b510      	push	{r4, lr}
 8019006:	460c      	mov	r4, r1
 8019008:	2101      	movs	r1, #1
 801900a:	f7ff ff03 	bl	8018e14 <_Balloc>
 801900e:	4602      	mov	r2, r0
 8019010:	b928      	cbnz	r0, 801901e <__i2b+0x1a>
 8019012:	4b05      	ldr	r3, [pc, #20]	; (8019028 <__i2b+0x24>)
 8019014:	4805      	ldr	r0, [pc, #20]	; (801902c <__i2b+0x28>)
 8019016:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801901a:	f000 fb85 	bl	8019728 <__assert_func>
 801901e:	2301      	movs	r3, #1
 8019020:	6144      	str	r4, [r0, #20]
 8019022:	6103      	str	r3, [r0, #16]
 8019024:	bd10      	pop	{r4, pc}
 8019026:	bf00      	nop
 8019028:	0801ad93 	.word	0x0801ad93
 801902c:	0801ada4 	.word	0x0801ada4

08019030 <__multiply>:
 8019030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019034:	4691      	mov	r9, r2
 8019036:	690a      	ldr	r2, [r1, #16]
 8019038:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801903c:	429a      	cmp	r2, r3
 801903e:	bfb8      	it	lt
 8019040:	460b      	movlt	r3, r1
 8019042:	460c      	mov	r4, r1
 8019044:	bfbc      	itt	lt
 8019046:	464c      	movlt	r4, r9
 8019048:	4699      	movlt	r9, r3
 801904a:	6927      	ldr	r7, [r4, #16]
 801904c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8019050:	68a3      	ldr	r3, [r4, #8]
 8019052:	6861      	ldr	r1, [r4, #4]
 8019054:	eb07 060a 	add.w	r6, r7, sl
 8019058:	42b3      	cmp	r3, r6
 801905a:	b085      	sub	sp, #20
 801905c:	bfb8      	it	lt
 801905e:	3101      	addlt	r1, #1
 8019060:	f7ff fed8 	bl	8018e14 <_Balloc>
 8019064:	b930      	cbnz	r0, 8019074 <__multiply+0x44>
 8019066:	4602      	mov	r2, r0
 8019068:	4b44      	ldr	r3, [pc, #272]	; (801917c <__multiply+0x14c>)
 801906a:	4845      	ldr	r0, [pc, #276]	; (8019180 <__multiply+0x150>)
 801906c:	f240 115d 	movw	r1, #349	; 0x15d
 8019070:	f000 fb5a 	bl	8019728 <__assert_func>
 8019074:	f100 0514 	add.w	r5, r0, #20
 8019078:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801907c:	462b      	mov	r3, r5
 801907e:	2200      	movs	r2, #0
 8019080:	4543      	cmp	r3, r8
 8019082:	d321      	bcc.n	80190c8 <__multiply+0x98>
 8019084:	f104 0314 	add.w	r3, r4, #20
 8019088:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801908c:	f109 0314 	add.w	r3, r9, #20
 8019090:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8019094:	9202      	str	r2, [sp, #8]
 8019096:	1b3a      	subs	r2, r7, r4
 8019098:	3a15      	subs	r2, #21
 801909a:	f022 0203 	bic.w	r2, r2, #3
 801909e:	3204      	adds	r2, #4
 80190a0:	f104 0115 	add.w	r1, r4, #21
 80190a4:	428f      	cmp	r7, r1
 80190a6:	bf38      	it	cc
 80190a8:	2204      	movcc	r2, #4
 80190aa:	9201      	str	r2, [sp, #4]
 80190ac:	9a02      	ldr	r2, [sp, #8]
 80190ae:	9303      	str	r3, [sp, #12]
 80190b0:	429a      	cmp	r2, r3
 80190b2:	d80c      	bhi.n	80190ce <__multiply+0x9e>
 80190b4:	2e00      	cmp	r6, #0
 80190b6:	dd03      	ble.n	80190c0 <__multiply+0x90>
 80190b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80190bc:	2b00      	cmp	r3, #0
 80190be:	d05a      	beq.n	8019176 <__multiply+0x146>
 80190c0:	6106      	str	r6, [r0, #16]
 80190c2:	b005      	add	sp, #20
 80190c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190c8:	f843 2b04 	str.w	r2, [r3], #4
 80190cc:	e7d8      	b.n	8019080 <__multiply+0x50>
 80190ce:	f8b3 a000 	ldrh.w	sl, [r3]
 80190d2:	f1ba 0f00 	cmp.w	sl, #0
 80190d6:	d024      	beq.n	8019122 <__multiply+0xf2>
 80190d8:	f104 0e14 	add.w	lr, r4, #20
 80190dc:	46a9      	mov	r9, r5
 80190de:	f04f 0c00 	mov.w	ip, #0
 80190e2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80190e6:	f8d9 1000 	ldr.w	r1, [r9]
 80190ea:	fa1f fb82 	uxth.w	fp, r2
 80190ee:	b289      	uxth	r1, r1
 80190f0:	fb0a 110b 	mla	r1, sl, fp, r1
 80190f4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80190f8:	f8d9 2000 	ldr.w	r2, [r9]
 80190fc:	4461      	add	r1, ip
 80190fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8019102:	fb0a c20b 	mla	r2, sl, fp, ip
 8019106:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801910a:	b289      	uxth	r1, r1
 801910c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8019110:	4577      	cmp	r7, lr
 8019112:	f849 1b04 	str.w	r1, [r9], #4
 8019116:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801911a:	d8e2      	bhi.n	80190e2 <__multiply+0xb2>
 801911c:	9a01      	ldr	r2, [sp, #4]
 801911e:	f845 c002 	str.w	ip, [r5, r2]
 8019122:	9a03      	ldr	r2, [sp, #12]
 8019124:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8019128:	3304      	adds	r3, #4
 801912a:	f1b9 0f00 	cmp.w	r9, #0
 801912e:	d020      	beq.n	8019172 <__multiply+0x142>
 8019130:	6829      	ldr	r1, [r5, #0]
 8019132:	f104 0c14 	add.w	ip, r4, #20
 8019136:	46ae      	mov	lr, r5
 8019138:	f04f 0a00 	mov.w	sl, #0
 801913c:	f8bc b000 	ldrh.w	fp, [ip]
 8019140:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8019144:	fb09 220b 	mla	r2, r9, fp, r2
 8019148:	4492      	add	sl, r2
 801914a:	b289      	uxth	r1, r1
 801914c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8019150:	f84e 1b04 	str.w	r1, [lr], #4
 8019154:	f85c 2b04 	ldr.w	r2, [ip], #4
 8019158:	f8be 1000 	ldrh.w	r1, [lr]
 801915c:	0c12      	lsrs	r2, r2, #16
 801915e:	fb09 1102 	mla	r1, r9, r2, r1
 8019162:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8019166:	4567      	cmp	r7, ip
 8019168:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801916c:	d8e6      	bhi.n	801913c <__multiply+0x10c>
 801916e:	9a01      	ldr	r2, [sp, #4]
 8019170:	50a9      	str	r1, [r5, r2]
 8019172:	3504      	adds	r5, #4
 8019174:	e79a      	b.n	80190ac <__multiply+0x7c>
 8019176:	3e01      	subs	r6, #1
 8019178:	e79c      	b.n	80190b4 <__multiply+0x84>
 801917a:	bf00      	nop
 801917c:	0801ad93 	.word	0x0801ad93
 8019180:	0801ada4 	.word	0x0801ada4

08019184 <__pow5mult>:
 8019184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019188:	4615      	mov	r5, r2
 801918a:	f012 0203 	ands.w	r2, r2, #3
 801918e:	4606      	mov	r6, r0
 8019190:	460f      	mov	r7, r1
 8019192:	d007      	beq.n	80191a4 <__pow5mult+0x20>
 8019194:	4c25      	ldr	r4, [pc, #148]	; (801922c <__pow5mult+0xa8>)
 8019196:	3a01      	subs	r2, #1
 8019198:	2300      	movs	r3, #0
 801919a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801919e:	f7ff fe9b 	bl	8018ed8 <__multadd>
 80191a2:	4607      	mov	r7, r0
 80191a4:	10ad      	asrs	r5, r5, #2
 80191a6:	d03d      	beq.n	8019224 <__pow5mult+0xa0>
 80191a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80191aa:	b97c      	cbnz	r4, 80191cc <__pow5mult+0x48>
 80191ac:	2010      	movs	r0, #16
 80191ae:	f7ff fe29 	bl	8018e04 <malloc>
 80191b2:	4602      	mov	r2, r0
 80191b4:	6270      	str	r0, [r6, #36]	; 0x24
 80191b6:	b928      	cbnz	r0, 80191c4 <__pow5mult+0x40>
 80191b8:	4b1d      	ldr	r3, [pc, #116]	; (8019230 <__pow5mult+0xac>)
 80191ba:	481e      	ldr	r0, [pc, #120]	; (8019234 <__pow5mult+0xb0>)
 80191bc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80191c0:	f000 fab2 	bl	8019728 <__assert_func>
 80191c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80191c8:	6004      	str	r4, [r0, #0]
 80191ca:	60c4      	str	r4, [r0, #12]
 80191cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80191d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80191d4:	b94c      	cbnz	r4, 80191ea <__pow5mult+0x66>
 80191d6:	f240 2171 	movw	r1, #625	; 0x271
 80191da:	4630      	mov	r0, r6
 80191dc:	f7ff ff12 	bl	8019004 <__i2b>
 80191e0:	2300      	movs	r3, #0
 80191e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80191e6:	4604      	mov	r4, r0
 80191e8:	6003      	str	r3, [r0, #0]
 80191ea:	f04f 0900 	mov.w	r9, #0
 80191ee:	07eb      	lsls	r3, r5, #31
 80191f0:	d50a      	bpl.n	8019208 <__pow5mult+0x84>
 80191f2:	4639      	mov	r1, r7
 80191f4:	4622      	mov	r2, r4
 80191f6:	4630      	mov	r0, r6
 80191f8:	f7ff ff1a 	bl	8019030 <__multiply>
 80191fc:	4639      	mov	r1, r7
 80191fe:	4680      	mov	r8, r0
 8019200:	4630      	mov	r0, r6
 8019202:	f7ff fe47 	bl	8018e94 <_Bfree>
 8019206:	4647      	mov	r7, r8
 8019208:	106d      	asrs	r5, r5, #1
 801920a:	d00b      	beq.n	8019224 <__pow5mult+0xa0>
 801920c:	6820      	ldr	r0, [r4, #0]
 801920e:	b938      	cbnz	r0, 8019220 <__pow5mult+0x9c>
 8019210:	4622      	mov	r2, r4
 8019212:	4621      	mov	r1, r4
 8019214:	4630      	mov	r0, r6
 8019216:	f7ff ff0b 	bl	8019030 <__multiply>
 801921a:	6020      	str	r0, [r4, #0]
 801921c:	f8c0 9000 	str.w	r9, [r0]
 8019220:	4604      	mov	r4, r0
 8019222:	e7e4      	b.n	80191ee <__pow5mult+0x6a>
 8019224:	4638      	mov	r0, r7
 8019226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801922a:	bf00      	nop
 801922c:	0801aef0 	.word	0x0801aef0
 8019230:	0801ad21 	.word	0x0801ad21
 8019234:	0801ada4 	.word	0x0801ada4

08019238 <__lshift>:
 8019238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801923c:	460c      	mov	r4, r1
 801923e:	6849      	ldr	r1, [r1, #4]
 8019240:	6923      	ldr	r3, [r4, #16]
 8019242:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019246:	68a3      	ldr	r3, [r4, #8]
 8019248:	4607      	mov	r7, r0
 801924a:	4691      	mov	r9, r2
 801924c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019250:	f108 0601 	add.w	r6, r8, #1
 8019254:	42b3      	cmp	r3, r6
 8019256:	db0b      	blt.n	8019270 <__lshift+0x38>
 8019258:	4638      	mov	r0, r7
 801925a:	f7ff fddb 	bl	8018e14 <_Balloc>
 801925e:	4605      	mov	r5, r0
 8019260:	b948      	cbnz	r0, 8019276 <__lshift+0x3e>
 8019262:	4602      	mov	r2, r0
 8019264:	4b2a      	ldr	r3, [pc, #168]	; (8019310 <__lshift+0xd8>)
 8019266:	482b      	ldr	r0, [pc, #172]	; (8019314 <__lshift+0xdc>)
 8019268:	f240 11d9 	movw	r1, #473	; 0x1d9
 801926c:	f000 fa5c 	bl	8019728 <__assert_func>
 8019270:	3101      	adds	r1, #1
 8019272:	005b      	lsls	r3, r3, #1
 8019274:	e7ee      	b.n	8019254 <__lshift+0x1c>
 8019276:	2300      	movs	r3, #0
 8019278:	f100 0114 	add.w	r1, r0, #20
 801927c:	f100 0210 	add.w	r2, r0, #16
 8019280:	4618      	mov	r0, r3
 8019282:	4553      	cmp	r3, sl
 8019284:	db37      	blt.n	80192f6 <__lshift+0xbe>
 8019286:	6920      	ldr	r0, [r4, #16]
 8019288:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801928c:	f104 0314 	add.w	r3, r4, #20
 8019290:	f019 091f 	ands.w	r9, r9, #31
 8019294:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019298:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801929c:	d02f      	beq.n	80192fe <__lshift+0xc6>
 801929e:	f1c9 0e20 	rsb	lr, r9, #32
 80192a2:	468a      	mov	sl, r1
 80192a4:	f04f 0c00 	mov.w	ip, #0
 80192a8:	681a      	ldr	r2, [r3, #0]
 80192aa:	fa02 f209 	lsl.w	r2, r2, r9
 80192ae:	ea42 020c 	orr.w	r2, r2, ip
 80192b2:	f84a 2b04 	str.w	r2, [sl], #4
 80192b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80192ba:	4298      	cmp	r0, r3
 80192bc:	fa22 fc0e 	lsr.w	ip, r2, lr
 80192c0:	d8f2      	bhi.n	80192a8 <__lshift+0x70>
 80192c2:	1b03      	subs	r3, r0, r4
 80192c4:	3b15      	subs	r3, #21
 80192c6:	f023 0303 	bic.w	r3, r3, #3
 80192ca:	3304      	adds	r3, #4
 80192cc:	f104 0215 	add.w	r2, r4, #21
 80192d0:	4290      	cmp	r0, r2
 80192d2:	bf38      	it	cc
 80192d4:	2304      	movcc	r3, #4
 80192d6:	f841 c003 	str.w	ip, [r1, r3]
 80192da:	f1bc 0f00 	cmp.w	ip, #0
 80192de:	d001      	beq.n	80192e4 <__lshift+0xac>
 80192e0:	f108 0602 	add.w	r6, r8, #2
 80192e4:	3e01      	subs	r6, #1
 80192e6:	4638      	mov	r0, r7
 80192e8:	612e      	str	r6, [r5, #16]
 80192ea:	4621      	mov	r1, r4
 80192ec:	f7ff fdd2 	bl	8018e94 <_Bfree>
 80192f0:	4628      	mov	r0, r5
 80192f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80192f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80192fa:	3301      	adds	r3, #1
 80192fc:	e7c1      	b.n	8019282 <__lshift+0x4a>
 80192fe:	3904      	subs	r1, #4
 8019300:	f853 2b04 	ldr.w	r2, [r3], #4
 8019304:	f841 2f04 	str.w	r2, [r1, #4]!
 8019308:	4298      	cmp	r0, r3
 801930a:	d8f9      	bhi.n	8019300 <__lshift+0xc8>
 801930c:	e7ea      	b.n	80192e4 <__lshift+0xac>
 801930e:	bf00      	nop
 8019310:	0801ad93 	.word	0x0801ad93
 8019314:	0801ada4 	.word	0x0801ada4

08019318 <__mcmp>:
 8019318:	b530      	push	{r4, r5, lr}
 801931a:	6902      	ldr	r2, [r0, #16]
 801931c:	690c      	ldr	r4, [r1, #16]
 801931e:	1b12      	subs	r2, r2, r4
 8019320:	d10e      	bne.n	8019340 <__mcmp+0x28>
 8019322:	f100 0314 	add.w	r3, r0, #20
 8019326:	3114      	adds	r1, #20
 8019328:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801932c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8019330:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019334:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8019338:	42a5      	cmp	r5, r4
 801933a:	d003      	beq.n	8019344 <__mcmp+0x2c>
 801933c:	d305      	bcc.n	801934a <__mcmp+0x32>
 801933e:	2201      	movs	r2, #1
 8019340:	4610      	mov	r0, r2
 8019342:	bd30      	pop	{r4, r5, pc}
 8019344:	4283      	cmp	r3, r0
 8019346:	d3f3      	bcc.n	8019330 <__mcmp+0x18>
 8019348:	e7fa      	b.n	8019340 <__mcmp+0x28>
 801934a:	f04f 32ff 	mov.w	r2, #4294967295
 801934e:	e7f7      	b.n	8019340 <__mcmp+0x28>

08019350 <__mdiff>:
 8019350:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019354:	460c      	mov	r4, r1
 8019356:	4606      	mov	r6, r0
 8019358:	4611      	mov	r1, r2
 801935a:	4620      	mov	r0, r4
 801935c:	4690      	mov	r8, r2
 801935e:	f7ff ffdb 	bl	8019318 <__mcmp>
 8019362:	1e05      	subs	r5, r0, #0
 8019364:	d110      	bne.n	8019388 <__mdiff+0x38>
 8019366:	4629      	mov	r1, r5
 8019368:	4630      	mov	r0, r6
 801936a:	f7ff fd53 	bl	8018e14 <_Balloc>
 801936e:	b930      	cbnz	r0, 801937e <__mdiff+0x2e>
 8019370:	4b3a      	ldr	r3, [pc, #232]	; (801945c <__mdiff+0x10c>)
 8019372:	4602      	mov	r2, r0
 8019374:	f240 2132 	movw	r1, #562	; 0x232
 8019378:	4839      	ldr	r0, [pc, #228]	; (8019460 <__mdiff+0x110>)
 801937a:	f000 f9d5 	bl	8019728 <__assert_func>
 801937e:	2301      	movs	r3, #1
 8019380:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019384:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019388:	bfa4      	itt	ge
 801938a:	4643      	movge	r3, r8
 801938c:	46a0      	movge	r8, r4
 801938e:	4630      	mov	r0, r6
 8019390:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8019394:	bfa6      	itte	ge
 8019396:	461c      	movge	r4, r3
 8019398:	2500      	movge	r5, #0
 801939a:	2501      	movlt	r5, #1
 801939c:	f7ff fd3a 	bl	8018e14 <_Balloc>
 80193a0:	b920      	cbnz	r0, 80193ac <__mdiff+0x5c>
 80193a2:	4b2e      	ldr	r3, [pc, #184]	; (801945c <__mdiff+0x10c>)
 80193a4:	4602      	mov	r2, r0
 80193a6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80193aa:	e7e5      	b.n	8019378 <__mdiff+0x28>
 80193ac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80193b0:	6926      	ldr	r6, [r4, #16]
 80193b2:	60c5      	str	r5, [r0, #12]
 80193b4:	f104 0914 	add.w	r9, r4, #20
 80193b8:	f108 0514 	add.w	r5, r8, #20
 80193bc:	f100 0e14 	add.w	lr, r0, #20
 80193c0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80193c4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80193c8:	f108 0210 	add.w	r2, r8, #16
 80193cc:	46f2      	mov	sl, lr
 80193ce:	2100      	movs	r1, #0
 80193d0:	f859 3b04 	ldr.w	r3, [r9], #4
 80193d4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80193d8:	fa1f f883 	uxth.w	r8, r3
 80193dc:	fa11 f18b 	uxtah	r1, r1, fp
 80193e0:	0c1b      	lsrs	r3, r3, #16
 80193e2:	eba1 0808 	sub.w	r8, r1, r8
 80193e6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80193ea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80193ee:	fa1f f888 	uxth.w	r8, r8
 80193f2:	1419      	asrs	r1, r3, #16
 80193f4:	454e      	cmp	r6, r9
 80193f6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80193fa:	f84a 3b04 	str.w	r3, [sl], #4
 80193fe:	d8e7      	bhi.n	80193d0 <__mdiff+0x80>
 8019400:	1b33      	subs	r3, r6, r4
 8019402:	3b15      	subs	r3, #21
 8019404:	f023 0303 	bic.w	r3, r3, #3
 8019408:	3304      	adds	r3, #4
 801940a:	3415      	adds	r4, #21
 801940c:	42a6      	cmp	r6, r4
 801940e:	bf38      	it	cc
 8019410:	2304      	movcc	r3, #4
 8019412:	441d      	add	r5, r3
 8019414:	4473      	add	r3, lr
 8019416:	469e      	mov	lr, r3
 8019418:	462e      	mov	r6, r5
 801941a:	4566      	cmp	r6, ip
 801941c:	d30e      	bcc.n	801943c <__mdiff+0xec>
 801941e:	f10c 0203 	add.w	r2, ip, #3
 8019422:	1b52      	subs	r2, r2, r5
 8019424:	f022 0203 	bic.w	r2, r2, #3
 8019428:	3d03      	subs	r5, #3
 801942a:	45ac      	cmp	ip, r5
 801942c:	bf38      	it	cc
 801942e:	2200      	movcc	r2, #0
 8019430:	441a      	add	r2, r3
 8019432:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8019436:	b17b      	cbz	r3, 8019458 <__mdiff+0x108>
 8019438:	6107      	str	r7, [r0, #16]
 801943a:	e7a3      	b.n	8019384 <__mdiff+0x34>
 801943c:	f856 8b04 	ldr.w	r8, [r6], #4
 8019440:	fa11 f288 	uxtah	r2, r1, r8
 8019444:	1414      	asrs	r4, r2, #16
 8019446:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801944a:	b292      	uxth	r2, r2
 801944c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8019450:	f84e 2b04 	str.w	r2, [lr], #4
 8019454:	1421      	asrs	r1, r4, #16
 8019456:	e7e0      	b.n	801941a <__mdiff+0xca>
 8019458:	3f01      	subs	r7, #1
 801945a:	e7ea      	b.n	8019432 <__mdiff+0xe2>
 801945c:	0801ad93 	.word	0x0801ad93
 8019460:	0801ada4 	.word	0x0801ada4

08019464 <__d2b>:
 8019464:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019468:	4689      	mov	r9, r1
 801946a:	2101      	movs	r1, #1
 801946c:	ec57 6b10 	vmov	r6, r7, d0
 8019470:	4690      	mov	r8, r2
 8019472:	f7ff fccf 	bl	8018e14 <_Balloc>
 8019476:	4604      	mov	r4, r0
 8019478:	b930      	cbnz	r0, 8019488 <__d2b+0x24>
 801947a:	4602      	mov	r2, r0
 801947c:	4b25      	ldr	r3, [pc, #148]	; (8019514 <__d2b+0xb0>)
 801947e:	4826      	ldr	r0, [pc, #152]	; (8019518 <__d2b+0xb4>)
 8019480:	f240 310a 	movw	r1, #778	; 0x30a
 8019484:	f000 f950 	bl	8019728 <__assert_func>
 8019488:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801948c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8019490:	bb35      	cbnz	r5, 80194e0 <__d2b+0x7c>
 8019492:	2e00      	cmp	r6, #0
 8019494:	9301      	str	r3, [sp, #4]
 8019496:	d028      	beq.n	80194ea <__d2b+0x86>
 8019498:	4668      	mov	r0, sp
 801949a:	9600      	str	r6, [sp, #0]
 801949c:	f7ff fd82 	bl	8018fa4 <__lo0bits>
 80194a0:	9900      	ldr	r1, [sp, #0]
 80194a2:	b300      	cbz	r0, 80194e6 <__d2b+0x82>
 80194a4:	9a01      	ldr	r2, [sp, #4]
 80194a6:	f1c0 0320 	rsb	r3, r0, #32
 80194aa:	fa02 f303 	lsl.w	r3, r2, r3
 80194ae:	430b      	orrs	r3, r1
 80194b0:	40c2      	lsrs	r2, r0
 80194b2:	6163      	str	r3, [r4, #20]
 80194b4:	9201      	str	r2, [sp, #4]
 80194b6:	9b01      	ldr	r3, [sp, #4]
 80194b8:	61a3      	str	r3, [r4, #24]
 80194ba:	2b00      	cmp	r3, #0
 80194bc:	bf14      	ite	ne
 80194be:	2202      	movne	r2, #2
 80194c0:	2201      	moveq	r2, #1
 80194c2:	6122      	str	r2, [r4, #16]
 80194c4:	b1d5      	cbz	r5, 80194fc <__d2b+0x98>
 80194c6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80194ca:	4405      	add	r5, r0
 80194cc:	f8c9 5000 	str.w	r5, [r9]
 80194d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80194d4:	f8c8 0000 	str.w	r0, [r8]
 80194d8:	4620      	mov	r0, r4
 80194da:	b003      	add	sp, #12
 80194dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80194e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80194e4:	e7d5      	b.n	8019492 <__d2b+0x2e>
 80194e6:	6161      	str	r1, [r4, #20]
 80194e8:	e7e5      	b.n	80194b6 <__d2b+0x52>
 80194ea:	a801      	add	r0, sp, #4
 80194ec:	f7ff fd5a 	bl	8018fa4 <__lo0bits>
 80194f0:	9b01      	ldr	r3, [sp, #4]
 80194f2:	6163      	str	r3, [r4, #20]
 80194f4:	2201      	movs	r2, #1
 80194f6:	6122      	str	r2, [r4, #16]
 80194f8:	3020      	adds	r0, #32
 80194fa:	e7e3      	b.n	80194c4 <__d2b+0x60>
 80194fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019500:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019504:	f8c9 0000 	str.w	r0, [r9]
 8019508:	6918      	ldr	r0, [r3, #16]
 801950a:	f7ff fd2b 	bl	8018f64 <__hi0bits>
 801950e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019512:	e7df      	b.n	80194d4 <__d2b+0x70>
 8019514:	0801ad93 	.word	0x0801ad93
 8019518:	0801ada4 	.word	0x0801ada4

0801951c <_calloc_r>:
 801951c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801951e:	fba1 2402 	umull	r2, r4, r1, r2
 8019522:	b94c      	cbnz	r4, 8019538 <_calloc_r+0x1c>
 8019524:	4611      	mov	r1, r2
 8019526:	9201      	str	r2, [sp, #4]
 8019528:	f000 f87a 	bl	8019620 <_malloc_r>
 801952c:	9a01      	ldr	r2, [sp, #4]
 801952e:	4605      	mov	r5, r0
 8019530:	b930      	cbnz	r0, 8019540 <_calloc_r+0x24>
 8019532:	4628      	mov	r0, r5
 8019534:	b003      	add	sp, #12
 8019536:	bd30      	pop	{r4, r5, pc}
 8019538:	220c      	movs	r2, #12
 801953a:	6002      	str	r2, [r0, #0]
 801953c:	2500      	movs	r5, #0
 801953e:	e7f8      	b.n	8019532 <_calloc_r+0x16>
 8019540:	4621      	mov	r1, r4
 8019542:	f7fe fa15 	bl	8017970 <memset>
 8019546:	e7f4      	b.n	8019532 <_calloc_r+0x16>

08019548 <_free_r>:
 8019548:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801954a:	2900      	cmp	r1, #0
 801954c:	d044      	beq.n	80195d8 <_free_r+0x90>
 801954e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019552:	9001      	str	r0, [sp, #4]
 8019554:	2b00      	cmp	r3, #0
 8019556:	f1a1 0404 	sub.w	r4, r1, #4
 801955a:	bfb8      	it	lt
 801955c:	18e4      	addlt	r4, r4, r3
 801955e:	f000 f925 	bl	80197ac <__malloc_lock>
 8019562:	4a1e      	ldr	r2, [pc, #120]	; (80195dc <_free_r+0x94>)
 8019564:	9801      	ldr	r0, [sp, #4]
 8019566:	6813      	ldr	r3, [r2, #0]
 8019568:	b933      	cbnz	r3, 8019578 <_free_r+0x30>
 801956a:	6063      	str	r3, [r4, #4]
 801956c:	6014      	str	r4, [r2, #0]
 801956e:	b003      	add	sp, #12
 8019570:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019574:	f000 b920 	b.w	80197b8 <__malloc_unlock>
 8019578:	42a3      	cmp	r3, r4
 801957a:	d908      	bls.n	801958e <_free_r+0x46>
 801957c:	6825      	ldr	r5, [r4, #0]
 801957e:	1961      	adds	r1, r4, r5
 8019580:	428b      	cmp	r3, r1
 8019582:	bf01      	itttt	eq
 8019584:	6819      	ldreq	r1, [r3, #0]
 8019586:	685b      	ldreq	r3, [r3, #4]
 8019588:	1949      	addeq	r1, r1, r5
 801958a:	6021      	streq	r1, [r4, #0]
 801958c:	e7ed      	b.n	801956a <_free_r+0x22>
 801958e:	461a      	mov	r2, r3
 8019590:	685b      	ldr	r3, [r3, #4]
 8019592:	b10b      	cbz	r3, 8019598 <_free_r+0x50>
 8019594:	42a3      	cmp	r3, r4
 8019596:	d9fa      	bls.n	801958e <_free_r+0x46>
 8019598:	6811      	ldr	r1, [r2, #0]
 801959a:	1855      	adds	r5, r2, r1
 801959c:	42a5      	cmp	r5, r4
 801959e:	d10b      	bne.n	80195b8 <_free_r+0x70>
 80195a0:	6824      	ldr	r4, [r4, #0]
 80195a2:	4421      	add	r1, r4
 80195a4:	1854      	adds	r4, r2, r1
 80195a6:	42a3      	cmp	r3, r4
 80195a8:	6011      	str	r1, [r2, #0]
 80195aa:	d1e0      	bne.n	801956e <_free_r+0x26>
 80195ac:	681c      	ldr	r4, [r3, #0]
 80195ae:	685b      	ldr	r3, [r3, #4]
 80195b0:	6053      	str	r3, [r2, #4]
 80195b2:	4421      	add	r1, r4
 80195b4:	6011      	str	r1, [r2, #0]
 80195b6:	e7da      	b.n	801956e <_free_r+0x26>
 80195b8:	d902      	bls.n	80195c0 <_free_r+0x78>
 80195ba:	230c      	movs	r3, #12
 80195bc:	6003      	str	r3, [r0, #0]
 80195be:	e7d6      	b.n	801956e <_free_r+0x26>
 80195c0:	6825      	ldr	r5, [r4, #0]
 80195c2:	1961      	adds	r1, r4, r5
 80195c4:	428b      	cmp	r3, r1
 80195c6:	bf04      	itt	eq
 80195c8:	6819      	ldreq	r1, [r3, #0]
 80195ca:	685b      	ldreq	r3, [r3, #4]
 80195cc:	6063      	str	r3, [r4, #4]
 80195ce:	bf04      	itt	eq
 80195d0:	1949      	addeq	r1, r1, r5
 80195d2:	6021      	streq	r1, [r4, #0]
 80195d4:	6054      	str	r4, [r2, #4]
 80195d6:	e7ca      	b.n	801956e <_free_r+0x26>
 80195d8:	b003      	add	sp, #12
 80195da:	bd30      	pop	{r4, r5, pc}
 80195dc:	20002c68 	.word	0x20002c68

080195e0 <sbrk_aligned>:
 80195e0:	b570      	push	{r4, r5, r6, lr}
 80195e2:	4e0e      	ldr	r6, [pc, #56]	; (801961c <sbrk_aligned+0x3c>)
 80195e4:	460c      	mov	r4, r1
 80195e6:	6831      	ldr	r1, [r6, #0]
 80195e8:	4605      	mov	r5, r0
 80195ea:	b911      	cbnz	r1, 80195f2 <sbrk_aligned+0x12>
 80195ec:	f000 f88c 	bl	8019708 <_sbrk_r>
 80195f0:	6030      	str	r0, [r6, #0]
 80195f2:	4621      	mov	r1, r4
 80195f4:	4628      	mov	r0, r5
 80195f6:	f000 f887 	bl	8019708 <_sbrk_r>
 80195fa:	1c43      	adds	r3, r0, #1
 80195fc:	d00a      	beq.n	8019614 <sbrk_aligned+0x34>
 80195fe:	1cc4      	adds	r4, r0, #3
 8019600:	f024 0403 	bic.w	r4, r4, #3
 8019604:	42a0      	cmp	r0, r4
 8019606:	d007      	beq.n	8019618 <sbrk_aligned+0x38>
 8019608:	1a21      	subs	r1, r4, r0
 801960a:	4628      	mov	r0, r5
 801960c:	f000 f87c 	bl	8019708 <_sbrk_r>
 8019610:	3001      	adds	r0, #1
 8019612:	d101      	bne.n	8019618 <sbrk_aligned+0x38>
 8019614:	f04f 34ff 	mov.w	r4, #4294967295
 8019618:	4620      	mov	r0, r4
 801961a:	bd70      	pop	{r4, r5, r6, pc}
 801961c:	20002c6c 	.word	0x20002c6c

08019620 <_malloc_r>:
 8019620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019624:	1ccd      	adds	r5, r1, #3
 8019626:	f025 0503 	bic.w	r5, r5, #3
 801962a:	3508      	adds	r5, #8
 801962c:	2d0c      	cmp	r5, #12
 801962e:	bf38      	it	cc
 8019630:	250c      	movcc	r5, #12
 8019632:	2d00      	cmp	r5, #0
 8019634:	4607      	mov	r7, r0
 8019636:	db01      	blt.n	801963c <_malloc_r+0x1c>
 8019638:	42a9      	cmp	r1, r5
 801963a:	d905      	bls.n	8019648 <_malloc_r+0x28>
 801963c:	230c      	movs	r3, #12
 801963e:	603b      	str	r3, [r7, #0]
 8019640:	2600      	movs	r6, #0
 8019642:	4630      	mov	r0, r6
 8019644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019648:	4e2e      	ldr	r6, [pc, #184]	; (8019704 <_malloc_r+0xe4>)
 801964a:	f000 f8af 	bl	80197ac <__malloc_lock>
 801964e:	6833      	ldr	r3, [r6, #0]
 8019650:	461c      	mov	r4, r3
 8019652:	bb34      	cbnz	r4, 80196a2 <_malloc_r+0x82>
 8019654:	4629      	mov	r1, r5
 8019656:	4638      	mov	r0, r7
 8019658:	f7ff ffc2 	bl	80195e0 <sbrk_aligned>
 801965c:	1c43      	adds	r3, r0, #1
 801965e:	4604      	mov	r4, r0
 8019660:	d14d      	bne.n	80196fe <_malloc_r+0xde>
 8019662:	6834      	ldr	r4, [r6, #0]
 8019664:	4626      	mov	r6, r4
 8019666:	2e00      	cmp	r6, #0
 8019668:	d140      	bne.n	80196ec <_malloc_r+0xcc>
 801966a:	6823      	ldr	r3, [r4, #0]
 801966c:	4631      	mov	r1, r6
 801966e:	4638      	mov	r0, r7
 8019670:	eb04 0803 	add.w	r8, r4, r3
 8019674:	f000 f848 	bl	8019708 <_sbrk_r>
 8019678:	4580      	cmp	r8, r0
 801967a:	d13a      	bne.n	80196f2 <_malloc_r+0xd2>
 801967c:	6821      	ldr	r1, [r4, #0]
 801967e:	3503      	adds	r5, #3
 8019680:	1a6d      	subs	r5, r5, r1
 8019682:	f025 0503 	bic.w	r5, r5, #3
 8019686:	3508      	adds	r5, #8
 8019688:	2d0c      	cmp	r5, #12
 801968a:	bf38      	it	cc
 801968c:	250c      	movcc	r5, #12
 801968e:	4629      	mov	r1, r5
 8019690:	4638      	mov	r0, r7
 8019692:	f7ff ffa5 	bl	80195e0 <sbrk_aligned>
 8019696:	3001      	adds	r0, #1
 8019698:	d02b      	beq.n	80196f2 <_malloc_r+0xd2>
 801969a:	6823      	ldr	r3, [r4, #0]
 801969c:	442b      	add	r3, r5
 801969e:	6023      	str	r3, [r4, #0]
 80196a0:	e00e      	b.n	80196c0 <_malloc_r+0xa0>
 80196a2:	6822      	ldr	r2, [r4, #0]
 80196a4:	1b52      	subs	r2, r2, r5
 80196a6:	d41e      	bmi.n	80196e6 <_malloc_r+0xc6>
 80196a8:	2a0b      	cmp	r2, #11
 80196aa:	d916      	bls.n	80196da <_malloc_r+0xba>
 80196ac:	1961      	adds	r1, r4, r5
 80196ae:	42a3      	cmp	r3, r4
 80196b0:	6025      	str	r5, [r4, #0]
 80196b2:	bf18      	it	ne
 80196b4:	6059      	strne	r1, [r3, #4]
 80196b6:	6863      	ldr	r3, [r4, #4]
 80196b8:	bf08      	it	eq
 80196ba:	6031      	streq	r1, [r6, #0]
 80196bc:	5162      	str	r2, [r4, r5]
 80196be:	604b      	str	r3, [r1, #4]
 80196c0:	4638      	mov	r0, r7
 80196c2:	f104 060b 	add.w	r6, r4, #11
 80196c6:	f000 f877 	bl	80197b8 <__malloc_unlock>
 80196ca:	f026 0607 	bic.w	r6, r6, #7
 80196ce:	1d23      	adds	r3, r4, #4
 80196d0:	1af2      	subs	r2, r6, r3
 80196d2:	d0b6      	beq.n	8019642 <_malloc_r+0x22>
 80196d4:	1b9b      	subs	r3, r3, r6
 80196d6:	50a3      	str	r3, [r4, r2]
 80196d8:	e7b3      	b.n	8019642 <_malloc_r+0x22>
 80196da:	6862      	ldr	r2, [r4, #4]
 80196dc:	42a3      	cmp	r3, r4
 80196de:	bf0c      	ite	eq
 80196e0:	6032      	streq	r2, [r6, #0]
 80196e2:	605a      	strne	r2, [r3, #4]
 80196e4:	e7ec      	b.n	80196c0 <_malloc_r+0xa0>
 80196e6:	4623      	mov	r3, r4
 80196e8:	6864      	ldr	r4, [r4, #4]
 80196ea:	e7b2      	b.n	8019652 <_malloc_r+0x32>
 80196ec:	4634      	mov	r4, r6
 80196ee:	6876      	ldr	r6, [r6, #4]
 80196f0:	e7b9      	b.n	8019666 <_malloc_r+0x46>
 80196f2:	230c      	movs	r3, #12
 80196f4:	603b      	str	r3, [r7, #0]
 80196f6:	4638      	mov	r0, r7
 80196f8:	f000 f85e 	bl	80197b8 <__malloc_unlock>
 80196fc:	e7a1      	b.n	8019642 <_malloc_r+0x22>
 80196fe:	6025      	str	r5, [r4, #0]
 8019700:	e7de      	b.n	80196c0 <_malloc_r+0xa0>
 8019702:	bf00      	nop
 8019704:	20002c68 	.word	0x20002c68

08019708 <_sbrk_r>:
 8019708:	b538      	push	{r3, r4, r5, lr}
 801970a:	4d06      	ldr	r5, [pc, #24]	; (8019724 <_sbrk_r+0x1c>)
 801970c:	2300      	movs	r3, #0
 801970e:	4604      	mov	r4, r0
 8019710:	4608      	mov	r0, r1
 8019712:	602b      	str	r3, [r5, #0]
 8019714:	f7ea fed0 	bl	80044b8 <_sbrk>
 8019718:	1c43      	adds	r3, r0, #1
 801971a:	d102      	bne.n	8019722 <_sbrk_r+0x1a>
 801971c:	682b      	ldr	r3, [r5, #0]
 801971e:	b103      	cbz	r3, 8019722 <_sbrk_r+0x1a>
 8019720:	6023      	str	r3, [r4, #0]
 8019722:	bd38      	pop	{r3, r4, r5, pc}
 8019724:	20002c70 	.word	0x20002c70

08019728 <__assert_func>:
 8019728:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801972a:	4614      	mov	r4, r2
 801972c:	461a      	mov	r2, r3
 801972e:	4b09      	ldr	r3, [pc, #36]	; (8019754 <__assert_func+0x2c>)
 8019730:	681b      	ldr	r3, [r3, #0]
 8019732:	4605      	mov	r5, r0
 8019734:	68d8      	ldr	r0, [r3, #12]
 8019736:	b14c      	cbz	r4, 801974c <__assert_func+0x24>
 8019738:	4b07      	ldr	r3, [pc, #28]	; (8019758 <__assert_func+0x30>)
 801973a:	9100      	str	r1, [sp, #0]
 801973c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019740:	4906      	ldr	r1, [pc, #24]	; (801975c <__assert_func+0x34>)
 8019742:	462b      	mov	r3, r5
 8019744:	f000 f80e 	bl	8019764 <fiprintf>
 8019748:	f000 fa64 	bl	8019c14 <abort>
 801974c:	4b04      	ldr	r3, [pc, #16]	; (8019760 <__assert_func+0x38>)
 801974e:	461c      	mov	r4, r3
 8019750:	e7f3      	b.n	801973a <__assert_func+0x12>
 8019752:	bf00      	nop
 8019754:	20000114 	.word	0x20000114
 8019758:	0801aefc 	.word	0x0801aefc
 801975c:	0801af09 	.word	0x0801af09
 8019760:	0801af37 	.word	0x0801af37

08019764 <fiprintf>:
 8019764:	b40e      	push	{r1, r2, r3}
 8019766:	b503      	push	{r0, r1, lr}
 8019768:	4601      	mov	r1, r0
 801976a:	ab03      	add	r3, sp, #12
 801976c:	4805      	ldr	r0, [pc, #20]	; (8019784 <fiprintf+0x20>)
 801976e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019772:	6800      	ldr	r0, [r0, #0]
 8019774:	9301      	str	r3, [sp, #4]
 8019776:	f000 f84f 	bl	8019818 <_vfiprintf_r>
 801977a:	b002      	add	sp, #8
 801977c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019780:	b003      	add	sp, #12
 8019782:	4770      	bx	lr
 8019784:	20000114 	.word	0x20000114

08019788 <__ascii_mbtowc>:
 8019788:	b082      	sub	sp, #8
 801978a:	b901      	cbnz	r1, 801978e <__ascii_mbtowc+0x6>
 801978c:	a901      	add	r1, sp, #4
 801978e:	b142      	cbz	r2, 80197a2 <__ascii_mbtowc+0x1a>
 8019790:	b14b      	cbz	r3, 80197a6 <__ascii_mbtowc+0x1e>
 8019792:	7813      	ldrb	r3, [r2, #0]
 8019794:	600b      	str	r3, [r1, #0]
 8019796:	7812      	ldrb	r2, [r2, #0]
 8019798:	1e10      	subs	r0, r2, #0
 801979a:	bf18      	it	ne
 801979c:	2001      	movne	r0, #1
 801979e:	b002      	add	sp, #8
 80197a0:	4770      	bx	lr
 80197a2:	4610      	mov	r0, r2
 80197a4:	e7fb      	b.n	801979e <__ascii_mbtowc+0x16>
 80197a6:	f06f 0001 	mvn.w	r0, #1
 80197aa:	e7f8      	b.n	801979e <__ascii_mbtowc+0x16>

080197ac <__malloc_lock>:
 80197ac:	4801      	ldr	r0, [pc, #4]	; (80197b4 <__malloc_lock+0x8>)
 80197ae:	f000 bbf1 	b.w	8019f94 <__retarget_lock_acquire_recursive>
 80197b2:	bf00      	nop
 80197b4:	20002c74 	.word	0x20002c74

080197b8 <__malloc_unlock>:
 80197b8:	4801      	ldr	r0, [pc, #4]	; (80197c0 <__malloc_unlock+0x8>)
 80197ba:	f000 bbec 	b.w	8019f96 <__retarget_lock_release_recursive>
 80197be:	bf00      	nop
 80197c0:	20002c74 	.word	0x20002c74

080197c4 <__sfputc_r>:
 80197c4:	6893      	ldr	r3, [r2, #8]
 80197c6:	3b01      	subs	r3, #1
 80197c8:	2b00      	cmp	r3, #0
 80197ca:	b410      	push	{r4}
 80197cc:	6093      	str	r3, [r2, #8]
 80197ce:	da08      	bge.n	80197e2 <__sfputc_r+0x1e>
 80197d0:	6994      	ldr	r4, [r2, #24]
 80197d2:	42a3      	cmp	r3, r4
 80197d4:	db01      	blt.n	80197da <__sfputc_r+0x16>
 80197d6:	290a      	cmp	r1, #10
 80197d8:	d103      	bne.n	80197e2 <__sfputc_r+0x1e>
 80197da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80197de:	f000 b94b 	b.w	8019a78 <__swbuf_r>
 80197e2:	6813      	ldr	r3, [r2, #0]
 80197e4:	1c58      	adds	r0, r3, #1
 80197e6:	6010      	str	r0, [r2, #0]
 80197e8:	7019      	strb	r1, [r3, #0]
 80197ea:	4608      	mov	r0, r1
 80197ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80197f0:	4770      	bx	lr

080197f2 <__sfputs_r>:
 80197f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197f4:	4606      	mov	r6, r0
 80197f6:	460f      	mov	r7, r1
 80197f8:	4614      	mov	r4, r2
 80197fa:	18d5      	adds	r5, r2, r3
 80197fc:	42ac      	cmp	r4, r5
 80197fe:	d101      	bne.n	8019804 <__sfputs_r+0x12>
 8019800:	2000      	movs	r0, #0
 8019802:	e007      	b.n	8019814 <__sfputs_r+0x22>
 8019804:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019808:	463a      	mov	r2, r7
 801980a:	4630      	mov	r0, r6
 801980c:	f7ff ffda 	bl	80197c4 <__sfputc_r>
 8019810:	1c43      	adds	r3, r0, #1
 8019812:	d1f3      	bne.n	80197fc <__sfputs_r+0xa>
 8019814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019818 <_vfiprintf_r>:
 8019818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801981c:	460d      	mov	r5, r1
 801981e:	b09d      	sub	sp, #116	; 0x74
 8019820:	4614      	mov	r4, r2
 8019822:	4698      	mov	r8, r3
 8019824:	4606      	mov	r6, r0
 8019826:	b118      	cbz	r0, 8019830 <_vfiprintf_r+0x18>
 8019828:	6983      	ldr	r3, [r0, #24]
 801982a:	b90b      	cbnz	r3, 8019830 <_vfiprintf_r+0x18>
 801982c:	f000 fb14 	bl	8019e58 <__sinit>
 8019830:	4b89      	ldr	r3, [pc, #548]	; (8019a58 <_vfiprintf_r+0x240>)
 8019832:	429d      	cmp	r5, r3
 8019834:	d11b      	bne.n	801986e <_vfiprintf_r+0x56>
 8019836:	6875      	ldr	r5, [r6, #4]
 8019838:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801983a:	07d9      	lsls	r1, r3, #31
 801983c:	d405      	bmi.n	801984a <_vfiprintf_r+0x32>
 801983e:	89ab      	ldrh	r3, [r5, #12]
 8019840:	059a      	lsls	r2, r3, #22
 8019842:	d402      	bmi.n	801984a <_vfiprintf_r+0x32>
 8019844:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019846:	f000 fba5 	bl	8019f94 <__retarget_lock_acquire_recursive>
 801984a:	89ab      	ldrh	r3, [r5, #12]
 801984c:	071b      	lsls	r3, r3, #28
 801984e:	d501      	bpl.n	8019854 <_vfiprintf_r+0x3c>
 8019850:	692b      	ldr	r3, [r5, #16]
 8019852:	b9eb      	cbnz	r3, 8019890 <_vfiprintf_r+0x78>
 8019854:	4629      	mov	r1, r5
 8019856:	4630      	mov	r0, r6
 8019858:	f000 f96e 	bl	8019b38 <__swsetup_r>
 801985c:	b1c0      	cbz	r0, 8019890 <_vfiprintf_r+0x78>
 801985e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019860:	07dc      	lsls	r4, r3, #31
 8019862:	d50e      	bpl.n	8019882 <_vfiprintf_r+0x6a>
 8019864:	f04f 30ff 	mov.w	r0, #4294967295
 8019868:	b01d      	add	sp, #116	; 0x74
 801986a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801986e:	4b7b      	ldr	r3, [pc, #492]	; (8019a5c <_vfiprintf_r+0x244>)
 8019870:	429d      	cmp	r5, r3
 8019872:	d101      	bne.n	8019878 <_vfiprintf_r+0x60>
 8019874:	68b5      	ldr	r5, [r6, #8]
 8019876:	e7df      	b.n	8019838 <_vfiprintf_r+0x20>
 8019878:	4b79      	ldr	r3, [pc, #484]	; (8019a60 <_vfiprintf_r+0x248>)
 801987a:	429d      	cmp	r5, r3
 801987c:	bf08      	it	eq
 801987e:	68f5      	ldreq	r5, [r6, #12]
 8019880:	e7da      	b.n	8019838 <_vfiprintf_r+0x20>
 8019882:	89ab      	ldrh	r3, [r5, #12]
 8019884:	0598      	lsls	r0, r3, #22
 8019886:	d4ed      	bmi.n	8019864 <_vfiprintf_r+0x4c>
 8019888:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801988a:	f000 fb84 	bl	8019f96 <__retarget_lock_release_recursive>
 801988e:	e7e9      	b.n	8019864 <_vfiprintf_r+0x4c>
 8019890:	2300      	movs	r3, #0
 8019892:	9309      	str	r3, [sp, #36]	; 0x24
 8019894:	2320      	movs	r3, #32
 8019896:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801989a:	f8cd 800c 	str.w	r8, [sp, #12]
 801989e:	2330      	movs	r3, #48	; 0x30
 80198a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019a64 <_vfiprintf_r+0x24c>
 80198a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80198a8:	f04f 0901 	mov.w	r9, #1
 80198ac:	4623      	mov	r3, r4
 80198ae:	469a      	mov	sl, r3
 80198b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80198b4:	b10a      	cbz	r2, 80198ba <_vfiprintf_r+0xa2>
 80198b6:	2a25      	cmp	r2, #37	; 0x25
 80198b8:	d1f9      	bne.n	80198ae <_vfiprintf_r+0x96>
 80198ba:	ebba 0b04 	subs.w	fp, sl, r4
 80198be:	d00b      	beq.n	80198d8 <_vfiprintf_r+0xc0>
 80198c0:	465b      	mov	r3, fp
 80198c2:	4622      	mov	r2, r4
 80198c4:	4629      	mov	r1, r5
 80198c6:	4630      	mov	r0, r6
 80198c8:	f7ff ff93 	bl	80197f2 <__sfputs_r>
 80198cc:	3001      	adds	r0, #1
 80198ce:	f000 80aa 	beq.w	8019a26 <_vfiprintf_r+0x20e>
 80198d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80198d4:	445a      	add	r2, fp
 80198d6:	9209      	str	r2, [sp, #36]	; 0x24
 80198d8:	f89a 3000 	ldrb.w	r3, [sl]
 80198dc:	2b00      	cmp	r3, #0
 80198de:	f000 80a2 	beq.w	8019a26 <_vfiprintf_r+0x20e>
 80198e2:	2300      	movs	r3, #0
 80198e4:	f04f 32ff 	mov.w	r2, #4294967295
 80198e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80198ec:	f10a 0a01 	add.w	sl, sl, #1
 80198f0:	9304      	str	r3, [sp, #16]
 80198f2:	9307      	str	r3, [sp, #28]
 80198f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80198f8:	931a      	str	r3, [sp, #104]	; 0x68
 80198fa:	4654      	mov	r4, sl
 80198fc:	2205      	movs	r2, #5
 80198fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019902:	4858      	ldr	r0, [pc, #352]	; (8019a64 <_vfiprintf_r+0x24c>)
 8019904:	f7e6 fcf4 	bl	80002f0 <memchr>
 8019908:	9a04      	ldr	r2, [sp, #16]
 801990a:	b9d8      	cbnz	r0, 8019944 <_vfiprintf_r+0x12c>
 801990c:	06d1      	lsls	r1, r2, #27
 801990e:	bf44      	itt	mi
 8019910:	2320      	movmi	r3, #32
 8019912:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019916:	0713      	lsls	r3, r2, #28
 8019918:	bf44      	itt	mi
 801991a:	232b      	movmi	r3, #43	; 0x2b
 801991c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019920:	f89a 3000 	ldrb.w	r3, [sl]
 8019924:	2b2a      	cmp	r3, #42	; 0x2a
 8019926:	d015      	beq.n	8019954 <_vfiprintf_r+0x13c>
 8019928:	9a07      	ldr	r2, [sp, #28]
 801992a:	4654      	mov	r4, sl
 801992c:	2000      	movs	r0, #0
 801992e:	f04f 0c0a 	mov.w	ip, #10
 8019932:	4621      	mov	r1, r4
 8019934:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019938:	3b30      	subs	r3, #48	; 0x30
 801993a:	2b09      	cmp	r3, #9
 801993c:	d94e      	bls.n	80199dc <_vfiprintf_r+0x1c4>
 801993e:	b1b0      	cbz	r0, 801996e <_vfiprintf_r+0x156>
 8019940:	9207      	str	r2, [sp, #28]
 8019942:	e014      	b.n	801996e <_vfiprintf_r+0x156>
 8019944:	eba0 0308 	sub.w	r3, r0, r8
 8019948:	fa09 f303 	lsl.w	r3, r9, r3
 801994c:	4313      	orrs	r3, r2
 801994e:	9304      	str	r3, [sp, #16]
 8019950:	46a2      	mov	sl, r4
 8019952:	e7d2      	b.n	80198fa <_vfiprintf_r+0xe2>
 8019954:	9b03      	ldr	r3, [sp, #12]
 8019956:	1d19      	adds	r1, r3, #4
 8019958:	681b      	ldr	r3, [r3, #0]
 801995a:	9103      	str	r1, [sp, #12]
 801995c:	2b00      	cmp	r3, #0
 801995e:	bfbb      	ittet	lt
 8019960:	425b      	neglt	r3, r3
 8019962:	f042 0202 	orrlt.w	r2, r2, #2
 8019966:	9307      	strge	r3, [sp, #28]
 8019968:	9307      	strlt	r3, [sp, #28]
 801996a:	bfb8      	it	lt
 801996c:	9204      	strlt	r2, [sp, #16]
 801996e:	7823      	ldrb	r3, [r4, #0]
 8019970:	2b2e      	cmp	r3, #46	; 0x2e
 8019972:	d10c      	bne.n	801998e <_vfiprintf_r+0x176>
 8019974:	7863      	ldrb	r3, [r4, #1]
 8019976:	2b2a      	cmp	r3, #42	; 0x2a
 8019978:	d135      	bne.n	80199e6 <_vfiprintf_r+0x1ce>
 801997a:	9b03      	ldr	r3, [sp, #12]
 801997c:	1d1a      	adds	r2, r3, #4
 801997e:	681b      	ldr	r3, [r3, #0]
 8019980:	9203      	str	r2, [sp, #12]
 8019982:	2b00      	cmp	r3, #0
 8019984:	bfb8      	it	lt
 8019986:	f04f 33ff 	movlt.w	r3, #4294967295
 801998a:	3402      	adds	r4, #2
 801998c:	9305      	str	r3, [sp, #20]
 801998e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019a74 <_vfiprintf_r+0x25c>
 8019992:	7821      	ldrb	r1, [r4, #0]
 8019994:	2203      	movs	r2, #3
 8019996:	4650      	mov	r0, sl
 8019998:	f7e6 fcaa 	bl	80002f0 <memchr>
 801999c:	b140      	cbz	r0, 80199b0 <_vfiprintf_r+0x198>
 801999e:	2340      	movs	r3, #64	; 0x40
 80199a0:	eba0 000a 	sub.w	r0, r0, sl
 80199a4:	fa03 f000 	lsl.w	r0, r3, r0
 80199a8:	9b04      	ldr	r3, [sp, #16]
 80199aa:	4303      	orrs	r3, r0
 80199ac:	3401      	adds	r4, #1
 80199ae:	9304      	str	r3, [sp, #16]
 80199b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80199b4:	482c      	ldr	r0, [pc, #176]	; (8019a68 <_vfiprintf_r+0x250>)
 80199b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80199ba:	2206      	movs	r2, #6
 80199bc:	f7e6 fc98 	bl	80002f0 <memchr>
 80199c0:	2800      	cmp	r0, #0
 80199c2:	d03f      	beq.n	8019a44 <_vfiprintf_r+0x22c>
 80199c4:	4b29      	ldr	r3, [pc, #164]	; (8019a6c <_vfiprintf_r+0x254>)
 80199c6:	bb1b      	cbnz	r3, 8019a10 <_vfiprintf_r+0x1f8>
 80199c8:	9b03      	ldr	r3, [sp, #12]
 80199ca:	3307      	adds	r3, #7
 80199cc:	f023 0307 	bic.w	r3, r3, #7
 80199d0:	3308      	adds	r3, #8
 80199d2:	9303      	str	r3, [sp, #12]
 80199d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80199d6:	443b      	add	r3, r7
 80199d8:	9309      	str	r3, [sp, #36]	; 0x24
 80199da:	e767      	b.n	80198ac <_vfiprintf_r+0x94>
 80199dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80199e0:	460c      	mov	r4, r1
 80199e2:	2001      	movs	r0, #1
 80199e4:	e7a5      	b.n	8019932 <_vfiprintf_r+0x11a>
 80199e6:	2300      	movs	r3, #0
 80199e8:	3401      	adds	r4, #1
 80199ea:	9305      	str	r3, [sp, #20]
 80199ec:	4619      	mov	r1, r3
 80199ee:	f04f 0c0a 	mov.w	ip, #10
 80199f2:	4620      	mov	r0, r4
 80199f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80199f8:	3a30      	subs	r2, #48	; 0x30
 80199fa:	2a09      	cmp	r2, #9
 80199fc:	d903      	bls.n	8019a06 <_vfiprintf_r+0x1ee>
 80199fe:	2b00      	cmp	r3, #0
 8019a00:	d0c5      	beq.n	801998e <_vfiprintf_r+0x176>
 8019a02:	9105      	str	r1, [sp, #20]
 8019a04:	e7c3      	b.n	801998e <_vfiprintf_r+0x176>
 8019a06:	fb0c 2101 	mla	r1, ip, r1, r2
 8019a0a:	4604      	mov	r4, r0
 8019a0c:	2301      	movs	r3, #1
 8019a0e:	e7f0      	b.n	80199f2 <_vfiprintf_r+0x1da>
 8019a10:	ab03      	add	r3, sp, #12
 8019a12:	9300      	str	r3, [sp, #0]
 8019a14:	462a      	mov	r2, r5
 8019a16:	4b16      	ldr	r3, [pc, #88]	; (8019a70 <_vfiprintf_r+0x258>)
 8019a18:	a904      	add	r1, sp, #16
 8019a1a:	4630      	mov	r0, r6
 8019a1c:	f7fe f840 	bl	8017aa0 <_printf_float>
 8019a20:	4607      	mov	r7, r0
 8019a22:	1c78      	adds	r0, r7, #1
 8019a24:	d1d6      	bne.n	80199d4 <_vfiprintf_r+0x1bc>
 8019a26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019a28:	07d9      	lsls	r1, r3, #31
 8019a2a:	d405      	bmi.n	8019a38 <_vfiprintf_r+0x220>
 8019a2c:	89ab      	ldrh	r3, [r5, #12]
 8019a2e:	059a      	lsls	r2, r3, #22
 8019a30:	d402      	bmi.n	8019a38 <_vfiprintf_r+0x220>
 8019a32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019a34:	f000 faaf 	bl	8019f96 <__retarget_lock_release_recursive>
 8019a38:	89ab      	ldrh	r3, [r5, #12]
 8019a3a:	065b      	lsls	r3, r3, #25
 8019a3c:	f53f af12 	bmi.w	8019864 <_vfiprintf_r+0x4c>
 8019a40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019a42:	e711      	b.n	8019868 <_vfiprintf_r+0x50>
 8019a44:	ab03      	add	r3, sp, #12
 8019a46:	9300      	str	r3, [sp, #0]
 8019a48:	462a      	mov	r2, r5
 8019a4a:	4b09      	ldr	r3, [pc, #36]	; (8019a70 <_vfiprintf_r+0x258>)
 8019a4c:	a904      	add	r1, sp, #16
 8019a4e:	4630      	mov	r0, r6
 8019a50:	f7fe fab2 	bl	8017fb8 <_printf_i>
 8019a54:	e7e4      	b.n	8019a20 <_vfiprintf_r+0x208>
 8019a56:	bf00      	nop
 8019a58:	0801b074 	.word	0x0801b074
 8019a5c:	0801b094 	.word	0x0801b094
 8019a60:	0801b054 	.word	0x0801b054
 8019a64:	0801af42 	.word	0x0801af42
 8019a68:	0801af4c 	.word	0x0801af4c
 8019a6c:	08017aa1 	.word	0x08017aa1
 8019a70:	080197f3 	.word	0x080197f3
 8019a74:	0801af48 	.word	0x0801af48

08019a78 <__swbuf_r>:
 8019a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a7a:	460e      	mov	r6, r1
 8019a7c:	4614      	mov	r4, r2
 8019a7e:	4605      	mov	r5, r0
 8019a80:	b118      	cbz	r0, 8019a8a <__swbuf_r+0x12>
 8019a82:	6983      	ldr	r3, [r0, #24]
 8019a84:	b90b      	cbnz	r3, 8019a8a <__swbuf_r+0x12>
 8019a86:	f000 f9e7 	bl	8019e58 <__sinit>
 8019a8a:	4b21      	ldr	r3, [pc, #132]	; (8019b10 <__swbuf_r+0x98>)
 8019a8c:	429c      	cmp	r4, r3
 8019a8e:	d12b      	bne.n	8019ae8 <__swbuf_r+0x70>
 8019a90:	686c      	ldr	r4, [r5, #4]
 8019a92:	69a3      	ldr	r3, [r4, #24]
 8019a94:	60a3      	str	r3, [r4, #8]
 8019a96:	89a3      	ldrh	r3, [r4, #12]
 8019a98:	071a      	lsls	r2, r3, #28
 8019a9a:	d52f      	bpl.n	8019afc <__swbuf_r+0x84>
 8019a9c:	6923      	ldr	r3, [r4, #16]
 8019a9e:	b36b      	cbz	r3, 8019afc <__swbuf_r+0x84>
 8019aa0:	6923      	ldr	r3, [r4, #16]
 8019aa2:	6820      	ldr	r0, [r4, #0]
 8019aa4:	1ac0      	subs	r0, r0, r3
 8019aa6:	6963      	ldr	r3, [r4, #20]
 8019aa8:	b2f6      	uxtb	r6, r6
 8019aaa:	4283      	cmp	r3, r0
 8019aac:	4637      	mov	r7, r6
 8019aae:	dc04      	bgt.n	8019aba <__swbuf_r+0x42>
 8019ab0:	4621      	mov	r1, r4
 8019ab2:	4628      	mov	r0, r5
 8019ab4:	f000 f93c 	bl	8019d30 <_fflush_r>
 8019ab8:	bb30      	cbnz	r0, 8019b08 <__swbuf_r+0x90>
 8019aba:	68a3      	ldr	r3, [r4, #8]
 8019abc:	3b01      	subs	r3, #1
 8019abe:	60a3      	str	r3, [r4, #8]
 8019ac0:	6823      	ldr	r3, [r4, #0]
 8019ac2:	1c5a      	adds	r2, r3, #1
 8019ac4:	6022      	str	r2, [r4, #0]
 8019ac6:	701e      	strb	r6, [r3, #0]
 8019ac8:	6963      	ldr	r3, [r4, #20]
 8019aca:	3001      	adds	r0, #1
 8019acc:	4283      	cmp	r3, r0
 8019ace:	d004      	beq.n	8019ada <__swbuf_r+0x62>
 8019ad0:	89a3      	ldrh	r3, [r4, #12]
 8019ad2:	07db      	lsls	r3, r3, #31
 8019ad4:	d506      	bpl.n	8019ae4 <__swbuf_r+0x6c>
 8019ad6:	2e0a      	cmp	r6, #10
 8019ad8:	d104      	bne.n	8019ae4 <__swbuf_r+0x6c>
 8019ada:	4621      	mov	r1, r4
 8019adc:	4628      	mov	r0, r5
 8019ade:	f000 f927 	bl	8019d30 <_fflush_r>
 8019ae2:	b988      	cbnz	r0, 8019b08 <__swbuf_r+0x90>
 8019ae4:	4638      	mov	r0, r7
 8019ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019ae8:	4b0a      	ldr	r3, [pc, #40]	; (8019b14 <__swbuf_r+0x9c>)
 8019aea:	429c      	cmp	r4, r3
 8019aec:	d101      	bne.n	8019af2 <__swbuf_r+0x7a>
 8019aee:	68ac      	ldr	r4, [r5, #8]
 8019af0:	e7cf      	b.n	8019a92 <__swbuf_r+0x1a>
 8019af2:	4b09      	ldr	r3, [pc, #36]	; (8019b18 <__swbuf_r+0xa0>)
 8019af4:	429c      	cmp	r4, r3
 8019af6:	bf08      	it	eq
 8019af8:	68ec      	ldreq	r4, [r5, #12]
 8019afa:	e7ca      	b.n	8019a92 <__swbuf_r+0x1a>
 8019afc:	4621      	mov	r1, r4
 8019afe:	4628      	mov	r0, r5
 8019b00:	f000 f81a 	bl	8019b38 <__swsetup_r>
 8019b04:	2800      	cmp	r0, #0
 8019b06:	d0cb      	beq.n	8019aa0 <__swbuf_r+0x28>
 8019b08:	f04f 37ff 	mov.w	r7, #4294967295
 8019b0c:	e7ea      	b.n	8019ae4 <__swbuf_r+0x6c>
 8019b0e:	bf00      	nop
 8019b10:	0801b074 	.word	0x0801b074
 8019b14:	0801b094 	.word	0x0801b094
 8019b18:	0801b054 	.word	0x0801b054

08019b1c <__ascii_wctomb>:
 8019b1c:	b149      	cbz	r1, 8019b32 <__ascii_wctomb+0x16>
 8019b1e:	2aff      	cmp	r2, #255	; 0xff
 8019b20:	bf85      	ittet	hi
 8019b22:	238a      	movhi	r3, #138	; 0x8a
 8019b24:	6003      	strhi	r3, [r0, #0]
 8019b26:	700a      	strbls	r2, [r1, #0]
 8019b28:	f04f 30ff 	movhi.w	r0, #4294967295
 8019b2c:	bf98      	it	ls
 8019b2e:	2001      	movls	r0, #1
 8019b30:	4770      	bx	lr
 8019b32:	4608      	mov	r0, r1
 8019b34:	4770      	bx	lr
	...

08019b38 <__swsetup_r>:
 8019b38:	4b32      	ldr	r3, [pc, #200]	; (8019c04 <__swsetup_r+0xcc>)
 8019b3a:	b570      	push	{r4, r5, r6, lr}
 8019b3c:	681d      	ldr	r5, [r3, #0]
 8019b3e:	4606      	mov	r6, r0
 8019b40:	460c      	mov	r4, r1
 8019b42:	b125      	cbz	r5, 8019b4e <__swsetup_r+0x16>
 8019b44:	69ab      	ldr	r3, [r5, #24]
 8019b46:	b913      	cbnz	r3, 8019b4e <__swsetup_r+0x16>
 8019b48:	4628      	mov	r0, r5
 8019b4a:	f000 f985 	bl	8019e58 <__sinit>
 8019b4e:	4b2e      	ldr	r3, [pc, #184]	; (8019c08 <__swsetup_r+0xd0>)
 8019b50:	429c      	cmp	r4, r3
 8019b52:	d10f      	bne.n	8019b74 <__swsetup_r+0x3c>
 8019b54:	686c      	ldr	r4, [r5, #4]
 8019b56:	89a3      	ldrh	r3, [r4, #12]
 8019b58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019b5c:	0719      	lsls	r1, r3, #28
 8019b5e:	d42c      	bmi.n	8019bba <__swsetup_r+0x82>
 8019b60:	06dd      	lsls	r5, r3, #27
 8019b62:	d411      	bmi.n	8019b88 <__swsetup_r+0x50>
 8019b64:	2309      	movs	r3, #9
 8019b66:	6033      	str	r3, [r6, #0]
 8019b68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019b6c:	81a3      	strh	r3, [r4, #12]
 8019b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8019b72:	e03e      	b.n	8019bf2 <__swsetup_r+0xba>
 8019b74:	4b25      	ldr	r3, [pc, #148]	; (8019c0c <__swsetup_r+0xd4>)
 8019b76:	429c      	cmp	r4, r3
 8019b78:	d101      	bne.n	8019b7e <__swsetup_r+0x46>
 8019b7a:	68ac      	ldr	r4, [r5, #8]
 8019b7c:	e7eb      	b.n	8019b56 <__swsetup_r+0x1e>
 8019b7e:	4b24      	ldr	r3, [pc, #144]	; (8019c10 <__swsetup_r+0xd8>)
 8019b80:	429c      	cmp	r4, r3
 8019b82:	bf08      	it	eq
 8019b84:	68ec      	ldreq	r4, [r5, #12]
 8019b86:	e7e6      	b.n	8019b56 <__swsetup_r+0x1e>
 8019b88:	0758      	lsls	r0, r3, #29
 8019b8a:	d512      	bpl.n	8019bb2 <__swsetup_r+0x7a>
 8019b8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019b8e:	b141      	cbz	r1, 8019ba2 <__swsetup_r+0x6a>
 8019b90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019b94:	4299      	cmp	r1, r3
 8019b96:	d002      	beq.n	8019b9e <__swsetup_r+0x66>
 8019b98:	4630      	mov	r0, r6
 8019b9a:	f7ff fcd5 	bl	8019548 <_free_r>
 8019b9e:	2300      	movs	r3, #0
 8019ba0:	6363      	str	r3, [r4, #52]	; 0x34
 8019ba2:	89a3      	ldrh	r3, [r4, #12]
 8019ba4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019ba8:	81a3      	strh	r3, [r4, #12]
 8019baa:	2300      	movs	r3, #0
 8019bac:	6063      	str	r3, [r4, #4]
 8019bae:	6923      	ldr	r3, [r4, #16]
 8019bb0:	6023      	str	r3, [r4, #0]
 8019bb2:	89a3      	ldrh	r3, [r4, #12]
 8019bb4:	f043 0308 	orr.w	r3, r3, #8
 8019bb8:	81a3      	strh	r3, [r4, #12]
 8019bba:	6923      	ldr	r3, [r4, #16]
 8019bbc:	b94b      	cbnz	r3, 8019bd2 <__swsetup_r+0x9a>
 8019bbe:	89a3      	ldrh	r3, [r4, #12]
 8019bc0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019bc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019bc8:	d003      	beq.n	8019bd2 <__swsetup_r+0x9a>
 8019bca:	4621      	mov	r1, r4
 8019bcc:	4630      	mov	r0, r6
 8019bce:	f000 fa09 	bl	8019fe4 <__smakebuf_r>
 8019bd2:	89a0      	ldrh	r0, [r4, #12]
 8019bd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019bd8:	f010 0301 	ands.w	r3, r0, #1
 8019bdc:	d00a      	beq.n	8019bf4 <__swsetup_r+0xbc>
 8019bde:	2300      	movs	r3, #0
 8019be0:	60a3      	str	r3, [r4, #8]
 8019be2:	6963      	ldr	r3, [r4, #20]
 8019be4:	425b      	negs	r3, r3
 8019be6:	61a3      	str	r3, [r4, #24]
 8019be8:	6923      	ldr	r3, [r4, #16]
 8019bea:	b943      	cbnz	r3, 8019bfe <__swsetup_r+0xc6>
 8019bec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019bf0:	d1ba      	bne.n	8019b68 <__swsetup_r+0x30>
 8019bf2:	bd70      	pop	{r4, r5, r6, pc}
 8019bf4:	0781      	lsls	r1, r0, #30
 8019bf6:	bf58      	it	pl
 8019bf8:	6963      	ldrpl	r3, [r4, #20]
 8019bfa:	60a3      	str	r3, [r4, #8]
 8019bfc:	e7f4      	b.n	8019be8 <__swsetup_r+0xb0>
 8019bfe:	2000      	movs	r0, #0
 8019c00:	e7f7      	b.n	8019bf2 <__swsetup_r+0xba>
 8019c02:	bf00      	nop
 8019c04:	20000114 	.word	0x20000114
 8019c08:	0801b074 	.word	0x0801b074
 8019c0c:	0801b094 	.word	0x0801b094
 8019c10:	0801b054 	.word	0x0801b054

08019c14 <abort>:
 8019c14:	b508      	push	{r3, lr}
 8019c16:	2006      	movs	r0, #6
 8019c18:	f000 fa4c 	bl	801a0b4 <raise>
 8019c1c:	2001      	movs	r0, #1
 8019c1e:	f7ea fbd3 	bl	80043c8 <_exit>
	...

08019c24 <__sflush_r>:
 8019c24:	898a      	ldrh	r2, [r1, #12]
 8019c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c2a:	4605      	mov	r5, r0
 8019c2c:	0710      	lsls	r0, r2, #28
 8019c2e:	460c      	mov	r4, r1
 8019c30:	d458      	bmi.n	8019ce4 <__sflush_r+0xc0>
 8019c32:	684b      	ldr	r3, [r1, #4]
 8019c34:	2b00      	cmp	r3, #0
 8019c36:	dc05      	bgt.n	8019c44 <__sflush_r+0x20>
 8019c38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019c3a:	2b00      	cmp	r3, #0
 8019c3c:	dc02      	bgt.n	8019c44 <__sflush_r+0x20>
 8019c3e:	2000      	movs	r0, #0
 8019c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019c46:	2e00      	cmp	r6, #0
 8019c48:	d0f9      	beq.n	8019c3e <__sflush_r+0x1a>
 8019c4a:	2300      	movs	r3, #0
 8019c4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019c50:	682f      	ldr	r7, [r5, #0]
 8019c52:	602b      	str	r3, [r5, #0]
 8019c54:	d032      	beq.n	8019cbc <__sflush_r+0x98>
 8019c56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019c58:	89a3      	ldrh	r3, [r4, #12]
 8019c5a:	075a      	lsls	r2, r3, #29
 8019c5c:	d505      	bpl.n	8019c6a <__sflush_r+0x46>
 8019c5e:	6863      	ldr	r3, [r4, #4]
 8019c60:	1ac0      	subs	r0, r0, r3
 8019c62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019c64:	b10b      	cbz	r3, 8019c6a <__sflush_r+0x46>
 8019c66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019c68:	1ac0      	subs	r0, r0, r3
 8019c6a:	2300      	movs	r3, #0
 8019c6c:	4602      	mov	r2, r0
 8019c6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019c70:	6a21      	ldr	r1, [r4, #32]
 8019c72:	4628      	mov	r0, r5
 8019c74:	47b0      	blx	r6
 8019c76:	1c43      	adds	r3, r0, #1
 8019c78:	89a3      	ldrh	r3, [r4, #12]
 8019c7a:	d106      	bne.n	8019c8a <__sflush_r+0x66>
 8019c7c:	6829      	ldr	r1, [r5, #0]
 8019c7e:	291d      	cmp	r1, #29
 8019c80:	d82c      	bhi.n	8019cdc <__sflush_r+0xb8>
 8019c82:	4a2a      	ldr	r2, [pc, #168]	; (8019d2c <__sflush_r+0x108>)
 8019c84:	40ca      	lsrs	r2, r1
 8019c86:	07d6      	lsls	r6, r2, #31
 8019c88:	d528      	bpl.n	8019cdc <__sflush_r+0xb8>
 8019c8a:	2200      	movs	r2, #0
 8019c8c:	6062      	str	r2, [r4, #4]
 8019c8e:	04d9      	lsls	r1, r3, #19
 8019c90:	6922      	ldr	r2, [r4, #16]
 8019c92:	6022      	str	r2, [r4, #0]
 8019c94:	d504      	bpl.n	8019ca0 <__sflush_r+0x7c>
 8019c96:	1c42      	adds	r2, r0, #1
 8019c98:	d101      	bne.n	8019c9e <__sflush_r+0x7a>
 8019c9a:	682b      	ldr	r3, [r5, #0]
 8019c9c:	b903      	cbnz	r3, 8019ca0 <__sflush_r+0x7c>
 8019c9e:	6560      	str	r0, [r4, #84]	; 0x54
 8019ca0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019ca2:	602f      	str	r7, [r5, #0]
 8019ca4:	2900      	cmp	r1, #0
 8019ca6:	d0ca      	beq.n	8019c3e <__sflush_r+0x1a>
 8019ca8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019cac:	4299      	cmp	r1, r3
 8019cae:	d002      	beq.n	8019cb6 <__sflush_r+0x92>
 8019cb0:	4628      	mov	r0, r5
 8019cb2:	f7ff fc49 	bl	8019548 <_free_r>
 8019cb6:	2000      	movs	r0, #0
 8019cb8:	6360      	str	r0, [r4, #52]	; 0x34
 8019cba:	e7c1      	b.n	8019c40 <__sflush_r+0x1c>
 8019cbc:	6a21      	ldr	r1, [r4, #32]
 8019cbe:	2301      	movs	r3, #1
 8019cc0:	4628      	mov	r0, r5
 8019cc2:	47b0      	blx	r6
 8019cc4:	1c41      	adds	r1, r0, #1
 8019cc6:	d1c7      	bne.n	8019c58 <__sflush_r+0x34>
 8019cc8:	682b      	ldr	r3, [r5, #0]
 8019cca:	2b00      	cmp	r3, #0
 8019ccc:	d0c4      	beq.n	8019c58 <__sflush_r+0x34>
 8019cce:	2b1d      	cmp	r3, #29
 8019cd0:	d001      	beq.n	8019cd6 <__sflush_r+0xb2>
 8019cd2:	2b16      	cmp	r3, #22
 8019cd4:	d101      	bne.n	8019cda <__sflush_r+0xb6>
 8019cd6:	602f      	str	r7, [r5, #0]
 8019cd8:	e7b1      	b.n	8019c3e <__sflush_r+0x1a>
 8019cda:	89a3      	ldrh	r3, [r4, #12]
 8019cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019ce0:	81a3      	strh	r3, [r4, #12]
 8019ce2:	e7ad      	b.n	8019c40 <__sflush_r+0x1c>
 8019ce4:	690f      	ldr	r7, [r1, #16]
 8019ce6:	2f00      	cmp	r7, #0
 8019ce8:	d0a9      	beq.n	8019c3e <__sflush_r+0x1a>
 8019cea:	0793      	lsls	r3, r2, #30
 8019cec:	680e      	ldr	r6, [r1, #0]
 8019cee:	bf08      	it	eq
 8019cf0:	694b      	ldreq	r3, [r1, #20]
 8019cf2:	600f      	str	r7, [r1, #0]
 8019cf4:	bf18      	it	ne
 8019cf6:	2300      	movne	r3, #0
 8019cf8:	eba6 0807 	sub.w	r8, r6, r7
 8019cfc:	608b      	str	r3, [r1, #8]
 8019cfe:	f1b8 0f00 	cmp.w	r8, #0
 8019d02:	dd9c      	ble.n	8019c3e <__sflush_r+0x1a>
 8019d04:	6a21      	ldr	r1, [r4, #32]
 8019d06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019d08:	4643      	mov	r3, r8
 8019d0a:	463a      	mov	r2, r7
 8019d0c:	4628      	mov	r0, r5
 8019d0e:	47b0      	blx	r6
 8019d10:	2800      	cmp	r0, #0
 8019d12:	dc06      	bgt.n	8019d22 <__sflush_r+0xfe>
 8019d14:	89a3      	ldrh	r3, [r4, #12]
 8019d16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019d1a:	81a3      	strh	r3, [r4, #12]
 8019d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8019d20:	e78e      	b.n	8019c40 <__sflush_r+0x1c>
 8019d22:	4407      	add	r7, r0
 8019d24:	eba8 0800 	sub.w	r8, r8, r0
 8019d28:	e7e9      	b.n	8019cfe <__sflush_r+0xda>
 8019d2a:	bf00      	nop
 8019d2c:	20400001 	.word	0x20400001

08019d30 <_fflush_r>:
 8019d30:	b538      	push	{r3, r4, r5, lr}
 8019d32:	690b      	ldr	r3, [r1, #16]
 8019d34:	4605      	mov	r5, r0
 8019d36:	460c      	mov	r4, r1
 8019d38:	b913      	cbnz	r3, 8019d40 <_fflush_r+0x10>
 8019d3a:	2500      	movs	r5, #0
 8019d3c:	4628      	mov	r0, r5
 8019d3e:	bd38      	pop	{r3, r4, r5, pc}
 8019d40:	b118      	cbz	r0, 8019d4a <_fflush_r+0x1a>
 8019d42:	6983      	ldr	r3, [r0, #24]
 8019d44:	b90b      	cbnz	r3, 8019d4a <_fflush_r+0x1a>
 8019d46:	f000 f887 	bl	8019e58 <__sinit>
 8019d4a:	4b14      	ldr	r3, [pc, #80]	; (8019d9c <_fflush_r+0x6c>)
 8019d4c:	429c      	cmp	r4, r3
 8019d4e:	d11b      	bne.n	8019d88 <_fflush_r+0x58>
 8019d50:	686c      	ldr	r4, [r5, #4]
 8019d52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019d56:	2b00      	cmp	r3, #0
 8019d58:	d0ef      	beq.n	8019d3a <_fflush_r+0xa>
 8019d5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019d5c:	07d0      	lsls	r0, r2, #31
 8019d5e:	d404      	bmi.n	8019d6a <_fflush_r+0x3a>
 8019d60:	0599      	lsls	r1, r3, #22
 8019d62:	d402      	bmi.n	8019d6a <_fflush_r+0x3a>
 8019d64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019d66:	f000 f915 	bl	8019f94 <__retarget_lock_acquire_recursive>
 8019d6a:	4628      	mov	r0, r5
 8019d6c:	4621      	mov	r1, r4
 8019d6e:	f7ff ff59 	bl	8019c24 <__sflush_r>
 8019d72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019d74:	07da      	lsls	r2, r3, #31
 8019d76:	4605      	mov	r5, r0
 8019d78:	d4e0      	bmi.n	8019d3c <_fflush_r+0xc>
 8019d7a:	89a3      	ldrh	r3, [r4, #12]
 8019d7c:	059b      	lsls	r3, r3, #22
 8019d7e:	d4dd      	bmi.n	8019d3c <_fflush_r+0xc>
 8019d80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019d82:	f000 f908 	bl	8019f96 <__retarget_lock_release_recursive>
 8019d86:	e7d9      	b.n	8019d3c <_fflush_r+0xc>
 8019d88:	4b05      	ldr	r3, [pc, #20]	; (8019da0 <_fflush_r+0x70>)
 8019d8a:	429c      	cmp	r4, r3
 8019d8c:	d101      	bne.n	8019d92 <_fflush_r+0x62>
 8019d8e:	68ac      	ldr	r4, [r5, #8]
 8019d90:	e7df      	b.n	8019d52 <_fflush_r+0x22>
 8019d92:	4b04      	ldr	r3, [pc, #16]	; (8019da4 <_fflush_r+0x74>)
 8019d94:	429c      	cmp	r4, r3
 8019d96:	bf08      	it	eq
 8019d98:	68ec      	ldreq	r4, [r5, #12]
 8019d9a:	e7da      	b.n	8019d52 <_fflush_r+0x22>
 8019d9c:	0801b074 	.word	0x0801b074
 8019da0:	0801b094 	.word	0x0801b094
 8019da4:	0801b054 	.word	0x0801b054

08019da8 <std>:
 8019da8:	2300      	movs	r3, #0
 8019daa:	b510      	push	{r4, lr}
 8019dac:	4604      	mov	r4, r0
 8019dae:	e9c0 3300 	strd	r3, r3, [r0]
 8019db2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019db6:	6083      	str	r3, [r0, #8]
 8019db8:	8181      	strh	r1, [r0, #12]
 8019dba:	6643      	str	r3, [r0, #100]	; 0x64
 8019dbc:	81c2      	strh	r2, [r0, #14]
 8019dbe:	6183      	str	r3, [r0, #24]
 8019dc0:	4619      	mov	r1, r3
 8019dc2:	2208      	movs	r2, #8
 8019dc4:	305c      	adds	r0, #92	; 0x5c
 8019dc6:	f7fd fdd3 	bl	8017970 <memset>
 8019dca:	4b05      	ldr	r3, [pc, #20]	; (8019de0 <std+0x38>)
 8019dcc:	6263      	str	r3, [r4, #36]	; 0x24
 8019dce:	4b05      	ldr	r3, [pc, #20]	; (8019de4 <std+0x3c>)
 8019dd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8019dd2:	4b05      	ldr	r3, [pc, #20]	; (8019de8 <std+0x40>)
 8019dd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019dd6:	4b05      	ldr	r3, [pc, #20]	; (8019dec <std+0x44>)
 8019dd8:	6224      	str	r4, [r4, #32]
 8019dda:	6323      	str	r3, [r4, #48]	; 0x30
 8019ddc:	bd10      	pop	{r4, pc}
 8019dde:	bf00      	nop
 8019de0:	0801a0ed 	.word	0x0801a0ed
 8019de4:	0801a10f 	.word	0x0801a10f
 8019de8:	0801a147 	.word	0x0801a147
 8019dec:	0801a16b 	.word	0x0801a16b

08019df0 <_cleanup_r>:
 8019df0:	4901      	ldr	r1, [pc, #4]	; (8019df8 <_cleanup_r+0x8>)
 8019df2:	f000 b8af 	b.w	8019f54 <_fwalk_reent>
 8019df6:	bf00      	nop
 8019df8:	08019d31 	.word	0x08019d31

08019dfc <__sfmoreglue>:
 8019dfc:	b570      	push	{r4, r5, r6, lr}
 8019dfe:	2268      	movs	r2, #104	; 0x68
 8019e00:	1e4d      	subs	r5, r1, #1
 8019e02:	4355      	muls	r5, r2
 8019e04:	460e      	mov	r6, r1
 8019e06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019e0a:	f7ff fc09 	bl	8019620 <_malloc_r>
 8019e0e:	4604      	mov	r4, r0
 8019e10:	b140      	cbz	r0, 8019e24 <__sfmoreglue+0x28>
 8019e12:	2100      	movs	r1, #0
 8019e14:	e9c0 1600 	strd	r1, r6, [r0]
 8019e18:	300c      	adds	r0, #12
 8019e1a:	60a0      	str	r0, [r4, #8]
 8019e1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019e20:	f7fd fda6 	bl	8017970 <memset>
 8019e24:	4620      	mov	r0, r4
 8019e26:	bd70      	pop	{r4, r5, r6, pc}

08019e28 <__sfp_lock_acquire>:
 8019e28:	4801      	ldr	r0, [pc, #4]	; (8019e30 <__sfp_lock_acquire+0x8>)
 8019e2a:	f000 b8b3 	b.w	8019f94 <__retarget_lock_acquire_recursive>
 8019e2e:	bf00      	nop
 8019e30:	20002c75 	.word	0x20002c75

08019e34 <__sfp_lock_release>:
 8019e34:	4801      	ldr	r0, [pc, #4]	; (8019e3c <__sfp_lock_release+0x8>)
 8019e36:	f000 b8ae 	b.w	8019f96 <__retarget_lock_release_recursive>
 8019e3a:	bf00      	nop
 8019e3c:	20002c75 	.word	0x20002c75

08019e40 <__sinit_lock_acquire>:
 8019e40:	4801      	ldr	r0, [pc, #4]	; (8019e48 <__sinit_lock_acquire+0x8>)
 8019e42:	f000 b8a7 	b.w	8019f94 <__retarget_lock_acquire_recursive>
 8019e46:	bf00      	nop
 8019e48:	20002c76 	.word	0x20002c76

08019e4c <__sinit_lock_release>:
 8019e4c:	4801      	ldr	r0, [pc, #4]	; (8019e54 <__sinit_lock_release+0x8>)
 8019e4e:	f000 b8a2 	b.w	8019f96 <__retarget_lock_release_recursive>
 8019e52:	bf00      	nop
 8019e54:	20002c76 	.word	0x20002c76

08019e58 <__sinit>:
 8019e58:	b510      	push	{r4, lr}
 8019e5a:	4604      	mov	r4, r0
 8019e5c:	f7ff fff0 	bl	8019e40 <__sinit_lock_acquire>
 8019e60:	69a3      	ldr	r3, [r4, #24]
 8019e62:	b11b      	cbz	r3, 8019e6c <__sinit+0x14>
 8019e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019e68:	f7ff bff0 	b.w	8019e4c <__sinit_lock_release>
 8019e6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019e70:	6523      	str	r3, [r4, #80]	; 0x50
 8019e72:	4b13      	ldr	r3, [pc, #76]	; (8019ec0 <__sinit+0x68>)
 8019e74:	4a13      	ldr	r2, [pc, #76]	; (8019ec4 <__sinit+0x6c>)
 8019e76:	681b      	ldr	r3, [r3, #0]
 8019e78:	62a2      	str	r2, [r4, #40]	; 0x28
 8019e7a:	42a3      	cmp	r3, r4
 8019e7c:	bf04      	itt	eq
 8019e7e:	2301      	moveq	r3, #1
 8019e80:	61a3      	streq	r3, [r4, #24]
 8019e82:	4620      	mov	r0, r4
 8019e84:	f000 f820 	bl	8019ec8 <__sfp>
 8019e88:	6060      	str	r0, [r4, #4]
 8019e8a:	4620      	mov	r0, r4
 8019e8c:	f000 f81c 	bl	8019ec8 <__sfp>
 8019e90:	60a0      	str	r0, [r4, #8]
 8019e92:	4620      	mov	r0, r4
 8019e94:	f000 f818 	bl	8019ec8 <__sfp>
 8019e98:	2200      	movs	r2, #0
 8019e9a:	60e0      	str	r0, [r4, #12]
 8019e9c:	2104      	movs	r1, #4
 8019e9e:	6860      	ldr	r0, [r4, #4]
 8019ea0:	f7ff ff82 	bl	8019da8 <std>
 8019ea4:	68a0      	ldr	r0, [r4, #8]
 8019ea6:	2201      	movs	r2, #1
 8019ea8:	2109      	movs	r1, #9
 8019eaa:	f7ff ff7d 	bl	8019da8 <std>
 8019eae:	68e0      	ldr	r0, [r4, #12]
 8019eb0:	2202      	movs	r2, #2
 8019eb2:	2112      	movs	r1, #18
 8019eb4:	f7ff ff78 	bl	8019da8 <std>
 8019eb8:	2301      	movs	r3, #1
 8019eba:	61a3      	str	r3, [r4, #24]
 8019ebc:	e7d2      	b.n	8019e64 <__sinit+0xc>
 8019ebe:	bf00      	nop
 8019ec0:	0801acdc 	.word	0x0801acdc
 8019ec4:	08019df1 	.word	0x08019df1

08019ec8 <__sfp>:
 8019ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019eca:	4607      	mov	r7, r0
 8019ecc:	f7ff ffac 	bl	8019e28 <__sfp_lock_acquire>
 8019ed0:	4b1e      	ldr	r3, [pc, #120]	; (8019f4c <__sfp+0x84>)
 8019ed2:	681e      	ldr	r6, [r3, #0]
 8019ed4:	69b3      	ldr	r3, [r6, #24]
 8019ed6:	b913      	cbnz	r3, 8019ede <__sfp+0x16>
 8019ed8:	4630      	mov	r0, r6
 8019eda:	f7ff ffbd 	bl	8019e58 <__sinit>
 8019ede:	3648      	adds	r6, #72	; 0x48
 8019ee0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019ee4:	3b01      	subs	r3, #1
 8019ee6:	d503      	bpl.n	8019ef0 <__sfp+0x28>
 8019ee8:	6833      	ldr	r3, [r6, #0]
 8019eea:	b30b      	cbz	r3, 8019f30 <__sfp+0x68>
 8019eec:	6836      	ldr	r6, [r6, #0]
 8019eee:	e7f7      	b.n	8019ee0 <__sfp+0x18>
 8019ef0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019ef4:	b9d5      	cbnz	r5, 8019f2c <__sfp+0x64>
 8019ef6:	4b16      	ldr	r3, [pc, #88]	; (8019f50 <__sfp+0x88>)
 8019ef8:	60e3      	str	r3, [r4, #12]
 8019efa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019efe:	6665      	str	r5, [r4, #100]	; 0x64
 8019f00:	f000 f847 	bl	8019f92 <__retarget_lock_init_recursive>
 8019f04:	f7ff ff96 	bl	8019e34 <__sfp_lock_release>
 8019f08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019f0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019f10:	6025      	str	r5, [r4, #0]
 8019f12:	61a5      	str	r5, [r4, #24]
 8019f14:	2208      	movs	r2, #8
 8019f16:	4629      	mov	r1, r5
 8019f18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019f1c:	f7fd fd28 	bl	8017970 <memset>
 8019f20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019f24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019f28:	4620      	mov	r0, r4
 8019f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019f2c:	3468      	adds	r4, #104	; 0x68
 8019f2e:	e7d9      	b.n	8019ee4 <__sfp+0x1c>
 8019f30:	2104      	movs	r1, #4
 8019f32:	4638      	mov	r0, r7
 8019f34:	f7ff ff62 	bl	8019dfc <__sfmoreglue>
 8019f38:	4604      	mov	r4, r0
 8019f3a:	6030      	str	r0, [r6, #0]
 8019f3c:	2800      	cmp	r0, #0
 8019f3e:	d1d5      	bne.n	8019eec <__sfp+0x24>
 8019f40:	f7ff ff78 	bl	8019e34 <__sfp_lock_release>
 8019f44:	230c      	movs	r3, #12
 8019f46:	603b      	str	r3, [r7, #0]
 8019f48:	e7ee      	b.n	8019f28 <__sfp+0x60>
 8019f4a:	bf00      	nop
 8019f4c:	0801acdc 	.word	0x0801acdc
 8019f50:	ffff0001 	.word	0xffff0001

08019f54 <_fwalk_reent>:
 8019f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019f58:	4606      	mov	r6, r0
 8019f5a:	4688      	mov	r8, r1
 8019f5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019f60:	2700      	movs	r7, #0
 8019f62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019f66:	f1b9 0901 	subs.w	r9, r9, #1
 8019f6a:	d505      	bpl.n	8019f78 <_fwalk_reent+0x24>
 8019f6c:	6824      	ldr	r4, [r4, #0]
 8019f6e:	2c00      	cmp	r4, #0
 8019f70:	d1f7      	bne.n	8019f62 <_fwalk_reent+0xe>
 8019f72:	4638      	mov	r0, r7
 8019f74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019f78:	89ab      	ldrh	r3, [r5, #12]
 8019f7a:	2b01      	cmp	r3, #1
 8019f7c:	d907      	bls.n	8019f8e <_fwalk_reent+0x3a>
 8019f7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019f82:	3301      	adds	r3, #1
 8019f84:	d003      	beq.n	8019f8e <_fwalk_reent+0x3a>
 8019f86:	4629      	mov	r1, r5
 8019f88:	4630      	mov	r0, r6
 8019f8a:	47c0      	blx	r8
 8019f8c:	4307      	orrs	r7, r0
 8019f8e:	3568      	adds	r5, #104	; 0x68
 8019f90:	e7e9      	b.n	8019f66 <_fwalk_reent+0x12>

08019f92 <__retarget_lock_init_recursive>:
 8019f92:	4770      	bx	lr

08019f94 <__retarget_lock_acquire_recursive>:
 8019f94:	4770      	bx	lr

08019f96 <__retarget_lock_release_recursive>:
 8019f96:	4770      	bx	lr

08019f98 <__swhatbuf_r>:
 8019f98:	b570      	push	{r4, r5, r6, lr}
 8019f9a:	460e      	mov	r6, r1
 8019f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019fa0:	2900      	cmp	r1, #0
 8019fa2:	b096      	sub	sp, #88	; 0x58
 8019fa4:	4614      	mov	r4, r2
 8019fa6:	461d      	mov	r5, r3
 8019fa8:	da08      	bge.n	8019fbc <__swhatbuf_r+0x24>
 8019faa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8019fae:	2200      	movs	r2, #0
 8019fb0:	602a      	str	r2, [r5, #0]
 8019fb2:	061a      	lsls	r2, r3, #24
 8019fb4:	d410      	bmi.n	8019fd8 <__swhatbuf_r+0x40>
 8019fb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019fba:	e00e      	b.n	8019fda <__swhatbuf_r+0x42>
 8019fbc:	466a      	mov	r2, sp
 8019fbe:	f000 f8fb 	bl	801a1b8 <_fstat_r>
 8019fc2:	2800      	cmp	r0, #0
 8019fc4:	dbf1      	blt.n	8019faa <__swhatbuf_r+0x12>
 8019fc6:	9a01      	ldr	r2, [sp, #4]
 8019fc8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019fcc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019fd0:	425a      	negs	r2, r3
 8019fd2:	415a      	adcs	r2, r3
 8019fd4:	602a      	str	r2, [r5, #0]
 8019fd6:	e7ee      	b.n	8019fb6 <__swhatbuf_r+0x1e>
 8019fd8:	2340      	movs	r3, #64	; 0x40
 8019fda:	2000      	movs	r0, #0
 8019fdc:	6023      	str	r3, [r4, #0]
 8019fde:	b016      	add	sp, #88	; 0x58
 8019fe0:	bd70      	pop	{r4, r5, r6, pc}
	...

08019fe4 <__smakebuf_r>:
 8019fe4:	898b      	ldrh	r3, [r1, #12]
 8019fe6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019fe8:	079d      	lsls	r5, r3, #30
 8019fea:	4606      	mov	r6, r0
 8019fec:	460c      	mov	r4, r1
 8019fee:	d507      	bpl.n	801a000 <__smakebuf_r+0x1c>
 8019ff0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019ff4:	6023      	str	r3, [r4, #0]
 8019ff6:	6123      	str	r3, [r4, #16]
 8019ff8:	2301      	movs	r3, #1
 8019ffa:	6163      	str	r3, [r4, #20]
 8019ffc:	b002      	add	sp, #8
 8019ffe:	bd70      	pop	{r4, r5, r6, pc}
 801a000:	ab01      	add	r3, sp, #4
 801a002:	466a      	mov	r2, sp
 801a004:	f7ff ffc8 	bl	8019f98 <__swhatbuf_r>
 801a008:	9900      	ldr	r1, [sp, #0]
 801a00a:	4605      	mov	r5, r0
 801a00c:	4630      	mov	r0, r6
 801a00e:	f7ff fb07 	bl	8019620 <_malloc_r>
 801a012:	b948      	cbnz	r0, 801a028 <__smakebuf_r+0x44>
 801a014:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a018:	059a      	lsls	r2, r3, #22
 801a01a:	d4ef      	bmi.n	8019ffc <__smakebuf_r+0x18>
 801a01c:	f023 0303 	bic.w	r3, r3, #3
 801a020:	f043 0302 	orr.w	r3, r3, #2
 801a024:	81a3      	strh	r3, [r4, #12]
 801a026:	e7e3      	b.n	8019ff0 <__smakebuf_r+0xc>
 801a028:	4b0d      	ldr	r3, [pc, #52]	; (801a060 <__smakebuf_r+0x7c>)
 801a02a:	62b3      	str	r3, [r6, #40]	; 0x28
 801a02c:	89a3      	ldrh	r3, [r4, #12]
 801a02e:	6020      	str	r0, [r4, #0]
 801a030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a034:	81a3      	strh	r3, [r4, #12]
 801a036:	9b00      	ldr	r3, [sp, #0]
 801a038:	6163      	str	r3, [r4, #20]
 801a03a:	9b01      	ldr	r3, [sp, #4]
 801a03c:	6120      	str	r0, [r4, #16]
 801a03e:	b15b      	cbz	r3, 801a058 <__smakebuf_r+0x74>
 801a040:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a044:	4630      	mov	r0, r6
 801a046:	f000 f8c9 	bl	801a1dc <_isatty_r>
 801a04a:	b128      	cbz	r0, 801a058 <__smakebuf_r+0x74>
 801a04c:	89a3      	ldrh	r3, [r4, #12]
 801a04e:	f023 0303 	bic.w	r3, r3, #3
 801a052:	f043 0301 	orr.w	r3, r3, #1
 801a056:	81a3      	strh	r3, [r4, #12]
 801a058:	89a0      	ldrh	r0, [r4, #12]
 801a05a:	4305      	orrs	r5, r0
 801a05c:	81a5      	strh	r5, [r4, #12]
 801a05e:	e7cd      	b.n	8019ffc <__smakebuf_r+0x18>
 801a060:	08019df1 	.word	0x08019df1

0801a064 <_raise_r>:
 801a064:	291f      	cmp	r1, #31
 801a066:	b538      	push	{r3, r4, r5, lr}
 801a068:	4604      	mov	r4, r0
 801a06a:	460d      	mov	r5, r1
 801a06c:	d904      	bls.n	801a078 <_raise_r+0x14>
 801a06e:	2316      	movs	r3, #22
 801a070:	6003      	str	r3, [r0, #0]
 801a072:	f04f 30ff 	mov.w	r0, #4294967295
 801a076:	bd38      	pop	{r3, r4, r5, pc}
 801a078:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a07a:	b112      	cbz	r2, 801a082 <_raise_r+0x1e>
 801a07c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a080:	b94b      	cbnz	r3, 801a096 <_raise_r+0x32>
 801a082:	4620      	mov	r0, r4
 801a084:	f000 f830 	bl	801a0e8 <_getpid_r>
 801a088:	462a      	mov	r2, r5
 801a08a:	4601      	mov	r1, r0
 801a08c:	4620      	mov	r0, r4
 801a08e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a092:	f000 b817 	b.w	801a0c4 <_kill_r>
 801a096:	2b01      	cmp	r3, #1
 801a098:	d00a      	beq.n	801a0b0 <_raise_r+0x4c>
 801a09a:	1c59      	adds	r1, r3, #1
 801a09c:	d103      	bne.n	801a0a6 <_raise_r+0x42>
 801a09e:	2316      	movs	r3, #22
 801a0a0:	6003      	str	r3, [r0, #0]
 801a0a2:	2001      	movs	r0, #1
 801a0a4:	e7e7      	b.n	801a076 <_raise_r+0x12>
 801a0a6:	2400      	movs	r4, #0
 801a0a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a0ac:	4628      	mov	r0, r5
 801a0ae:	4798      	blx	r3
 801a0b0:	2000      	movs	r0, #0
 801a0b2:	e7e0      	b.n	801a076 <_raise_r+0x12>

0801a0b4 <raise>:
 801a0b4:	4b02      	ldr	r3, [pc, #8]	; (801a0c0 <raise+0xc>)
 801a0b6:	4601      	mov	r1, r0
 801a0b8:	6818      	ldr	r0, [r3, #0]
 801a0ba:	f7ff bfd3 	b.w	801a064 <_raise_r>
 801a0be:	bf00      	nop
 801a0c0:	20000114 	.word	0x20000114

0801a0c4 <_kill_r>:
 801a0c4:	b538      	push	{r3, r4, r5, lr}
 801a0c6:	4d07      	ldr	r5, [pc, #28]	; (801a0e4 <_kill_r+0x20>)
 801a0c8:	2300      	movs	r3, #0
 801a0ca:	4604      	mov	r4, r0
 801a0cc:	4608      	mov	r0, r1
 801a0ce:	4611      	mov	r1, r2
 801a0d0:	602b      	str	r3, [r5, #0]
 801a0d2:	f7ea f969 	bl	80043a8 <_kill>
 801a0d6:	1c43      	adds	r3, r0, #1
 801a0d8:	d102      	bne.n	801a0e0 <_kill_r+0x1c>
 801a0da:	682b      	ldr	r3, [r5, #0]
 801a0dc:	b103      	cbz	r3, 801a0e0 <_kill_r+0x1c>
 801a0de:	6023      	str	r3, [r4, #0]
 801a0e0:	bd38      	pop	{r3, r4, r5, pc}
 801a0e2:	bf00      	nop
 801a0e4:	20002c70 	.word	0x20002c70

0801a0e8 <_getpid_r>:
 801a0e8:	f7ea b956 	b.w	8004398 <_getpid>

0801a0ec <__sread>:
 801a0ec:	b510      	push	{r4, lr}
 801a0ee:	460c      	mov	r4, r1
 801a0f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a0f4:	f000 f894 	bl	801a220 <_read_r>
 801a0f8:	2800      	cmp	r0, #0
 801a0fa:	bfab      	itete	ge
 801a0fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a0fe:	89a3      	ldrhlt	r3, [r4, #12]
 801a100:	181b      	addge	r3, r3, r0
 801a102:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a106:	bfac      	ite	ge
 801a108:	6563      	strge	r3, [r4, #84]	; 0x54
 801a10a:	81a3      	strhlt	r3, [r4, #12]
 801a10c:	bd10      	pop	{r4, pc}

0801a10e <__swrite>:
 801a10e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a112:	461f      	mov	r7, r3
 801a114:	898b      	ldrh	r3, [r1, #12]
 801a116:	05db      	lsls	r3, r3, #23
 801a118:	4605      	mov	r5, r0
 801a11a:	460c      	mov	r4, r1
 801a11c:	4616      	mov	r6, r2
 801a11e:	d505      	bpl.n	801a12c <__swrite+0x1e>
 801a120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a124:	2302      	movs	r3, #2
 801a126:	2200      	movs	r2, #0
 801a128:	f000 f868 	bl	801a1fc <_lseek_r>
 801a12c:	89a3      	ldrh	r3, [r4, #12]
 801a12e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a132:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a136:	81a3      	strh	r3, [r4, #12]
 801a138:	4632      	mov	r2, r6
 801a13a:	463b      	mov	r3, r7
 801a13c:	4628      	mov	r0, r5
 801a13e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a142:	f000 b817 	b.w	801a174 <_write_r>

0801a146 <__sseek>:
 801a146:	b510      	push	{r4, lr}
 801a148:	460c      	mov	r4, r1
 801a14a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a14e:	f000 f855 	bl	801a1fc <_lseek_r>
 801a152:	1c43      	adds	r3, r0, #1
 801a154:	89a3      	ldrh	r3, [r4, #12]
 801a156:	bf15      	itete	ne
 801a158:	6560      	strne	r0, [r4, #84]	; 0x54
 801a15a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a15e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a162:	81a3      	strheq	r3, [r4, #12]
 801a164:	bf18      	it	ne
 801a166:	81a3      	strhne	r3, [r4, #12]
 801a168:	bd10      	pop	{r4, pc}

0801a16a <__sclose>:
 801a16a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a16e:	f000 b813 	b.w	801a198 <_close_r>
	...

0801a174 <_write_r>:
 801a174:	b538      	push	{r3, r4, r5, lr}
 801a176:	4d07      	ldr	r5, [pc, #28]	; (801a194 <_write_r+0x20>)
 801a178:	4604      	mov	r4, r0
 801a17a:	4608      	mov	r0, r1
 801a17c:	4611      	mov	r1, r2
 801a17e:	2200      	movs	r2, #0
 801a180:	602a      	str	r2, [r5, #0]
 801a182:	461a      	mov	r2, r3
 801a184:	f7ea f947 	bl	8004416 <_write>
 801a188:	1c43      	adds	r3, r0, #1
 801a18a:	d102      	bne.n	801a192 <_write_r+0x1e>
 801a18c:	682b      	ldr	r3, [r5, #0]
 801a18e:	b103      	cbz	r3, 801a192 <_write_r+0x1e>
 801a190:	6023      	str	r3, [r4, #0]
 801a192:	bd38      	pop	{r3, r4, r5, pc}
 801a194:	20002c70 	.word	0x20002c70

0801a198 <_close_r>:
 801a198:	b538      	push	{r3, r4, r5, lr}
 801a19a:	4d06      	ldr	r5, [pc, #24]	; (801a1b4 <_close_r+0x1c>)
 801a19c:	2300      	movs	r3, #0
 801a19e:	4604      	mov	r4, r0
 801a1a0:	4608      	mov	r0, r1
 801a1a2:	602b      	str	r3, [r5, #0]
 801a1a4:	f7ea f953 	bl	800444e <_close>
 801a1a8:	1c43      	adds	r3, r0, #1
 801a1aa:	d102      	bne.n	801a1b2 <_close_r+0x1a>
 801a1ac:	682b      	ldr	r3, [r5, #0]
 801a1ae:	b103      	cbz	r3, 801a1b2 <_close_r+0x1a>
 801a1b0:	6023      	str	r3, [r4, #0]
 801a1b2:	bd38      	pop	{r3, r4, r5, pc}
 801a1b4:	20002c70 	.word	0x20002c70

0801a1b8 <_fstat_r>:
 801a1b8:	b538      	push	{r3, r4, r5, lr}
 801a1ba:	4d07      	ldr	r5, [pc, #28]	; (801a1d8 <_fstat_r+0x20>)
 801a1bc:	2300      	movs	r3, #0
 801a1be:	4604      	mov	r4, r0
 801a1c0:	4608      	mov	r0, r1
 801a1c2:	4611      	mov	r1, r2
 801a1c4:	602b      	str	r3, [r5, #0]
 801a1c6:	f7ea f94e 	bl	8004466 <_fstat>
 801a1ca:	1c43      	adds	r3, r0, #1
 801a1cc:	d102      	bne.n	801a1d4 <_fstat_r+0x1c>
 801a1ce:	682b      	ldr	r3, [r5, #0]
 801a1d0:	b103      	cbz	r3, 801a1d4 <_fstat_r+0x1c>
 801a1d2:	6023      	str	r3, [r4, #0]
 801a1d4:	bd38      	pop	{r3, r4, r5, pc}
 801a1d6:	bf00      	nop
 801a1d8:	20002c70 	.word	0x20002c70

0801a1dc <_isatty_r>:
 801a1dc:	b538      	push	{r3, r4, r5, lr}
 801a1de:	4d06      	ldr	r5, [pc, #24]	; (801a1f8 <_isatty_r+0x1c>)
 801a1e0:	2300      	movs	r3, #0
 801a1e2:	4604      	mov	r4, r0
 801a1e4:	4608      	mov	r0, r1
 801a1e6:	602b      	str	r3, [r5, #0]
 801a1e8:	f7ea f94d 	bl	8004486 <_isatty>
 801a1ec:	1c43      	adds	r3, r0, #1
 801a1ee:	d102      	bne.n	801a1f6 <_isatty_r+0x1a>
 801a1f0:	682b      	ldr	r3, [r5, #0]
 801a1f2:	b103      	cbz	r3, 801a1f6 <_isatty_r+0x1a>
 801a1f4:	6023      	str	r3, [r4, #0]
 801a1f6:	bd38      	pop	{r3, r4, r5, pc}
 801a1f8:	20002c70 	.word	0x20002c70

0801a1fc <_lseek_r>:
 801a1fc:	b538      	push	{r3, r4, r5, lr}
 801a1fe:	4d07      	ldr	r5, [pc, #28]	; (801a21c <_lseek_r+0x20>)
 801a200:	4604      	mov	r4, r0
 801a202:	4608      	mov	r0, r1
 801a204:	4611      	mov	r1, r2
 801a206:	2200      	movs	r2, #0
 801a208:	602a      	str	r2, [r5, #0]
 801a20a:	461a      	mov	r2, r3
 801a20c:	f7ea f946 	bl	800449c <_lseek>
 801a210:	1c43      	adds	r3, r0, #1
 801a212:	d102      	bne.n	801a21a <_lseek_r+0x1e>
 801a214:	682b      	ldr	r3, [r5, #0]
 801a216:	b103      	cbz	r3, 801a21a <_lseek_r+0x1e>
 801a218:	6023      	str	r3, [r4, #0]
 801a21a:	bd38      	pop	{r3, r4, r5, pc}
 801a21c:	20002c70 	.word	0x20002c70

0801a220 <_read_r>:
 801a220:	b538      	push	{r3, r4, r5, lr}
 801a222:	4d07      	ldr	r5, [pc, #28]	; (801a240 <_read_r+0x20>)
 801a224:	4604      	mov	r4, r0
 801a226:	4608      	mov	r0, r1
 801a228:	4611      	mov	r1, r2
 801a22a:	2200      	movs	r2, #0
 801a22c:	602a      	str	r2, [r5, #0]
 801a22e:	461a      	mov	r2, r3
 801a230:	f7ea f8d4 	bl	80043dc <_read>
 801a234:	1c43      	adds	r3, r0, #1
 801a236:	d102      	bne.n	801a23e <_read_r+0x1e>
 801a238:	682b      	ldr	r3, [r5, #0]
 801a23a:	b103      	cbz	r3, 801a23e <_read_r+0x1e>
 801a23c:	6023      	str	r3, [r4, #0]
 801a23e:	bd38      	pop	{r3, r4, r5, pc}
 801a240:	20002c70 	.word	0x20002c70

0801a244 <acos>:
 801a244:	b508      	push	{r3, lr}
 801a246:	ed2d 8b04 	vpush	{d8-d9}
 801a24a:	eeb0 8b40 	vmov.f64	d8, d0
 801a24e:	f000 f873 	bl	801a338 <__ieee754_acos>
 801a252:	eeb4 8b48 	vcmp.f64	d8, d8
 801a256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a25a:	eeb0 9b40 	vmov.f64	d9, d0
 801a25e:	d615      	bvs.n	801a28c <acos+0x48>
 801a260:	eeb0 0b48 	vmov.f64	d0, d8
 801a264:	f000 faa9 	bl	801a7ba <fabs>
 801a268:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801a26c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801a270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a274:	dd0a      	ble.n	801a28c <acos+0x48>
 801a276:	f7fd fb43 	bl	8017900 <__errno>
 801a27a:	ecbd 8b04 	vpop	{d8-d9}
 801a27e:	2321      	movs	r3, #33	; 0x21
 801a280:	6003      	str	r3, [r0, #0]
 801a282:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801a286:	4804      	ldr	r0, [pc, #16]	; (801a298 <acos+0x54>)
 801a288:	f000 baa2 	b.w	801a7d0 <nan>
 801a28c:	eeb0 0b49 	vmov.f64	d0, d9
 801a290:	ecbd 8b04 	vpop	{d8-d9}
 801a294:	bd08      	pop	{r3, pc}
 801a296:	bf00      	nop
 801a298:	0801af37 	.word	0x0801af37

0801a29c <asin>:
 801a29c:	b508      	push	{r3, lr}
 801a29e:	ed2d 8b04 	vpush	{d8-d9}
 801a2a2:	eeb0 8b40 	vmov.f64	d8, d0
 801a2a6:	f000 f977 	bl	801a598 <__ieee754_asin>
 801a2aa:	eeb4 8b48 	vcmp.f64	d8, d8
 801a2ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a2b2:	eeb0 9b40 	vmov.f64	d9, d0
 801a2b6:	d615      	bvs.n	801a2e4 <asin+0x48>
 801a2b8:	eeb0 0b48 	vmov.f64	d0, d8
 801a2bc:	f000 fa7d 	bl	801a7ba <fabs>
 801a2c0:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801a2c4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801a2c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a2cc:	dd0a      	ble.n	801a2e4 <asin+0x48>
 801a2ce:	f7fd fb17 	bl	8017900 <__errno>
 801a2d2:	ecbd 8b04 	vpop	{d8-d9}
 801a2d6:	2321      	movs	r3, #33	; 0x21
 801a2d8:	6003      	str	r3, [r0, #0]
 801a2da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801a2de:	4804      	ldr	r0, [pc, #16]	; (801a2f0 <asin+0x54>)
 801a2e0:	f000 ba76 	b.w	801a7d0 <nan>
 801a2e4:	eeb0 0b49 	vmov.f64	d0, d9
 801a2e8:	ecbd 8b04 	vpop	{d8-d9}
 801a2ec:	bd08      	pop	{r3, pc}
 801a2ee:	bf00      	nop
 801a2f0:	0801af37 	.word	0x0801af37
 801a2f4:	00000000 	.word	0x00000000

0801a2f8 <sqrt>:
 801a2f8:	b508      	push	{r3, lr}
 801a2fa:	ed2d 8b04 	vpush	{d8-d9}
 801a2fe:	eeb0 8b40 	vmov.f64	d8, d0
 801a302:	f000 fa57 	bl	801a7b4 <__ieee754_sqrt>
 801a306:	eeb4 8b48 	vcmp.f64	d8, d8
 801a30a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a30e:	d60c      	bvs.n	801a32a <sqrt+0x32>
 801a310:	ed9f 9b07 	vldr	d9, [pc, #28]	; 801a330 <sqrt+0x38>
 801a314:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801a318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a31c:	d505      	bpl.n	801a32a <sqrt+0x32>
 801a31e:	f7fd faef 	bl	8017900 <__errno>
 801a322:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801a326:	2321      	movs	r3, #33	; 0x21
 801a328:	6003      	str	r3, [r0, #0]
 801a32a:	ecbd 8b04 	vpop	{d8-d9}
 801a32e:	bd08      	pop	{r3, pc}
	...

0801a338 <__ieee754_acos>:
 801a338:	b500      	push	{lr}
 801a33a:	ee10 2a90 	vmov	r2, s1
 801a33e:	ed2d 8b10 	vpush	{d8-d15}
 801a342:	4991      	ldr	r1, [pc, #580]	; (801a588 <__ieee754_acos+0x250>)
 801a344:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801a348:	428b      	cmp	r3, r1
 801a34a:	b087      	sub	sp, #28
 801a34c:	dd18      	ble.n	801a380 <__ieee754_acos+0x48>
 801a34e:	ee10 1a10 	vmov	r1, s0
 801a352:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 801a356:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801a35a:	430b      	orrs	r3, r1
 801a35c:	d10b      	bne.n	801a376 <__ieee754_acos+0x3e>
 801a35e:	ed9f 0b6c 	vldr	d0, [pc, #432]	; 801a510 <__ieee754_acos+0x1d8>
 801a362:	ed9f 7b6d 	vldr	d7, [pc, #436]	; 801a518 <__ieee754_acos+0x1e0>
 801a366:	2a00      	cmp	r2, #0
 801a368:	fe30 0b07 	vselgt.f64	d0, d0, d7
 801a36c:	b007      	add	sp, #28
 801a36e:	ecbd 8b10 	vpop	{d8-d15}
 801a372:	f85d fb04 	ldr.w	pc, [sp], #4
 801a376:	ee30 8b40 	vsub.f64	d8, d0, d0
 801a37a:	ee88 0b08 	vdiv.f64	d0, d8, d8
 801a37e:	e7f5      	b.n	801a36c <__ieee754_acos+0x34>
 801a380:	4982      	ldr	r1, [pc, #520]	; (801a58c <__ieee754_acos+0x254>)
 801a382:	428b      	cmp	r3, r1
 801a384:	dc3c      	bgt.n	801a400 <__ieee754_acos+0xc8>
 801a386:	4a82      	ldr	r2, [pc, #520]	; (801a590 <__ieee754_acos+0x258>)
 801a388:	4293      	cmp	r3, r2
 801a38a:	ed9f 7b65 	vldr	d7, [pc, #404]	; 801a520 <__ieee754_acos+0x1e8>
 801a38e:	f340 80bc 	ble.w	801a50a <__ieee754_acos+0x1d2>
 801a392:	ee20 6b00 	vmul.f64	d6, d0, d0
 801a396:	ed9f 4b64 	vldr	d4, [pc, #400]	; 801a528 <__ieee754_acos+0x1f0>
 801a39a:	ed9f 5b65 	vldr	d5, [pc, #404]	; 801a530 <__ieee754_acos+0x1f8>
 801a39e:	eea6 5b04 	vfma.f64	d5, d6, d4
 801a3a2:	ed9f 4b65 	vldr	d4, [pc, #404]	; 801a538 <__ieee754_acos+0x200>
 801a3a6:	eea5 4b06 	vfma.f64	d4, d5, d6
 801a3aa:	ed9f 5b65 	vldr	d5, [pc, #404]	; 801a540 <__ieee754_acos+0x208>
 801a3ae:	eea4 5b06 	vfma.f64	d5, d4, d6
 801a3b2:	ed9f 4b65 	vldr	d4, [pc, #404]	; 801a548 <__ieee754_acos+0x210>
 801a3b6:	eea5 4b06 	vfma.f64	d4, d5, d6
 801a3ba:	ed9f 5b65 	vldr	d5, [pc, #404]	; 801a550 <__ieee754_acos+0x218>
 801a3be:	ed9f 3b66 	vldr	d3, [pc, #408]	; 801a558 <__ieee754_acos+0x220>
 801a3c2:	eea4 5b06 	vfma.f64	d5, d4, d6
 801a3c6:	ee25 5b06 	vmul.f64	d5, d5, d6
 801a3ca:	ed9f 4b65 	vldr	d4, [pc, #404]	; 801a560 <__ieee754_acos+0x228>
 801a3ce:	eea6 3b04 	vfma.f64	d3, d6, d4
 801a3d2:	ed9f 4b65 	vldr	d4, [pc, #404]	; 801a568 <__ieee754_acos+0x230>
 801a3d6:	ed9f 8b66 	vldr	d8, [pc, #408]	; 801a570 <__ieee754_acos+0x238>
 801a3da:	eea3 4b06 	vfma.f64	d4, d3, d6
 801a3de:	ed9f 3b66 	vldr	d3, [pc, #408]	; 801a578 <__ieee754_acos+0x240>
 801a3e2:	eea4 3b06 	vfma.f64	d3, d4, d6
 801a3e6:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801a3ea:	eea3 4b06 	vfma.f64	d4, d3, d6
 801a3ee:	ee85 6b04 	vdiv.f64	d6, d5, d4
 801a3f2:	eea0 8b46 	vfms.f64	d8, d0, d6
 801a3f6:	ee30 0b48 	vsub.f64	d0, d0, d8
 801a3fa:	ee37 0b40 	vsub.f64	d0, d7, d0
 801a3fe:	e7b5      	b.n	801a36c <__ieee754_acos+0x34>
 801a400:	2a00      	cmp	r2, #0
 801a402:	ed9f eb49 	vldr	d14, [pc, #292]	; 801a528 <__ieee754_acos+0x1f0>
 801a406:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 801a40a:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 801a40e:	ed9f db48 	vldr	d13, [pc, #288]	; 801a530 <__ieee754_acos+0x1f8>
 801a412:	ed9f cb49 	vldr	d12, [pc, #292]	; 801a538 <__ieee754_acos+0x200>
 801a416:	ed9f bb4a 	vldr	d11, [pc, #296]	; 801a540 <__ieee754_acos+0x208>
 801a41a:	ed9f ab4b 	vldr	d10, [pc, #300]	; 801a548 <__ieee754_acos+0x210>
 801a41e:	ed9f fb4c 	vldr	d15, [pc, #304]	; 801a550 <__ieee754_acos+0x218>
 801a422:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 801a558 <__ieee754_acos+0x220>
 801a426:	ed9f 2b50 	vldr	d2, [pc, #320]	; 801a568 <__ieee754_acos+0x230>
 801a42a:	ed9f 1b53 	vldr	d1, [pc, #332]	; 801a578 <__ieee754_acos+0x240>
 801a42e:	da2a      	bge.n	801a486 <__ieee754_acos+0x14e>
 801a430:	ee30 0b09 	vadd.f64	d0, d0, d9
 801a434:	ee20 0b08 	vmul.f64	d0, d0, d8
 801a438:	ed9f 7b49 	vldr	d7, [pc, #292]	; 801a560 <__ieee754_acos+0x228>
 801a43c:	eea0 db0e 	vfma.f64	d13, d0, d14
 801a440:	eead cb00 	vfma.f64	d12, d13, d0
 801a444:	eea0 3b07 	vfma.f64	d3, d0, d7
 801a448:	eeac bb00 	vfma.f64	d11, d12, d0
 801a44c:	eea3 2b00 	vfma.f64	d2, d3, d0
 801a450:	eeab ab00 	vfma.f64	d10, d11, d0
 801a454:	eea2 1b00 	vfma.f64	d1, d2, d0
 801a458:	eeaa fb00 	vfma.f64	d15, d10, d0
 801a45c:	eea1 9b00 	vfma.f64	d9, d1, d0
 801a460:	ee2f fb00 	vmul.f64	d15, d15, d0
 801a464:	f000 f9a6 	bl	801a7b4 <__ieee754_sqrt>
 801a468:	ee8f 6b09 	vdiv.f64	d6, d15, d9
 801a46c:	ed9f 7b44 	vldr	d7, [pc, #272]	; 801a580 <__ieee754_acos+0x248>
 801a470:	eea0 7b06 	vfma.f64	d7, d0, d6
 801a474:	ee37 7b00 	vadd.f64	d7, d7, d0
 801a478:	ed9f 0b27 	vldr	d0, [pc, #156]	; 801a518 <__ieee754_acos+0x1e0>
 801a47c:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 801a480:	eea7 0b46 	vfms.f64	d0, d7, d6
 801a484:	e772      	b.n	801a36c <__ieee754_acos+0x34>
 801a486:	ee39 0b40 	vsub.f64	d0, d9, d0
 801a48a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801a48e:	eeb0 0b48 	vmov.f64	d0, d8
 801a492:	ed8d 1b04 	vstr	d1, [sp, #16]
 801a496:	ed8d 2b02 	vstr	d2, [sp, #8]
 801a49a:	ed8d 3b00 	vstr	d3, [sp]
 801a49e:	f000 f989 	bl	801a7b4 <__ieee754_sqrt>
 801a4a2:	eeb0 5b48 	vmov.f64	d5, d8
 801a4a6:	eea8 db0e 	vfma.f64	d13, d8, d14
 801a4aa:	ec53 2b10 	vmov	r2, r3, d0
 801a4ae:	eead cb08 	vfma.f64	d12, d13, d8
 801a4b2:	2200      	movs	r2, #0
 801a4b4:	ec43 2b17 	vmov	d7, r2, r3
 801a4b8:	eeac bb08 	vfma.f64	d11, d12, d8
 801a4bc:	ee30 6b07 	vadd.f64	d6, d0, d7
 801a4c0:	eea7 5b47 	vfms.f64	d5, d7, d7
 801a4c4:	ed9d 3b00 	vldr	d3, [sp]
 801a4c8:	ee85 4b06 	vdiv.f64	d4, d5, d6
 801a4cc:	eeab ab08 	vfma.f64	d10, d11, d8
 801a4d0:	ed9f 6b23 	vldr	d6, [pc, #140]	; 801a560 <__ieee754_acos+0x228>
 801a4d4:	eeaa fb08 	vfma.f64	d15, d10, d8
 801a4d8:	ee2f fb08 	vmul.f64	d15, d15, d8
 801a4dc:	ed9d 2b02 	vldr	d2, [sp, #8]
 801a4e0:	eea8 3b06 	vfma.f64	d3, d8, d6
 801a4e4:	eeb0 6b44 	vmov.f64	d6, d4
 801a4e8:	ed9d 1b04 	vldr	d1, [sp, #16]
 801a4ec:	eea3 2b08 	vfma.f64	d2, d3, d8
 801a4f0:	eea2 1b08 	vfma.f64	d1, d2, d8
 801a4f4:	eea1 9b08 	vfma.f64	d9, d1, d8
 801a4f8:	ee8f 5b09 	vdiv.f64	d5, d15, d9
 801a4fc:	eea0 6b05 	vfma.f64	d6, d0, d5
 801a500:	ee37 0b06 	vadd.f64	d0, d7, d6
 801a504:	ee30 0b00 	vadd.f64	d0, d0, d0
 801a508:	e730      	b.n	801a36c <__ieee754_acos+0x34>
 801a50a:	eeb0 0b47 	vmov.f64	d0, d7
 801a50e:	e72d      	b.n	801a36c <__ieee754_acos+0x34>
	...
 801a518:	54442d18 	.word	0x54442d18
 801a51c:	400921fb 	.word	0x400921fb
 801a520:	54442d18 	.word	0x54442d18
 801a524:	3ff921fb 	.word	0x3ff921fb
 801a528:	0dfdf709 	.word	0x0dfdf709
 801a52c:	3f023de1 	.word	0x3f023de1
 801a530:	7501b288 	.word	0x7501b288
 801a534:	3f49efe0 	.word	0x3f49efe0
 801a538:	b5688f3b 	.word	0xb5688f3b
 801a53c:	bfa48228 	.word	0xbfa48228
 801a540:	0e884455 	.word	0x0e884455
 801a544:	3fc9c155 	.word	0x3fc9c155
 801a548:	03eb6f7d 	.word	0x03eb6f7d
 801a54c:	bfd4d612 	.word	0xbfd4d612
 801a550:	55555555 	.word	0x55555555
 801a554:	3fc55555 	.word	0x3fc55555
 801a558:	1b8d0159 	.word	0x1b8d0159
 801a55c:	bfe6066c 	.word	0xbfe6066c
 801a560:	b12e9282 	.word	0xb12e9282
 801a564:	3fb3b8c5 	.word	0x3fb3b8c5
 801a568:	9c598ac8 	.word	0x9c598ac8
 801a56c:	40002ae5 	.word	0x40002ae5
 801a570:	33145c07 	.word	0x33145c07
 801a574:	3c91a626 	.word	0x3c91a626
 801a578:	1c8a2d4b 	.word	0x1c8a2d4b
 801a57c:	c0033a27 	.word	0xc0033a27
 801a580:	33145c07 	.word	0x33145c07
 801a584:	bc91a626 	.word	0xbc91a626
 801a588:	3fefffff 	.word	0x3fefffff
 801a58c:	3fdfffff 	.word	0x3fdfffff
 801a590:	3c600000 	.word	0x3c600000
 801a594:	00000000 	.word	0x00000000

0801a598 <__ieee754_asin>:
 801a598:	b538      	push	{r3, r4, r5, lr}
 801a59a:	ee10 5a90 	vmov	r5, s1
 801a59e:	4b82      	ldr	r3, [pc, #520]	; (801a7a8 <__ieee754_asin+0x210>)
 801a5a0:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801a5a4:	429c      	cmp	r4, r3
 801a5a6:	ed2d 8b06 	vpush	{d8-d10}
 801a5aa:	dd19      	ble.n	801a5e0 <__ieee754_asin+0x48>
 801a5ac:	ee10 3a10 	vmov	r3, s0
 801a5b0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801a5b4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801a5b8:	4323      	orrs	r3, r4
 801a5ba:	d10c      	bne.n	801a5d6 <__ieee754_asin+0x3e>
 801a5bc:	ed9f 7b5c 	vldr	d7, [pc, #368]	; 801a730 <__ieee754_asin+0x198>
 801a5c0:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 801a738 <__ieee754_asin+0x1a0>
 801a5c4:	ee20 7b07 	vmul.f64	d7, d0, d7
 801a5c8:	eea0 7b06 	vfma.f64	d7, d0, d6
 801a5cc:	eeb0 0b47 	vmov.f64	d0, d7
 801a5d0:	ecbd 8b06 	vpop	{d8-d10}
 801a5d4:	bd38      	pop	{r3, r4, r5, pc}
 801a5d6:	ee30 7b40 	vsub.f64	d7, d0, d0
 801a5da:	ee87 0b07 	vdiv.f64	d0, d7, d7
 801a5de:	e7f7      	b.n	801a5d0 <__ieee754_asin+0x38>
 801a5e0:	4b72      	ldr	r3, [pc, #456]	; (801a7ac <__ieee754_asin+0x214>)
 801a5e2:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 801a5e6:	429c      	cmp	r4, r3
 801a5e8:	dc0b      	bgt.n	801a602 <__ieee754_asin+0x6a>
 801a5ea:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
 801a5ee:	da52      	bge.n	801a696 <__ieee754_asin+0xfe>
 801a5f0:	ed9f 7b53 	vldr	d7, [pc, #332]	; 801a740 <__ieee754_asin+0x1a8>
 801a5f4:	ee30 7b07 	vadd.f64	d7, d0, d7
 801a5f8:	eeb4 7bc9 	vcmpe.f64	d7, d9
 801a5fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a600:	dce6      	bgt.n	801a5d0 <__ieee754_asin+0x38>
 801a602:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 801a606:	f000 f8d8 	bl	801a7ba <fabs>
 801a60a:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 801a748 <__ieee754_asin+0x1b0>
 801a60e:	ee39 0b40 	vsub.f64	d0, d9, d0
 801a612:	ee20 8b08 	vmul.f64	d8, d0, d8
 801a616:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 801a750 <__ieee754_asin+0x1b8>
 801a61a:	eeb0 0b48 	vmov.f64	d0, d8
 801a61e:	eea8 6b07 	vfma.f64	d6, d8, d7
 801a622:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 801a758 <__ieee754_asin+0x1c0>
 801a626:	eea6 7b08 	vfma.f64	d7, d6, d8
 801a62a:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 801a760 <__ieee754_asin+0x1c8>
 801a62e:	ed9f ab4e 	vldr	d10, [pc, #312]	; 801a768 <__ieee754_asin+0x1d0>
 801a632:	eea7 6b08 	vfma.f64	d6, d7, d8
 801a636:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 801a770 <__ieee754_asin+0x1d8>
 801a63a:	eea6 7b08 	vfma.f64	d7, d6, d8
 801a63e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 801a778 <__ieee754_asin+0x1e0>
 801a642:	eea7 ab08 	vfma.f64	d10, d7, d8
 801a646:	ee2a ab08 	vmul.f64	d10, d10, d8
 801a64a:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 801a780 <__ieee754_asin+0x1e8>
 801a64e:	eea8 7b06 	vfma.f64	d7, d8, d6
 801a652:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 801a788 <__ieee754_asin+0x1f0>
 801a656:	eea7 6b08 	vfma.f64	d6, d7, d8
 801a65a:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 801a790 <__ieee754_asin+0x1f8>
 801a65e:	eea6 7b08 	vfma.f64	d7, d6, d8
 801a662:	eea7 9b08 	vfma.f64	d9, d7, d8
 801a666:	f000 f8a5 	bl	801a7b4 <__ieee754_sqrt>
 801a66a:	ee8a 5b09 	vdiv.f64	d5, d10, d9
 801a66e:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 801a672:	4b4f      	ldr	r3, [pc, #316]	; (801a7b0 <__ieee754_asin+0x218>)
 801a674:	429c      	cmp	r4, r3
 801a676:	dd3d      	ble.n	801a6f4 <__ieee754_asin+0x15c>
 801a678:	eea0 0b05 	vfma.f64	d0, d0, d5
 801a67c:	ed9f 7b46 	vldr	d7, [pc, #280]	; 801a798 <__ieee754_asin+0x200>
 801a680:	eea0 7b04 	vfma.f64	d7, d0, d4
 801a684:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 801a738 <__ieee754_asin+0x1a0>
 801a688:	ee30 0b47 	vsub.f64	d0, d0, d7
 801a68c:	2d00      	cmp	r5, #0
 801a68e:	bfd8      	it	le
 801a690:	eeb1 0b40 	vnegle.f64	d0, d0
 801a694:	e79c      	b.n	801a5d0 <__ieee754_asin+0x38>
 801a696:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 801a748 <__ieee754_asin+0x1b0>
 801a69a:	ee20 7b00 	vmul.f64	d7, d0, d0
 801a69e:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 801a750 <__ieee754_asin+0x1b8>
 801a6a2:	eea7 6b05 	vfma.f64	d6, d7, d5
 801a6a6:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 801a758 <__ieee754_asin+0x1c0>
 801a6aa:	eea6 5b07 	vfma.f64	d5, d6, d7
 801a6ae:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 801a760 <__ieee754_asin+0x1c8>
 801a6b2:	eea5 6b07 	vfma.f64	d6, d5, d7
 801a6b6:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 801a770 <__ieee754_asin+0x1d8>
 801a6ba:	eea6 5b07 	vfma.f64	d5, d6, d7
 801a6be:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 801a768 <__ieee754_asin+0x1d0>
 801a6c2:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 801a778 <__ieee754_asin+0x1e0>
 801a6c6:	eea5 6b07 	vfma.f64	d6, d5, d7
 801a6ca:	ee26 6b07 	vmul.f64	d6, d6, d7
 801a6ce:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 801a780 <__ieee754_asin+0x1e8>
 801a6d2:	eea7 5b04 	vfma.f64	d5, d7, d4
 801a6d6:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 801a788 <__ieee754_asin+0x1f0>
 801a6da:	eea5 4b07 	vfma.f64	d4, d5, d7
 801a6de:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 801a790 <__ieee754_asin+0x1f8>
 801a6e2:	eea4 5b07 	vfma.f64	d5, d4, d7
 801a6e6:	eea5 9b07 	vfma.f64	d9, d5, d7
 801a6ea:	ee86 7b09 	vdiv.f64	d7, d6, d9
 801a6ee:	eea0 0b07 	vfma.f64	d0, d0, d7
 801a6f2:	e76d      	b.n	801a5d0 <__ieee754_asin+0x38>
 801a6f4:	ec53 2b10 	vmov	r2, r3, d0
 801a6f8:	2200      	movs	r2, #0
 801a6fa:	ec43 2b16 	vmov	d6, r2, r3
 801a6fe:	ee30 7b06 	vadd.f64	d7, d0, d6
 801a702:	eea6 8b46 	vfms.f64	d8, d6, d6
 801a706:	ee88 3b07 	vdiv.f64	d3, d8, d7
 801a70a:	ed9f 7b09 	vldr	d7, [pc, #36]	; 801a730 <__ieee754_asin+0x198>
 801a70e:	ee30 0b00 	vadd.f64	d0, d0, d0
 801a712:	eea3 7b44 	vfms.f64	d7, d3, d4
 801a716:	ee90 7b05 	vfnms.f64	d7, d0, d5
 801a71a:	ed9f 5b21 	vldr	d5, [pc, #132]	; 801a7a0 <__ieee754_asin+0x208>
 801a71e:	eeb0 0b45 	vmov.f64	d0, d5
 801a722:	eea6 0b44 	vfms.f64	d0, d6, d4
 801a726:	ee37 0b40 	vsub.f64	d0, d7, d0
 801a72a:	ee35 0b40 	vsub.f64	d0, d5, d0
 801a72e:	e7ad      	b.n	801a68c <__ieee754_asin+0xf4>
 801a730:	33145c07 	.word	0x33145c07
 801a734:	3c91a626 	.word	0x3c91a626
 801a738:	54442d18 	.word	0x54442d18
 801a73c:	3ff921fb 	.word	0x3ff921fb
 801a740:	8800759c 	.word	0x8800759c
 801a744:	7e37e43c 	.word	0x7e37e43c
 801a748:	0dfdf709 	.word	0x0dfdf709
 801a74c:	3f023de1 	.word	0x3f023de1
 801a750:	7501b288 	.word	0x7501b288
 801a754:	3f49efe0 	.word	0x3f49efe0
 801a758:	b5688f3b 	.word	0xb5688f3b
 801a75c:	bfa48228 	.word	0xbfa48228
 801a760:	0e884455 	.word	0x0e884455
 801a764:	3fc9c155 	.word	0x3fc9c155
 801a768:	55555555 	.word	0x55555555
 801a76c:	3fc55555 	.word	0x3fc55555
 801a770:	03eb6f7d 	.word	0x03eb6f7d
 801a774:	bfd4d612 	.word	0xbfd4d612
 801a778:	b12e9282 	.word	0xb12e9282
 801a77c:	3fb3b8c5 	.word	0x3fb3b8c5
 801a780:	1b8d0159 	.word	0x1b8d0159
 801a784:	bfe6066c 	.word	0xbfe6066c
 801a788:	9c598ac8 	.word	0x9c598ac8
 801a78c:	40002ae5 	.word	0x40002ae5
 801a790:	1c8a2d4b 	.word	0x1c8a2d4b
 801a794:	c0033a27 	.word	0xc0033a27
 801a798:	33145c07 	.word	0x33145c07
 801a79c:	bc91a626 	.word	0xbc91a626
 801a7a0:	54442d18 	.word	0x54442d18
 801a7a4:	3fe921fb 	.word	0x3fe921fb
 801a7a8:	3fefffff 	.word	0x3fefffff
 801a7ac:	3fdfffff 	.word	0x3fdfffff
 801a7b0:	3fef3332 	.word	0x3fef3332

0801a7b4 <__ieee754_sqrt>:
 801a7b4:	eeb1 0bc0 	vsqrt.f64	d0, d0
 801a7b8:	4770      	bx	lr

0801a7ba <fabs>:
 801a7ba:	ec51 0b10 	vmov	r0, r1, d0
 801a7be:	ee10 2a10 	vmov	r2, s0
 801a7c2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a7c6:	ec43 2b10 	vmov	d0, r2, r3
 801a7ca:	4770      	bx	lr
 801a7cc:	0000      	movs	r0, r0
	...

0801a7d0 <nan>:
 801a7d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801a7d8 <nan+0x8>
 801a7d4:	4770      	bx	lr
 801a7d6:	bf00      	nop
 801a7d8:	00000000 	.word	0x00000000
 801a7dc:	7ff80000 	.word	0x7ff80000

0801a7e0 <_init>:
 801a7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a7e2:	bf00      	nop
 801a7e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a7e6:	bc08      	pop	{r3}
 801a7e8:	469e      	mov	lr, r3
 801a7ea:	4770      	bx	lr

0801a7ec <_fini>:
 801a7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a7ee:	bf00      	nop
 801a7f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a7f2:	bc08      	pop	{r3}
 801a7f4:	469e      	mov	lr, r3
 801a7f6:	4770      	bx	lr
